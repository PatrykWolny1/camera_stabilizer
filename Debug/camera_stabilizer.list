
camera_stabilizer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011738  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f88  08011908  08011908  00012908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012890  08012890  000141e8  2**0
                  CONTENTS
  4 .ARM          00000008  08012890  08012890  00013890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012898  08012898  000141e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012898  08012898  00013898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801289c  0801289c  0001389c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  080128a0  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b6c4  200001e8  08012a88  000141e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000b8ac  08012a88  000148ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000141e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021147  00000000  00000000  00014218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048bc  00000000  00000000  0003535f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cf0  00000000  00000000  00039c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016a2  00000000  00000000  0003b910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a6d  00000000  00000000  0003cfb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000241ec  00000000  00000000  00066a1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f05d1  00000000  00000000  0008ac0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017b1dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000920c  00000000  00000000  0017b220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0018442c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080118f0 	.word	0x080118f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	080118f0 	.word	0x080118f0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <computeDT>:
#include "compute_angles.h"

PitchRollYaw resultsPRY;
CompFilter resultsCompFilter;

double computeDT(uint32_t *prevTick) {
 8000f78:	b5b0      	push	{r4, r5, r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
    uint32_t currTick = osKernelGetTickCount();  // Get current tick
 8000f80:	f008 f97c 	bl	800927c <osKernelGetTickCount>
 8000f84:	61b8      	str	r0, [r7, #24]
    uint32_t tickFreq = osKernelGetTickFreq();  // Get tick frequency (e.g., 1000 Hz)
 8000f86:	f008 f98e 	bl	80092a6 <osKernelGetTickFreq>
 8000f8a:	6178      	str	r0, [r7, #20]

    // Ensure tick frequency is valid
    if (tickFreq == 0) {
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d107      	bne.n	8000fa2 <computeDT+0x2a>
        printf("Error: Tick frequency is zero!\n");
 8000f92:	481c      	ldr	r0, [pc, #112]	@ (8001004 <computeDT+0x8c>)
 8000f94:	f00c fd32 	bl	800d9fc <puts>
        return 0.0;  // Avoid division by zero
 8000f98:	f04f 0200 	mov.w	r2, #0
 8000f9c:	f04f 0300 	mov.w	r3, #0
 8000fa0:	e026      	b.n	8000ff0 <computeDT+0x78>
    }

    uint32_t deltaTicks;
    if (currTick >= *prevTick) {
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d305      	bcc.n	8000fb8 <computeDT+0x40>
        deltaTicks = currTick - *prevTick;  // Normal case
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	61fb      	str	r3, [r7, #28]
 8000fb6:	e004      	b.n	8000fc2 <computeDT+0x4a>
    } else {
        deltaTicks = (0xFFFFFFFF - *prevTick) + currTick + 1;  // Handle overflow
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	61fb      	str	r3, [r7, #28]
    }

    *prevTick = currTick;  // Update previous tick for the next call
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	601a      	str	r2, [r3, #0]

    double dt = (double)deltaTicks / tickFreq;  // Convert ticks to seconds
 8000fc8:	69f8      	ldr	r0, [r7, #28]
 8000fca:	f7ff fabb 	bl	8000544 <__aeabi_ui2d>
 8000fce:	4604      	mov	r4, r0
 8000fd0:	460d      	mov	r5, r1
 8000fd2:	6978      	ldr	r0, [r7, #20]
 8000fd4:	f7ff fab6 	bl	8000544 <__aeabi_ui2d>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4620      	mov	r0, r4
 8000fde:	4629      	mov	r1, r5
 8000fe0:	f7ff fc54 	bl	800088c <__aeabi_ddiv>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	e9c7 2302 	strd	r2, r3, [r7, #8]

    // Debugging output
//    printf("computeDT -> currTick: %lu, prevTick: %lu, deltaTicks: %lu, tickFreq: %lu, dt: %.6f\n",
//           currTick, *prevTick, deltaTicks, tickFreq, dt);

    return dt;  // Return time difference in seconds
 8000fec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8000ff0:	ec43 2b17 	vmov	d7, r2, r3
 8000ff4:	eeb0 0a47 	vmov.f32	s0, s14
 8000ff8:	eef0 0a67 	vmov.f32	s1, s15
 8000ffc:	3720      	adds	r7, #32
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bdb0      	pop	{r4, r5, r7, pc}
 8001002:	bf00      	nop
 8001004:	08011908 	.word	0x08011908

08001008 <radiansToDegrees>:

float radiansToDegrees(float radians) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / M_PI);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff fab8 	bl	8000588 <__aeabi_f2d>
 8001018:	a309      	add	r3, pc, #36	@ (adr r3, 8001040 <radiansToDegrees+0x38>)
 800101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101e:	f7ff fb0b 	bl	8000638 <__aeabi_dmul>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4610      	mov	r0, r2
 8001028:	4619      	mov	r1, r3
 800102a:	f7ff fddd 	bl	8000be8 <__aeabi_d2f>
 800102e:	4603      	mov	r3, r0
 8001030:	ee07 3a90 	vmov	s15, r3
}
 8001034:	eeb0 0a67 	vmov.f32	s0, s15
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	1a63c1f8 	.word	0x1a63c1f8
 8001044:	404ca5dc 	.word	0x404ca5dc

08001048 <complementary_filter>:

CompFilter* complementary_filter(PitchRollYaw *resultsPRY, MPU6050_Data *dataToProcess, uint32_t *prevTick) {
 8001048:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800104c:	b088      	sub	sp, #32
 800104e:	af00      	add	r7, sp, #0
 8001050:	60f8      	str	r0, [r7, #12]
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
	float alpha = 0.982;  // Weight factor (typically close to 1)
 8001056:	4ba0      	ldr	r3, [pc, #640]	@ (80012d8 <complementary_filter+0x290>)
 8001058:	61fb      	str	r3, [r7, #28]
	resultsPRY->pitchAcc = atan2(dataToProcess->accelY, sqrt(pow(dataToProcess->accelX,2)+pow(dataToProcess->accelZ,2)));
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fa92 	bl	8000588 <__aeabi_f2d>
 8001064:	4604      	mov	r4, r0
 8001066:	460d      	mov	r5, r1
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fa8b 	bl	8000588 <__aeabi_f2d>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	ed9f 1b96 	vldr	d1, [pc, #600]	@ 80012d0 <complementary_filter+0x288>
 800107a:	ec43 2b10 	vmov	d0, r2, r3
 800107e:	f00e fd11 	bl	800faa4 <pow>
 8001082:	ec59 8b10 	vmov	r8, r9, d0
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fa7c 	bl	8000588 <__aeabi_f2d>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	ed9f 1b8e 	vldr	d1, [pc, #568]	@ 80012d0 <complementary_filter+0x288>
 8001098:	ec43 2b10 	vmov	d0, r2, r3
 800109c:	f00e fd02 	bl	800faa4 <pow>
 80010a0:	ec53 2b10 	vmov	r2, r3, d0
 80010a4:	4640      	mov	r0, r8
 80010a6:	4649      	mov	r1, r9
 80010a8:	f7ff f910 	bl	80002cc <__adddf3>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	ec43 2b17 	vmov	d7, r2, r3
 80010b4:	eeb0 0a47 	vmov.f32	s0, s14
 80010b8:	eef0 0a67 	vmov.f32	s1, s15
 80010bc:	f00e fd62 	bl	800fb84 <sqrt>
 80010c0:	eeb0 7a40 	vmov.f32	s14, s0
 80010c4:	eef0 7a60 	vmov.f32	s15, s1
 80010c8:	eeb0 1a47 	vmov.f32	s2, s14
 80010cc:	eef0 1a67 	vmov.f32	s3, s15
 80010d0:	ec45 4b10 	vmov	d0, r4, r5
 80010d4:	f00e fce4 	bl	800faa0 <atan2>
 80010d8:	ec53 2b10 	vmov	r2, r3, d0
 80010dc:	4610      	mov	r0, r2
 80010de:	4619      	mov	r1, r3
 80010e0:	f7ff fd82 	bl	8000be8 <__aeabi_d2f>
 80010e4:	4602      	mov	r2, r0
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	601a      	str	r2, [r3, #0]
	resultsPRY->rollAcc = atan2(dataToProcess->accelX, sqrt(pow(dataToProcess->accelY,2)+pow(dataToProcess->accelZ,2)));
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fa4a 	bl	8000588 <__aeabi_f2d>
 80010f4:	4604      	mov	r4, r0
 80010f6:	460d      	mov	r5, r1
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fa43 	bl	8000588 <__aeabi_f2d>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	ed9f 1b72 	vldr	d1, [pc, #456]	@ 80012d0 <complementary_filter+0x288>
 800110a:	ec43 2b10 	vmov	d0, r2, r3
 800110e:	f00e fcc9 	bl	800faa4 <pow>
 8001112:	ec59 8b10 	vmov	r8, r9, d0
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fa34 	bl	8000588 <__aeabi_f2d>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	ed9f 1b6a 	vldr	d1, [pc, #424]	@ 80012d0 <complementary_filter+0x288>
 8001128:	ec43 2b10 	vmov	d0, r2, r3
 800112c:	f00e fcba 	bl	800faa4 <pow>
 8001130:	ec53 2b10 	vmov	r2, r3, d0
 8001134:	4640      	mov	r0, r8
 8001136:	4649      	mov	r1, r9
 8001138:	f7ff f8c8 	bl	80002cc <__adddf3>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	ec43 2b17 	vmov	d7, r2, r3
 8001144:	eeb0 0a47 	vmov.f32	s0, s14
 8001148:	eef0 0a67 	vmov.f32	s1, s15
 800114c:	f00e fd1a 	bl	800fb84 <sqrt>
 8001150:	eeb0 7a40 	vmov.f32	s14, s0
 8001154:	eef0 7a60 	vmov.f32	s15, s1
 8001158:	eeb0 1a47 	vmov.f32	s2, s14
 800115c:	eef0 1a67 	vmov.f32	s3, s15
 8001160:	ec45 4b10 	vmov	d0, r4, r5
 8001164:	f00e fc9c 	bl	800faa0 <atan2>
 8001168:	ec53 2b10 	vmov	r2, r3, d0
 800116c:	4610      	mov	r0, r2
 800116e:	4619      	mov	r1, r3
 8001170:	f7ff fd3a 	bl	8000be8 <__aeabi_d2f>
 8001174:	4602      	mov	r2, r0
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	605a      	str	r2, [r3, #4]

    resultsPRY->pitchAcc = radiansToDegrees(resultsPRY->pitchAcc);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	edd3 7a00 	vldr	s15, [r3]
 8001180:	eeb0 0a67 	vmov.f32	s0, s15
 8001184:	f7ff ff40 	bl	8001008 <radiansToDegrees>
 8001188:	eef0 7a40 	vmov.f32	s15, s0
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	edc3 7a00 	vstr	s15, [r3]
    resultsPRY->rollAcc = radiansToDegrees(resultsPRY->rollAcc);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	edd3 7a01 	vldr	s15, [r3, #4]
 8001198:	eeb0 0a67 	vmov.f32	s0, s15
 800119c:	f7ff ff34 	bl	8001008 <radiansToDegrees>
 80011a0:	eef0 7a40 	vmov.f32	s15, s0
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	edc3 7a01 	vstr	s15, [r3, #4]

    double dt = computeDT(prevTick);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff fee4 	bl	8000f78 <computeDT>
 80011b0:	ed87 0b04 	vstr	d0, [r7, #16]

	// Complementary filter equation
	resultsCompFilter.pitch = alpha * (resultsCompFilter.pitch + dataToProcess->gyroX * dt) + (1 - alpha) * resultsPRY->pitchAcc;
 80011b4:	69f8      	ldr	r0, [r7, #28]
 80011b6:	f7ff f9e7 	bl	8000588 <__aeabi_f2d>
 80011ba:	4604      	mov	r4, r0
 80011bc:	460d      	mov	r5, r1
 80011be:	4b47      	ldr	r3, [pc, #284]	@ (80012dc <complementary_filter+0x294>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff f9e0 	bl	8000588 <__aeabi_f2d>
 80011c8:	4680      	mov	r8, r0
 80011ca:	4689      	mov	r9, r1
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff f9d9 	bl	8000588 <__aeabi_f2d>
 80011d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011da:	f7ff fa2d 	bl	8000638 <__aeabi_dmul>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4640      	mov	r0, r8
 80011e4:	4649      	mov	r1, r9
 80011e6:	f7ff f871 	bl	80002cc <__adddf3>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4620      	mov	r0, r4
 80011f0:	4629      	mov	r1, r5
 80011f2:	f7ff fa21 	bl	8000638 <__aeabi_dmul>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4614      	mov	r4, r2
 80011fc:	461d      	mov	r5, r3
 80011fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001202:	edd7 7a07 	vldr	s15, [r7, #28]
 8001206:	ee37 7a67 	vsub.f32	s14, s14, s15
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	edd3 7a00 	vldr	s15, [r3]
 8001210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001214:	ee17 0a90 	vmov	r0, s15
 8001218:	f7ff f9b6 	bl	8000588 <__aeabi_f2d>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4620      	mov	r0, r4
 8001222:	4629      	mov	r1, r5
 8001224:	f7ff f852 	bl	80002cc <__adddf3>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4610      	mov	r0, r2
 800122e:	4619      	mov	r1, r3
 8001230:	f7ff fcda 	bl	8000be8 <__aeabi_d2f>
 8001234:	4603      	mov	r3, r0
 8001236:	4a29      	ldr	r2, [pc, #164]	@ (80012dc <complementary_filter+0x294>)
 8001238:	6053      	str	r3, [r2, #4]
	resultsCompFilter.roll = alpha * (resultsCompFilter.roll + dataToProcess->gyroY * dt) + (1 - alpha) * resultsPRY->rollAcc;
 800123a:	69f8      	ldr	r0, [r7, #28]
 800123c:	f7ff f9a4 	bl	8000588 <__aeabi_f2d>
 8001240:	4604      	mov	r4, r0
 8001242:	460d      	mov	r5, r1
 8001244:	4b25      	ldr	r3, [pc, #148]	@ (80012dc <complementary_filter+0x294>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f99d 	bl	8000588 <__aeabi_f2d>
 800124e:	4680      	mov	r8, r0
 8001250:	4689      	mov	r9, r1
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f996 	bl	8000588 <__aeabi_f2d>
 800125c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001260:	f7ff f9ea 	bl	8000638 <__aeabi_dmul>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4640      	mov	r0, r8
 800126a:	4649      	mov	r1, r9
 800126c:	f7ff f82e 	bl	80002cc <__adddf3>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4620      	mov	r0, r4
 8001276:	4629      	mov	r1, r5
 8001278:	f7ff f9de 	bl	8000638 <__aeabi_dmul>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4614      	mov	r4, r2
 8001282:	461d      	mov	r5, r3
 8001284:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001288:	edd7 7a07 	vldr	s15, [r7, #28]
 800128c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	edd3 7a01 	vldr	s15, [r3, #4]
 8001296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800129a:	ee17 0a90 	vmov	r0, s15
 800129e:	f7ff f973 	bl	8000588 <__aeabi_f2d>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4620      	mov	r0, r4
 80012a8:	4629      	mov	r1, r5
 80012aa:	f7ff f80f 	bl	80002cc <__adddf3>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f7ff fc97 	bl	8000be8 <__aeabi_d2f>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4a07      	ldr	r2, [pc, #28]	@ (80012dc <complementary_filter+0x294>)
 80012be:	6093      	str	r3, [r2, #8]

	return &resultsCompFilter;
 80012c0:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <complementary_filter+0x294>)
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3720      	adds	r7, #32
 80012c6:	46bd      	mov	sp, r7
 80012c8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012cc:	f3af 8000 	nop.w
 80012d0:	00000000 	.word	0x00000000
 80012d4:	40000000 	.word	0x40000000
 80012d8:	3f7b645a 	.word	0x3f7b645a
 80012dc:	20000224 	.word	0x20000224

080012e0 <Kalman_Init>:

// Initialize the Kalman filter

//The Measurement Noise (R) for the Kalman filter, based on the accelerometer noise density of 400 ug/sqrt(Hz) at 8kHz sample rate is R=0.000640
void Kalman_Init(KalmanFilter *kf, float Q_angle, float Q_bias, float R_measure) {
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80012ec:	edc7 0a01 	vstr	s1, [r7, #4]
 80012f0:	ed87 1a00 	vstr	s2, [r7]
    // Initialization of states
    kf->angle = 0.0f; // θ₀|₀ = 0
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
    kf->bias = 0.0f;  // b₀|₀ = 0
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	605a      	str	r2, [r3, #4]
    kf->rate = 0.0f;  // Unbiased angular rate is initialized to 0
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	609a      	str	r2, [r3, #8]

    // Initialize the error covariance matrix P₀|₀
    kf->P[0][0] = 1.0f; kf->P[0][1] = 0.0f;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
    kf->P[1][0] = 0.0f; kf->P[1][1] = 1.0f;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	615a      	str	r2, [r3, #20]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800132a:	619a      	str	r2, [r3, #24]

    // Set process and measurement noise covariances
    kf->Q_angle = Q_angle;    // Q_θ: Variance in angle
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	61da      	str	r2, [r3, #28]
    kf->Q_bias = Q_bias;      // Q_b: Variance in gyroscope bias
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	621a      	str	r2, [r3, #32]
    kf->R_measure = R_measure; // R: Variance in accelerometer measurement
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800133e:	bf00      	nop
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <Kalman_Update>:

// Update the Kalman filter with new sensor data
float Kalman_Update(KalmanFilter *kf, float new_angle, float new_rate, float dt) {
 800134a:	b480      	push	{r7}
 800134c:	b08b      	sub	sp, #44	@ 0x2c
 800134e:	af00      	add	r7, sp, #0
 8001350:	60f8      	str	r0, [r7, #12]
 8001352:	ed87 0a02 	vstr	s0, [r7, #8]
 8001356:	edc7 0a01 	vstr	s1, [r7, #4]
 800135a:	ed87 1a00 	vstr	s2, [r7]
    // Step 1: Prediction

    // Predict the unbiased rate: ωₖ - bₖ
    kf->rate = new_rate - kf->bias; // Equation: ωₖ - bₖ
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	edd3 7a01 	vldr	s15, [r3, #4]
 8001364:	ed97 7a01 	vldr	s14, [r7, #4]
 8001368:	ee77 7a67 	vsub.f32	s15, s14, s15
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	edc3 7a02 	vstr	s15, [r3, #8]

    // Predict the angle: θₖ|ₖ₋₁ = θₖ₋₁|ₖ₋₁ + Δt * (ωₖ - bₖ)
    kf->angle += dt * kf->rate; // θₖ|ₖ₋₁ = θₖ₋₁|ₖ₋₁ + Δt * rate
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	ed93 7a00 	vldr	s14, [r3]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	edd3 6a02 	vldr	s13, [r3, #8]
 800137e:	edd7 7a00 	vldr	s15, [r7]
 8001382:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001386:	ee77 7a27 	vadd.f32	s15, s14, s15
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	edc3 7a00 	vstr	s15, [r3]

    // Update the error covariance matrix:
    // Pₖ|ₖ₋₁ = F * Pₖ₋₁|ₖ₋₁ * Fᵀ + Q
    kf->P[0][0] += dt * (dt * kf->P[1][1] - kf->P[0][1] - kf->P[1][0] + kf->Q_angle); // Update Pₖ|ₖ₋₁[0][0]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	ed93 7a03 	vldr	s14, [r3, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	edd3 6a06 	vldr	s13, [r3, #24]
 800139c:	edd7 7a00 	vldr	s15, [r7]
 80013a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	edd3 7a04 	vldr	s15, [r3, #16]
 80013aa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	edd3 7a05 	vldr	s15, [r3, #20]
 80013b4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	edd3 7a07 	vldr	s15, [r3, #28]
 80013be:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80013c2:	edd7 7a00 	vldr	s15, [r7]
 80013c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	edc3 7a03 	vstr	s15, [r3, #12]
    kf->P[0][1] -= dt * kf->P[1][1]; // Update Pₖ|ₖ₋₁[0][1]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	ed93 7a04 	vldr	s14, [r3, #16]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	edd3 6a06 	vldr	s13, [r3, #24]
 80013e0:	edd7 7a00 	vldr	s15, [r7]
 80013e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->P[1][0] -= dt * kf->P[1][1]; // Update Pₖ|ₖ₋₁[1][0]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	ed93 7a05 	vldr	s14, [r3, #20]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	edd3 6a06 	vldr	s13, [r3, #24]
 80013fe:	edd7 7a00 	vldr	s15, [r7]
 8001402:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001406:	ee77 7a67 	vsub.f32	s15, s14, s15
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	edc3 7a05 	vstr	s15, [r3, #20]
    kf->P[1][1] += kf->Q_bias * dt;  // Update Pₖ|ₖ₋₁[1][1]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	ed93 7a06 	vldr	s14, [r3, #24]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	edd3 6a08 	vldr	s13, [r3, #32]
 800141c:	edd7 7a00 	vldr	s15, [r7]
 8001420:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	edc3 7a06 	vstr	s15, [r3, #24]

    // Step 2: Update

    // Compute the innovation: yₖ = zₖ - H * θₖ|ₖ₋₁
    float y = new_angle - kf->angle; // Innovation: yₖ = zₖ - θₖ|ₖ₋₁
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	edd3 7a00 	vldr	s15, [r3]
 8001434:	ed97 7a02 	vldr	s14, [r7, #8]
 8001438:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Compute the innovation covariance: S = H * Pₖ|ₖ₋₁ * Hᵀ + R
    float S = kf->P[0][0] + kf->R_measure; // S = Pₖ|ₖ₋₁[0][0] + R
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	ed93 7a03 	vldr	s14, [r3, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800144c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001450:	edc7 7a08 	vstr	s15, [r7, #32]

    // Compute the Kalman gain: K = Pₖ|ₖ₋₁ * Hᵀ / S
    float K[2];
    K[0] = kf->P[0][0] / S; // K₁ = Pₖ|ₖ₋₁[0][0] / S
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	edd3 6a03 	vldr	s13, [r3, #12]
 800145a:	ed97 7a08 	vldr	s14, [r7, #32]
 800145e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001462:	edc7 7a04 	vstr	s15, [r7, #16]
    K[1] = kf->P[1][0] / S; // K₂ = Pₖ|ₖ₋₁[1][0] / S
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	edd3 6a05 	vldr	s13, [r3, #20]
 800146c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001470:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001474:	edc7 7a05 	vstr	s15, [r7, #20]

    // Update the state estimates: θₖ|ₖ = θₖ|ₖ₋₁ + K₁ * yₖ
    kf->angle += K[0] * y; // θₖ|ₖ = θₖ|ₖ₋₁ + K₁ * yₖ
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	ed93 7a00 	vldr	s14, [r3]
 800147e:	edd7 6a04 	vldr	s13, [r7, #16]
 8001482:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001486:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800148a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	edc3 7a00 	vstr	s15, [r3]

    // Update the bias: bₖ|ₖ = bₖ|ₖ₋₁ + K₂ * yₖ
    kf->bias += K[1] * y; // bₖ|ₖ = bₖ|ₖ₋₁ + K₂ * yₖ
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	ed93 7a01 	vldr	s14, [r3, #4]
 800149a:	edd7 6a05 	vldr	s13, [r7, #20]
 800149e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80014a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	edc3 7a01 	vstr	s15, [r3, #4]

    // Update the error covariance matrix:
    // Pₖ|ₖ = (I - K * H) * Pₖ|ₖ₋₁
    float P00_temp = kf->P[0][0]; // Temporary value to hold Pₖ|ₖ₋₁[0][0]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	61fb      	str	r3, [r7, #28]
    float P01_temp = kf->P[0][1]; // Temporary value to hold Pₖ|ₖ₋₁[0][1]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	61bb      	str	r3, [r7, #24]

    kf->P[0][0] -= K[0] * P00_temp; // Update Pₖ|ₖ[0][0]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	ed93 7a03 	vldr	s14, [r3, #12]
 80014c2:	edd7 6a04 	vldr	s13, [r7, #16]
 80014c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80014ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	edc3 7a03 	vstr	s15, [r3, #12]
    kf->P[0][1] -= K[0] * P01_temp; // Update Pₖ|ₖ[0][1]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	ed93 7a04 	vldr	s14, [r3, #16]
 80014de:	edd7 6a04 	vldr	s13, [r7, #16]
 80014e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80014e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->P[1][0] -= K[1] * P00_temp; // Update Pₖ|ₖ[1][0]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	ed93 7a05 	vldr	s14, [r3, #20]
 80014fa:	edd7 6a05 	vldr	s13, [r7, #20]
 80014fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8001502:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001506:	ee77 7a67 	vsub.f32	s15, s14, s15
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	edc3 7a05 	vstr	s15, [r3, #20]
    kf->P[1][1] -= K[1] * P01_temp; // Update Pₖ|ₖ[1][1]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	ed93 7a06 	vldr	s14, [r3, #24]
 8001516:	edd7 6a05 	vldr	s13, [r7, #20]
 800151a:	edd7 7a06 	vldr	s15, [r7, #24]
 800151e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001522:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	edc3 7a06 	vstr	s15, [r3, #24]

    // Return the updated angle estimate
    return kf->angle; // Return θₖ|ₖ
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	ee07 3a90 	vmov	s15, r3
}
 8001534:	eeb0 0a67 	vmov.f32	s0, s15
 8001538:	372c      	adds	r7, #44	@ 0x2c
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	0000      	movs	r0, r0
 8001544:	0000      	movs	r0, r0
	...

08001548 <computeAngles>:


PitchRollYaw* computeAngles(MPU6050_Data *dataToProcess, uint32_t *prevTick) {
 8001548:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800154c:	b084      	sub	sp, #16
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
 8001552:	6039      	str	r1, [r7, #0]
	resultsPRY.pitchAcc = atan2(dataToProcess->accelY, sqrt(pow(dataToProcess->accelX,2)+pow(dataToProcess->accelZ,2)));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff f815 	bl	8000588 <__aeabi_f2d>
 800155e:	4604      	mov	r4, r0
 8001560:	460d      	mov	r5, r1
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff f80e 	bl	8000588 <__aeabi_f2d>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	ed9f 1b7d 	vldr	d1, [pc, #500]	@ 8001768 <computeAngles+0x220>
 8001574:	ec43 2b10 	vmov	d0, r2, r3
 8001578:	f00e fa94 	bl	800faa4 <pow>
 800157c:	ec59 8b10 	vmov	r8, r9, d0
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe ffff 	bl	8000588 <__aeabi_f2d>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	ed9f 1b76 	vldr	d1, [pc, #472]	@ 8001768 <computeAngles+0x220>
 8001592:	ec43 2b10 	vmov	d0, r2, r3
 8001596:	f00e fa85 	bl	800faa4 <pow>
 800159a:	ec53 2b10 	vmov	r2, r3, d0
 800159e:	4640      	mov	r0, r8
 80015a0:	4649      	mov	r1, r9
 80015a2:	f7fe fe93 	bl	80002cc <__adddf3>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	ec43 2b17 	vmov	d7, r2, r3
 80015ae:	eeb0 0a47 	vmov.f32	s0, s14
 80015b2:	eef0 0a67 	vmov.f32	s1, s15
 80015b6:	f00e fae5 	bl	800fb84 <sqrt>
 80015ba:	eeb0 7a40 	vmov.f32	s14, s0
 80015be:	eef0 7a60 	vmov.f32	s15, s1
 80015c2:	eeb0 1a47 	vmov.f32	s2, s14
 80015c6:	eef0 1a67 	vmov.f32	s3, s15
 80015ca:	ec45 4b10 	vmov	d0, r4, r5
 80015ce:	f00e fa67 	bl	800faa0 <atan2>
 80015d2:	ec53 2b10 	vmov	r2, r3, d0
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	f7ff fb05 	bl	8000be8 <__aeabi_d2f>
 80015de:	4603      	mov	r3, r0
 80015e0:	4a63      	ldr	r2, [pc, #396]	@ (8001770 <computeAngles+0x228>)
 80015e2:	6013      	str	r3, [r2, #0]
	resultsPRY.rollAcc = atan2(dataToProcess->accelX, sqrt(pow(dataToProcess->accelY,2)+pow(dataToProcess->accelZ,2)));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe ffcd 	bl	8000588 <__aeabi_f2d>
 80015ee:	4604      	mov	r4, r0
 80015f0:	460d      	mov	r5, r1
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ffc6 	bl	8000588 <__aeabi_f2d>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	ed9f 1b59 	vldr	d1, [pc, #356]	@ 8001768 <computeAngles+0x220>
 8001604:	ec43 2b10 	vmov	d0, r2, r3
 8001608:	f00e fa4c 	bl	800faa4 <pow>
 800160c:	ec59 8b10 	vmov	r8, r9, d0
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe ffb7 	bl	8000588 <__aeabi_f2d>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	ed9f 1b52 	vldr	d1, [pc, #328]	@ 8001768 <computeAngles+0x220>
 8001622:	ec43 2b10 	vmov	d0, r2, r3
 8001626:	f00e fa3d 	bl	800faa4 <pow>
 800162a:	ec53 2b10 	vmov	r2, r3, d0
 800162e:	4640      	mov	r0, r8
 8001630:	4649      	mov	r1, r9
 8001632:	f7fe fe4b 	bl	80002cc <__adddf3>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	ec43 2b17 	vmov	d7, r2, r3
 800163e:	eeb0 0a47 	vmov.f32	s0, s14
 8001642:	eef0 0a67 	vmov.f32	s1, s15
 8001646:	f00e fa9d 	bl	800fb84 <sqrt>
 800164a:	eeb0 7a40 	vmov.f32	s14, s0
 800164e:	eef0 7a60 	vmov.f32	s15, s1
 8001652:	eeb0 1a47 	vmov.f32	s2, s14
 8001656:	eef0 1a67 	vmov.f32	s3, s15
 800165a:	ec45 4b10 	vmov	d0, r4, r5
 800165e:	f00e fa1f 	bl	800faa0 <atan2>
 8001662:	ec53 2b10 	vmov	r2, r3, d0
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f7ff fabd 	bl	8000be8 <__aeabi_d2f>
 800166e:	4603      	mov	r3, r0
 8001670:	4a3f      	ldr	r2, [pc, #252]	@ (8001770 <computeAngles+0x228>)
 8001672:	6053      	str	r3, [r2, #4]

    resultsPRY.pitchAcc = radiansToDegrees(resultsPRY.pitchAcc);
 8001674:	4b3e      	ldr	r3, [pc, #248]	@ (8001770 <computeAngles+0x228>)
 8001676:	edd3 7a00 	vldr	s15, [r3]
 800167a:	eeb0 0a67 	vmov.f32	s0, s15
 800167e:	f7ff fcc3 	bl	8001008 <radiansToDegrees>
 8001682:	eef0 7a40 	vmov.f32	s15, s0
 8001686:	4b3a      	ldr	r3, [pc, #232]	@ (8001770 <computeAngles+0x228>)
 8001688:	edc3 7a00 	vstr	s15, [r3]
    resultsPRY.rollAcc = radiansToDegrees(resultsPRY.rollAcc);
 800168c:	4b38      	ldr	r3, [pc, #224]	@ (8001770 <computeAngles+0x228>)
 800168e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001692:	eeb0 0a67 	vmov.f32	s0, s15
 8001696:	f7ff fcb7 	bl	8001008 <radiansToDegrees>
 800169a:	eef0 7a40 	vmov.f32	s15, s0
 800169e:	4b34      	ldr	r3, [pc, #208]	@ (8001770 <computeAngles+0x228>)
 80016a0:	edc3 7a01 	vstr	s15, [r3, #4]

    double dt = computeDT(prevTick);
 80016a4:	6838      	ldr	r0, [r7, #0]
 80016a6:	f7ff fc67 	bl	8000f78 <computeDT>
 80016aa:	ed87 0b02 	vstr	d0, [r7, #8]

    resultsPRY.pitchGyroDelta = dataToProcess->gyroX * dt;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe ff68 	bl	8000588 <__aeabi_f2d>
 80016b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016bc:	f7fe ffbc 	bl	8000638 <__aeabi_dmul>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4610      	mov	r0, r2
 80016c6:	4619      	mov	r1, r3
 80016c8:	f7ff fa8e 	bl	8000be8 <__aeabi_d2f>
 80016cc:	4603      	mov	r3, r0
 80016ce:	4a28      	ldr	r2, [pc, #160]	@ (8001770 <computeAngles+0x228>)
 80016d0:	6153      	str	r3, [r2, #20]
    resultsPRY.rollGyroDelta = dataToProcess->gyroY * dt;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe ff56 	bl	8000588 <__aeabi_f2d>
 80016dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016e0:	f7fe ffaa 	bl	8000638 <__aeabi_dmul>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f7ff fa7c 	bl	8000be8 <__aeabi_d2f>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4a1f      	ldr	r2, [pc, #124]	@ (8001770 <computeAngles+0x228>)
 80016f4:	6193      	str	r3, [r2, #24]
    resultsPRY.yawGyroDelta = dataToProcess->gyroZ * dt;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe ff44 	bl	8000588 <__aeabi_f2d>
 8001700:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001704:	f7fe ff98 	bl	8000638 <__aeabi_dmul>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4610      	mov	r0, r2
 800170e:	4619      	mov	r1, r3
 8001710:	f7ff fa6a 	bl	8000be8 <__aeabi_d2f>
 8001714:	4603      	mov	r3, r0
 8001716:	4a16      	ldr	r2, [pc, #88]	@ (8001770 <computeAngles+0x228>)
 8001718:	61d3      	str	r3, [r2, #28]

    resultsPRY.pitchGyro += resultsPRY.pitchGyroDelta;
 800171a:	4b15      	ldr	r3, [pc, #84]	@ (8001770 <computeAngles+0x228>)
 800171c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001720:	4b13      	ldr	r3, [pc, #76]	@ (8001770 <computeAngles+0x228>)
 8001722:	edd3 7a05 	vldr	s15, [r3, #20]
 8001726:	ee77 7a27 	vadd.f32	s15, s14, s15
 800172a:	4b11      	ldr	r3, [pc, #68]	@ (8001770 <computeAngles+0x228>)
 800172c:	edc3 7a02 	vstr	s15, [r3, #8]
    resultsPRY.rollGyro += resultsPRY.rollGyroDelta;
 8001730:	4b0f      	ldr	r3, [pc, #60]	@ (8001770 <computeAngles+0x228>)
 8001732:	ed93 7a03 	vldr	s14, [r3, #12]
 8001736:	4b0e      	ldr	r3, [pc, #56]	@ (8001770 <computeAngles+0x228>)
 8001738:	edd3 7a06 	vldr	s15, [r3, #24]
 800173c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001740:	4b0b      	ldr	r3, [pc, #44]	@ (8001770 <computeAngles+0x228>)
 8001742:	edc3 7a03 	vstr	s15, [r3, #12]
    resultsPRY.yawGyro += resultsPRY.yawGyroDelta;
 8001746:	4b0a      	ldr	r3, [pc, #40]	@ (8001770 <computeAngles+0x228>)
 8001748:	ed93 7a04 	vldr	s14, [r3, #16]
 800174c:	4b08      	ldr	r3, [pc, #32]	@ (8001770 <computeAngles+0x228>)
 800174e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <computeAngles+0x228>)
 8001758:	edc3 7a04 	vstr	s15, [r3, #16]

    return &resultsPRY;
 800175c:	4b04      	ldr	r3, [pc, #16]	@ (8001770 <computeAngles+0x228>)
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001768:	00000000 	.word	0x00000000
 800176c:	40000000 	.word	0x40000000
 8001770:	20000204 	.word	0x20000204
 8001774:	00000000 	.word	0x00000000

08001778 <computeAnglesAcc>:


PitchRollYaw* computeAnglesAcc(MPU6050_Data *dataToProcess) {
 8001778:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
	resultsPRY.pitchAcc = atan2(dataToProcess->accelY, sqrt(pow(dataToProcess->accelX,2)+pow(dataToProcess->accelZ,2)));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fefe 	bl	8000588 <__aeabi_f2d>
 800178c:	4604      	mov	r4, r0
 800178e:	460d      	mov	r5, r1
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fef7 	bl	8000588 <__aeabi_f2d>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	ed9f 1b50 	vldr	d1, [pc, #320]	@ 80018e0 <computeAnglesAcc+0x168>
 80017a2:	ec43 2b10 	vmov	d0, r2, r3
 80017a6:	f00e f97d 	bl	800faa4 <pow>
 80017aa:	ec59 8b10 	vmov	r8, r9, d0
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe fee8 	bl	8000588 <__aeabi_f2d>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	ed9f 1b48 	vldr	d1, [pc, #288]	@ 80018e0 <computeAnglesAcc+0x168>
 80017c0:	ec43 2b10 	vmov	d0, r2, r3
 80017c4:	f00e f96e 	bl	800faa4 <pow>
 80017c8:	ec53 2b10 	vmov	r2, r3, d0
 80017cc:	4640      	mov	r0, r8
 80017ce:	4649      	mov	r1, r9
 80017d0:	f7fe fd7c 	bl	80002cc <__adddf3>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	ec43 2b17 	vmov	d7, r2, r3
 80017dc:	eeb0 0a47 	vmov.f32	s0, s14
 80017e0:	eef0 0a67 	vmov.f32	s1, s15
 80017e4:	f00e f9ce 	bl	800fb84 <sqrt>
 80017e8:	eeb0 7a40 	vmov.f32	s14, s0
 80017ec:	eef0 7a60 	vmov.f32	s15, s1
 80017f0:	eeb0 1a47 	vmov.f32	s2, s14
 80017f4:	eef0 1a67 	vmov.f32	s3, s15
 80017f8:	ec45 4b10 	vmov	d0, r4, r5
 80017fc:	f00e f950 	bl	800faa0 <atan2>
 8001800:	ec53 2b10 	vmov	r2, r3, d0
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	f7ff f9ee 	bl	8000be8 <__aeabi_d2f>
 800180c:	4603      	mov	r3, r0
 800180e:	4a36      	ldr	r2, [pc, #216]	@ (80018e8 <computeAnglesAcc+0x170>)
 8001810:	6013      	str	r3, [r2, #0]
	resultsPRY.rollAcc = atan2(dataToProcess->accelX, sqrt(pow(dataToProcess->accelY,2)+pow(dataToProcess->accelZ,2)));
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe feb6 	bl	8000588 <__aeabi_f2d>
 800181c:	4604      	mov	r4, r0
 800181e:	460d      	mov	r5, r1
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe feaf 	bl	8000588 <__aeabi_f2d>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	ed9f 1b2c 	vldr	d1, [pc, #176]	@ 80018e0 <computeAnglesAcc+0x168>
 8001832:	ec43 2b10 	vmov	d0, r2, r3
 8001836:	f00e f935 	bl	800faa4 <pow>
 800183a:	ec59 8b10 	vmov	r8, r9, d0
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fea0 	bl	8000588 <__aeabi_f2d>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	ed9f 1b24 	vldr	d1, [pc, #144]	@ 80018e0 <computeAnglesAcc+0x168>
 8001850:	ec43 2b10 	vmov	d0, r2, r3
 8001854:	f00e f926 	bl	800faa4 <pow>
 8001858:	ec53 2b10 	vmov	r2, r3, d0
 800185c:	4640      	mov	r0, r8
 800185e:	4649      	mov	r1, r9
 8001860:	f7fe fd34 	bl	80002cc <__adddf3>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	ec43 2b17 	vmov	d7, r2, r3
 800186c:	eeb0 0a47 	vmov.f32	s0, s14
 8001870:	eef0 0a67 	vmov.f32	s1, s15
 8001874:	f00e f986 	bl	800fb84 <sqrt>
 8001878:	eeb0 7a40 	vmov.f32	s14, s0
 800187c:	eef0 7a60 	vmov.f32	s15, s1
 8001880:	eeb0 1a47 	vmov.f32	s2, s14
 8001884:	eef0 1a67 	vmov.f32	s3, s15
 8001888:	ec45 4b10 	vmov	d0, r4, r5
 800188c:	f00e f908 	bl	800faa0 <atan2>
 8001890:	ec53 2b10 	vmov	r2, r3, d0
 8001894:	4610      	mov	r0, r2
 8001896:	4619      	mov	r1, r3
 8001898:	f7ff f9a6 	bl	8000be8 <__aeabi_d2f>
 800189c:	4603      	mov	r3, r0
 800189e:	4a12      	ldr	r2, [pc, #72]	@ (80018e8 <computeAnglesAcc+0x170>)
 80018a0:	6053      	str	r3, [r2, #4]

    resultsPRY.pitchAcc = radiansToDegrees(resultsPRY.pitchAcc);
 80018a2:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <computeAnglesAcc+0x170>)
 80018a4:	edd3 7a00 	vldr	s15, [r3]
 80018a8:	eeb0 0a67 	vmov.f32	s0, s15
 80018ac:	f7ff fbac 	bl	8001008 <radiansToDegrees>
 80018b0:	eef0 7a40 	vmov.f32	s15, s0
 80018b4:	4b0c      	ldr	r3, [pc, #48]	@ (80018e8 <computeAnglesAcc+0x170>)
 80018b6:	edc3 7a00 	vstr	s15, [r3]
    resultsPRY.rollAcc = radiansToDegrees(resultsPRY.rollAcc);
 80018ba:	4b0b      	ldr	r3, [pc, #44]	@ (80018e8 <computeAnglesAcc+0x170>)
 80018bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80018c0:	eeb0 0a67 	vmov.f32	s0, s15
 80018c4:	f7ff fba0 	bl	8001008 <radiansToDegrees>
 80018c8:	eef0 7a40 	vmov.f32	s15, s0
 80018cc:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <computeAnglesAcc+0x170>)
 80018ce:	edc3 7a01 	vstr	s15, [r3, #4]

    return &resultsPRY;
 80018d2:	4b05      	ldr	r3, [pc, #20]	@ (80018e8 <computeAnglesAcc+0x170>)
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018de:	bf00      	nop
 80018e0:	00000000 	.word	0x00000000
 80018e4:	40000000 	.word	0x40000000
 80018e8:	20000204 	.word	0x20000204

080018ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018f0:	f002 fc68 	bl	80041c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018f4:	f000 f884 	bl	8001a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018f8:	f000 fc88 	bl	800220c <MX_GPIO_Init>
  MX_DMA_Init();
 80018fc:	f000 fc56 	bl	80021ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001900:	f000 fc2a 	bl	8002158 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001904:	f000 f93a 	bl	8001b7c <MX_I2C1_Init>
  MX_SPI1_Init();
 8001908:	f000 f966 	bl	8001bd8 <MX_SPI1_Init>
  MX_ADC1_Init();
 800190c:	f000 f8e4 	bl	8001ad8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001910:	f000 f998 	bl	8001c44 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001914:	f000 fa5a 	bl	8001dcc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001918:	f000 fad8 	bl	8001ecc <MX_TIM3_Init>
  MX_TIM8_Init();
 800191c:	f000 fb58 	bl	8001fd0 <MX_TIM8_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001920:	f007 fc62 	bl	80091e8 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of uartMutex */
  uartMutexHandle = osMutexNew(&uartMutex_attributes);
 8001924:	4823      	ldr	r0, [pc, #140]	@ (80019b4 <main+0xc8>)
 8001926:	f007 fd86 	bl	8009436 <osMutexNew>
 800192a:	4603      	mov	r3, r0
 800192c:	4a22      	ldr	r2, [pc, #136]	@ (80019b8 <main+0xcc>)
 800192e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_MUTEX */
  if (uartMutexHandle == NULL) {
 8001930:	4b21      	ldr	r3, [pc, #132]	@ (80019b8 <main+0xcc>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d102      	bne.n	800193e <main+0x52>
      // Error handling if the mutex creation fails
      printf("Failed to create UART mutex\r\n");
 8001938:	4820      	ldr	r0, [pc, #128]	@ (80019bc <main+0xd0>)
 800193a:	f00c f85f 	bl	800d9fc <puts>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of dmaTxCompleteSemaphore */
  dmaTxCompleteSemaphoreHandle = osSemaphoreNew(1, 1, &dmaTxCompleteSemaphore_attributes);
 800193e:	4a20      	ldr	r2, [pc, #128]	@ (80019c0 <main+0xd4>)
 8001940:	2101      	movs	r1, #1
 8001942:	2001      	movs	r0, #1
 8001944:	f007 fe85 	bl	8009652 <osSemaphoreNew>
 8001948:	4603      	mov	r3, r0
 800194a:	4a1e      	ldr	r2, [pc, #120]	@ (80019c4 <main+0xd8>)
 800194c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  if (dmaTxCompleteSemaphoreHandle == NULL) {
 800194e:	4b1d      	ldr	r3, [pc, #116]	@ (80019c4 <main+0xd8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d102      	bne.n	800195c <main+0x70>
      // Error handling if the semaphore creation fails
      printf("Failed to create DMA TX complete semaphore\r\n");
 8001956:	481c      	ldr	r0, [pc, #112]	@ (80019c8 <main+0xdc>)
 8001958:	f00c f850 	bl	800d9fc <puts>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of MPU6050Data */
  MPU6050DataHandle = osMessageQueueNew (10, sizeof(MPU6050_Data), &MPU6050Data_attributes);
 800195c:	4a1b      	ldr	r2, [pc, #108]	@ (80019cc <main+0xe0>)
 800195e:	2124      	movs	r1, #36	@ 0x24
 8001960:	200a      	movs	r0, #10
 8001962:	f007 ff51 	bl	8009808 <osMessageQueueNew>
 8001966:	4603      	mov	r3, r0
 8001968:	4a19      	ldr	r2, [pc, #100]	@ (80019d0 <main+0xe4>)
 800196a:	6013      	str	r3, [r2, #0]

  /* creation of KalmanAngle */
  KalmanAngleHandle = osMessageQueueNew (10, sizeof(float), &KalmanAngle_attributes);
 800196c:	4a19      	ldr	r2, [pc, #100]	@ (80019d4 <main+0xe8>)
 800196e:	2104      	movs	r1, #4
 8001970:	200a      	movs	r0, #10
 8001972:	f007 ff49 	bl	8009808 <osMessageQueueNew>
 8001976:	4603      	mov	r3, r0
 8001978:	4a17      	ldr	r2, [pc, #92]	@ (80019d8 <main+0xec>)
 800197a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MotorRun */
  MotorRunHandle = osThreadNew(motorRun, NULL, &MotorRun_attributes);
 800197c:	4a17      	ldr	r2, [pc, #92]	@ (80019dc <main+0xf0>)
 800197e:	2100      	movs	r1, #0
 8001980:	4817      	ldr	r0, [pc, #92]	@ (80019e0 <main+0xf4>)
 8001982:	f007 fc99 	bl	80092b8 <osThreadNew>
 8001986:	4603      	mov	r3, r0
 8001988:	4a16      	ldr	r2, [pc, #88]	@ (80019e4 <main+0xf8>)
 800198a:	6013      	str	r3, [r2, #0]

  /* creation of MPU6050Task */
  MPU6050TaskHandle = osThreadNew(mpu6050_ReadData, NULL, &MPU6050Task_attributes);
 800198c:	4a16      	ldr	r2, [pc, #88]	@ (80019e8 <main+0xfc>)
 800198e:	2100      	movs	r1, #0
 8001990:	4816      	ldr	r0, [pc, #88]	@ (80019ec <main+0x100>)
 8001992:	f007 fc91 	bl	80092b8 <osThreadNew>
 8001996:	4603      	mov	r3, r0
 8001998:	4a15      	ldr	r2, [pc, #84]	@ (80019f0 <main+0x104>)
 800199a:	6013      	str	r3, [r2, #0]

  /* creation of DataProcessingT */
  DataProcessingTHandle = osThreadNew(DataProcessing, NULL, &DataProcessingT_attributes);
 800199c:	4a15      	ldr	r2, [pc, #84]	@ (80019f4 <main+0x108>)
 800199e:	2100      	movs	r1, #0
 80019a0:	4815      	ldr	r0, [pc, #84]	@ (80019f8 <main+0x10c>)
 80019a2:	f007 fc89 	bl	80092b8 <osThreadNew>
 80019a6:	4603      	mov	r3, r0
 80019a8:	4a14      	ldr	r2, [pc, #80]	@ (80019fc <main+0x110>)
 80019aa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80019ac:	f007 fc40 	bl	8009230 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <main+0xc4>
 80019b4:	08011e90 	.word	0x08011e90
 80019b8:	200005c0 	.word	0x200005c0
 80019bc:	0801198c 	.word	0x0801198c
 80019c0:	08011ea0 	.word	0x08011ea0
 80019c4:	200005c4 	.word	0x200005c4
 80019c8:	080119ac 	.word	0x080119ac
 80019cc:	08011e60 	.word	0x08011e60
 80019d0:	200005b8 	.word	0x200005b8
 80019d4:	08011e78 	.word	0x08011e78
 80019d8:	200005bc 	.word	0x200005bc
 80019dc:	08011df4 	.word	0x08011df4
 80019e0:	08003391 	.word	0x08003391
 80019e4:	200005ac 	.word	0x200005ac
 80019e8:	08011e18 	.word	0x08011e18
 80019ec:	08002d89 	.word	0x08002d89
 80019f0:	200005b0 	.word	0x200005b0
 80019f4:	08011e3c 	.word	0x08011e3c
 80019f8:	08002f59 	.word	0x08002f59
 80019fc:	200005b4 	.word	0x200005b4

08001a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b094      	sub	sp, #80	@ 0x50
 8001a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a06:	f107 031c 	add.w	r3, r7, #28
 8001a0a:	2234      	movs	r2, #52	@ 0x34
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f00c f908 	bl	800dc24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a14:	f107 0308 	add.w	r3, r7, #8
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a24:	2300      	movs	r3, #0
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	4b29      	ldr	r3, [pc, #164]	@ (8001ad0 <SystemClock_Config+0xd0>)
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2c:	4a28      	ldr	r2, [pc, #160]	@ (8001ad0 <SystemClock_Config+0xd0>)
 8001a2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a32:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a34:	4b26      	ldr	r3, [pc, #152]	@ (8001ad0 <SystemClock_Config+0xd0>)
 8001a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a40:	2300      	movs	r3, #0
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	4b23      	ldr	r3, [pc, #140]	@ (8001ad4 <SystemClock_Config+0xd4>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a22      	ldr	r2, [pc, #136]	@ (8001ad4 <SystemClock_Config+0xd4>)
 8001a4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	4b20      	ldr	r3, [pc, #128]	@ (8001ad4 <SystemClock_Config+0xd4>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a58:	603b      	str	r3, [r7, #0]
 8001a5a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a60:	2301      	movs	r3, #1
 8001a62:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a64:	2310      	movs	r3, #16
 8001a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a70:	2308      	movs	r3, #8
 8001a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 150;
 8001a74:	2396      	movs	r3, #150	@ 0x96
 8001a76:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a80:	2302      	movs	r3, #2
 8001a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a84:	f107 031c 	add.w	r3, r7, #28
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f005 f9e5 	bl	8006e58 <HAL_RCC_OscConfig>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a94:	f000 fc32 	bl	80022fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a98:	230f      	movs	r3, #15
 8001a9a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001aa4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001aa8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001aaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ab0:	f107 0308 	add.w	r3, r7, #8
 8001ab4:	2104      	movs	r1, #4
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f004 fe84 	bl	80067c4 <HAL_RCC_ClockConfig>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001ac2:	f000 fc1b 	bl	80022fc <Error_Handler>
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	3750      	adds	r7, #80	@ 0x50
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40007000 	.word	0x40007000

08001ad8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ade:	463b      	mov	r3, r7
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001aea:	4b21      	ldr	r3, [pc, #132]	@ (8001b70 <MX_ADC1_Init+0x98>)
 8001aec:	4a21      	ldr	r2, [pc, #132]	@ (8001b74 <MX_ADC1_Init+0x9c>)
 8001aee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001af0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b70 <MX_ADC1_Init+0x98>)
 8001af2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001af6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001af8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b70 <MX_ADC1_Init+0x98>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001afe:	4b1c      	ldr	r3, [pc, #112]	@ (8001b70 <MX_ADC1_Init+0x98>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b04:	4b1a      	ldr	r3, [pc, #104]	@ (8001b70 <MX_ADC1_Init+0x98>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b0a:	4b19      	ldr	r3, [pc, #100]	@ (8001b70 <MX_ADC1_Init+0x98>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b12:	4b17      	ldr	r3, [pc, #92]	@ (8001b70 <MX_ADC1_Init+0x98>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b18:	4b15      	ldr	r3, [pc, #84]	@ (8001b70 <MX_ADC1_Init+0x98>)
 8001b1a:	4a17      	ldr	r2, [pc, #92]	@ (8001b78 <MX_ADC1_Init+0xa0>)
 8001b1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b1e:	4b14      	ldr	r3, [pc, #80]	@ (8001b70 <MX_ADC1_Init+0x98>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b24:	4b12      	ldr	r3, [pc, #72]	@ (8001b70 <MX_ADC1_Init+0x98>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b2a:	4b11      	ldr	r3, [pc, #68]	@ (8001b70 <MX_ADC1_Init+0x98>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b32:	4b0f      	ldr	r3, [pc, #60]	@ (8001b70 <MX_ADC1_Init+0x98>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b38:	480d      	ldr	r0, [pc, #52]	@ (8001b70 <MX_ADC1_Init+0x98>)
 8001b3a:	f002 fbd9 	bl	80042f0 <HAL_ADC_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b44:	f000 fbda 	bl	80022fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001b48:	230a      	movs	r3, #10
 8001b4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b54:	463b      	mov	r3, r7
 8001b56:	4619      	mov	r1, r3
 8001b58:	4805      	ldr	r0, [pc, #20]	@ (8001b70 <MX_ADC1_Init+0x98>)
 8001b5a:	f002 fc0d 	bl	8004378 <HAL_ADC_ConfigChannel>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b64:	f000 fbca 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b68:	bf00      	nop
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000230 	.word	0x20000230
 8001b74:	40012000 	.word	0x40012000
 8001b78:	0f000001 	.word	0x0f000001

08001b7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b80:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <MX_I2C1_Init+0x50>)
 8001b82:	4a13      	ldr	r2, [pc, #76]	@ (8001bd0 <MX_I2C1_Init+0x54>)
 8001b84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b86:	4b11      	ldr	r3, [pc, #68]	@ (8001bcc <MX_I2C1_Init+0x50>)
 8001b88:	4a12      	ldr	r2, [pc, #72]	@ (8001bd4 <MX_I2C1_Init+0x58>)
 8001b8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bcc <MX_I2C1_Init+0x50>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b92:	4b0e      	ldr	r3, [pc, #56]	@ (8001bcc <MX_I2C1_Init+0x50>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b98:	4b0c      	ldr	r3, [pc, #48]	@ (8001bcc <MX_I2C1_Init+0x50>)
 8001b9a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8001bcc <MX_I2C1_Init+0x50>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ba6:	4b09      	ldr	r3, [pc, #36]	@ (8001bcc <MX_I2C1_Init+0x50>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bac:	4b07      	ldr	r3, [pc, #28]	@ (8001bcc <MX_I2C1_Init+0x50>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bb2:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <MX_I2C1_Init+0x50>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bb8:	4804      	ldr	r0, [pc, #16]	@ (8001bcc <MX_I2C1_Init+0x50>)
 8001bba:	f003 fc53 	bl	8005464 <HAL_I2C_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bc4:	f000 fb9a 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000278 	.word	0x20000278
 8001bd0:	40005400 	.word	0x40005400
 8001bd4:	00061a80 	.word	0x00061a80

08001bd8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001bdc:	4b17      	ldr	r3, [pc, #92]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001bde:	4a18      	ldr	r2, [pc, #96]	@ (8001c40 <MX_SPI1_Init+0x68>)
 8001be0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001be2:	4b16      	ldr	r3, [pc, #88]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001be4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001be8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bea:	4b14      	ldr	r3, [pc, #80]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bf0:	4b12      	ldr	r3, [pc, #72]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bf6:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c02:	4b0e      	ldr	r3, [pc, #56]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001c04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c08:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c10:	4b0a      	ldr	r3, [pc, #40]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c16:	4b09      	ldr	r3, [pc, #36]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c1c:	4b07      	ldr	r3, [pc, #28]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c22:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001c24:	220a      	movs	r2, #10
 8001c26:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c28:	4804      	ldr	r0, [pc, #16]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001c2a:	f005 fbb3 	bl	8007394 <HAL_SPI_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c34:	f000 fb62 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	2000038c 	.word	0x2000038c
 8001c40:	40013000 	.word	0x40013000

08001c44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b096      	sub	sp, #88	@ 0x58
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c4a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c58:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	60da      	str	r2, [r3, #12]
 8001c70:	611a      	str	r2, [r3, #16]
 8001c72:	615a      	str	r2, [r3, #20]
 8001c74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	2220      	movs	r2, #32
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f00b ffd1 	bl	800dc24 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c82:	4b50      	ldr	r3, [pc, #320]	@ (8001dc4 <MX_TIM1_Init+0x180>)
 8001c84:	4a50      	ldr	r2, [pc, #320]	@ (8001dc8 <MX_TIM1_Init+0x184>)
 8001c86:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = PRESCALER_VALUE - 1;
 8001c88:	4b4e      	ldr	r3, [pc, #312]	@ (8001dc4 <MX_TIM1_Init+0x180>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8e:	4b4d      	ldr	r3, [pc, #308]	@ (8001dc4 <MX_TIM1_Init+0x180>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = PWM_PERIOD;
 8001c94:	4b4b      	ldr	r3, [pc, #300]	@ (8001dc4 <MX_TIM1_Init+0x180>)
 8001c96:	f240 52db 	movw	r2, #1499	@ 0x5db
 8001c9a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c9c:	4b49      	ldr	r3, [pc, #292]	@ (8001dc4 <MX_TIM1_Init+0x180>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ca2:	4b48      	ldr	r3, [pc, #288]	@ (8001dc4 <MX_TIM1_Init+0x180>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca8:	4b46      	ldr	r3, [pc, #280]	@ (8001dc4 <MX_TIM1_Init+0x180>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cae:	4845      	ldr	r0, [pc, #276]	@ (8001dc4 <MX_TIM1_Init+0x180>)
 8001cb0:	f005 fe1a 	bl	80078e8 <HAL_TIM_Base_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001cba:	f000 fb1f 	bl	80022fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cc4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001cc8:	4619      	mov	r1, r3
 8001cca:	483e      	ldr	r0, [pc, #248]	@ (8001dc4 <MX_TIM1_Init+0x180>)
 8001ccc:	f006 f83e 	bl	8007d4c <HAL_TIM_ConfigClockSource>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001cd6:	f000 fb11 	bl	80022fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001cda:	483a      	ldr	r0, [pc, #232]	@ (8001dc4 <MX_TIM1_Init+0x180>)
 8001cdc:	f005 fe53 	bl	8007986 <HAL_TIM_PWM_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001ce6:	f000 fb09 	bl	80022fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cea:	2300      	movs	r3, #0
 8001cec:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cf2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4832      	ldr	r0, [pc, #200]	@ (8001dc4 <MX_TIM1_Init+0x180>)
 8001cfa:	f006 fc0b 	bl	8008514 <HAL_TIMEx_MasterConfigSynchronization>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001d04:	f000 fafa 	bl	80022fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d08:	2360      	movs	r3, #96	@ 0x60
 8001d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d10:	2300      	movs	r3, #0
 8001d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d14:	2300      	movs	r3, #0
 8001d16:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d20:	2300      	movs	r3, #0
 8001d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d28:	2200      	movs	r2, #0
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4825      	ldr	r0, [pc, #148]	@ (8001dc4 <MX_TIM1_Init+0x180>)
 8001d2e:	f005 ff4b 	bl	8007bc8 <HAL_TIM_PWM_ConfigChannel>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001d38:	f000 fae0 	bl	80022fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d40:	2204      	movs	r2, #4
 8001d42:	4619      	mov	r1, r3
 8001d44:	481f      	ldr	r0, [pc, #124]	@ (8001dc4 <MX_TIM1_Init+0x180>)
 8001d46:	f005 ff3f 	bl	8007bc8 <HAL_TIM_PWM_ConfigChannel>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001d50:	f000 fad4 	bl	80022fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d58:	2208      	movs	r2, #8
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4819      	ldr	r0, [pc, #100]	@ (8001dc4 <MX_TIM1_Init+0x180>)
 8001d5e:	f005 ff33 	bl	8007bc8 <HAL_TIM_PWM_ConfigChannel>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001d68:	f000 fac8 	bl	80022fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d70:	220c      	movs	r2, #12
 8001d72:	4619      	mov	r1, r3
 8001d74:	4813      	ldr	r0, [pc, #76]	@ (8001dc4 <MX_TIM1_Init+0x180>)
 8001d76:	f005 ff27 	bl	8007bc8 <HAL_TIM_PWM_ConfigChannel>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001d80:	f000 fabc 	bl	80022fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d84:	2300      	movs	r3, #0
 8001d86:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d9c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001da2:	1d3b      	adds	r3, r7, #4
 8001da4:	4619      	mov	r1, r3
 8001da6:	4807      	ldr	r0, [pc, #28]	@ (8001dc4 <MX_TIM1_Init+0x180>)
 8001da8:	f006 fc30 	bl	800860c <HAL_TIMEx_ConfigBreakDeadTime>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001db2:	f000 faa3 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001db6:	4803      	ldr	r0, [pc, #12]	@ (8001dc4 <MX_TIM1_Init+0x180>)
 8001db8:	f001 ff72 	bl	8003ca0 <HAL_TIM_MspPostInit>

}
 8001dbc:	bf00      	nop
 8001dbe:	3758      	adds	r7, #88	@ 0x58
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	200003e4 	.word	0x200003e4
 8001dc8:	40010000 	.word	0x40010000

08001dcc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08e      	sub	sp, #56	@ 0x38
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dd2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de0:	f107 0320 	add.w	r3, r7, #32
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
 8001df8:	615a      	str	r2, [r3, #20]
 8001dfa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dfc:	4b32      	ldr	r3, [pc, #200]	@ (8001ec8 <MX_TIM2_Init+0xfc>)
 8001dfe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = PRESCALER_VALUE - 1;
 8001e04:	4b30      	ldr	r3, [pc, #192]	@ (8001ec8 <MX_TIM2_Init+0xfc>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ec8 <MX_TIM2_Init+0xfc>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = PWM_PERIOD;
 8001e10:	4b2d      	ldr	r3, [pc, #180]	@ (8001ec8 <MX_TIM2_Init+0xfc>)
 8001e12:	f240 52db 	movw	r2, #1499	@ 0x5db
 8001e16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e18:	4b2b      	ldr	r3, [pc, #172]	@ (8001ec8 <MX_TIM2_Init+0xfc>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ec8 <MX_TIM2_Init+0xfc>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e24:	4828      	ldr	r0, [pc, #160]	@ (8001ec8 <MX_TIM2_Init+0xfc>)
 8001e26:	f005 fd5f 	bl	80078e8 <HAL_TIM_Base_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001e30:	f000 fa64 	bl	80022fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e38:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4821      	ldr	r0, [pc, #132]	@ (8001ec8 <MX_TIM2_Init+0xfc>)
 8001e42:	f005 ff83 	bl	8007d4c <HAL_TIM_ConfigClockSource>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001e4c:	f000 fa56 	bl	80022fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e50:	481d      	ldr	r0, [pc, #116]	@ (8001ec8 <MX_TIM2_Init+0xfc>)
 8001e52:	f005 fd98 	bl	8007986 <HAL_TIM_PWM_Init>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001e5c:	f000 fa4e 	bl	80022fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e60:	2300      	movs	r3, #0
 8001e62:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e64:	2300      	movs	r3, #0
 8001e66:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e68:	f107 0320 	add.w	r3, r7, #32
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4816      	ldr	r0, [pc, #88]	@ (8001ec8 <MX_TIM2_Init+0xfc>)
 8001e70:	f006 fb50 	bl	8008514 <HAL_TIMEx_MasterConfigSynchronization>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001e7a:	f000 fa3f 	bl	80022fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e7e:	2360      	movs	r3, #96	@ 0x60
 8001e80:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e8e:	1d3b      	adds	r3, r7, #4
 8001e90:	2204      	movs	r2, #4
 8001e92:	4619      	mov	r1, r3
 8001e94:	480c      	ldr	r0, [pc, #48]	@ (8001ec8 <MX_TIM2_Init+0xfc>)
 8001e96:	f005 fe97 	bl	8007bc8 <HAL_TIM_PWM_ConfigChannel>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001ea0:	f000 fa2c 	bl	80022fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ea4:	1d3b      	adds	r3, r7, #4
 8001ea6:	2208      	movs	r2, #8
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4807      	ldr	r0, [pc, #28]	@ (8001ec8 <MX_TIM2_Init+0xfc>)
 8001eac:	f005 fe8c 	bl	8007bc8 <HAL_TIM_PWM_ConfigChannel>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001eb6:	f000 fa21 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001eba:	4803      	ldr	r0, [pc, #12]	@ (8001ec8 <MX_TIM2_Init+0xfc>)
 8001ebc:	f001 fef0 	bl	8003ca0 <HAL_TIM_MspPostInit>

}
 8001ec0:	bf00      	nop
 8001ec2:	3738      	adds	r7, #56	@ 0x38
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	2000042c 	.word	0x2000042c

08001ecc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08e      	sub	sp, #56	@ 0x38
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ed2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	605a      	str	r2, [r3, #4]
 8001edc:	609a      	str	r2, [r3, #8]
 8001ede:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee0:	f107 0320 	add.w	r3, r7, #32
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eea:	1d3b      	adds	r3, r7, #4
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
 8001ef8:	615a      	str	r2, [r3, #20]
 8001efa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001efc:	4b32      	ldr	r3, [pc, #200]	@ (8001fc8 <MX_TIM3_Init+0xfc>)
 8001efe:	4a33      	ldr	r2, [pc, #204]	@ (8001fcc <MX_TIM3_Init+0x100>)
 8001f00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = PRESCALER_VALUE - 1;
 8001f02:	4b31      	ldr	r3, [pc, #196]	@ (8001fc8 <MX_TIM3_Init+0xfc>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f08:	4b2f      	ldr	r3, [pc, #188]	@ (8001fc8 <MX_TIM3_Init+0xfc>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = PWM_PERIOD;
 8001f0e:	4b2e      	ldr	r3, [pc, #184]	@ (8001fc8 <MX_TIM3_Init+0xfc>)
 8001f10:	f240 52db 	movw	r2, #1499	@ 0x5db
 8001f14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f16:	4b2c      	ldr	r3, [pc, #176]	@ (8001fc8 <MX_TIM3_Init+0xfc>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001fc8 <MX_TIM3_Init+0xfc>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f22:	4829      	ldr	r0, [pc, #164]	@ (8001fc8 <MX_TIM3_Init+0xfc>)
 8001f24:	f005 fce0 	bl	80078e8 <HAL_TIM_Base_Init>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001f2e:	f000 f9e5 	bl	80022fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f36:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f38:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4822      	ldr	r0, [pc, #136]	@ (8001fc8 <MX_TIM3_Init+0xfc>)
 8001f40:	f005 ff04 	bl	8007d4c <HAL_TIM_ConfigClockSource>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001f4a:	f000 f9d7 	bl	80022fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f4e:	481e      	ldr	r0, [pc, #120]	@ (8001fc8 <MX_TIM3_Init+0xfc>)
 8001f50:	f005 fd19 	bl	8007986 <HAL_TIM_PWM_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001f5a:	f000 f9cf 	bl	80022fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f66:	f107 0320 	add.w	r3, r7, #32
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4816      	ldr	r0, [pc, #88]	@ (8001fc8 <MX_TIM3_Init+0xfc>)
 8001f6e:	f006 fad1 	bl	8008514 <HAL_TIMEx_MasterConfigSynchronization>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001f78:	f000 f9c0 	bl	80022fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f7c:	2360      	movs	r3, #96	@ 0x60
 8001f7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	2200      	movs	r2, #0
 8001f90:	4619      	mov	r1, r3
 8001f92:	480d      	ldr	r0, [pc, #52]	@ (8001fc8 <MX_TIM3_Init+0xfc>)
 8001f94:	f005 fe18 	bl	8007bc8 <HAL_TIM_PWM_ConfigChannel>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001f9e:	f000 f9ad 	bl	80022fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	2204      	movs	r2, #4
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4807      	ldr	r0, [pc, #28]	@ (8001fc8 <MX_TIM3_Init+0xfc>)
 8001faa:	f005 fe0d 	bl	8007bc8 <HAL_TIM_PWM_ConfigChannel>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001fb4:	f000 f9a2 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001fb8:	4803      	ldr	r0, [pc, #12]	@ (8001fc8 <MX_TIM3_Init+0xfc>)
 8001fba:	f001 fe71 	bl	8003ca0 <HAL_TIM_MspPostInit>

}
 8001fbe:	bf00      	nop
 8001fc0:	3738      	adds	r7, #56	@ 0x38
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000474 	.word	0x20000474
 8001fcc:	40000400 	.word	0x40000400

08001fd0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b096      	sub	sp, #88	@ 0x58
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fd6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	605a      	str	r2, [r3, #4]
 8001fe0:	609a      	str	r2, [r3, #8]
 8001fe2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	60da      	str	r2, [r3, #12]
 8001ffc:	611a      	str	r2, [r3, #16]
 8001ffe:	615a      	str	r2, [r3, #20]
 8002000:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002002:	1d3b      	adds	r3, r7, #4
 8002004:	2220      	movs	r2, #32
 8002006:	2100      	movs	r1, #0
 8002008:	4618      	mov	r0, r3
 800200a:	f00b fe0b 	bl	800dc24 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800200e:	4b50      	ldr	r3, [pc, #320]	@ (8002150 <MX_TIM8_Init+0x180>)
 8002010:	4a50      	ldr	r2, [pc, #320]	@ (8002154 <MX_TIM8_Init+0x184>)
 8002012:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = PRESCALER_VALUE - 1;
 8002014:	4b4e      	ldr	r3, [pc, #312]	@ (8002150 <MX_TIM8_Init+0x180>)
 8002016:	2200      	movs	r2, #0
 8002018:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201a:	4b4d      	ldr	r3, [pc, #308]	@ (8002150 <MX_TIM8_Init+0x180>)
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = PWM_PERIOD;
 8002020:	4b4b      	ldr	r3, [pc, #300]	@ (8002150 <MX_TIM8_Init+0x180>)
 8002022:	f240 52db 	movw	r2, #1499	@ 0x5db
 8002026:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002028:	4b49      	ldr	r3, [pc, #292]	@ (8002150 <MX_TIM8_Init+0x180>)
 800202a:	2200      	movs	r2, #0
 800202c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800202e:	4b48      	ldr	r3, [pc, #288]	@ (8002150 <MX_TIM8_Init+0x180>)
 8002030:	2200      	movs	r2, #0
 8002032:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002034:	4b46      	ldr	r3, [pc, #280]	@ (8002150 <MX_TIM8_Init+0x180>)
 8002036:	2200      	movs	r2, #0
 8002038:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800203a:	4845      	ldr	r0, [pc, #276]	@ (8002150 <MX_TIM8_Init+0x180>)
 800203c:	f005 fc54 	bl	80078e8 <HAL_TIM_Base_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002046:	f000 f959 	bl	80022fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800204a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800204e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002050:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002054:	4619      	mov	r1, r3
 8002056:	483e      	ldr	r0, [pc, #248]	@ (8002150 <MX_TIM8_Init+0x180>)
 8002058:	f005 fe78 	bl	8007d4c <HAL_TIM_ConfigClockSource>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002062:	f000 f94b 	bl	80022fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002066:	483a      	ldr	r0, [pc, #232]	@ (8002150 <MX_TIM8_Init+0x180>)
 8002068:	f005 fc8d 	bl	8007986 <HAL_TIM_PWM_Init>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002072:	f000 f943 	bl	80022fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002076:	2300      	movs	r3, #0
 8002078:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800207a:	2300      	movs	r3, #0
 800207c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800207e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002082:	4619      	mov	r1, r3
 8002084:	4832      	ldr	r0, [pc, #200]	@ (8002150 <MX_TIM8_Init+0x180>)
 8002086:	f006 fa45 	bl	8008514 <HAL_TIMEx_MasterConfigSynchronization>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002090:	f000 f934 	bl	80022fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002094:	2360      	movs	r3, #96	@ 0x60
 8002096:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800209c:	2300      	movs	r3, #0
 800209e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020a0:	2300      	movs	r3, #0
 80020a2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020a8:	2300      	movs	r3, #0
 80020aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020ac:	2300      	movs	r3, #0
 80020ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020b4:	2200      	movs	r2, #0
 80020b6:	4619      	mov	r1, r3
 80020b8:	4825      	ldr	r0, [pc, #148]	@ (8002150 <MX_TIM8_Init+0x180>)
 80020ba:	f005 fd85 	bl	8007bc8 <HAL_TIM_PWM_ConfigChannel>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80020c4:	f000 f91a 	bl	80022fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020cc:	2204      	movs	r2, #4
 80020ce:	4619      	mov	r1, r3
 80020d0:	481f      	ldr	r0, [pc, #124]	@ (8002150 <MX_TIM8_Init+0x180>)
 80020d2:	f005 fd79 	bl	8007bc8 <HAL_TIM_PWM_ConfigChannel>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80020dc:	f000 f90e 	bl	80022fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020e4:	2208      	movs	r2, #8
 80020e6:	4619      	mov	r1, r3
 80020e8:	4819      	ldr	r0, [pc, #100]	@ (8002150 <MX_TIM8_Init+0x180>)
 80020ea:	f005 fd6d 	bl	8007bc8 <HAL_TIM_PWM_ConfigChannel>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 80020f4:	f000 f902 	bl	80022fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020fc:	220c      	movs	r2, #12
 80020fe:	4619      	mov	r1, r3
 8002100:	4813      	ldr	r0, [pc, #76]	@ (8002150 <MX_TIM8_Init+0x180>)
 8002102:	f005 fd61 	bl	8007bc8 <HAL_TIM_PWM_ConfigChannel>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 800210c:	f000 f8f6 	bl	80022fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002114:	2300      	movs	r3, #0
 8002116:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002118:	2300      	movs	r3, #0
 800211a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002124:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002128:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800212a:	2300      	movs	r3, #0
 800212c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800212e:	1d3b      	adds	r3, r7, #4
 8002130:	4619      	mov	r1, r3
 8002132:	4807      	ldr	r0, [pc, #28]	@ (8002150 <MX_TIM8_Init+0x180>)
 8002134:	f006 fa6a 	bl	800860c <HAL_TIMEx_ConfigBreakDeadTime>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 800213e:	f000 f8dd 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002142:	4803      	ldr	r0, [pc, #12]	@ (8002150 <MX_TIM8_Init+0x180>)
 8002144:	f001 fdac 	bl	8003ca0 <HAL_TIM_MspPostInit>

}
 8002148:	bf00      	nop
 800214a:	3758      	adds	r7, #88	@ 0x58
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	200004bc 	.word	0x200004bc
 8002154:	40010400 	.word	0x40010400

08002158 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800215c:	4b11      	ldr	r3, [pc, #68]	@ (80021a4 <MX_USART2_UART_Init+0x4c>)
 800215e:	4a12      	ldr	r2, [pc, #72]	@ (80021a8 <MX_USART2_UART_Init+0x50>)
 8002160:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002162:	4b10      	ldr	r3, [pc, #64]	@ (80021a4 <MX_USART2_UART_Init+0x4c>)
 8002164:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002168:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800216a:	4b0e      	ldr	r3, [pc, #56]	@ (80021a4 <MX_USART2_UART_Init+0x4c>)
 800216c:	2200      	movs	r2, #0
 800216e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002170:	4b0c      	ldr	r3, [pc, #48]	@ (80021a4 <MX_USART2_UART_Init+0x4c>)
 8002172:	2200      	movs	r2, #0
 8002174:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002176:	4b0b      	ldr	r3, [pc, #44]	@ (80021a4 <MX_USART2_UART_Init+0x4c>)
 8002178:	2200      	movs	r2, #0
 800217a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800217c:	4b09      	ldr	r3, [pc, #36]	@ (80021a4 <MX_USART2_UART_Init+0x4c>)
 800217e:	220c      	movs	r2, #12
 8002180:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002182:	4b08      	ldr	r3, [pc, #32]	@ (80021a4 <MX_USART2_UART_Init+0x4c>)
 8002184:	2200      	movs	r2, #0
 8002186:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002188:	4b06      	ldr	r3, [pc, #24]	@ (80021a4 <MX_USART2_UART_Init+0x4c>)
 800218a:	2200      	movs	r2, #0
 800218c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800218e:	4805      	ldr	r0, [pc, #20]	@ (80021a4 <MX_USART2_UART_Init+0x4c>)
 8002190:	f006 fa8e 	bl	80086b0 <HAL_UART_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800219a:	f000 f8af 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000504 	.word	0x20000504
 80021a8:	40004400 	.word	0x40004400

080021ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	607b      	str	r3, [r7, #4]
 80021b6:	4b14      	ldr	r3, [pc, #80]	@ (8002208 <MX_DMA_Init+0x5c>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	4a13      	ldr	r2, [pc, #76]	@ (8002208 <MX_DMA_Init+0x5c>)
 80021bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021c2:	4b11      	ldr	r3, [pc, #68]	@ (8002208 <MX_DMA_Init+0x5c>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021ca:	607b      	str	r3, [r7, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2105      	movs	r1, #5
 80021d2:	200b      	movs	r0, #11
 80021d4:	f002 fbd9 	bl	800498a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80021d8:	200b      	movs	r0, #11
 80021da:	f002 fbf2 	bl	80049c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2105      	movs	r1, #5
 80021e2:	2011      	movs	r0, #17
 80021e4:	f002 fbd1 	bl	800498a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80021e8:	2011      	movs	r0, #17
 80021ea:	f002 fbea 	bl	80049c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80021ee:	2200      	movs	r2, #0
 80021f0:	2105      	movs	r1, #5
 80021f2:	202f      	movs	r0, #47	@ 0x2f
 80021f4:	f002 fbc9 	bl	800498a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80021f8:	202f      	movs	r0, #47	@ 0x2f
 80021fa:	f002 fbe2 	bl	80049c2 <HAL_NVIC_EnableIRQ>

}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800

0800220c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08a      	sub	sp, #40	@ 0x28
 8002210:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002212:	f107 0314 	add.w	r3, r7, #20
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	605a      	str	r2, [r3, #4]
 800221c:	609a      	str	r2, [r3, #8]
 800221e:	60da      	str	r2, [r3, #12]
 8002220:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	4b32      	ldr	r3, [pc, #200]	@ (80022f0 <MX_GPIO_Init+0xe4>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222a:	4a31      	ldr	r2, [pc, #196]	@ (80022f0 <MX_GPIO_Init+0xe4>)
 800222c:	f043 0304 	orr.w	r3, r3, #4
 8002230:	6313      	str	r3, [r2, #48]	@ 0x30
 8002232:	4b2f      	ldr	r3, [pc, #188]	@ (80022f0 <MX_GPIO_Init+0xe4>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	613b      	str	r3, [r7, #16]
 800223c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	4b2b      	ldr	r3, [pc, #172]	@ (80022f0 <MX_GPIO_Init+0xe4>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	4a2a      	ldr	r2, [pc, #168]	@ (80022f0 <MX_GPIO_Init+0xe4>)
 8002248:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800224c:	6313      	str	r3, [r2, #48]	@ 0x30
 800224e:	4b28      	ldr	r3, [pc, #160]	@ (80022f0 <MX_GPIO_Init+0xe4>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	4b24      	ldr	r3, [pc, #144]	@ (80022f0 <MX_GPIO_Init+0xe4>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	4a23      	ldr	r2, [pc, #140]	@ (80022f0 <MX_GPIO_Init+0xe4>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	6313      	str	r3, [r2, #48]	@ 0x30
 800226a:	4b21      	ldr	r3, [pc, #132]	@ (80022f0 <MX_GPIO_Init+0xe4>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	60bb      	str	r3, [r7, #8]
 8002274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	607b      	str	r3, [r7, #4]
 800227a:	4b1d      	ldr	r3, [pc, #116]	@ (80022f0 <MX_GPIO_Init+0xe4>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	4a1c      	ldr	r2, [pc, #112]	@ (80022f0 <MX_GPIO_Init+0xe4>)
 8002280:	f043 0302 	orr.w	r3, r3, #2
 8002284:	6313      	str	r3, [r2, #48]	@ 0x30
 8002286:	4b1a      	ldr	r3, [pc, #104]	@ (80022f0 <MX_GPIO_Init+0xe4>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	607b      	str	r3, [r7, #4]
 8002290:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8002292:	2200      	movs	r2, #0
 8002294:	f243 0106 	movw	r1, #12294	@ 0x3006
 8002298:	4816      	ldr	r0, [pc, #88]	@ (80022f4 <MX_GPIO_Init+0xe8>)
 800229a:	f003 f8b1 	bl	8005400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800229e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022a4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80022a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ae:	f107 0314 	add.w	r3, r7, #20
 80022b2:	4619      	mov	r1, r3
 80022b4:	4810      	ldr	r0, [pc, #64]	@ (80022f8 <MX_GPIO_Init+0xec>)
 80022b6:	f002 ff0f 	bl	80050d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13;
 80022ba:	f243 0306 	movw	r3, #12294	@ 0x3006
 80022be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c0:	2301      	movs	r3, #1
 80022c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c8:	2300      	movs	r3, #0
 80022ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022cc:	f107 0314 	add.w	r3, r7, #20
 80022d0:	4619      	mov	r1, r3
 80022d2:	4808      	ldr	r0, [pc, #32]	@ (80022f4 <MX_GPIO_Init+0xe8>)
 80022d4:	f002 ff00 	bl	80050d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80022d8:	2200      	movs	r2, #0
 80022da:	2105      	movs	r1, #5
 80022dc:	2028      	movs	r0, #40	@ 0x28
 80022de:	f002 fb54 	bl	800498a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80022e2:	2028      	movs	r0, #40	@ 0x28
 80022e4:	f002 fb6d 	bl	80049c2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022e8:	bf00      	nop
 80022ea:	3728      	adds	r7, #40	@ 0x28
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40020400 	.word	0x40020400
 80022f8:	40020800 	.word	0x40020800

080022fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002300:	b672      	cpsid	i
}
 8002302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002304:	bf00      	nop
 8002306:	e7fd      	b.n	8002304 <Error_Handler+0x8>

08002308 <pwmInit>:
#include "motorControlPID.h"
#include "save_pitch_roll.h"
#include "math.h"


void pwmInit(void) {
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, MOTOR_PITCH_PWM_PIN_UL);
 800230c:	2108      	movs	r1, #8
 800230e:	480c      	ldr	r0, [pc, #48]	@ (8002340 <pwmInit+0x38>)
 8002310:	f005 fb92 	bl	8007a38 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, MOTOR_PITCH_PWM_PIN_UH);
 8002314:	2104      	movs	r1, #4
 8002316:	480a      	ldr	r0, [pc, #40]	@ (8002340 <pwmInit+0x38>)
 8002318:	f005 fb8e 	bl	8007a38 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, MOTOR_PITCH_PWM_PIN_VL);
 800231c:	2100      	movs	r1, #0
 800231e:	4809      	ldr	r0, [pc, #36]	@ (8002344 <pwmInit+0x3c>)
 8002320:	f005 fb8a 	bl	8007a38 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, MOTOR_PITCH_PWM_PIN_VH);
 8002324:	2104      	movs	r1, #4
 8002326:	4807      	ldr	r0, [pc, #28]	@ (8002344 <pwmInit+0x3c>)
 8002328:	f005 fb86 	bl	8007a38 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, MOTOR_PITCH_PWM_PIN_WL);
 800232c:	2108      	movs	r1, #8
 800232e:	4805      	ldr	r0, [pc, #20]	@ (8002344 <pwmInit+0x3c>)
 8002330:	f005 fb82 	bl	8007a38 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, MOTOR_PITCH_PWM_PIN_WH);
 8002334:	210c      	movs	r1, #12
 8002336:	4803      	ldr	r0, [pc, #12]	@ (8002344 <pwmInit+0x3c>)
 8002338:	f005 fb7e 	bl	8007a38 <HAL_TIM_PWM_Start>
}
 800233c:	bf00      	nop
 800233e:	bd80      	pop	{r7, pc}
 8002340:	2000042c 	.word	0x2000042c
 8002344:	200003e4 	.word	0x200003e4

08002348 <pidInit>:

void pidInit(motorControlPID *motorControlPID, float kp, float kd, float ki) {
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	ed87 0a02 	vstr	s0, [r7, #8]
 8002354:	edc7 0a01 	vstr	s1, [r7, #4]
 8002358:	ed87 1a00 	vstr	s2, [r7]
	motorControlPID->current_position = 0;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
	motorControlPID->error = 0;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	61da      	str	r2, [r3, #28]
	motorControlPID->proportional = 0;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	625a      	str	r2, [r3, #36]	@ 0x24
	motorControlPID->integral = 0;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f04f 0200 	mov.w	r2, #0
 800237a:	629a      	str	r2, [r3, #40]	@ 0x28
	motorControlPID->integral_term = 0;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	631a      	str	r2, [r3, #48]	@ 0x30
	motorControlPID->derivative = 0;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	62da      	str	r2, [r3, #44]	@ 0x2c
	motorControlPID->derivative_term = 0;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	635a      	str	r2, [r3, #52]	@ 0x34
	motorControlPID->control_output = 0;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	639a      	str	r2, [r3, #56]	@ 0x38
	motorControlPID->phase = 0;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	60da      	str	r2, [r3, #12]
	motorControlPID->previous_error = 0;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	621a      	str	r2, [r3, #32]

	motorControlPID->kp = kp;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	611a      	str	r2, [r3, #16]
	motorControlPID->kd = kd;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	619a      	str	r2, [r3, #24]
	motorControlPID->ki = ki;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	615a      	str	r2, [r3, #20]
}
 80023be:	bf00      	nop
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
	...

080023cc <controlLoop>:

void controlLoop(motorControlPID *motorControlPID, uint8_t motor_pitch_roll)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	70fb      	strb	r3, [r7, #3]
    // Calculate error
	motorControlPID->error = motorControlPID->target_position - motorControlPID->current_position;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	ed93 7a01 	vldr	s14, [r3, #4]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	edd3 7a00 	vldr	s15, [r3]
 80023e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	edc3 7a07 	vstr	s15, [r3, #28]
//	printf("%.2f %.2f\r\n", motorControlPID->target_position, motorControlPID->current_position);
    // Check if the position is reached
    if (fabs(motorControlPID->error) < 0.01f) { // Error threshold
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	edd3 7a07 	vldr	s15, [r3, #28]
 80023f4:	eef0 7ae7 	vabs.f32	s15, s15
 80023f8:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8002540 <controlLoop+0x174>
 80023fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002404:	d504      	bpl.n	8002410 <controlLoop+0x44>
    	motorControlPID->position_reached = 1; // Mark position as stabilized
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800240c:	609a      	str	r2, [r3, #8]
 800240e:	e003      	b.n	8002418 <controlLoop+0x4c>
    } else {
    	motorControlPID->position_reached = 0; // Motor is still moving
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f04f 0200 	mov.w	r2, #0
 8002416:	609a      	str	r2, [r3, #8]
    }

    // PID control
    motorControlPID->proportional = motorControlPID->kp * motorControlPID->error;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	ed93 7a04 	vldr	s14, [r3, #16]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	edd3 7a07 	vldr	s15, [r3, #28]
 8002424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    motorControlPID->integral += motorControlPID->error;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	edd3 7a07 	vldr	s15, [r3, #28]
 800243a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    motorControlPID->integral_term = motorControlPID->ki * motorControlPID->integral;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	ed93 7a05 	vldr	s14, [r3, #20]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

    motorControlPID->derivative = motorControlPID->error - motorControlPID->previous_error;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	edd3 7a08 	vldr	s15, [r3, #32]
 8002466:	ee77 7a67 	vsub.f32	s15, s14, s15
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    motorControlPID->derivative_term = motorControlPID->kd * motorControlPID->derivative;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	ed93 7a06 	vldr	s14, [r3, #24]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800247c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

    motorControlPID->control_output = motorControlPID->proportional + motorControlPID->integral_term;// + motorControlPID->derivative_term;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

    // Update motor phase
    motorControlPID->phase += motorControlPID->control_output; // Adjust phase based on control output
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	ed93 7a03 	vldr	s14, [r3, #12]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80024a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	edc3 7a03 	vstr	s15, [r3, #12]
    if (motorControlPID->phase >= TWO_PI) {
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80024b8:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002544 <controlLoop+0x178>
 80024bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c4:	db0a      	blt.n	80024dc <controlLoop+0x110>
    	motorControlPID->phase -= TWO_PI;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80024cc:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8002544 <controlLoop+0x178>
 80024d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	edc3 7a03 	vstr	s15, [r3, #12]
 80024da:	e011      	b.n	8002500 <controlLoop+0x134>
    } else if (motorControlPID->phase < 0.0f) {
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	edd3 7a03 	vldr	s15, [r3, #12]
 80024e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ea:	d509      	bpl.n	8002500 <controlLoop+0x134>
    	motorControlPID->phase += TWO_PI;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80024f2:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002544 <controlLoop+0x178>
 80024f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	edc3 7a03 	vstr	s15, [r3, #12]
    }
    // Apply PWM signal
    setPWMDutyCyclePosition(motorControlPID->phase, motor_pitch_roll);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	edd3 7a03 	vldr	s15, [r3, #12]
 8002506:	78fb      	ldrb	r3, [r7, #3]
 8002508:	4618      	mov	r0, r3
 800250a:	eeb0 0a67 	vmov.f32	s0, s15
 800250e:	f000 f81b 	bl	8002548 <setPWMDutyCyclePosition>

    // Update current position (simulated, replace with actual feedback if available)
    motorControlPID->current_position += motorControlPID->control_output / MOTOR_POLE_PAIRS;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	ed93 7a00 	vldr	s14, [r3]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 800251e:	eeb1 6a0c 	vmov.f32	s12, #28	@ 0x40e00000  7.0
 8002522:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002526:	ee77 7a27 	vadd.f32	s15, s14, s15
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	edc3 7a00 	vstr	s15, [r3]

    // Store previous error
    motorControlPID->previous_error = motorControlPID->error;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69da      	ldr	r2, [r3, #28]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	621a      	str	r2, [r3, #32]
}
 8002538:	bf00      	nop
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	3c23d70a 	.word	0x3c23d70a
 8002544:	40c90fdb 	.word	0x40c90fdb

08002548 <setPWMDutyCyclePosition>:

void setPWMDutyCyclePosition(float electrical_angle, uint8_t motor_pitch_roll) {
 8002548:	b580      	push	{r7, lr}
 800254a:	ed2d 8b02 	vpush	{d8}
 800254e:	b08a      	sub	sp, #40	@ 0x28
 8002550:	af00      	add	r7, sp, #0
 8002552:	ed87 0a01 	vstr	s0, [r7, #4]
 8002556:	4603      	mov	r3, r0
 8002558:	70fb      	strb	r3, [r7, #3]
	   //Calculate sine values for each phase
//     float sin_u = 0.5f + 0.5f * sinf(electrical_angle);                // Phase U
//     float sin_v = 0.5f + 0.5f * sinf(electrical_angle - TWO_PI / 3.0); // Phase V
//     float sin_w = 0.5f + 0.5f * sinf(electrical_angle + TWO_PI / 3.0); // Phase W

    float amplitude = 1.0f; // Normalized amplitude (scale as needed)
 800255a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800255e:	627b      	str	r3, [r7, #36]	@ 0x24
    float sin3_alpha = sinf(3 * electrical_angle);
 8002560:	edd7 7a01 	vldr	s15, [r7, #4]
 8002564:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8002568:	ee67 7a87 	vmul.f32	s15, s15, s14
 800256c:	eeb0 0a67 	vmov.f32	s0, s15
 8002570:	f00d fb34 	bl	800fbdc <sinf>
 8002574:	ed87 0a08 	vstr	s0, [r7, #32]

    // Calculate PWM values for each phase
    float sin_u = (1 / sqrtf(3)) * amplitude * (sinf(electrical_angle) + (1.0f / 6.0f) * sin3_alpha) + 0.5f;
 8002578:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800257c:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 80026dc <setPWMDutyCyclePosition+0x194>
 8002580:	ee27 8a87 	vmul.f32	s16, s15, s14
 8002584:	ed97 0a01 	vldr	s0, [r7, #4]
 8002588:	f00d fb28 	bl	800fbdc <sinf>
 800258c:	eeb0 7a40 	vmov.f32	s14, s0
 8002590:	edd7 7a08 	vldr	s15, [r7, #32]
 8002594:	eddf 6a52 	vldr	s13, [pc, #328]	@ 80026e0 <setPWMDutyCyclePosition+0x198>
 8002598:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800259c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025a0:	ee68 7a27 	vmul.f32	s15, s16, s15
 80025a4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80025a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025ac:	edc7 7a07 	vstr	s15, [r7, #28]
    float sin_v = (1 / sqrtf(3)) * amplitude * (sinf(electrical_angle - TWO_PI / 3.0) + (1.0f / 6.0f) * sin3_alpha) + 0.5f;
 80025b0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80025b4:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80026dc <setPWMDutyCyclePosition+0x194>
 80025b8:	ee27 8a87 	vmul.f32	s16, s15, s14
 80025bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80025c0:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80026e4 <setPWMDutyCyclePosition+0x19c>
 80025c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80025c8:	eeb0 0a67 	vmov.f32	s0, s15
 80025cc:	f00d fb06 	bl	800fbdc <sinf>
 80025d0:	eeb0 7a40 	vmov.f32	s14, s0
 80025d4:	edd7 7a08 	vldr	s15, [r7, #32]
 80025d8:	eddf 6a41 	vldr	s13, [pc, #260]	@ 80026e0 <setPWMDutyCyclePosition+0x198>
 80025dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80025e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025e4:	ee68 7a27 	vmul.f32	s15, s16, s15
 80025e8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80025ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025f0:	edc7 7a06 	vstr	s15, [r7, #24]
    float sin_w = (1 / sqrtf(3)) * amplitude * (sinf(electrical_angle + TWO_PI / 3.0) + (1.0f / 6.0f) * sin3_alpha) + 0.5f;
 80025f4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80025f8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80026dc <setPWMDutyCyclePosition+0x194>
 80025fc:	ee27 8a87 	vmul.f32	s16, s15, s14
 8002600:	edd7 7a01 	vldr	s15, [r7, #4]
 8002604:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80026e4 <setPWMDutyCyclePosition+0x19c>
 8002608:	ee77 7a87 	vadd.f32	s15, s15, s14
 800260c:	eeb0 0a67 	vmov.f32	s0, s15
 8002610:	f00d fae4 	bl	800fbdc <sinf>
 8002614:	eeb0 7a40 	vmov.f32	s14, s0
 8002618:	edd7 7a08 	vldr	s15, [r7, #32]
 800261c:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80026e0 <setPWMDutyCyclePosition+0x198>
 8002620:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002628:	ee68 7a27 	vmul.f32	s15, s16, s15
 800262c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002630:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002634:	edc7 7a05 	vstr	s15, [r7, #20]

//    printf("Duty U: %.2f, Duty V: %.2f, Duty W: %.2f\r\n", sin_u, sin_v, sin_w);

    // Convert sine values to PWM duty cycles
    uint16_t duty_u = (uint16_t)(sin_u * PWM_PERIOD);
 8002638:	edd7 7a07 	vldr	s15, [r7, #28]
 800263c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80026e8 <setPWMDutyCyclePosition+0x1a0>
 8002640:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002644:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002648:	ee17 3a90 	vmov	r3, s15
 800264c:	827b      	strh	r3, [r7, #18]
    uint16_t duty_v = (uint16_t)(sin_v * PWM_PERIOD);
 800264e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002652:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80026e8 <setPWMDutyCyclePosition+0x1a0>
 8002656:	ee67 7a87 	vmul.f32	s15, s15, s14
 800265a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800265e:	ee17 3a90 	vmov	r3, s15
 8002662:	823b      	strh	r3, [r7, #16]
    uint16_t duty_w = (uint16_t)(sin_w * PWM_PERIOD);
 8002664:	edd7 7a05 	vldr	s15, [r7, #20]
 8002668:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80026e8 <setPWMDutyCyclePosition+0x1a0>
 800266c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002674:	ee17 3a90 	vmov	r3, s15
 8002678:	81fb      	strh	r3, [r7, #14]

    if (motor_pitch_roll == 0) {
 800267a:	78fb      	ldrb	r3, [r7, #3]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d121      	bne.n	80026c4 <setPWMDutyCyclePosition+0x17c>
		// Set high-side PWM channels
		__HAL_TIM_SET_COMPARE(&htim2, MOTOR_PITCH_PWM_PIN_UH, duty_u); // UH
 8002680:	4b1a      	ldr	r3, [pc, #104]	@ (80026ec <setPWMDutyCyclePosition+0x1a4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	8a7a      	ldrh	r2, [r7, #18]
 8002686:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&htim1, MOTOR_PITCH_PWM_PIN_VH, duty_v); // VH
 8002688:	4b19      	ldr	r3, [pc, #100]	@ (80026f0 <setPWMDutyCyclePosition+0x1a8>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	8a3a      	ldrh	r2, [r7, #16]
 800268e:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&htim1, MOTOR_PITCH_PWM_PIN_WH, duty_w); // WH
 8002690:	4b17      	ldr	r3, [pc, #92]	@ (80026f0 <setPWMDutyCyclePosition+0x1a8>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	89fa      	ldrh	r2, [r7, #14]
 8002696:	641a      	str	r2, [r3, #64]	@ 0x40

		// Set low-side PWM channels
		__HAL_TIM_SET_COMPARE(&htim2, MOTOR_PITCH_PWM_PIN_UL, PWM_PERIOD - duty_u); // UL
 8002698:	8a7b      	ldrh	r3, [r7, #18]
 800269a:	f5c3 639c 	rsb	r3, r3, #1248	@ 0x4e0
 800269e:	3302      	adds	r3, #2
 80026a0:	4a12      	ldr	r2, [pc, #72]	@ (80026ec <setPWMDutyCyclePosition+0x1a4>)
 80026a2:	6812      	ldr	r2, [r2, #0]
 80026a4:	63d3      	str	r3, [r2, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, MOTOR_PITCH_PWM_PIN_VL, PWM_PERIOD - duty_v); // VL
 80026a6:	8a3b      	ldrh	r3, [r7, #16]
 80026a8:	f5c3 639c 	rsb	r3, r3, #1248	@ 0x4e0
 80026ac:	3302      	adds	r3, #2
 80026ae:	4a10      	ldr	r2, [pc, #64]	@ (80026f0 <setPWMDutyCyclePosition+0x1a8>)
 80026b0:	6812      	ldr	r2, [r2, #0]
 80026b2:	6353      	str	r3, [r2, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, MOTOR_PITCH_PWM_PIN_WL, PWM_PERIOD - duty_w); // WL
 80026b4:	89fb      	ldrh	r3, [r7, #14]
 80026b6:	f5c3 639c 	rsb	r3, r3, #1248	@ 0x4e0
 80026ba:	3302      	adds	r3, #2
 80026bc:	4a0c      	ldr	r2, [pc, #48]	@ (80026f0 <setPWMDutyCyclePosition+0x1a8>)
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	63d3      	str	r3, [r2, #60]	@ 0x3c
	} else if (motor_pitch_roll == 1){
		printf("ROLL\r\n");
	}
}
 80026c2:	e005      	b.n	80026d0 <setPWMDutyCyclePosition+0x188>
	} else if (motor_pitch_roll == 1){
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d102      	bne.n	80026d0 <setPWMDutyCyclePosition+0x188>
		printf("ROLL\r\n");
 80026ca:	480a      	ldr	r0, [pc, #40]	@ (80026f4 <setPWMDutyCyclePosition+0x1ac>)
 80026cc:	f00b f996 	bl	800d9fc <puts>
}
 80026d0:	bf00      	nop
 80026d2:	3728      	adds	r7, #40	@ 0x28
 80026d4:	46bd      	mov	sp, r7
 80026d6:	ecbd 8b02 	vpop	{d8}
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	3f13cd3a 	.word	0x3f13cd3a
 80026e0:	3e2aaaab 	.word	0x3e2aaaab
 80026e4:	40060a92 	.word	0x40060a92
 80026e8:	449c4000 	.word	0x449c4000
 80026ec:	2000042c 	.word	0x2000042c
 80026f0:	200003e4 	.word	0x200003e4
 80026f4:	080119d8 	.word	0x080119d8

080026f8 <MPU6050_Init>:

#include "mpu6050.h"
#include "write_printf.h"
#include "main.h"

void MPU6050_Init(void) {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08a      	sub	sp, #40	@ 0x28
 80026fc:	af04      	add	r7, sp, #16
    uint8_t data[2];

    MPU6050_SoftReset();
 80026fe:	f000 fa7b 	bl	8002bf8 <MPU6050_SoftReset>

    HAL_Delay(500);
 8002702:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002706:	f001 fdcf 	bl	80042a8 <HAL_Delay>

    // Wake up the MPU6050 (write 0 to PWR_MGMT_1 register)
    data[0] = 0x6B;  // Register address
 800270a:	236b      	movs	r3, #107	@ 0x6b
 800270c:	733b      	strb	r3, [r7, #12]
    data[1] = 0x00;  // Data to write
 800270e:	2300      	movs	r3, #0
 8002710:	737b      	strb	r3, [r7, #13]
    HAL_StatusTypeDef status;
	status = HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, data, 2, HAL_MAX_DELAY);
 8002712:	f107 020c 	add.w	r2, r7, #12
 8002716:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	2302      	movs	r3, #2
 800271e:	21d0      	movs	r1, #208	@ 0xd0
 8002720:	485e      	ldr	r0, [pc, #376]	@ (800289c <MPU6050_Init+0x1a4>)
 8002722:	f002 ffe3 	bl	80056ec <HAL_I2C_Master_Transmit>
 8002726:	4603      	mov	r3, r0
 8002728:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 800272a:	7dfb      	ldrb	r3, [r7, #23]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00a      	beq.n	8002746 <MPU6050_Init+0x4e>
		uint32_t err = HAL_I2C_GetError(&hi2c1);
 8002730:	485a      	ldr	r0, [pc, #360]	@ (800289c <MPU6050_Init+0x1a4>)
 8002732:	f003 fc05 	bl	8005f40 <HAL_I2C_GetError>
 8002736:	6138      	str	r0, [r7, #16]
		printf("I2C transmit failed, status: %d, error: 0x%08lx\r\n", status, err);
 8002738:	7dfb      	ldrb	r3, [r7, #23]
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	4619      	mov	r1, r3
 800273e:	4858      	ldr	r0, [pc, #352]	@ (80028a0 <MPU6050_Init+0x1a8>)
 8002740:	f00b f8f4 	bl	800d92c <iprintf>
 8002744:	e002      	b.n	800274c <MPU6050_Init+0x54>
	} else {
		printf("I2C transmit succeeded.\r\n");
 8002746:	4857      	ldr	r0, [pc, #348]	@ (80028a4 <MPU6050_Init+0x1ac>)
 8002748:	f00b f958 	bl	800d9fc <puts>
	}

    uint8_t data_config;

    // Set accelerometer range to ±2g
    data_config = 0x00;
 800274c:	2300      	movs	r3, #0
 800274e:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG, 1, &data_config, 1, HAL_MAX_DELAY);
 8002750:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002754:	9302      	str	r3, [sp, #8]
 8002756:	2301      	movs	r3, #1
 8002758:	9301      	str	r3, [sp, #4]
 800275a:	f107 030b 	add.w	r3, r7, #11
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	2301      	movs	r3, #1
 8002762:	221c      	movs	r2, #28
 8002764:	21d0      	movs	r1, #208	@ 0xd0
 8002766:	484d      	ldr	r0, [pc, #308]	@ (800289c <MPU6050_Init+0x1a4>)
 8002768:	f003 f8be 	bl	80058e8 <HAL_I2C_Mem_Write>

    // Set gyroscope range to ±250°/s
    data_config = 0x00;
 800276c:	2300      	movs	r3, #0
 800276e:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG, 1, &data_config, 1, HAL_MAX_DELAY);
 8002770:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002774:	9302      	str	r3, [sp, #8]
 8002776:	2301      	movs	r3, #1
 8002778:	9301      	str	r3, [sp, #4]
 800277a:	f107 030b 	add.w	r3, r7, #11
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	2301      	movs	r3, #1
 8002782:	221b      	movs	r2, #27
 8002784:	21d0      	movs	r1, #208	@ 0xd0
 8002786:	4845      	ldr	r0, [pc, #276]	@ (800289c <MPU6050_Init+0x1a4>)
 8002788:	f003 f8ae 	bl	80058e8 <HAL_I2C_Mem_Write>

    uint8_t config;
    // Set DLPF_CFG to 0x02 (21 Hz accelerometer, 20 Hz gyroscope bandwidth, 1 kHz sample rate)
    config = 0x00;
 800278c:	2300      	movs	r3, #0
 800278e:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, CONFIG, 1, &config, 1, HAL_MAX_DELAY);
 8002790:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002794:	9302      	str	r3, [sp, #8]
 8002796:	2301      	movs	r3, #1
 8002798:	9301      	str	r3, [sp, #4]
 800279a:	f107 030a 	add.w	r3, r7, #10
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	2301      	movs	r3, #1
 80027a2:	221a      	movs	r2, #26
 80027a4:	21d0      	movs	r1, #208	@ 0xd0
 80027a6:	483d      	ldr	r0, [pc, #244]	@ (800289c <MPU6050_Init+0x1a4>)
 80027a8:	f003 f89e 	bl	80058e8 <HAL_I2C_Mem_Write>

    config = 0x00;  // ACCEL_HPF = 0x01 (5 Hz cutoff frequency)
 80027ac:	2300      	movs	r3, #0
 80027ae:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG, 1, &config, 1, HAL_MAX_DELAY);
 80027b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027b4:	9302      	str	r3, [sp, #8]
 80027b6:	2301      	movs	r3, #1
 80027b8:	9301      	str	r3, [sp, #4]
 80027ba:	f107 030a 	add.w	r3, r7, #10
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	2301      	movs	r3, #1
 80027c2:	221c      	movs	r2, #28
 80027c4:	21d0      	movs	r1, #208	@ 0xd0
 80027c6:	4835      	ldr	r0, [pc, #212]	@ (800289c <MPU6050_Init+0x1a4>)
 80027c8:	f003 f88e 	bl	80058e8 <HAL_I2C_Mem_Write>

    // Set sample rate to 100 Hz
    config = 0x00; // 1000 / (1 + 9) = 100 Hz
 80027cc:	2300      	movs	r3, #0
 80027ce:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPRT_DIV, 1, &config, 1, HAL_MAX_DELAY);
 80027d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027d4:	9302      	str	r3, [sp, #8]
 80027d6:	2301      	movs	r3, #1
 80027d8:	9301      	str	r3, [sp, #4]
 80027da:	f107 030a 	add.w	r3, r7, #10
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	2301      	movs	r3, #1
 80027e2:	2219      	movs	r2, #25
 80027e4:	21d0      	movs	r1, #208	@ 0xd0
 80027e6:	482d      	ldr	r0, [pc, #180]	@ (800289c <MPU6050_Init+0x1a4>)
 80027e8:	f003 f87e 	bl	80058e8 <HAL_I2C_Mem_Write>



    uint8_t whoAmI = 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x75, 1, &whoAmI, sizeof(whoAmI), HAL_MAX_DELAY);
 80027f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027f4:	9302      	str	r3, [sp, #8]
 80027f6:	2301      	movs	r3, #1
 80027f8:	9301      	str	r3, [sp, #4]
 80027fa:	f107 0309 	add.w	r3, r7, #9
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	2301      	movs	r3, #1
 8002802:	2275      	movs	r2, #117	@ 0x75
 8002804:	21d0      	movs	r1, #208	@ 0xd0
 8002806:	4825      	ldr	r0, [pc, #148]	@ (800289c <MPU6050_Init+0x1a4>)
 8002808:	f003 f968 	bl	8005adc <HAL_I2C_Mem_Read>
    if (whoAmI != 0x68) {
 800280c:	7a7b      	ldrb	r3, [r7, #9]
 800280e:	2b68      	cmp	r3, #104	@ 0x68
 8002810:	d005      	beq.n	800281e <MPU6050_Init+0x126>
        printf("MPU6050 not detected. WHO_AM_I = 0x%02X\r\n", whoAmI);
 8002812:	7a7b      	ldrb	r3, [r7, #9]
 8002814:	4619      	mov	r1, r3
 8002816:	4824      	ldr	r0, [pc, #144]	@ (80028a8 <MPU6050_Init+0x1b0>)
 8002818:	f00b f888 	bl	800d92c <iprintf>
 800281c:	e004      	b.n	8002828 <MPU6050_Init+0x130>
    } else {
        printf("MPU6050 detected. WHO_AM_I = 0x%02X\r\n", whoAmI);
 800281e:	7a7b      	ldrb	r3, [r7, #9]
 8002820:	4619      	mov	r1, r3
 8002822:	4822      	ldr	r0, [pc, #136]	@ (80028ac <MPU6050_Init+0x1b4>)
 8002824:	f00b f882 	bl	800d92c <iprintf>
    }

    uint8_t fifoConfig, userCtrl, gConfig, sConfig;
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, FIFO_EN, 1, &fifoConfig, 1, HAL_MAX_DELAY);
 8002828:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800282c:	9302      	str	r3, [sp, #8]
 800282e:	2301      	movs	r3, #1
 8002830:	9301      	str	r3, [sp, #4]
 8002832:	f107 0308 	add.w	r3, r7, #8
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	2301      	movs	r3, #1
 800283a:	2223      	movs	r2, #35	@ 0x23
 800283c:	21d0      	movs	r1, #208	@ 0xd0
 800283e:	4817      	ldr	r0, [pc, #92]	@ (800289c <MPU6050_Init+0x1a4>)
 8002840:	f003 f94c 	bl	8005adc <HAL_I2C_Mem_Read>
//    printf("FIFO_EN: 0x%02X\r\n", fifoConfig);

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, USER_CTRL, 1, &userCtrl, 1, HAL_MAX_DELAY);
 8002844:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002848:	9302      	str	r3, [sp, #8]
 800284a:	2301      	movs	r3, #1
 800284c:	9301      	str	r3, [sp, #4]
 800284e:	1dfb      	adds	r3, r7, #7
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	2301      	movs	r3, #1
 8002854:	226a      	movs	r2, #106	@ 0x6a
 8002856:	21d0      	movs	r1, #208	@ 0xd0
 8002858:	4810      	ldr	r0, [pc, #64]	@ (800289c <MPU6050_Init+0x1a4>)
 800285a:	f003 f93f 	bl	8005adc <HAL_I2C_Mem_Read>
//    printf("USER_CTRL: 0x%02X\r\n", userCtrl);

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG, 1, &gConfig, 1, HAL_MAX_DELAY);
 800285e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002862:	9302      	str	r3, [sp, #8]
 8002864:	2301      	movs	r3, #1
 8002866:	9301      	str	r3, [sp, #4]
 8002868:	1dbb      	adds	r3, r7, #6
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	2301      	movs	r3, #1
 800286e:	221c      	movs	r2, #28
 8002870:	21d0      	movs	r1, #208	@ 0xd0
 8002872:	480a      	ldr	r0, [pc, #40]	@ (800289c <MPU6050_Init+0x1a4>)
 8002874:	f003 f932 	bl	8005adc <HAL_I2C_Mem_Read>
//    printf("ACCEL CONFIG: 0x%02X\r\n", gConfig);

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_CONFIG, 1, &sConfig, 1, HAL_MAX_DELAY);
 8002878:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800287c:	9302      	str	r3, [sp, #8]
 800287e:	2301      	movs	r3, #1
 8002880:	9301      	str	r3, [sp, #4]
 8002882:	1d7b      	adds	r3, r7, #5
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	2301      	movs	r3, #1
 8002888:	221b      	movs	r2, #27
 800288a:	21d0      	movs	r1, #208	@ 0xd0
 800288c:	4803      	ldr	r0, [pc, #12]	@ (800289c <MPU6050_Init+0x1a4>)
 800288e:	f003 f925 	bl	8005adc <HAL_I2C_Mem_Read>
//    printf("GYRO CONFIG: 0x%02X\r\n", sConfig);
}
 8002892:	bf00      	nop
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	20000278 	.word	0x20000278
 80028a0:	080119e0 	.word	0x080119e0
 80028a4:	08011a14 	.word	0x08011a14
 80028a8:	08011a30 	.word	0x08011a30
 80028ac:	08011a5c 	.word	0x08011a5c

080028b0 <MPU6050_ReadAll>:

void MPU6050_ReadAll(MPU6050_Data *dataToProcess) {
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08e      	sub	sp, #56	@ 0x38
 80028b4:	af04      	add	r7, sp, #16
 80028b6:	6078      	str	r0, [r7, #4]

    int16_t accelX, accelY, accelZ;
    int16_t gyroX, gyroY, gyroZ;

    // Read 14 bytes starting from register 0x3B
    if (HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, buffer, 14, HAL_MAX_DELAY) == HAL_OK) {
 80028b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	230e      	movs	r3, #14
 80028c0:	9301      	str	r3, [sp, #4]
 80028c2:	f107 030c 	add.w	r3, r7, #12
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	2301      	movs	r3, #1
 80028ca:	223b      	movs	r2, #59	@ 0x3b
 80028cc:	21d0      	movs	r1, #208	@ 0xd0
 80028ce:	4859      	ldr	r0, [pc, #356]	@ (8002a34 <MPU6050_ReadAll+0x184>)
 80028d0:	f003 f904 	bl	8005adc <HAL_I2C_Mem_Read>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d159      	bne.n	800298e <MPU6050_ReadAll+0xde>
        accelX = (int16_t)((buffer[0] << 8) | buffer[1]) - dataToProcess->accelOffsets[0];
 80028da:	7b3b      	ldrb	r3, [r7, #12]
 80028dc:	021b      	lsls	r3, r3, #8
 80028de:	b21a      	sxth	r2, r3
 80028e0:	7b7b      	ldrb	r3, [r7, #13]
 80028e2:	b21b      	sxth	r3, r3
 80028e4:	4313      	orrs	r3, r2
 80028e6:	b21b      	sxth	r3, r3
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	84fb      	strh	r3, [r7, #38]	@ 0x26
        accelY = (int16_t)((buffer[2] << 8) | buffer[3]) - dataToProcess->accelOffsets[1];
 80028f8:	7bbb      	ldrb	r3, [r7, #14]
 80028fa:	021b      	lsls	r3, r3, #8
 80028fc:	b21a      	sxth	r2, r3
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
 8002900:	b21b      	sxth	r3, r3
 8002902:	4313      	orrs	r3, r2
 8002904:	b21b      	sxth	r3, r3
 8002906:	b29a      	uxth	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800290e:	b29b      	uxth	r3, r3
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	b29b      	uxth	r3, r3
 8002914:	84bb      	strh	r3, [r7, #36]	@ 0x24
        accelZ = (int16_t)((buffer[4] << 8) | buffer[5]) - dataToProcess->accelOffsets[2];
 8002916:	7c3b      	ldrb	r3, [r7, #16]
 8002918:	021b      	lsls	r3, r3, #8
 800291a:	b21a      	sxth	r2, r3
 800291c:	7c7b      	ldrb	r3, [r7, #17]
 800291e:	b21b      	sxth	r3, r3
 8002920:	4313      	orrs	r3, r2
 8002922:	b21b      	sxth	r3, r3
 8002924:	b29a      	uxth	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800292c:	b29b      	uxth	r3, r3
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	b29b      	uxth	r3, r3
 8002932:	847b      	strh	r3, [r7, #34]	@ 0x22
        gyroX  = (int16_t)((buffer[8] << 8) | buffer[9]) - dataToProcess->gyroOffsets[0];
 8002934:	7d3b      	ldrb	r3, [r7, #20]
 8002936:	021b      	lsls	r3, r3, #8
 8002938:	b21a      	sxth	r2, r3
 800293a:	7d7b      	ldrb	r3, [r7, #21]
 800293c:	b21b      	sxth	r3, r3
 800293e:	4313      	orrs	r3, r2
 8002940:	b21b      	sxth	r3, r3
 8002942:	b29a      	uxth	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800294a:	b29b      	uxth	r3, r3
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	b29b      	uxth	r3, r3
 8002950:	843b      	strh	r3, [r7, #32]
        gyroY  = (int16_t)((buffer[10] << 8) | buffer[11]) - dataToProcess->gyroOffsets[1];
 8002952:	7dbb      	ldrb	r3, [r7, #22]
 8002954:	021b      	lsls	r3, r3, #8
 8002956:	b21a      	sxth	r2, r3
 8002958:	7dfb      	ldrb	r3, [r7, #23]
 800295a:	b21b      	sxth	r3, r3
 800295c:	4313      	orrs	r3, r2
 800295e:	b21b      	sxth	r3, r3
 8002960:	b29a      	uxth	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002968:	b29b      	uxth	r3, r3
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	b29b      	uxth	r3, r3
 800296e:	83fb      	strh	r3, [r7, #30]
        gyroZ  = (int16_t)((buffer[12] << 8) | buffer[13]) - dataToProcess->gyroOffsets[2];
 8002970:	7e3b      	ldrb	r3, [r7, #24]
 8002972:	021b      	lsls	r3, r3, #8
 8002974:	b21a      	sxth	r2, r3
 8002976:	7e7b      	ldrb	r3, [r7, #25]
 8002978:	b21b      	sxth	r3, r3
 800297a:	4313      	orrs	r3, r2
 800297c:	b21b      	sxth	r3, r3
 800297e:	b29a      	uxth	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8002986:	b29b      	uxth	r3, r3
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	b29b      	uxth	r3, r3
 800298c:	83bb      	strh	r3, [r7, #28]
    } else {
    	//Error handle
    }

    dataToProcess->accelX = accelX / 16384.0f;
 800298e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002992:	ee07 3a90 	vmov	s15, r3
 8002996:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800299a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8002a38 <MPU6050_ReadAll+0x188>
 800299e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	edc3 7a00 	vstr	s15, [r3]
    dataToProcess->accelY = accelY / 16384.0f;
 80029a8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80029ac:	ee07 3a90 	vmov	s15, r3
 80029b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029b4:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8002a38 <MPU6050_ReadAll+0x188>
 80029b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	edc3 7a01 	vstr	s15, [r3, #4]
    dataToProcess->accelZ = accelZ / 16384.0f;
 80029c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80029c6:	ee07 3a90 	vmov	s15, r3
 80029ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029ce:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8002a38 <MPU6050_ReadAll+0x188>
 80029d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	edc3 7a02 	vstr	s15, [r3, #8]

    dataToProcess->gyroX = gyroX / 131.0f;
 80029dc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80029e0:	ee07 3a90 	vmov	s15, r3
 80029e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029e8:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8002a3c <MPU6050_ReadAll+0x18c>
 80029ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	edc3 7a03 	vstr	s15, [r3, #12]
    dataToProcess->gyroY = gyroY / 131.0f;
 80029f6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80029fa:	ee07 3a90 	vmov	s15, r3
 80029fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a02:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8002a3c <MPU6050_ReadAll+0x18c>
 8002a06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	edc3 7a04 	vstr	s15, [r3, #16]
    dataToProcess->gyroZ = gyroZ / 131.0f;
 8002a10:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002a14:	ee07 3a90 	vmov	s15, r3
 8002a18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a1c:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8002a3c <MPU6050_ReadAll+0x18c>
 8002a20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8002a2a:	bf00      	nop
 8002a2c:	3728      	adds	r7, #40	@ 0x28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000278 	.word	0x20000278
 8002a38:	46800000 	.word	0x46800000
 8002a3c:	43030000 	.word	0x43030000

08002a40 <MPU6050_CalibrateExternal>:
    		dataToProcess->gyroOffsets[2]);

    HAL_Delay(2000);
}

void MPU6050_CalibrateExternal(MPU6050_Data *dataToProcess) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
    // Calculate offsets
    MPU6050_CalculateOffsets(dataToProcess->accelOffsets, dataToProcess->gyroOffsets);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f103 0218 	add.w	r2, r3, #24
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	331e      	adds	r3, #30
 8002a52:	4619      	mov	r1, r3
 8002a54:	4610      	mov	r0, r2
 8002a56:	f000 f829 	bl	8002aac <MPU6050_CalculateOffsets>

    // Optional: Print offsets for debugging
    printf("Accel Offsets: X=%d, Y=%d, Z=%d\r\n", dataToProcess->accelOffsets[0], dataToProcess->accelOffsets[1],
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002a60:	4619      	mov	r1, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002a68:	461a      	mov	r2, r3
    		dataToProcess->accelOffsets[2]);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
    printf("Accel Offsets: X=%d, Y=%d, Z=%d\r\n", dataToProcess->accelOffsets[0], dataToProcess->accelOffsets[1],
 8002a70:	480c      	ldr	r0, [pc, #48]	@ (8002aa4 <MPU6050_CalibrateExternal+0x64>)
 8002a72:	f00a ff5b 	bl	800d92c <iprintf>
    printf("Gyro Offsets: X=%d, Y=%d, Z=%d\r\n", dataToProcess->gyroOffsets[0], dataToProcess->gyroOffsets[1],
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002a84:	461a      	mov	r2, r3
    		dataToProcess->gyroOffsets[2]);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
    printf("Gyro Offsets: X=%d, Y=%d, Z=%d\r\n", dataToProcess->gyroOffsets[0], dataToProcess->gyroOffsets[1],
 8002a8c:	4806      	ldr	r0, [pc, #24]	@ (8002aa8 <MPU6050_CalibrateExternal+0x68>)
 8002a8e:	f00a ff4d 	bl	800d92c <iprintf>

    HAL_Delay(2000);
 8002a92:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002a96:	f001 fc07 	bl	80042a8 <HAL_Delay>
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	08011a84 	.word	0x08011a84
 8002aa8:	08011aa8 	.word	0x08011aa8

08002aac <MPU6050_CalculateOffsets>:

void MPU6050_CalculateOffsets(int16_t *accelOffsets, int16_t *gyroOffsets) {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b092      	sub	sp, #72	@ 0x48
 8002ab0:	af04      	add	r7, sp, #16
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
    int32_t accelX_sum = 0, accelY_sum = 0, accelZ_sum = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002aba:	2300      	movs	r3, #0
 8002abc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002abe:	2300      	movs	r3, #0
 8002ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int32_t gyroX_sum = 0, gyroY_sum = 0, gyroZ_sum = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aca:	2300      	movs	r3, #0
 8002acc:	623b      	str	r3, [r7, #32]

    int n = 4000;
 8002ace:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002ad2:	61bb      	str	r3, [r7, #24]

    uint8_t rawData[14];

    for (int i = 0; i < n; i++) {
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61fb      	str	r3, [r7, #28]
 8002ad8:	e056      	b.n	8002b88 <MPU6050_CalculateOffsets+0xdc>
        if (HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, rawData, 14, HAL_MAX_DELAY) == HAL_OK) {
 8002ada:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ade:	9302      	str	r3, [sp, #8]
 8002ae0:	230e      	movs	r3, #14
 8002ae2:	9301      	str	r3, [sp, #4]
 8002ae4:	f107 0308 	add.w	r3, r7, #8
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	2301      	movs	r3, #1
 8002aec:	223b      	movs	r2, #59	@ 0x3b
 8002aee:	21d0      	movs	r1, #208	@ 0xd0
 8002af0:	4840      	ldr	r0, [pc, #256]	@ (8002bf4 <MPU6050_CalculateOffsets+0x148>)
 8002af2:	f002 fff3 	bl	8005adc <HAL_I2C_Mem_Read>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d142      	bne.n	8002b82 <MPU6050_CalculateOffsets+0xd6>
        	accelX_sum += (int16_t)((rawData[0] << 8) | rawData[1]);
 8002afc:	7a3b      	ldrb	r3, [r7, #8]
 8002afe:	021b      	lsls	r3, r3, #8
 8002b00:	b21a      	sxth	r2, r3
 8002b02:	7a7b      	ldrb	r3, [r7, #9]
 8002b04:	b21b      	sxth	r3, r3
 8002b06:	4313      	orrs	r3, r2
 8002b08:	b21b      	sxth	r3, r3
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b0e:	4413      	add	r3, r2
 8002b10:	637b      	str	r3, [r7, #52]	@ 0x34
        	accelY_sum += (int16_t)((rawData[2] << 8) | rawData[3]);
 8002b12:	7abb      	ldrb	r3, [r7, #10]
 8002b14:	021b      	lsls	r3, r3, #8
 8002b16:	b21a      	sxth	r2, r3
 8002b18:	7afb      	ldrb	r3, [r7, #11]
 8002b1a:	b21b      	sxth	r3, r3
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	b21b      	sxth	r3, r3
 8002b20:	461a      	mov	r2, r3
 8002b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b24:	4413      	add	r3, r2
 8002b26:	633b      	str	r3, [r7, #48]	@ 0x30
        	accelZ_sum += (int16_t)((rawData[4] << 8) | rawData[5]) - 16384;
 8002b28:	7b3b      	ldrb	r3, [r7, #12]
 8002b2a:	021b      	lsls	r3, r3, #8
 8002b2c:	b21a      	sxth	r2, r3
 8002b2e:	7b7b      	ldrb	r3, [r7, #13]
 8002b30:	b21b      	sxth	r3, r3
 8002b32:	4313      	orrs	r3, r2
 8002b34:	b21b      	sxth	r3, r3
 8002b36:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8002b3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b3c:	4413      	add	r3, r2
 8002b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        	gyroX_sum  += (int16_t)((rawData[8] << 8) | rawData[9]);
 8002b40:	7c3b      	ldrb	r3, [r7, #16]
 8002b42:	021b      	lsls	r3, r3, #8
 8002b44:	b21a      	sxth	r2, r3
 8002b46:	7c7b      	ldrb	r3, [r7, #17]
 8002b48:	b21b      	sxth	r3, r3
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	b21b      	sxth	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b52:	4413      	add	r3, r2
 8002b54:	62bb      	str	r3, [r7, #40]	@ 0x28
        	gyroY_sum  += (int16_t)((rawData[10] << 8) | rawData[11]);
 8002b56:	7cbb      	ldrb	r3, [r7, #18]
 8002b58:	021b      	lsls	r3, r3, #8
 8002b5a:	b21a      	sxth	r2, r3
 8002b5c:	7cfb      	ldrb	r3, [r7, #19]
 8002b5e:	b21b      	sxth	r3, r3
 8002b60:	4313      	orrs	r3, r2
 8002b62:	b21b      	sxth	r3, r3
 8002b64:	461a      	mov	r2, r3
 8002b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b68:	4413      	add	r3, r2
 8002b6a:	627b      	str	r3, [r7, #36]	@ 0x24
        	gyroZ_sum  += (int16_t)((rawData[12] << 8) | rawData[13]);
 8002b6c:	7d3b      	ldrb	r3, [r7, #20]
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	b21a      	sxth	r2, r3
 8002b72:	7d7b      	ldrb	r3, [r7, #21]
 8002b74:	b21b      	sxth	r3, r3
 8002b76:	4313      	orrs	r3, r2
 8002b78:	b21b      	sxth	r3, r3
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	4413      	add	r3, r2
 8002b80:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < n; i++) {
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	3301      	adds	r3, #1
 8002b86:	61fb      	str	r3, [r7, #28]
 8002b88:	69fa      	ldr	r2, [r7, #28]
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	dba4      	blt.n	8002ada <MPU6050_CalculateOffsets+0x2e>
        	//Error handle
        }
    }

    // Calculate average offsets
    accelOffsets[0] = (accelX_sum / n);
 8002b90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	fb92 f3f3 	sdiv	r3, r2, r3
 8002b98:	b21a      	sxth	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	801a      	strh	r2, [r3, #0]
    accelOffsets[1] = (accelY_sum / n);
 8002b9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	fb92 f2f3 	sdiv	r2, r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3302      	adds	r3, #2
 8002baa:	b212      	sxth	r2, r2
 8002bac:	801a      	strh	r2, [r3, #0]
    accelOffsets[2] = (accelZ_sum / n);
 8002bae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	fb92 f2f3 	sdiv	r2, r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	b212      	sxth	r2, r2
 8002bbc:	801a      	strh	r2, [r3, #0]

    gyroOffsets[0] = (gyroX_sum / n);
 8002bbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8002bc6:	b21a      	sxth	r2, r3
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	801a      	strh	r2, [r3, #0]
    gyroOffsets[1] = (gyroY_sum / n);
 8002bcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	fb92 f2f3 	sdiv	r2, r2, r3
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	3302      	adds	r3, #2
 8002bd8:	b212      	sxth	r2, r2
 8002bda:	801a      	strh	r2, [r3, #0]
    gyroOffsets[2] = (gyroZ_sum / n);
 8002bdc:	6a3a      	ldr	r2, [r7, #32]
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	fb92 f2f3 	sdiv	r2, r2, r3
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	3304      	adds	r3, #4
 8002be8:	b212      	sxth	r2, r2
 8002bea:	801a      	strh	r2, [r3, #0]
}
 8002bec:	bf00      	nop
 8002bee:	3738      	adds	r7, #56	@ 0x38
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	20000278 	.word	0x20000278

08002bf8 <MPU6050_SoftReset>:
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ZG_OFFS_USRH, 1, readBack, 2, HAL_MAX_DELAY);
    writtenOffset = (int16_t)((readBack[0] << 8) | readBack[1]);
    printf("Gyro Z Offset Written: %d\r\n", writtenOffset);
}

void MPU6050_SoftReset(void) {
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af04      	add	r7, sp, #16
    uint8_t data_rst = 0x80; // DEVICE_RESET bit
 8002bfe:	2380      	movs	r3, #128	@ 0x80
 8002c00:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1, 1, &data_rst, sizeof(data_rst), HAL_MAX_DELAY);
 8002c02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c06:	9302      	str	r3, [sp, #8]
 8002c08:	2301      	movs	r3, #1
 8002c0a:	9301      	str	r3, [sp, #4]
 8002c0c:	1dfb      	adds	r3, r7, #7
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	2301      	movs	r3, #1
 8002c12:	226b      	movs	r2, #107	@ 0x6b
 8002c14:	21d0      	movs	r1, #208	@ 0xd0
 8002c16:	482d      	ldr	r0, [pc, #180]	@ (8002ccc <MPU6050_SoftReset+0xd4>)
 8002c18:	f002 fe66 	bl	80058e8 <HAL_I2C_Mem_Write>
    HAL_Delay(1000); // Allow time for the reset to complete
 8002c1c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c20:	f001 fb42 	bl	80042a8 <HAL_Delay>
    uint8_t data[2] = {0x00, 0x00}; // Zero offset
 8002c24:	2300      	movs	r3, #0
 8002c26:	80bb      	strh	r3, [r7, #4]

    // Reset X-axis offset
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, XA_OFFS_H, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8002c28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c2c:	9302      	str	r3, [sp, #8]
 8002c2e:	2302      	movs	r3, #2
 8002c30:	9301      	str	r3, [sp, #4]
 8002c32:	1d3b      	adds	r3, r7, #4
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	2301      	movs	r3, #1
 8002c38:	2206      	movs	r2, #6
 8002c3a:	21d0      	movs	r1, #208	@ 0xd0
 8002c3c:	4823      	ldr	r0, [pc, #140]	@ (8002ccc <MPU6050_SoftReset+0xd4>)
 8002c3e:	f002 fe53 	bl	80058e8 <HAL_I2C_Mem_Write>

    // Reset Y-axis offset
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, YA_OFFS_H, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8002c42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c46:	9302      	str	r3, [sp, #8]
 8002c48:	2302      	movs	r3, #2
 8002c4a:	9301      	str	r3, [sp, #4]
 8002c4c:	1d3b      	adds	r3, r7, #4
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	2301      	movs	r3, #1
 8002c52:	2208      	movs	r2, #8
 8002c54:	21d0      	movs	r1, #208	@ 0xd0
 8002c56:	481d      	ldr	r0, [pc, #116]	@ (8002ccc <MPU6050_SoftReset+0xd4>)
 8002c58:	f002 fe46 	bl	80058e8 <HAL_I2C_Mem_Write>

    // Reset Z-axis offset
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ZA_OFFS_H, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8002c5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c60:	9302      	str	r3, [sp, #8]
 8002c62:	2302      	movs	r3, #2
 8002c64:	9301      	str	r3, [sp, #4]
 8002c66:	1d3b      	adds	r3, r7, #4
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	220a      	movs	r2, #10
 8002c6e:	21d0      	movs	r1, #208	@ 0xd0
 8002c70:	4816      	ldr	r0, [pc, #88]	@ (8002ccc <MPU6050_SoftReset+0xd4>)
 8002c72:	f002 fe39 	bl	80058e8 <HAL_I2C_Mem_Write>

    // Reset X-axis offset
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, XG_OFFS_USRH, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8002c76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c7a:	9302      	str	r3, [sp, #8]
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	1d3b      	adds	r3, r7, #4
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	2301      	movs	r3, #1
 8002c86:	2213      	movs	r2, #19
 8002c88:	21d0      	movs	r1, #208	@ 0xd0
 8002c8a:	4810      	ldr	r0, [pc, #64]	@ (8002ccc <MPU6050_SoftReset+0xd4>)
 8002c8c:	f002 fe2c 	bl	80058e8 <HAL_I2C_Mem_Write>

    // Reset Y-axis offset
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, YG_OFFS_USRH, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8002c90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c94:	9302      	str	r3, [sp, #8]
 8002c96:	2302      	movs	r3, #2
 8002c98:	9301      	str	r3, [sp, #4]
 8002c9a:	1d3b      	adds	r3, r7, #4
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	2215      	movs	r2, #21
 8002ca2:	21d0      	movs	r1, #208	@ 0xd0
 8002ca4:	4809      	ldr	r0, [pc, #36]	@ (8002ccc <MPU6050_SoftReset+0xd4>)
 8002ca6:	f002 fe1f 	bl	80058e8 <HAL_I2C_Mem_Write>

    // Reset Z-axis offset
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ZG_OFFS_USRH, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8002caa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002cae:	9302      	str	r3, [sp, #8]
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	9301      	str	r3, [sp, #4]
 8002cb4:	1d3b      	adds	r3, r7, #4
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	2301      	movs	r3, #1
 8002cba:	2217      	movs	r2, #23
 8002cbc:	21d0      	movs	r1, #208	@ 0xd0
 8002cbe:	4803      	ldr	r0, [pc, #12]	@ (8002ccc <MPU6050_SoftReset+0xd4>)
 8002cc0:	f002 fe12 	bl	80058e8 <HAL_I2C_Mem_Write>

}
 8002cc4:	bf00      	nop
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	20000278 	.word	0x20000278

08002cd0 <DWT_Init>:
#include <unistd.h> // For getcwd
#include <stdlib.h>  // For malloc/free
#include <string.h>
#include "core_cm4.h" // Include appropriate core header file, might differ based on your Cortex version

void DWT_Init(void) {
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
    if (!(DWT->CTRL & DWT_CTRL_CYCCNTENA_Msk)) { // Check if cycle counter is enabled
 8002cd4:	4b09      	ldr	r3, [pc, #36]	@ (8002cfc <DWT_Init+0x2c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d108      	bne.n	8002cf2 <DWT_Init+0x22>
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // Enable cycle counter
 8002ce0:	4b06      	ldr	r3, [pc, #24]	@ (8002cfc <DWT_Init+0x2c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a05      	ldr	r2, [pc, #20]	@ (8002cfc <DWT_Init+0x2c>)
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	6013      	str	r3, [r2, #0]
        DWT->CYCCNT = 0; // Reset the cycle counter
 8002cec:	4b03      	ldr	r3, [pc, #12]	@ (8002cfc <DWT_Init+0x2c>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	605a      	str	r2, [r3, #4]
    }
}
 8002cf2:	bf00      	nop
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	e0001000 	.word	0xe0001000

08002d00 <HAL_GPIO_EXTI_Callback>:
extern UART_HandleTypeDef huart2;
extern DMA_HandleTypeDef hdma_usart2_tx;

motorControlPID motorControlPitch;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	80fb      	strh	r3, [r7, #6]
	static uint32_t last_interrupt_time = 0;
	uint32_t current_time = HAL_GetTick(); // Get current time in ms
 8002d0a:	f001 fac1 	bl	8004290 <HAL_GetTick>
 8002d0e:	60f8      	str	r0, [r7, #12]

	if (GPIO_Pin == GPIO_PIN_13) {
 8002d10:	88fb      	ldrh	r3, [r7, #6]
 8002d12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d16:	d126      	bne.n	8002d66 <HAL_GPIO_EXTI_Callback+0x66>
	    // Write pitch and roll to flash
//		WriteFloatToFlash(motorControlPitch.current_position, PITCH_ADDRESS);
//	    WriteFloatToFlash(kalmanRoll, ROLL_ADDRESS);
		if ((current_time - last_interrupt_time) > 40) { // Debounce time: 50 ms
 8002d18:	4b17      	ldr	r3, [pc, #92]	@ (8002d78 <HAL_GPIO_EXTI_Callback+0x78>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b28      	cmp	r3, #40	@ 0x28
 8002d22:	d91d      	bls.n	8002d60 <HAL_GPIO_EXTI_Callback+0x60>
			motorControlPitch.target_position += 1.57f;
 8002d24:	4b15      	ldr	r3, [pc, #84]	@ (8002d7c <HAL_GPIO_EXTI_Callback+0x7c>)
 8002d26:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d2a:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002d80 <HAL_GPIO_EXTI_Callback+0x80>
 8002d2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d32:	4b12      	ldr	r3, [pc, #72]	@ (8002d7c <HAL_GPIO_EXTI_Callback+0x7c>)
 8002d34:	edc3 7a01 	vstr	s15, [r3, #4]
			if (motorControlPitch.target_position > 4 * 1.57) {
 8002d38:	4b10      	ldr	r3, [pc, #64]	@ (8002d7c <HAL_GPIO_EXTI_Callback+0x7c>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fd fc23 	bl	8000588 <__aeabi_f2d>
 8002d42:	a30b      	add	r3, pc, #44	@ (adr r3, 8002d70 <HAL_GPIO_EXTI_Callback+0x70>)
 8002d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d48:	f7fd ff06 	bl	8000b58 <__aeabi_dcmpgt>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d006      	beq.n	8002d60 <HAL_GPIO_EXTI_Callback+0x60>
				motorControlPitch.current_position = 0;
 8002d52:	4b0a      	ldr	r3, [pc, #40]	@ (8002d7c <HAL_GPIO_EXTI_Callback+0x7c>)
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
				motorControlPitch.target_position = 1.57f;
 8002d5a:	4b08      	ldr	r3, [pc, #32]	@ (8002d7c <HAL_GPIO_EXTI_Callback+0x7c>)
 8002d5c:	4a09      	ldr	r2, [pc, #36]	@ (8002d84 <HAL_GPIO_EXTI_Callback+0x84>)
 8002d5e:	605a      	str	r2, [r3, #4]
			}
		}
		last_interrupt_time = current_time;
 8002d60:	4a05      	ldr	r2, [pc, #20]	@ (8002d78 <HAL_GPIO_EXTI_Callback+0x78>)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6013      	str	r3, [r2, #0]
	}
}
 8002d66:	bf00      	nop
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	51eb851f 	.word	0x51eb851f
 8002d74:	40191eb8 	.word	0x40191eb8
 8002d78:	20000604 	.word	0x20000604
 8002d7c:	200005c8 	.word	0x200005c8
 8002d80:	3fc8f5c3 	.word	0x3fc8f5c3
 8002d84:	3fc8f5c3 	.word	0x3fc8f5c3

08002d88 <mpu6050_ReadData>:

void mpu6050_ReadData(void *argument) {
 8002d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d8c:	b0d0      	sub	sp, #320	@ 0x140
 8002d8e:	af0c      	add	r7, sp, #48	@ 0x30
 8002d90:	6178      	str	r0, [r7, #20]

	uint8_t rawTransmitViaUART = 0;
 8002d92:	2300      	movs	r3, #0
 8002d94:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    MPU6050_Data dataToProcess;
    char buffer[200];

	printf("OLED initialization...\r\n");
 8002d98:	485f      	ldr	r0, [pc, #380]	@ (8002f18 <mpu6050_ReadData+0x190>)
 8002d9a:	f00a fe2f 	bl	800d9fc <puts>
    SSD1306_Init();
 8002d9e:	f000 fb91 	bl	80034c4 <SSD1306_Init>
	printf("OLED initialized\r\n");
 8002da2:	485e      	ldr	r0, [pc, #376]	@ (8002f1c <mpu6050_ReadData+0x194>)
 8002da4:	f00a fe2a 	bl	800d9fc <puts>

	SSD1306_DrawString(14, 28, "MPU6050 loading...", 1);
 8002da8:	2301      	movs	r3, #1
 8002daa:	4a5d      	ldr	r2, [pc, #372]	@ (8002f20 <mpu6050_ReadData+0x198>)
 8002dac:	211c      	movs	r1, #28
 8002dae:	200e      	movs	r0, #14
 8002db0:	f000 fd5a 	bl	8003868 <SSD1306_DrawString>
	SSD1306_UpdateScreen();
 8002db4:	f000 fc66 	bl	8003684 <SSD1306_UpdateScreen>

    MPU6050_Init();
 8002db8:	f7ff fc9e 	bl	80026f8 <MPU6050_Init>
    printf("MPU6050 initialized\r\n");
 8002dbc:	4859      	ldr	r0, [pc, #356]	@ (8002f24 <mpu6050_ReadData+0x19c>)
 8002dbe:	f00a fe1d 	bl	800d9fc <puts>

    printf("MPU6050 calibrating...\r\n");
 8002dc2:	4859      	ldr	r0, [pc, #356]	@ (8002f28 <mpu6050_ReadData+0x1a0>)
 8002dc4:	f00a fe1a 	bl	800d9fc <puts>
    //MPU6050_CalibrateInternal(&dataToProcess);
    MPU6050_CalibrateExternal(&dataToProcess);
 8002dc8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff fe37 	bl	8002a40 <MPU6050_CalibrateExternal>
    printf("MPU6050 calibrated\r\n");
 8002dd2:	4856      	ldr	r0, [pc, #344]	@ (8002f2c <mpu6050_ReadData+0x1a4>)
 8002dd4:	f00a fe12 	bl	800d9fc <puts>

    SSD1306_Clear();
 8002dd8:	f000 fc14 	bl	8003604 <SSD1306_Clear>

    uint32_t tick = osKernelGetTickCount();  // Get the current tick count
 8002ddc:	f006 fa4e 	bl	800927c <osKernelGetTickCount>
 8002de0:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c

    while (1) {
        tick += osKernelGetTickFreq() / 100;  // Calculate next wake time (10ms)
 8002de4:	f006 fa5f 	bl	80092a6 <osKernelGetTickFreq>
 8002de8:	4603      	mov	r3, r0
 8002dea:	4a51      	ldr	r2, [pc, #324]	@ (8002f30 <mpu6050_ReadData+0x1a8>)
 8002dec:	fba2 2303 	umull	r2, r3, r2, r3
 8002df0:	095b      	lsrs	r3, r3, #5
 8002df2:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8002df6:	4413      	add	r3, r2
 8002df8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

        // Read sensor data
        MPU6050_ReadAll(&dataToProcess);
 8002dfc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fd55 	bl	80028b0 <MPU6050_ReadAll>


        if (rawTransmitViaUART) {
 8002e06:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d071      	beq.n	8002ef2 <mpu6050_ReadData+0x16a>
            // Format sensor data
            snprintf(buffer, sizeof(buffer),
                     "Xa=%6.2f Xg=%6.2f Ya=%6.2f Yg=%6.2f Za=%6.2f Zg=%6.2f\r\n",
                     dataToProcess.accelX, dataToProcess.gyroX, dataToProcess.accelY,
 8002e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
            snprintf(buffer, sizeof(buffer),
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fd fbb8 	bl	8000588 <__aeabi_f2d>
 8002e18:	4604      	mov	r4, r0
 8002e1a:	460d      	mov	r5, r1
                     dataToProcess.accelX, dataToProcess.gyroX, dataToProcess.accelY,
 8002e1c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
            snprintf(buffer, sizeof(buffer),
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7fd fbb1 	bl	8000588 <__aeabi_f2d>
 8002e26:	4680      	mov	r8, r0
 8002e28:	4689      	mov	r9, r1
                     dataToProcess.accelX, dataToProcess.gyroX, dataToProcess.accelY,
 8002e2a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
            snprintf(buffer, sizeof(buffer),
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fd fbaa 	bl	8000588 <__aeabi_f2d>
 8002e34:	4682      	mov	sl, r0
 8002e36:	468b      	mov	fp, r1
                     dataToProcess.gyroY, dataToProcess.accelZ, dataToProcess.gyroZ);
 8002e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
            snprintf(buffer, sizeof(buffer),
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fd fba3 	bl	8000588 <__aeabi_f2d>
 8002e42:	e9c7 0102 	strd	r0, r1, [r7, #8]
                     dataToProcess.gyroY, dataToProcess.accelZ, dataToProcess.gyroZ);
 8002e46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
            snprintf(buffer, sizeof(buffer),
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fd fb9c 	bl	8000588 <__aeabi_f2d>
 8002e50:	e9c7 0100 	strd	r0, r1, [r7]
                     dataToProcess.gyroY, dataToProcess.accelZ, dataToProcess.gyroZ);
 8002e54:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
            snprintf(buffer, sizeof(buffer),
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fd fb95 	bl	8000588 <__aeabi_f2d>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	f107 001c 	add.w	r0, r7, #28
 8002e66:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8002e6a:	ed97 7b00 	vldr	d7, [r7]
 8002e6e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002e72:	ed97 7b02 	vldr	d7, [r7, #8]
 8002e76:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002e7a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002e7e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002e82:	e9cd 4500 	strd	r4, r5, [sp]
 8002e86:	4a2b      	ldr	r2, [pc, #172]	@ (8002f34 <mpu6050_ReadData+0x1ac>)
 8002e88:	21c8      	movs	r1, #200	@ 0xc8
 8002e8a:	f00a fdbf 	bl	800da0c <sniprintf>

            // Transmit data over UART
            if (osMutexAcquire(uartMutexHandle, 100) == osOK) {
 8002e8e:	4b2a      	ldr	r3, [pc, #168]	@ (8002f38 <mpu6050_ReadData+0x1b0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2164      	movs	r1, #100	@ 0x64
 8002e94:	4618      	mov	r0, r3
 8002e96:	f006 fb54 	bl	8009542 <osMutexAcquire>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d125      	bne.n	8002eec <mpu6050_ReadData+0x164>
                if (HAL_UART_Transmit_DMA(&huart2, (uint8_t *)buffer, strlen(buffer)) == HAL_OK) {
 8002ea0:	f107 031c 	add.w	r3, r7, #28
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fd fa03 	bl	80002b0 <strlen>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	f107 031c 	add.w	r3, r7, #28
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4821      	ldr	r0, [pc, #132]	@ (8002f3c <mpu6050_ReadData+0x1b4>)
 8002eb6:	f005 fcd7 	bl	8008868 <HAL_UART_Transmit_DMA>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10c      	bne.n	8002eda <mpu6050_ReadData+0x152>
                    if (osSemaphoreAcquire(dmaTxCompleteSemaphoreHandle, 100) != osOK) {
 8002ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8002f40 <mpu6050_ReadData+0x1b8>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2164      	movs	r1, #100	@ 0x64
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f006 fc4c 	bl	8009764 <osSemaphoreAcquire>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d006      	beq.n	8002ee0 <mpu6050_ReadData+0x158>
                        printf("UART DMA timeout\r\n");
 8002ed2:	481c      	ldr	r0, [pc, #112]	@ (8002f44 <mpu6050_ReadData+0x1bc>)
 8002ed4:	f00a fd92 	bl	800d9fc <puts>
 8002ed8:	e002      	b.n	8002ee0 <mpu6050_ReadData+0x158>
                    }
                } else {
                    printf("UART DMA transmission failed\r\n");
 8002eda:	481b      	ldr	r0, [pc, #108]	@ (8002f48 <mpu6050_ReadData+0x1c0>)
 8002edc:	f00a fd8e 	bl	800d9fc <puts>
                }
                osMutexRelease(uartMutexHandle);
 8002ee0:	4b15      	ldr	r3, [pc, #84]	@ (8002f38 <mpu6050_ReadData+0x1b0>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f006 fb77 	bl	80095d8 <osMutexRelease>
 8002eea:	e002      	b.n	8002ef2 <mpu6050_ReadData+0x16a>
            } else {
                printf("UART mutex acquire failed\r\n");
 8002eec:	4817      	ldr	r0, [pc, #92]	@ (8002f4c <mpu6050_ReadData+0x1c4>)
 8002eee:	f00a fd85 	bl	800d9fc <puts>
            }
        }
        // Send data to the queue
        if (osMessageQueuePut(MPU6050DataHandle, &dataToProcess, 0, 200) != osOK) {
 8002ef2:	4b17      	ldr	r3, [pc, #92]	@ (8002f50 <mpu6050_ReadData+0x1c8>)
 8002ef4:	6818      	ldr	r0, [r3, #0]
 8002ef6:	f107 01e4 	add.w	r1, r7, #228	@ 0xe4
 8002efa:	23c8      	movs	r3, #200	@ 0xc8
 8002efc:	2200      	movs	r2, #0
 8002efe:	f006 fcf7 	bl	80098f0 <osMessageQueuePut>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <mpu6050_ReadData+0x186>
            printf("Queue is full\r\n");
 8002f08:	4812      	ldr	r0, [pc, #72]	@ (8002f54 <mpu6050_ReadData+0x1cc>)
 8002f0a:	f00a fd77 	bl	800d9fc <puts>
        }
        osDelayUntil(tick);  // Delay until the next calculated tick
 8002f0e:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8002f12:	f006 fa63 	bl	80093dc <osDelayUntil>
        tick += osKernelGetTickFreq() / 100;  // Calculate next wake time (10ms)
 8002f16:	e765      	b.n	8002de4 <mpu6050_ReadData+0x5c>
 8002f18:	08011ba8 	.word	0x08011ba8
 8002f1c:	08011bc0 	.word	0x08011bc0
 8002f20:	08011bd4 	.word	0x08011bd4
 8002f24:	08011be8 	.word	0x08011be8
 8002f28:	08011c00 	.word	0x08011c00
 8002f2c:	08011c18 	.word	0x08011c18
 8002f30:	51eb851f 	.word	0x51eb851f
 8002f34:	08011c2c 	.word	0x08011c2c
 8002f38:	200005c0 	.word	0x200005c0
 8002f3c:	20000504 	.word	0x20000504
 8002f40:	200005c4 	.word	0x200005c4
 8002f44:	08011c64 	.word	0x08011c64
 8002f48:	08011c78 	.word	0x08011c78
 8002f4c:	08011c98 	.word	0x08011c98
 8002f50:	200005b8 	.word	0x200005b8
 8002f54:	08011cb4 	.word	0x08011cb4

08002f58 <DataProcessing>:
//        osDelay(10);  // Prevent rapid polling
    }
}


void DataProcessing(void *argument) {
 8002f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f5c:	ed2d 8b02 	vpush	{d8}
 8002f60:	b0ec      	sub	sp, #432	@ 0x1b0
 8002f62:	af0c      	add	r7, sp, #48	@ 0x30
 8002f64:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002f68:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002f6c:	6018      	str	r0, [r3, #0]
    float kalmanPitch;
    float kalmanRoll;

    double dt;

    uint8_t transmitViaUART = 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	f887 316f 	strb.w	r3, [r7, #367]	@ 0x16f
    uint8_t chooseFilter = 2;		//RawAngle - 0 | Complementary filter - 1 | Kalman filter - 2
 8002f74:	2302      	movs	r3, #2
 8002f76:	f887 316e 	strb.w	r3, [r7, #366]	@ 0x16e

    char buffer[200];

    printf("Data processing task started\r\n");
 8002f7a:	48cc      	ldr	r0, [pc, #816]	@ (80032ac <DataProcessing+0x354>)
 8002f7c:	f00a fd3e 	bl	800d9fc <puts>

    Kalman_Init(&resultKalmanFilterPitch, 0.006f, 0.003f, 0.000640f); // Initialize the Kalman filter with noise parameters
 8002f80:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002f84:	ed9f 1aca 	vldr	s2, [pc, #808]	@ 80032b0 <DataProcessing+0x358>
 8002f88:	eddf 0aca 	vldr	s1, [pc, #808]	@ 80032b4 <DataProcessing+0x35c>
 8002f8c:	ed9f 0aca 	vldr	s0, [pc, #808]	@ 80032b8 <DataProcessing+0x360>
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fe f9a5 	bl	80012e0 <Kalman_Init>
    Kalman_Init(&resultKalmanFilterRoll, 0.006f, 0.003f, 0.000640f); // Initialize the Kalman filter with noise parameters
 8002f96:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002f9a:	ed9f 1ac5 	vldr	s2, [pc, #788]	@ 80032b0 <DataProcessing+0x358>
 8002f9e:	eddf 0ac5 	vldr	s1, [pc, #788]	@ 80032b4 <DataProcessing+0x35c>
 8002fa2:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 80032b8 <DataProcessing+0x360>
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fe f99a 	bl	80012e0 <Kalman_Init>
    uint32_t prevTick = osKernelGetTickCount();  // Initialize previous tick
 8002fac:	f006 f966 	bl	800927c <osKernelGetTickCount>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002fb6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002fba:	601a      	str	r2, [r3, #0]
    uint32_t tick = osKernelGetTickCount();  // Get the current tick count
 8002fbc:	f006 f95e 	bl	800927c <osKernelGetTickCount>
 8002fc0:	f8c7 0170 	str.w	r0, [r7, #368]	@ 0x170

    while (1) {
        tick += osKernelGetTickFreq() / 50;   // Calculate next wake time (20ms)
 8002fc4:	f006 f96f 	bl	80092a6 <osKernelGetTickFreq>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	4abc      	ldr	r2, [pc, #752]	@ (80032bc <DataProcessing+0x364>)
 8002fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd0:	091b      	lsrs	r3, r3, #4
 8002fd2:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170

        // Get data from queue
        if (osMessageQueueGet(MPU6050DataHandle, &receivedData, NULL, 200) == osOK) {
 8002fdc:	4bb8      	ldr	r3, [pc, #736]	@ (80032c0 <DataProcessing+0x368>)
 8002fde:	6818      	ldr	r0, [r3, #0]
 8002fe0:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8002fe4:	23c8      	movs	r3, #200	@ 0xc8
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f006 fce2 	bl	80099b0 <osMessageQueueGet>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1e8      	bne.n	8002fc4 <DataProcessing+0x6c>
        	// Record the start time
            SSD1306_DrawString(34, 16, "Pitch", 1); // Label for pitch
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	4ab3      	ldr	r2, [pc, #716]	@ (80032c4 <DataProcessing+0x36c>)
 8002ff6:	2110      	movs	r1, #16
 8002ff8:	2022      	movs	r0, #34	@ 0x22
 8002ffa:	f000 fc35 	bl	8003868 <SSD1306_DrawString>
            SSD1306_DrawString(74, 16, "Roll", 1); // Label for pitch
 8002ffe:	2301      	movs	r3, #1
 8003000:	4ab1      	ldr	r2, [pc, #708]	@ (80032c8 <DataProcessing+0x370>)
 8003002:	2110      	movs	r1, #16
 8003004:	204a      	movs	r0, #74	@ 0x4a
 8003006:	f000 fc2f 	bl	8003868 <SSD1306_DrawString>

            // Clear regions where pitch and roll values are displayed
            SSD1306_ClearRegion(34, 28, 40, 8); // Clear the region for pitch value
 800300a:	2308      	movs	r3, #8
 800300c:	2228      	movs	r2, #40	@ 0x28
 800300e:	211c      	movs	r1, #28
 8003010:	2022      	movs	r0, #34	@ 0x22
 8003012:	f000 fb03 	bl	800361c <SSD1306_ClearRegion>
            SSD1306_ClearRegion(74, 28, 40, 8); // Clear the region for roll value
 8003016:	2308      	movs	r3, #8
 8003018:	2228      	movs	r2, #40	@ 0x28
 800301a:	211c      	movs	r1, #28
 800301c:	204a      	movs	r0, #74	@ 0x4a
 800301e:	f000 fafd 	bl	800361c <SSD1306_ClearRegion>

            if (chooseFilter == 0) {
 8003022:	f897 316e 	ldrb.w	r3, [r7, #366]	@ 0x16e
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10a      	bne.n	8003040 <DataProcessing+0xe8>
                resultsPRY = computeAngles(&receivedData, &prevTick);
 800302a:	f107 021c 	add.w	r2, r7, #28
 800302e:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 8003032:	4611      	mov	r1, r2
 8003034:	4618      	mov	r0, r3
 8003036:	f7fe fa87 	bl	8001548 <computeAngles>
 800303a:	f8c7 017c 	str.w	r0, [r7, #380]	@ 0x17c
 800303e:	e087      	b.n	8003150 <DataProcessing+0x1f8>
            } else if (chooseFilter == 1) {
 8003040:	f897 316e 	ldrb.w	r3, [r7, #366]	@ 0x16e
 8003044:	2b01      	cmp	r3, #1
 8003046:	d12d      	bne.n	80030a4 <DataProcessing+0x14c>
                resultsPRY = computeAngles(&receivedData, &prevTick);
 8003048:	f107 021c 	add.w	r2, r7, #28
 800304c:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 8003050:	4611      	mov	r1, r2
 8003052:	4618      	mov	r0, r3
 8003054:	f7fe fa78 	bl	8001548 <computeAngles>
 8003058:	f8c7 017c 	str.w	r0, [r7, #380]	@ 0x17c
                resultsCompFilter = complementary_filter(resultsPRY, &receivedData, &prevTick);
 800305c:	f107 021c 	add.w	r2, r7, #28
 8003060:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 8003064:	4619      	mov	r1, r3
 8003066:	f8d7 017c 	ldr.w	r0, [r7, #380]	@ 0x17c
 800306a:	f7fd ffed 	bl	8001048 <complementary_filter>
 800306e:	f8c7 0178 	str.w	r0, [r7, #376]	@ 0x178
                SSD1306_DrawFloat(34, 28, resultsCompFilter->pitch, 1, 1);
 8003072:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8003076:	edd3 7a01 	vldr	s15, [r3, #4]
 800307a:	2301      	movs	r3, #1
 800307c:	2201      	movs	r2, #1
 800307e:	eeb0 0a67 	vmov.f32	s0, s15
 8003082:	211c      	movs	r1, #28
 8003084:	2022      	movs	r0, #34	@ 0x22
 8003086:	f000 fc15 	bl	80038b4 <SSD1306_DrawFloat>
                SSD1306_DrawFloat(74, 28, resultsCompFilter->roll, 1, 1);
 800308a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800308e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003092:	2301      	movs	r3, #1
 8003094:	2201      	movs	r2, #1
 8003096:	eeb0 0a67 	vmov.f32	s0, s15
 800309a:	211c      	movs	r1, #28
 800309c:	204a      	movs	r0, #74	@ 0x4a
 800309e:	f000 fc09 	bl	80038b4 <SSD1306_DrawFloat>
 80030a2:	e055      	b.n	8003150 <DataProcessing+0x1f8>
            } else if (chooseFilter == 2) {
 80030a4:	f897 316e 	ldrb.w	r3, [r7, #366]	@ 0x16e
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d151      	bne.n	8003150 <DataProcessing+0x1f8>
				resultsPRY = computeAnglesAcc(&receivedData);
 80030ac:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7fe fb61 	bl	8001778 <computeAnglesAcc>
 80030b6:	f8c7 017c 	str.w	r0, [r7, #380]	@ 0x17c
				dt = computeDT(&prevTick);
 80030ba:	f107 031c 	add.w	r3, r7, #28
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fd ff5a 	bl	8000f78 <computeDT>
 80030c4:	ed87 0b58 	vstr	d0, [r7, #352]	@ 0x160
				kalmanPitch = Kalman_Update(&resultKalmanFilterPitch, resultsPRY->pitchAcc, receivedData.gyroX, (float)dt);
 80030c8:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80030cc:	ed93 8a00 	vldr	s16, [r3]
 80030d0:	edd7 8a52 	vldr	s17, [r7, #328]	@ 0x148
 80030d4:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 80030d8:	f7fd fd86 	bl	8000be8 <__aeabi_d2f>
 80030dc:	4602      	mov	r2, r0
 80030de:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80030e2:	ee01 2a10 	vmov	s2, r2
 80030e6:	eef0 0a68 	vmov.f32	s1, s17
 80030ea:	eeb0 0a48 	vmov.f32	s0, s16
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe f92b 	bl	800134a <Kalman_Update>
 80030f4:	eef0 7a40 	vmov.f32	s15, s0
 80030f8:	edc7 7a3a 	vstr	s15, [r7, #232]	@ 0xe8
				kalmanRoll = Kalman_Update(&resultKalmanFilterRoll, resultsPRY->rollAcc, receivedData.gyroY, (float)dt);
 80030fc:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8003100:	ed93 8a01 	vldr	s16, [r3, #4]
 8003104:	edd7 8a53 	vldr	s17, [r7, #332]	@ 0x14c
 8003108:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 800310c:	f7fd fd6c 	bl	8000be8 <__aeabi_d2f>
 8003110:	4602      	mov	r2, r0
 8003112:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003116:	ee01 2a10 	vmov	s2, r2
 800311a:	eef0 0a68 	vmov.f32	s1, s17
 800311e:	eeb0 0a48 	vmov.f32	s0, s16
 8003122:	4618      	mov	r0, r3
 8003124:	f7fe f911 	bl	800134a <Kalman_Update>
 8003128:	ed87 0a5d 	vstr	s0, [r7, #372]	@ 0x174
	            SSD1306_DrawFloat(34, 28, kalmanPitch, 1, 1);
 800312c:	edd7 7a3a 	vldr	s15, [r7, #232]	@ 0xe8
 8003130:	2301      	movs	r3, #1
 8003132:	2201      	movs	r2, #1
 8003134:	eeb0 0a67 	vmov.f32	s0, s15
 8003138:	211c      	movs	r1, #28
 800313a:	2022      	movs	r0, #34	@ 0x22
 800313c:	f000 fbba 	bl	80038b4 <SSD1306_DrawFloat>
				SSD1306_DrawFloat(74, 28, kalmanRoll, 1, 1);
 8003140:	2301      	movs	r3, #1
 8003142:	2201      	movs	r2, #1
 8003144:	ed97 0a5d 	vldr	s0, [r7, #372]	@ 0x174
 8003148:	211c      	movs	r1, #28
 800314a:	204a      	movs	r0, #74	@ 0x4a
 800314c:	f000 fbb2 	bl	80038b4 <SSD1306_DrawFloat>
            }
            SSD1306_UpdateScreen();
 8003150:	f000 fa98 	bl	8003684 <SSD1306_UpdateScreen>

            if (transmitViaUART) {
 8003154:	f897 316f 	ldrb.w	r3, [r7, #367]	@ 0x16f
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80f2 	beq.w	8003342 <DataProcessing+0x3ea>
            	if (chooseFilter == 0) {
 800315e:	f897 316e 	ldrb.w	r3, [r7, #366]	@ 0x16e
 8003162:	2b00      	cmp	r3, #0
 8003164:	d13a      	bne.n	80031dc <DataProcessing+0x284>
					snprintf(buffer, sizeof(buffer), "Acc | Pitch=%6.2f Roll=%6.2f | Gyro | Pitch=%6.2f Roll=%6.2f"
							"Yaw=%6.2f\r\n", resultsPRY->pitchAcc, resultsPRY->rollAcc, resultsPRY->pitchGyro,
 8003166:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800316a:	681b      	ldr	r3, [r3, #0]
					snprintf(buffer, sizeof(buffer), "Acc | Pitch=%6.2f Roll=%6.2f | Gyro | Pitch=%6.2f Roll=%6.2f"
 800316c:	4618      	mov	r0, r3
 800316e:	f7fd fa0b 	bl	8000588 <__aeabi_f2d>
 8003172:	4604      	mov	r4, r0
 8003174:	460d      	mov	r5, r1
							"Yaw=%6.2f\r\n", resultsPRY->pitchAcc, resultsPRY->rollAcc, resultsPRY->pitchGyro,
 8003176:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800317a:	685b      	ldr	r3, [r3, #4]
					snprintf(buffer, sizeof(buffer), "Acc | Pitch=%6.2f Roll=%6.2f | Gyro | Pitch=%6.2f Roll=%6.2f"
 800317c:	4618      	mov	r0, r3
 800317e:	f7fd fa03 	bl	8000588 <__aeabi_f2d>
 8003182:	4680      	mov	r8, r0
 8003184:	4689      	mov	r9, r1
							"Yaw=%6.2f\r\n", resultsPRY->pitchAcc, resultsPRY->rollAcc, resultsPRY->pitchGyro,
 8003186:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800318a:	689b      	ldr	r3, [r3, #8]
					snprintf(buffer, sizeof(buffer), "Acc | Pitch=%6.2f Roll=%6.2f | Gyro | Pitch=%6.2f Roll=%6.2f"
 800318c:	4618      	mov	r0, r3
 800318e:	f7fd f9fb 	bl	8000588 <__aeabi_f2d>
 8003192:	4682      	mov	sl, r0
 8003194:	468b      	mov	fp, r1
							resultsPRY->rollGyro, resultsPRY->yawGyro);
 8003196:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800319a:	68db      	ldr	r3, [r3, #12]
					snprintf(buffer, sizeof(buffer), "Acc | Pitch=%6.2f Roll=%6.2f | Gyro | Pitch=%6.2f Roll=%6.2f"
 800319c:	4618      	mov	r0, r3
 800319e:	f7fd f9f3 	bl	8000588 <__aeabi_f2d>
 80031a2:	e9c7 0102 	strd	r0, r1, [r7, #8]
							resultsPRY->rollGyro, resultsPRY->yawGyro);
 80031a6:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80031aa:	691b      	ldr	r3, [r3, #16]
					snprintf(buffer, sizeof(buffer), "Acc | Pitch=%6.2f Roll=%6.2f | Gyro | Pitch=%6.2f Roll=%6.2f"
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7fd f9eb 	bl	8000588 <__aeabi_f2d>
 80031b2:	4602      	mov	r2, r0
 80031b4:	460b      	mov	r3, r1
 80031b6:	f107 0020 	add.w	r0, r7, #32
 80031ba:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80031be:	ed97 7b02 	vldr	d7, [r7, #8]
 80031c2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80031c6:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80031ca:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80031ce:	e9cd 4500 	strd	r4, r5, [sp]
 80031d2:	4a3e      	ldr	r2, [pc, #248]	@ (80032cc <DataProcessing+0x374>)
 80031d4:	21c8      	movs	r1, #200	@ 0xc8
 80031d6:	f00a fc19 	bl	800da0c <sniprintf>
 80031da:	e080      	b.n	80032de <DataProcessing+0x386>
            	} else if (chooseFilter == 1) {
 80031dc:	f897 316e 	ldrb.w	r3, [r7, #366]	@ 0x16e
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d11a      	bne.n	800321a <DataProcessing+0x2c2>
					//Complementary filter
					snprintf(buffer, sizeof(buffer), "CompFilter | Pitch=%6.2f Roll=%6.2f\r\n",
							resultsCompFilter->pitch, resultsCompFilter->roll);
 80031e4:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80031e8:	685b      	ldr	r3, [r3, #4]
					snprintf(buffer, sizeof(buffer), "CompFilter | Pitch=%6.2f Roll=%6.2f\r\n",
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fd f9cc 	bl	8000588 <__aeabi_f2d>
 80031f0:	4604      	mov	r4, r0
 80031f2:	460d      	mov	r5, r1
							resultsCompFilter->pitch, resultsCompFilter->roll);
 80031f4:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80031f8:	689b      	ldr	r3, [r3, #8]
					snprintf(buffer, sizeof(buffer), "CompFilter | Pitch=%6.2f Roll=%6.2f\r\n",
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fd f9c4 	bl	8000588 <__aeabi_f2d>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	f107 0020 	add.w	r0, r7, #32
 8003208:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800320c:	e9cd 4500 	strd	r4, r5, [sp]
 8003210:	4a2f      	ldr	r2, [pc, #188]	@ (80032d0 <DataProcessing+0x378>)
 8003212:	21c8      	movs	r1, #200	@ 0xc8
 8003214:	f00a fbfa 	bl	800da0c <sniprintf>
 8003218:	e061      	b.n	80032de <DataProcessing+0x386>
            	} else if (chooseFilter == 2) {
 800321a:	f897 316e 	ldrb.w	r3, [r7, #366]	@ 0x16e
 800321e:	2b02      	cmp	r3, #2
 8003220:	d15a      	bne.n	80032d8 <DataProcessing+0x380>
            		//Kalman filter
					snprintf(buffer, sizeof(buffer), "%6.2f|%6.2f|%6.2f|%6.2f|%6.2f|%6.2f\r\n",
 8003222:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003226:	4618      	mov	r0, r3
 8003228:	f7fd f9ae 	bl	8000588 <__aeabi_f2d>
 800322c:	4604      	mov	r4, r0
 800322e:	460d      	mov	r5, r1
 8003230:	f8d7 0174 	ldr.w	r0, [r7, #372]	@ 0x174
 8003234:	f7fd f9a8 	bl	8000588 <__aeabi_f2d>
 8003238:	4680      	mov	r8, r0
 800323a:	4689      	mov	r9, r1
							kalmanPitch, kalmanRoll, resultsPRY->pitchAcc, resultsPRY->rollAcc,
 800323c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8003240:	681b      	ldr	r3, [r3, #0]
					snprintf(buffer, sizeof(buffer), "%6.2f|%6.2f|%6.2f|%6.2f|%6.2f|%6.2f\r\n",
 8003242:	4618      	mov	r0, r3
 8003244:	f7fd f9a0 	bl	8000588 <__aeabi_f2d>
 8003248:	4682      	mov	sl, r0
 800324a:	468b      	mov	fp, r1
							kalmanPitch, kalmanRoll, resultsPRY->pitchAcc, resultsPRY->rollAcc,
 800324c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8003250:	685b      	ldr	r3, [r3, #4]
					snprintf(buffer, sizeof(buffer), "%6.2f|%6.2f|%6.2f|%6.2f|%6.2f|%6.2f\r\n",
 8003252:	4618      	mov	r0, r3
 8003254:	f7fd f998 	bl	8000588 <__aeabi_f2d>
 8003258:	e9c7 0102 	strd	r0, r1, [r7, #8]
							resultsPRY->pitchGyro, resultsPRY->rollGyro);
 800325c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8003260:	689b      	ldr	r3, [r3, #8]
					snprintf(buffer, sizeof(buffer), "%6.2f|%6.2f|%6.2f|%6.2f|%6.2f|%6.2f\r\n",
 8003262:	4618      	mov	r0, r3
 8003264:	f7fd f990 	bl	8000588 <__aeabi_f2d>
 8003268:	e9c7 0100 	strd	r0, r1, [r7]
							resultsPRY->pitchGyro, resultsPRY->rollGyro);
 800326c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8003270:	68db      	ldr	r3, [r3, #12]
					snprintf(buffer, sizeof(buffer), "%6.2f|%6.2f|%6.2f|%6.2f|%6.2f|%6.2f\r\n",
 8003272:	4618      	mov	r0, r3
 8003274:	f7fd f988 	bl	8000588 <__aeabi_f2d>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	f107 0020 	add.w	r0, r7, #32
 8003280:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8003284:	ed97 7b00 	vldr	d7, [r7]
 8003288:	ed8d 7b08 	vstr	d7, [sp, #32]
 800328c:	ed97 7b02 	vldr	d7, [r7, #8]
 8003290:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003294:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003298:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800329c:	e9cd 4500 	strd	r4, r5, [sp]
 80032a0:	4a0c      	ldr	r2, [pc, #48]	@ (80032d4 <DataProcessing+0x37c>)
 80032a2:	21c8      	movs	r1, #200	@ 0xc8
 80032a4:	f00a fbb2 	bl	800da0c <sniprintf>
 80032a8:	e019      	b.n	80032de <DataProcessing+0x386>
 80032aa:	bf00      	nop
 80032ac:	08011cc4 	.word	0x08011cc4
 80032b0:	3a27c5ac 	.word	0x3a27c5ac
 80032b4:	3b449ba6 	.word	0x3b449ba6
 80032b8:	3bc49ba6 	.word	0x3bc49ba6
 80032bc:	51eb851f 	.word	0x51eb851f
 80032c0:	200005b8 	.word	0x200005b8
 80032c4:	08011ce4 	.word	0x08011ce4
 80032c8:	08011cec 	.word	0x08011cec
 80032cc:	08011cf4 	.word	0x08011cf4
 80032d0:	08011d3c 	.word	0x08011d3c
 80032d4:	08011d64 	.word	0x08011d64
            	} else {
            		printf("No filter chosen!");
 80032d8:	4823      	ldr	r0, [pc, #140]	@ (8003368 <DataProcessing+0x410>)
 80032da:	f00a fb27 	bl	800d92c <iprintf>
            	}
				//Transmit processed data over UART
				if (osMutexAcquire(uartMutexHandle, 200) == osOK) {  // Use timeout to avoid deadlocks
 80032de:	4b23      	ldr	r3, [pc, #140]	@ (800336c <DataProcessing+0x414>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	21c8      	movs	r1, #200	@ 0xc8
 80032e4:	4618      	mov	r0, r3
 80032e6:	f006 f92c 	bl	8009542 <osMutexAcquire>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d125      	bne.n	800333c <DataProcessing+0x3e4>
					if (HAL_UART_Transmit_DMA(&huart2, (uint8_t *)buffer, strlen(buffer)) == HAL_OK) {
 80032f0:	f107 0320 	add.w	r3, r7, #32
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fc ffdb 	bl	80002b0 <strlen>
 80032fa:	4603      	mov	r3, r0
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	f107 0320 	add.w	r3, r7, #32
 8003302:	4619      	mov	r1, r3
 8003304:	481a      	ldr	r0, [pc, #104]	@ (8003370 <DataProcessing+0x418>)
 8003306:	f005 faaf 	bl	8008868 <HAL_UART_Transmit_DMA>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10c      	bne.n	800332a <DataProcessing+0x3d2>
						if (osSemaphoreAcquire(dmaTxCompleteSemaphoreHandle, 100) != osOK) {
 8003310:	4b18      	ldr	r3, [pc, #96]	@ (8003374 <DataProcessing+0x41c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2164      	movs	r1, #100	@ 0x64
 8003316:	4618      	mov	r0, r3
 8003318:	f006 fa24 	bl	8009764 <osSemaphoreAcquire>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d006      	beq.n	8003330 <DataProcessing+0x3d8>
							printf("UART DMA timeout\r\n");
 8003322:	4815      	ldr	r0, [pc, #84]	@ (8003378 <DataProcessing+0x420>)
 8003324:	f00a fb6a 	bl	800d9fc <puts>
 8003328:	e002      	b.n	8003330 <DataProcessing+0x3d8>
						}
					} else {
						printf("UART DMA transmission failed\r\n");
 800332a:	4814      	ldr	r0, [pc, #80]	@ (800337c <DataProcessing+0x424>)
 800332c:	f00a fb66 	bl	800d9fc <puts>
					}
					osMutexRelease(uartMutexHandle);  // Release mutex
 8003330:	4b0e      	ldr	r3, [pc, #56]	@ (800336c <DataProcessing+0x414>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f006 f94f 	bl	80095d8 <osMutexRelease>
 800333a:	e002      	b.n	8003342 <DataProcessing+0x3ea>
				} else {
					printf("UART mutex acquire failed\r\n");
 800333c:	4810      	ldr	r0, [pc, #64]	@ (8003380 <DataProcessing+0x428>)
 800333e:	f00a fb5d 	bl	800d9fc <puts>
				}
            }
            if (osMessageQueuePut(KalmanAngleHandle, &kalmanPitch, 0, 200) != osOK) {
 8003342:	4b10      	ldr	r3, [pc, #64]	@ (8003384 <DataProcessing+0x42c>)
 8003344:	6818      	ldr	r0, [r3, #0]
 8003346:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 800334a:	23c8      	movs	r3, #200	@ 0xc8
 800334c:	2200      	movs	r2, #0
 800334e:	f006 facf 	bl	80098f0 <osMessageQueuePut>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d002      	beq.n	800335e <DataProcessing+0x406>
                printf("Queue is full\r\n");
 8003358:	480b      	ldr	r0, [pc, #44]	@ (8003388 <DataProcessing+0x430>)
 800335a:	f00a fb4f 	bl	800d9fc <puts>
            }
            osDelayUntil(tick);
 800335e:	f8d7 0170 	ldr.w	r0, [r7, #368]	@ 0x170
 8003362:	f006 f83b 	bl	80093dc <osDelayUntil>
        tick += osKernelGetTickFreq() / 50;   // Calculate next wake time (20ms)
 8003366:	e62d      	b.n	8002fc4 <DataProcessing+0x6c>
 8003368:	08011d8c 	.word	0x08011d8c
 800336c:	200005c0 	.word	0x200005c0
 8003370:	20000504 	.word	0x20000504
 8003374:	200005c4 	.word	0x200005c4
 8003378:	08011c64 	.word	0x08011c64
 800337c:	08011c78 	.word	0x08011c78
 8003380:	08011c98 	.word	0x08011c98
 8003384:	200005bc 	.word	0x200005bc
 8003388:	08011cb4 	.word	0x08011cb4
 800338c:	00000000 	.word	0x00000000

08003390 <motorRun>:
        	//printf("Queue is empty\r\n");
        }
    }
}

void motorRun(void *argument) {
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
	// Initialization of DWT
	DWT_Init();
 8003398:	f7ff fc9a 	bl	8002cd0 <DWT_Init>
	printf("Motor control started\r\n");
 800339c:	482e      	ldr	r0, [pc, #184]	@ (8003458 <motorRun+0xc8>)
 800339e:	f00a fb2d 	bl	800d9fc <puts>
	// Start PWM on all channels
//	motorControlPID motorControlPitch;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // Set PB1 high
 80033a2:	2201      	movs	r2, #1
 80033a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80033a8:	482c      	ldr	r0, [pc, #176]	@ (800345c <motorRun+0xcc>)
 80033aa:	f002 f829 	bl	8005400 <HAL_GPIO_WritePin>

	pwmInit();
 80033ae:	f7fe ffab 	bl	8002308 <pwmInit>
	pidInit(&motorControlPitch, 1.1, 0.01, 0.13);	//1.1, 0.01, 0.13 - 0.1s | 0.8, 2.88, 0.3 - 0.1s
 80033b2:	ed9f 1a2b 	vldr	s2, [pc, #172]	@ 8003460 <motorRun+0xd0>
 80033b6:	eddf 0a2b 	vldr	s1, [pc, #172]	@ 8003464 <motorRun+0xd4>
 80033ba:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 8003468 <motorRun+0xd8>
 80033be:	482b      	ldr	r0, [pc, #172]	@ (800346c <motorRun+0xdc>)
 80033c0:	f7fe ffc2 	bl	8002348 <pidInit>

	// Read back to verify
//	float savedPitch = ReadFloatFromFlash(PITCH_ADDRESS);
//	float savedRoll = ReadFloatFromFlash(ROLL_ADDRESS);

	float kalmanPitch = 0;
 80033c4:	f04f 0300 	mov.w	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]
	float kalmanRoll = 0;
 80033ca:	f04f 0300 	mov.w	r3, #0
 80033ce:	61bb      	str	r3, [r7, #24]
	motorControlPitch.target_position = 1.57f;
 80033d0:	4b26      	ldr	r3, [pc, #152]	@ (800346c <motorRun+0xdc>)
 80033d2:	4a27      	ldr	r2, [pc, #156]	@ (8003470 <motorRun+0xe0>)
 80033d4:	605a      	str	r2, [r3, #4]

	float phase = 0;
 80033d6:	f04f 0300 	mov.w	r3, #0
 80033da:	617b      	str	r3, [r7, #20]
	float motor_speed = 25;
 80033dc:	4b25      	ldr	r3, [pc, #148]	@ (8003474 <motorRun+0xe4>)
 80033de:	613b      	str	r3, [r7, #16]
    uint32_t tick = osKernelGetTickCount();
 80033e0:	f005 ff4c 	bl	800927c <osKernelGetTickCount>
 80033e4:	61f8      	str	r0, [r7, #28]

	while (1) {
        tick += osKernelGetTickFreq() / 125;  // Calculate next wake time (8ms)
 80033e6:	f005 ff5e 	bl	80092a6 <osKernelGetTickFreq>
 80033ea:	4603      	mov	r3, r0
 80033ec:	4a22      	ldr	r2, [pc, #136]	@ (8003478 <motorRun+0xe8>)
 80033ee:	fba2 2303 	umull	r2, r3, r2, r3
 80033f2:	08db      	lsrs	r3, r3, #3
 80033f4:	69fa      	ldr	r2, [r7, #28]
 80033f6:	4413      	add	r3, r2
 80033f8:	61fb      	str	r3, [r7, #28]
//		 printf("Phase: %.2f\r\n", phase);
//		 if (phase >= TWO_PI) {
//		     phase -= TWO_PI; // Wrap phase
//		 }
//		setPWMDutyCyclePosition(phase, 1);
        if (osMessageQueueGet(KalmanAngleHandle, &kalmanPitch, NULL, 200) == osOK) {
 80033fa:	4b20      	ldr	r3, [pc, #128]	@ (800347c <motorRun+0xec>)
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	f107 010c 	add.w	r1, r7, #12
 8003402:	23c8      	movs	r3, #200	@ 0xc8
 8003404:	2200      	movs	r2, #0
 8003406:	f006 fad3 	bl	80099b0 <osMessageQueueGet>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1ea      	bne.n	80033e6 <motorRun+0x56>
        	motorControlPitch.target_position = -kalmanPitch * (M_PI / 180.0f); ;
 8003410:	edd7 7a03 	vldr	s15, [r7, #12]
 8003414:	eef1 7a67 	vneg.f32	s15, s15
 8003418:	ee17 3a90 	vmov	r3, s15
 800341c:	4618      	mov	r0, r3
 800341e:	f7fd f8b3 	bl	8000588 <__aeabi_f2d>
 8003422:	a30b      	add	r3, pc, #44	@ (adr r3, 8003450 <motorRun+0xc0>)
 8003424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003428:	f7fd f906 	bl	8000638 <__aeabi_dmul>
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	4610      	mov	r0, r2
 8003432:	4619      	mov	r1, r3
 8003434:	f7fd fbd8 	bl	8000be8 <__aeabi_d2f>
 8003438:	4603      	mov	r3, r0
 800343a:	4a0c      	ldr	r2, [pc, #48]	@ (800346c <motorRun+0xdc>)
 800343c:	6053      	str	r3, [r2, #4]

			controlLoop(&motorControlPitch, 0);
 800343e:	2100      	movs	r1, #0
 8003440:	480a      	ldr	r0, [pc, #40]	@ (800346c <motorRun+0xdc>)
 8003442:	f7fe ffc3 	bl	80023cc <controlLoop>
			osDelayUntil(tick);
 8003446:	69f8      	ldr	r0, [r7, #28]
 8003448:	f005 ffc8 	bl	80093dc <osDelayUntil>
        tick += osKernelGetTickFreq() / 125;  // Calculate next wake time (8ms)
 800344c:	e7cb      	b.n	80033e6 <motorRun+0x56>
 800344e:	bf00      	nop
 8003450:	a2529d39 	.word	0xa2529d39
 8003454:	3f91df46 	.word	0x3f91df46
 8003458:	08011da0 	.word	0x08011da0
 800345c:	40020400 	.word	0x40020400
 8003460:	3e051eb8 	.word	0x3e051eb8
 8003464:	3c23d70a 	.word	0x3c23d70a
 8003468:	3f8ccccd 	.word	0x3f8ccccd
 800346c:	200005c8 	.word	0x200005c8
 8003470:	3fc8f5c3 	.word	0x3fc8f5c3
 8003474:	41c80000 	.word	0x41c80000
 8003478:	10624dd3 	.word	0x10624dd3
 800347c:	200005bc 	.word	0x200005bc

08003480 <SSD1306_Write>:
    HAL_GPIO_WritePin(SSD1306_RESET_GPIO, SSD1306_RESET_PIN, GPIO_PIN_RESET);
    HAL_Delay(10);
    HAL_GPIO_WritePin(SSD1306_RESET_GPIO, SSD1306_RESET_PIN, GPIO_PIN_SET);
}

void SSD1306_Write(uint8_t data, uint8_t cmd) {
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	460a      	mov	r2, r1
 800348a:	71fb      	strb	r3, [r7, #7]
 800348c:	4613      	mov	r3, r2
 800348e:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(SSD1306_DC_GPIO, SSD1306_DC_PIN, cmd == SSD1306_DATA ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003490:	79bb      	ldrb	r3, [r7, #6]
 8003492:	2b01      	cmp	r3, #1
 8003494:	bf0c      	ite	eq
 8003496:	2301      	moveq	r3, #1
 8003498:	2300      	movne	r3, #0
 800349a:	b2db      	uxtb	r3, r3
 800349c:	461a      	mov	r2, r3
 800349e:	2104      	movs	r1, #4
 80034a0:	4806      	ldr	r0, [pc, #24]	@ (80034bc <SSD1306_Write+0x3c>)
 80034a2:	f001 ffad 	bl	8005400 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(SSD1306_SPI, &data, 1, HAL_MAX_DELAY);
 80034a6:	1df9      	adds	r1, r7, #7
 80034a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80034ac:	2201      	movs	r2, #1
 80034ae:	4804      	ldr	r0, [pc, #16]	@ (80034c0 <SSD1306_Write+0x40>)
 80034b0:	f003 fff9 	bl	80074a6 <HAL_SPI_Transmit>
}
 80034b4:	bf00      	nop
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40020400 	.word	0x40020400
 80034c0:	2000038c 	.word	0x2000038c

080034c4 <SSD1306_Init>:

void SSD1306_Init(void) {
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
	uint8_t init_cmd = 0xAA;
 80034ca:	23aa      	movs	r3, #170	@ 0xaa
 80034cc:	71fb      	strb	r3, [r7, #7]
	if (HAL_SPI_Transmit(SSD1306_SPI, &init_cmd, 1, HAL_MAX_DELAY) != HAL_OK) {
 80034ce:	1df9      	adds	r1, r7, #7
 80034d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80034d4:	2201      	movs	r2, #1
 80034d6:	4848      	ldr	r0, [pc, #288]	@ (80035f8 <SSD1306_Init+0x134>)
 80034d8:	f003 ffe5 	bl	80074a6 <HAL_SPI_Transmit>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <SSD1306_Init+0x24>
		printf("SPI transmission error\r\n");
 80034e2:	4846      	ldr	r0, [pc, #280]	@ (80035fc <SSD1306_Init+0x138>)
 80034e4:	f00a fa8a 	bl	800d9fc <puts>
	}

    // Reset the OLED (if the RESET pin is connected)
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // Replace GPIOB and PIN_2 with your RESET pin
 80034e8:	2200      	movs	r2, #0
 80034ea:	2102      	movs	r1, #2
 80034ec:	4844      	ldr	r0, [pc, #272]	@ (8003600 <SSD1306_Init+0x13c>)
 80034ee:	f001 ff87 	bl	8005400 <HAL_GPIO_WritePin>
    HAL_Delay(10);                                        // Wait 10ms
 80034f2:	200a      	movs	r0, #10
 80034f4:	f000 fed8 	bl	80042a8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80034f8:	2201      	movs	r2, #1
 80034fa:	2102      	movs	r1, #2
 80034fc:	4840      	ldr	r0, [pc, #256]	@ (8003600 <SSD1306_Init+0x13c>)
 80034fe:	f001 ff7f 	bl	8005400 <HAL_GPIO_WritePin>

    // Initialization commands for SSD1306
    SSD1306_Write(0xAE, SSD1306_COMMAND); // Display OFF
 8003502:	2100      	movs	r1, #0
 8003504:	20ae      	movs	r0, #174	@ 0xae
 8003506:	f7ff ffbb 	bl	8003480 <SSD1306_Write>
    SSD1306_Write(0x20, SSD1306_COMMAND); // Set Memory Addressing Mode
 800350a:	2100      	movs	r1, #0
 800350c:	2020      	movs	r0, #32
 800350e:	f7ff ffb7 	bl	8003480 <SSD1306_Write>
    SSD1306_Write(0x00, SSD1306_COMMAND); // Horizontal Addressing Mode
 8003512:	2100      	movs	r1, #0
 8003514:	2000      	movs	r0, #0
 8003516:	f7ff ffb3 	bl	8003480 <SSD1306_Write>
    SSD1306_Write(0xB0, SSD1306_COMMAND); // Set Page Start Address
 800351a:	2100      	movs	r1, #0
 800351c:	20b0      	movs	r0, #176	@ 0xb0
 800351e:	f7ff ffaf 	bl	8003480 <SSD1306_Write>
    SSD1306_Write(0xC8, SSD1306_COMMAND); // COM Output Scan Direction
 8003522:	2100      	movs	r1, #0
 8003524:	20c8      	movs	r0, #200	@ 0xc8
 8003526:	f7ff ffab 	bl	8003480 <SSD1306_Write>
    SSD1306_Write(0x00, SSD1306_COMMAND); // Set Low Column Address
 800352a:	2100      	movs	r1, #0
 800352c:	2000      	movs	r0, #0
 800352e:	f7ff ffa7 	bl	8003480 <SSD1306_Write>
    SSD1306_Write(0x10, SSD1306_COMMAND); // Set High Column Address
 8003532:	2100      	movs	r1, #0
 8003534:	2010      	movs	r0, #16
 8003536:	f7ff ffa3 	bl	8003480 <SSD1306_Write>
    SSD1306_Write(0x40, SSD1306_COMMAND); // Set Start Line Address
 800353a:	2100      	movs	r1, #0
 800353c:	2040      	movs	r0, #64	@ 0x40
 800353e:	f7ff ff9f 	bl	8003480 <SSD1306_Write>
    SSD1306_Write(0x81, SSD1306_COMMAND); // Set Contrast Control
 8003542:	2100      	movs	r1, #0
 8003544:	2081      	movs	r0, #129	@ 0x81
 8003546:	f7ff ff9b 	bl	8003480 <SSD1306_Write>
    SSD1306_Write(0xFF, SSD1306_COMMAND); // Max contrast
 800354a:	2100      	movs	r1, #0
 800354c:	20ff      	movs	r0, #255	@ 0xff
 800354e:	f7ff ff97 	bl	8003480 <SSD1306_Write>
    SSD1306_Write(0xA1, SSD1306_COMMAND); // Set Segment Re-map
 8003552:	2100      	movs	r1, #0
 8003554:	20a1      	movs	r0, #161	@ 0xa1
 8003556:	f7ff ff93 	bl	8003480 <SSD1306_Write>
    SSD1306_Write(0xA6, SSD1306_COMMAND); // Set Normal Display
 800355a:	2100      	movs	r1, #0
 800355c:	20a6      	movs	r0, #166	@ 0xa6
 800355e:	f7ff ff8f 	bl	8003480 <SSD1306_Write>
    SSD1306_Write(0xA8, SSD1306_COMMAND); // Set Multiplex Ratio
 8003562:	2100      	movs	r1, #0
 8003564:	20a8      	movs	r0, #168	@ 0xa8
 8003566:	f7ff ff8b 	bl	8003480 <SSD1306_Write>
    SSD1306_Write(0x3F, SSD1306_COMMAND); // 1/64 Duty
 800356a:	2100      	movs	r1, #0
 800356c:	203f      	movs	r0, #63	@ 0x3f
 800356e:	f7ff ff87 	bl	8003480 <SSD1306_Write>
    SSD1306_Write(0xA4, SSD1306_COMMAND); // Disable Entire Display ON
 8003572:	2100      	movs	r1, #0
 8003574:	20a4      	movs	r0, #164	@ 0xa4
 8003576:	f7ff ff83 	bl	8003480 <SSD1306_Write>
    SSD1306_Write(0xD3, SSD1306_COMMAND); // Set Display Offset
 800357a:	2100      	movs	r1, #0
 800357c:	20d3      	movs	r0, #211	@ 0xd3
 800357e:	f7ff ff7f 	bl	8003480 <SSD1306_Write>
    SSD1306_Write(0x00, SSD1306_COMMAND); // No offset
 8003582:	2100      	movs	r1, #0
 8003584:	2000      	movs	r0, #0
 8003586:	f7ff ff7b 	bl	8003480 <SSD1306_Write>
    SSD1306_Write(0xD5, SSD1306_COMMAND); // Set Display Clock Divide Ratio
 800358a:	2100      	movs	r1, #0
 800358c:	20d5      	movs	r0, #213	@ 0xd5
 800358e:	f7ff ff77 	bl	8003480 <SSD1306_Write>
    SSD1306_Write(0x80, SSD1306_COMMAND); // Default clock ratio
 8003592:	2100      	movs	r1, #0
 8003594:	2080      	movs	r0, #128	@ 0x80
 8003596:	f7ff ff73 	bl	8003480 <SSD1306_Write>
    SSD1306_Write(0xD9, SSD1306_COMMAND); // Set Pre-charge Period
 800359a:	2100      	movs	r1, #0
 800359c:	20d9      	movs	r0, #217	@ 0xd9
 800359e:	f7ff ff6f 	bl	8003480 <SSD1306_Write>
    SSD1306_Write(0xF1, SSD1306_COMMAND); // Default pre-charge
 80035a2:	2100      	movs	r1, #0
 80035a4:	20f1      	movs	r0, #241	@ 0xf1
 80035a6:	f7ff ff6b 	bl	8003480 <SSD1306_Write>
    SSD1306_Write(0xDA, SSD1306_COMMAND); // Set COM Pins Hardware Configuration
 80035aa:	2100      	movs	r1, #0
 80035ac:	20da      	movs	r0, #218	@ 0xda
 80035ae:	f7ff ff67 	bl	8003480 <SSD1306_Write>
    SSD1306_Write(0x12, SSD1306_COMMAND); // Alternative COM pins
 80035b2:	2100      	movs	r1, #0
 80035b4:	2012      	movs	r0, #18
 80035b6:	f7ff ff63 	bl	8003480 <SSD1306_Write>
    SSD1306_Write(0xDB, SSD1306_COMMAND); // Set VCOMH Deselect Level
 80035ba:	2100      	movs	r1, #0
 80035bc:	20db      	movs	r0, #219	@ 0xdb
 80035be:	f7ff ff5f 	bl	8003480 <SSD1306_Write>
    SSD1306_Write(0x40, SSD1306_COMMAND); // Default VCOMH
 80035c2:	2100      	movs	r1, #0
 80035c4:	2040      	movs	r0, #64	@ 0x40
 80035c6:	f7ff ff5b 	bl	8003480 <SSD1306_Write>
    SSD1306_Write(0x8D, SSD1306_COMMAND); // Enable charge pump
 80035ca:	2100      	movs	r1, #0
 80035cc:	208d      	movs	r0, #141	@ 0x8d
 80035ce:	f7ff ff57 	bl	8003480 <SSD1306_Write>
    SSD1306_Write(0x14, SSD1306_COMMAND);
 80035d2:	2100      	movs	r1, #0
 80035d4:	2014      	movs	r0, #20
 80035d6:	f7ff ff53 	bl	8003480 <SSD1306_Write>
    SSD1306_Write(0xAF, SSD1306_COMMAND); // Display ON
 80035da:	2100      	movs	r1, #0
 80035dc:	20af      	movs	r0, #175	@ 0xaf
 80035de:	f7ff ff4f 	bl	8003480 <SSD1306_Write>

    SSD1306_Clear();
 80035e2:	f000 f80f 	bl	8003604 <SSD1306_Clear>
    SSD1306_UpdateScreen();
 80035e6:	f000 f84d 	bl	8003684 <SSD1306_UpdateScreen>

    HAL_Delay(10);                                        // Wait 10ms
 80035ea:	200a      	movs	r0, #10
 80035ec:	f000 fe5c 	bl	80042a8 <HAL_Delay>
}
 80035f0:	bf00      	nop
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	2000038c 	.word	0x2000038c
 80035fc:	08011db8 	.word	0x08011db8
 8003600:	40020400 	.word	0x40020400

08003604 <SSD1306_Clear>:

void SSD1306_Clear(void) {
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
    memset(SSD1306_Buffer, 0x00, sizeof(SSD1306_Buffer));
 8003608:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800360c:	2100      	movs	r1, #0
 800360e:	4802      	ldr	r0, [pc, #8]	@ (8003618 <SSD1306_Clear+0x14>)
 8003610:	f00a fb08 	bl	800dc24 <memset>
}
 8003614:	bf00      	nop
 8003616:	bd80      	pop	{r7, pc}
 8003618:	20000608 	.word	0x20000608

0800361c <SSD1306_ClearRegion>:

void SSD1306_ClearRegion(uint8_t x, uint8_t y, uint8_t width, uint8_t height) {
 800361c:	b590      	push	{r4, r7, lr}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	4604      	mov	r4, r0
 8003624:	4608      	mov	r0, r1
 8003626:	4611      	mov	r1, r2
 8003628:	461a      	mov	r2, r3
 800362a:	4623      	mov	r3, r4
 800362c:	71fb      	strb	r3, [r7, #7]
 800362e:	4603      	mov	r3, r0
 8003630:	71bb      	strb	r3, [r7, #6]
 8003632:	460b      	mov	r3, r1
 8003634:	717b      	strb	r3, [r7, #5]
 8003636:	4613      	mov	r3, r2
 8003638:	713b      	strb	r3, [r7, #4]
    for (uint8_t i = 0; i < width; i++) {
 800363a:	2300      	movs	r3, #0
 800363c:	73fb      	strb	r3, [r7, #15]
 800363e:	e018      	b.n	8003672 <SSD1306_ClearRegion+0x56>
        for (uint8_t j = 0; j < height; j++) {
 8003640:	2300      	movs	r3, #0
 8003642:	73bb      	strb	r3, [r7, #14]
 8003644:	e00e      	b.n	8003664 <SSD1306_ClearRegion+0x48>
            SSD1306_DrawPixel(x + i, y + j, 0); // Draw black pixels
 8003646:	79fa      	ldrb	r2, [r7, #7]
 8003648:	7bfb      	ldrb	r3, [r7, #15]
 800364a:	4413      	add	r3, r2
 800364c:	b2d8      	uxtb	r0, r3
 800364e:	79ba      	ldrb	r2, [r7, #6]
 8003650:	7bbb      	ldrb	r3, [r7, #14]
 8003652:	4413      	add	r3, r2
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2200      	movs	r2, #0
 8003658:	4619      	mov	r1, r3
 800365a:	f000 f849 	bl	80036f0 <SSD1306_DrawPixel>
        for (uint8_t j = 0; j < height; j++) {
 800365e:	7bbb      	ldrb	r3, [r7, #14]
 8003660:	3301      	adds	r3, #1
 8003662:	73bb      	strb	r3, [r7, #14]
 8003664:	7bba      	ldrb	r2, [r7, #14]
 8003666:	793b      	ldrb	r3, [r7, #4]
 8003668:	429a      	cmp	r2, r3
 800366a:	d3ec      	bcc.n	8003646 <SSD1306_ClearRegion+0x2a>
    for (uint8_t i = 0; i < width; i++) {
 800366c:	7bfb      	ldrb	r3, [r7, #15]
 800366e:	3301      	adds	r3, #1
 8003670:	73fb      	strb	r3, [r7, #15]
 8003672:	7bfa      	ldrb	r2, [r7, #15]
 8003674:	797b      	ldrb	r3, [r7, #5]
 8003676:	429a      	cmp	r2, r3
 8003678:	d3e2      	bcc.n	8003640 <SSD1306_ClearRegion+0x24>
        }
    }
}
 800367a:	bf00      	nop
 800367c:	bf00      	nop
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	bd90      	pop	{r4, r7, pc}

08003684 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
    for (uint8_t page = 0; page < 8; page++) {
 800368a:	2300      	movs	r3, #0
 800368c:	71fb      	strb	r3, [r7, #7]
 800368e:	e020      	b.n	80036d2 <SSD1306_UpdateScreen+0x4e>
        SSD1306_Write(0xB0 + page, SSD1306_COMMAND);
 8003690:	79fb      	ldrb	r3, [r7, #7]
 8003692:	3b50      	subs	r3, #80	@ 0x50
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2100      	movs	r1, #0
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff fef1 	bl	8003480 <SSD1306_Write>
        SSD1306_Write(0x00, SSD1306_COMMAND);
 800369e:	2100      	movs	r1, #0
 80036a0:	2000      	movs	r0, #0
 80036a2:	f7ff feed 	bl	8003480 <SSD1306_Write>
        SSD1306_Write(0x10, SSD1306_COMMAND);
 80036a6:	2100      	movs	r1, #0
 80036a8:	2010      	movs	r0, #16
 80036aa:	f7ff fee9 	bl	8003480 <SSD1306_Write>
        HAL_GPIO_WritePin(SSD1306_DC_GPIO, SSD1306_DC_PIN, GPIO_PIN_SET);
 80036ae:	2201      	movs	r2, #1
 80036b0:	2104      	movs	r1, #4
 80036b2:	480c      	ldr	r0, [pc, #48]	@ (80036e4 <SSD1306_UpdateScreen+0x60>)
 80036b4:	f001 fea4 	bl	8005400 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(SSD1306_SPI, &SSD1306_Buffer[page * SSD1306_WIDTH], SSD1306_WIDTH, HAL_MAX_DELAY);
 80036b8:	79fb      	ldrb	r3, [r7, #7]
 80036ba:	01db      	lsls	r3, r3, #7
 80036bc:	4a0a      	ldr	r2, [pc, #40]	@ (80036e8 <SSD1306_UpdateScreen+0x64>)
 80036be:	1899      	adds	r1, r3, r2
 80036c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80036c4:	2280      	movs	r2, #128	@ 0x80
 80036c6:	4809      	ldr	r0, [pc, #36]	@ (80036ec <SSD1306_UpdateScreen+0x68>)
 80036c8:	f003 feed 	bl	80074a6 <HAL_SPI_Transmit>
    for (uint8_t page = 0; page < 8; page++) {
 80036cc:	79fb      	ldrb	r3, [r7, #7]
 80036ce:	3301      	adds	r3, #1
 80036d0:	71fb      	strb	r3, [r7, #7]
 80036d2:	79fb      	ldrb	r3, [r7, #7]
 80036d4:	2b07      	cmp	r3, #7
 80036d6:	d9db      	bls.n	8003690 <SSD1306_UpdateScreen+0xc>
    }
}
 80036d8:	bf00      	nop
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40020400 	.word	0x40020400
 80036e8:	20000608 	.word	0x20000608
 80036ec:	2000038c 	.word	0x2000038c

080036f0 <SSD1306_DrawPixel>:
        }
    }
}


void SSD1306_DrawPixel(uint8_t x, uint8_t y, uint8_t color) {
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	71fb      	strb	r3, [r7, #7]
 80036fa:	460b      	mov	r3, r1
 80036fc:	71bb      	strb	r3, [r7, #6]
 80036fe:	4613      	mov	r3, r2
 8003700:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) return;
 8003702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003706:	2b00      	cmp	r3, #0
 8003708:	db3d      	blt.n	8003786 <SSD1306_DrawPixel+0x96>
 800370a:	79bb      	ldrb	r3, [r7, #6]
 800370c:	2b3f      	cmp	r3, #63	@ 0x3f
 800370e:	d83a      	bhi.n	8003786 <SSD1306_DrawPixel+0x96>

    if (color) {
 8003710:	797b      	ldrb	r3, [r7, #5]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d01a      	beq.n	800374c <SSD1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= (1 << (y % 8));
 8003716:	79fa      	ldrb	r2, [r7, #7]
 8003718:	79bb      	ldrb	r3, [r7, #6]
 800371a:	08db      	lsrs	r3, r3, #3
 800371c:	b2d8      	uxtb	r0, r3
 800371e:	4603      	mov	r3, r0
 8003720:	01db      	lsls	r3, r3, #7
 8003722:	4413      	add	r3, r2
 8003724:	4a1b      	ldr	r2, [pc, #108]	@ (8003794 <SSD1306_DrawPixel+0xa4>)
 8003726:	5cd3      	ldrb	r3, [r2, r3]
 8003728:	b25a      	sxtb	r2, r3
 800372a:	79bb      	ldrb	r3, [r7, #6]
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	2101      	movs	r1, #1
 8003732:	fa01 f303 	lsl.w	r3, r1, r3
 8003736:	b25b      	sxtb	r3, r3
 8003738:	4313      	orrs	r3, r2
 800373a:	b259      	sxtb	r1, r3
 800373c:	79fa      	ldrb	r2, [r7, #7]
 800373e:	4603      	mov	r3, r0
 8003740:	01db      	lsls	r3, r3, #7
 8003742:	4413      	add	r3, r2
 8003744:	b2c9      	uxtb	r1, r1
 8003746:	4a13      	ldr	r2, [pc, #76]	@ (8003794 <SSD1306_DrawPixel+0xa4>)
 8003748:	54d1      	strb	r1, [r2, r3]
 800374a:	e01d      	b.n	8003788 <SSD1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800374c:	79fa      	ldrb	r2, [r7, #7]
 800374e:	79bb      	ldrb	r3, [r7, #6]
 8003750:	08db      	lsrs	r3, r3, #3
 8003752:	b2d8      	uxtb	r0, r3
 8003754:	4603      	mov	r3, r0
 8003756:	01db      	lsls	r3, r3, #7
 8003758:	4413      	add	r3, r2
 800375a:	4a0e      	ldr	r2, [pc, #56]	@ (8003794 <SSD1306_DrawPixel+0xa4>)
 800375c:	5cd3      	ldrb	r3, [r2, r3]
 800375e:	b25a      	sxtb	r2, r3
 8003760:	79bb      	ldrb	r3, [r7, #6]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	2101      	movs	r1, #1
 8003768:	fa01 f303 	lsl.w	r3, r1, r3
 800376c:	b25b      	sxtb	r3, r3
 800376e:	43db      	mvns	r3, r3
 8003770:	b25b      	sxtb	r3, r3
 8003772:	4013      	ands	r3, r2
 8003774:	b259      	sxtb	r1, r3
 8003776:	79fa      	ldrb	r2, [r7, #7]
 8003778:	4603      	mov	r3, r0
 800377a:	01db      	lsls	r3, r3, #7
 800377c:	4413      	add	r3, r2
 800377e:	b2c9      	uxtb	r1, r1
 8003780:	4a04      	ldr	r2, [pc, #16]	@ (8003794 <SSD1306_DrawPixel+0xa4>)
 8003782:	54d1      	strb	r1, [r2, r3]
 8003784:	e000      	b.n	8003788 <SSD1306_DrawPixel+0x98>
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) return;
 8003786:	bf00      	nop
    }
}
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	20000608 	.word	0x20000608

08003798 <SSD1306_DrawChar>:

void SSD1306_DrawChar(uint8_t x, uint8_t y, char c, uint8_t color) {
 8003798:	b590      	push	{r4, r7, lr}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	4604      	mov	r4, r0
 80037a0:	4608      	mov	r0, r1
 80037a2:	4611      	mov	r1, r2
 80037a4:	461a      	mov	r2, r3
 80037a6:	4623      	mov	r3, r4
 80037a8:	71fb      	strb	r3, [r7, #7]
 80037aa:	4603      	mov	r3, r0
 80037ac:	71bb      	strb	r3, [r7, #6]
 80037ae:	460b      	mov	r3, r1
 80037b0:	717b      	strb	r3, [r7, #5]
 80037b2:	4613      	mov	r3, r2
 80037b4:	713b      	strb	r3, [r7, #4]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) return;
 80037b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	db4e      	blt.n	800385c <SSD1306_DrawChar+0xc4>
 80037be:	79bb      	ldrb	r3, [r7, #6]
 80037c0:	2b3f      	cmp	r3, #63	@ 0x3f
 80037c2:	d84b      	bhi.n	800385c <SSD1306_DrawChar+0xc4>

    if (c < 32 || c > 126) c = '?'; // Replace unsupported characters with '?'
 80037c4:	797b      	ldrb	r3, [r7, #5]
 80037c6:	2b1f      	cmp	r3, #31
 80037c8:	d902      	bls.n	80037d0 <SSD1306_DrawChar+0x38>
 80037ca:	797b      	ldrb	r3, [r7, #5]
 80037cc:	2b7e      	cmp	r3, #126	@ 0x7e
 80037ce:	d901      	bls.n	80037d4 <SSD1306_DrawChar+0x3c>
 80037d0:	233f      	movs	r3, #63	@ 0x3f
 80037d2:	717b      	strb	r3, [r7, #5]

    for (uint8_t i = 0; i < 5; i++) { // Each character is 5 pixels wide
 80037d4:	2300      	movs	r3, #0
 80037d6:	73fb      	strb	r3, [r7, #15]
 80037d8:	e03c      	b.n	8003854 <SSD1306_DrawChar+0xbc>
        uint8_t line = Font5x7[(c - 32) * 5 + i];
 80037da:	797b      	ldrb	r3, [r7, #5]
 80037dc:	f1a3 0220 	sub.w	r2, r3, #32
 80037e0:	4613      	mov	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	441a      	add	r2, r3
 80037e6:	7bfb      	ldrb	r3, [r7, #15]
 80037e8:	4413      	add	r3, r2
 80037ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003864 <SSD1306_DrawChar+0xcc>)
 80037ec:	5cd3      	ldrb	r3, [r2, r3]
 80037ee:	737b      	strb	r3, [r7, #13]
        for (uint8_t j = 0; j < 8; j++) { // Each character is 7 pixels tall
 80037f0:	2300      	movs	r3, #0
 80037f2:	73bb      	strb	r3, [r7, #14]
 80037f4:	e028      	b.n	8003848 <SSD1306_DrawChar+0xb0>
            if (line & (1 << j)) {
 80037f6:	7b7a      	ldrb	r2, [r7, #13]
 80037f8:	7bbb      	ldrb	r3, [r7, #14]
 80037fa:	fa42 f303 	asr.w	r3, r2, r3
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00c      	beq.n	8003820 <SSD1306_DrawChar+0x88>
                SSD1306_DrawPixel(x + i, y + j, color);
 8003806:	79fa      	ldrb	r2, [r7, #7]
 8003808:	7bfb      	ldrb	r3, [r7, #15]
 800380a:	4413      	add	r3, r2
 800380c:	b2d8      	uxtb	r0, r3
 800380e:	79ba      	ldrb	r2, [r7, #6]
 8003810:	7bbb      	ldrb	r3, [r7, #14]
 8003812:	4413      	add	r3, r2
 8003814:	b2db      	uxtb	r3, r3
 8003816:	793a      	ldrb	r2, [r7, #4]
 8003818:	4619      	mov	r1, r3
 800381a:	f7ff ff69 	bl	80036f0 <SSD1306_DrawPixel>
 800381e:	e010      	b.n	8003842 <SSD1306_DrawChar+0xaa>
            } else {
                SSD1306_DrawPixel(x + i, y + j, !color);
 8003820:	79fa      	ldrb	r2, [r7, #7]
 8003822:	7bfb      	ldrb	r3, [r7, #15]
 8003824:	4413      	add	r3, r2
 8003826:	b2d8      	uxtb	r0, r3
 8003828:	79ba      	ldrb	r2, [r7, #6]
 800382a:	7bbb      	ldrb	r3, [r7, #14]
 800382c:	4413      	add	r3, r2
 800382e:	b2d9      	uxtb	r1, r3
 8003830:	793b      	ldrb	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	bf0c      	ite	eq
 8003836:	2301      	moveq	r3, #1
 8003838:	2300      	movne	r3, #0
 800383a:	b2db      	uxtb	r3, r3
 800383c:	461a      	mov	r2, r3
 800383e:	f7ff ff57 	bl	80036f0 <SSD1306_DrawPixel>
        for (uint8_t j = 0; j < 8; j++) { // Each character is 7 pixels tall
 8003842:	7bbb      	ldrb	r3, [r7, #14]
 8003844:	3301      	adds	r3, #1
 8003846:	73bb      	strb	r3, [r7, #14]
 8003848:	7bbb      	ldrb	r3, [r7, #14]
 800384a:	2b07      	cmp	r3, #7
 800384c:	d9d3      	bls.n	80037f6 <SSD1306_DrawChar+0x5e>
    for (uint8_t i = 0; i < 5; i++) { // Each character is 5 pixels wide
 800384e:	7bfb      	ldrb	r3, [r7, #15]
 8003850:	3301      	adds	r3, #1
 8003852:	73fb      	strb	r3, [r7, #15]
 8003854:	7bfb      	ldrb	r3, [r7, #15]
 8003856:	2b04      	cmp	r3, #4
 8003858:	d9bf      	bls.n	80037da <SSD1306_DrawChar+0x42>
 800385a:	e000      	b.n	800385e <SSD1306_DrawChar+0xc6>
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) return;
 800385c:	bf00      	nop
            }
        }
    }
}
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	bd90      	pop	{r4, r7, pc}
 8003864:	08011eb0 	.word	0x08011eb0

08003868 <SSD1306_DrawString>:

void SSD1306_DrawString(uint8_t x, uint8_t y, const char* str, uint8_t color) {
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	603a      	str	r2, [r7, #0]
 8003870:	461a      	mov	r2, r3
 8003872:	4603      	mov	r3, r0
 8003874:	71fb      	strb	r3, [r7, #7]
 8003876:	460b      	mov	r3, r1
 8003878:	71bb      	strb	r3, [r7, #6]
 800387a:	4613      	mov	r3, r2
 800387c:	717b      	strb	r3, [r7, #5]
    while (*str) {
 800387e:	e00f      	b.n	80038a0 <SSD1306_DrawString+0x38>
        SSD1306_DrawChar(x, y, *str, color);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	781a      	ldrb	r2, [r3, #0]
 8003884:	797b      	ldrb	r3, [r7, #5]
 8003886:	79b9      	ldrb	r1, [r7, #6]
 8003888:	79f8      	ldrb	r0, [r7, #7]
 800388a:	f7ff ff85 	bl	8003798 <SSD1306_DrawChar>
        x += 6; // Move to the next character (5 pixels + 1 space)
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	3306      	adds	r3, #6
 8003892:	71fb      	strb	r3, [r7, #7]
        str++;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	3301      	adds	r3, #1
 8003898:	603b      	str	r3, [r7, #0]
        if (x + 5 >= SSD1306_WIDTH) break; // Stop if the string goes off-screen
 800389a:	79fb      	ldrb	r3, [r7, #7]
 800389c:	2b7a      	cmp	r3, #122	@ 0x7a
 800389e:	d804      	bhi.n	80038aa <SSD1306_DrawString+0x42>
    while (*str) {
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1eb      	bne.n	8003880 <SSD1306_DrawString+0x18>
    }
}
 80038a8:	e000      	b.n	80038ac <SSD1306_DrawString+0x44>
        if (x + 5 >= SSD1306_WIDTH) break; // Stop if the string goes off-screen
 80038aa:	bf00      	nop
}
 80038ac:	bf00      	nop
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <SSD1306_DrawFloat>:
    char buffer[12]; // Buffer to hold the number as a string
    snprintf(buffer, sizeof(buffer), "%d", number); // Convert number to string
    SSD1306_DrawString(x, y, buffer, color);
}

void SSD1306_DrawFloat(uint8_t x, uint8_t y, float number, uint8_t decimal_places, uint8_t color) {
 80038b4:	b590      	push	{r4, r7, lr}
 80038b6:	b08b      	sub	sp, #44	@ 0x2c
 80038b8:	af02      	add	r7, sp, #8
 80038ba:	4604      	mov	r4, r0
 80038bc:	4608      	mov	r0, r1
 80038be:	ed87 0a00 	vstr	s0, [r7]
 80038c2:	4611      	mov	r1, r2
 80038c4:	461a      	mov	r2, r3
 80038c6:	4623      	mov	r3, r4
 80038c8:	71fb      	strb	r3, [r7, #7]
 80038ca:	4603      	mov	r3, r0
 80038cc:	71bb      	strb	r3, [r7, #6]
 80038ce:	460b      	mov	r3, r1
 80038d0:	717b      	strb	r3, [r7, #5]
 80038d2:	4613      	mov	r3, r2
 80038d4:	713b      	strb	r3, [r7, #4]
    char buffer[20]; // Buffer to hold the converted float as a string
    snprintf(buffer, sizeof(buffer), "%.*f", decimal_places, number); // Convert float to string
 80038d6:	797c      	ldrb	r4, [r7, #5]
 80038d8:	6838      	ldr	r0, [r7, #0]
 80038da:	f7fc fe55 	bl	8000588 <__aeabi_f2d>
 80038de:	4602      	mov	r2, r0
 80038e0:	460b      	mov	r3, r1
 80038e2:	f107 000c 	add.w	r0, r7, #12
 80038e6:	e9cd 2300 	strd	r2, r3, [sp]
 80038ea:	4623      	mov	r3, r4
 80038ec:	4a07      	ldr	r2, [pc, #28]	@ (800390c <SSD1306_DrawFloat+0x58>)
 80038ee:	2114      	movs	r1, #20
 80038f0:	f00a f88c 	bl	800da0c <sniprintf>
    SSD1306_DrawString(x, y, buffer, color); // Use the existing string drawing function
 80038f4:	793b      	ldrb	r3, [r7, #4]
 80038f6:	f107 020c 	add.w	r2, r7, #12
 80038fa:	79b9      	ldrb	r1, [r7, #6]
 80038fc:	79f8      	ldrb	r0, [r7, #7]
 80038fe:	f7ff ffb3 	bl	8003868 <SSD1306_DrawString>
}
 8003902:	bf00      	nop
 8003904:	3724      	adds	r7, #36	@ 0x24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd90      	pop	{r4, r7, pc}
 800390a:	bf00      	nop
 800390c:	08011dd4 	.word	0x08011dd4

08003910 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003916:	2300      	movs	r3, #0
 8003918:	607b      	str	r3, [r7, #4]
 800391a:	4b12      	ldr	r3, [pc, #72]	@ (8003964 <HAL_MspInit+0x54>)
 800391c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391e:	4a11      	ldr	r2, [pc, #68]	@ (8003964 <HAL_MspInit+0x54>)
 8003920:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003924:	6453      	str	r3, [r2, #68]	@ 0x44
 8003926:	4b0f      	ldr	r3, [pc, #60]	@ (8003964 <HAL_MspInit+0x54>)
 8003928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800392a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800392e:	607b      	str	r3, [r7, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003932:	2300      	movs	r3, #0
 8003934:	603b      	str	r3, [r7, #0]
 8003936:	4b0b      	ldr	r3, [pc, #44]	@ (8003964 <HAL_MspInit+0x54>)
 8003938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393a:	4a0a      	ldr	r2, [pc, #40]	@ (8003964 <HAL_MspInit+0x54>)
 800393c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003940:	6413      	str	r3, [r2, #64]	@ 0x40
 8003942:	4b08      	ldr	r3, [pc, #32]	@ (8003964 <HAL_MspInit+0x54>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800394a:	603b      	str	r3, [r7, #0]
 800394c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800394e:	2200      	movs	r2, #0
 8003950:	210f      	movs	r1, #15
 8003952:	f06f 0001 	mvn.w	r0, #1
 8003956:	f001 f818 	bl	800498a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	40023800 	.word	0x40023800

08003968 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b08a      	sub	sp, #40	@ 0x28
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003970:	f107 0314 	add.w	r3, r7, #20
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	605a      	str	r2, [r3, #4]
 800397a:	609a      	str	r2, [r3, #8]
 800397c:	60da      	str	r2, [r3, #12]
 800397e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a17      	ldr	r2, [pc, #92]	@ (80039e4 <HAL_ADC_MspInit+0x7c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d127      	bne.n	80039da <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800398a:	2300      	movs	r3, #0
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	4b16      	ldr	r3, [pc, #88]	@ (80039e8 <HAL_ADC_MspInit+0x80>)
 8003990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003992:	4a15      	ldr	r2, [pc, #84]	@ (80039e8 <HAL_ADC_MspInit+0x80>)
 8003994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003998:	6453      	str	r3, [r2, #68]	@ 0x44
 800399a:	4b13      	ldr	r3, [pc, #76]	@ (80039e8 <HAL_ADC_MspInit+0x80>)
 800399c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039a2:	613b      	str	r3, [r7, #16]
 80039a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039a6:	2300      	movs	r3, #0
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	4b0f      	ldr	r3, [pc, #60]	@ (80039e8 <HAL_ADC_MspInit+0x80>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ae:	4a0e      	ldr	r2, [pc, #56]	@ (80039e8 <HAL_ADC_MspInit+0x80>)
 80039b0:	f043 0304 	orr.w	r3, r3, #4
 80039b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80039b6:	4b0c      	ldr	r3, [pc, #48]	@ (80039e8 <HAL_ADC_MspInit+0x80>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ba:	f003 0304 	and.w	r3, r3, #4
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80039c2:	2303      	movs	r3, #3
 80039c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039c6:	2303      	movs	r3, #3
 80039c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039ce:	f107 0314 	add.w	r3, r7, #20
 80039d2:	4619      	mov	r1, r3
 80039d4:	4805      	ldr	r0, [pc, #20]	@ (80039ec <HAL_ADC_MspInit+0x84>)
 80039d6:	f001 fb7f 	bl	80050d8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80039da:	bf00      	nop
 80039dc:	3728      	adds	r7, #40	@ 0x28
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	40012000 	.word	0x40012000
 80039e8:	40023800 	.word	0x40023800
 80039ec:	40020800 	.word	0x40020800

080039f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08a      	sub	sp, #40	@ 0x28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f8:	f107 0314 	add.w	r3, r7, #20
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	605a      	str	r2, [r3, #4]
 8003a02:	609a      	str	r2, [r3, #8]
 8003a04:	60da      	str	r2, [r3, #12]
 8003a06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a48      	ldr	r2, [pc, #288]	@ (8003b30 <HAL_I2C_MspInit+0x140>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	f040 808a 	bne.w	8003b28 <HAL_I2C_MspInit+0x138>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a14:	2300      	movs	r3, #0
 8003a16:	613b      	str	r3, [r7, #16]
 8003a18:	4b46      	ldr	r3, [pc, #280]	@ (8003b34 <HAL_I2C_MspInit+0x144>)
 8003a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1c:	4a45      	ldr	r2, [pc, #276]	@ (8003b34 <HAL_I2C_MspInit+0x144>)
 8003a1e:	f043 0302 	orr.w	r3, r3, #2
 8003a22:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a24:	4b43      	ldr	r3, [pc, #268]	@ (8003b34 <HAL_I2C_MspInit+0x144>)
 8003a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a30:	23c0      	movs	r3, #192	@ 0xc0
 8003a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a34:	2312      	movs	r3, #18
 8003a36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003a40:	2304      	movs	r3, #4
 8003a42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a44:	f107 0314 	add.w	r3, r7, #20
 8003a48:	4619      	mov	r1, r3
 8003a4a:	483b      	ldr	r0, [pc, #236]	@ (8003b38 <HAL_I2C_MspInit+0x148>)
 8003a4c:	f001 fb44 	bl	80050d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a50:	2300      	movs	r3, #0
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	4b37      	ldr	r3, [pc, #220]	@ (8003b34 <HAL_I2C_MspInit+0x144>)
 8003a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a58:	4a36      	ldr	r2, [pc, #216]	@ (8003b34 <HAL_I2C_MspInit+0x144>)
 8003a5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003a5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a60:	4b34      	ldr	r3, [pc, #208]	@ (8003b34 <HAL_I2C_MspInit+0x144>)
 8003a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8003a6c:	4b33      	ldr	r3, [pc, #204]	@ (8003b3c <HAL_I2C_MspInit+0x14c>)
 8003a6e:	4a34      	ldr	r2, [pc, #208]	@ (8003b40 <HAL_I2C_MspInit+0x150>)
 8003a70:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8003a72:	4b32      	ldr	r3, [pc, #200]	@ (8003b3c <HAL_I2C_MspInit+0x14c>)
 8003a74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a78:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a7a:	4b30      	ldr	r3, [pc, #192]	@ (8003b3c <HAL_I2C_MspInit+0x14c>)
 8003a7c:	2240      	movs	r2, #64	@ 0x40
 8003a7e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a80:	4b2e      	ldr	r3, [pc, #184]	@ (8003b3c <HAL_I2C_MspInit+0x14c>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a86:	4b2d      	ldr	r3, [pc, #180]	@ (8003b3c <HAL_I2C_MspInit+0x14c>)
 8003a88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a8c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a8e:	4b2b      	ldr	r3, [pc, #172]	@ (8003b3c <HAL_I2C_MspInit+0x14c>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a94:	4b29      	ldr	r3, [pc, #164]	@ (8003b3c <HAL_I2C_MspInit+0x14c>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003a9a:	4b28      	ldr	r3, [pc, #160]	@ (8003b3c <HAL_I2C_MspInit+0x14c>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003aa0:	4b26      	ldr	r3, [pc, #152]	@ (8003b3c <HAL_I2C_MspInit+0x14c>)
 8003aa2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003aa6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003aa8:	4b24      	ldr	r3, [pc, #144]	@ (8003b3c <HAL_I2C_MspInit+0x14c>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003aae:	4823      	ldr	r0, [pc, #140]	@ (8003b3c <HAL_I2C_MspInit+0x14c>)
 8003ab0:	f000 ffa2 	bl	80049f8 <HAL_DMA_Init>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8003aba:	f7fe fc1f 	bl	80022fc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8003b3c <HAL_I2C_MspInit+0x14c>)
 8003ac2:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8003b3c <HAL_I2C_MspInit+0x14c>)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8003aca:	4b1e      	ldr	r3, [pc, #120]	@ (8003b44 <HAL_I2C_MspInit+0x154>)
 8003acc:	4a1e      	ldr	r2, [pc, #120]	@ (8003b48 <HAL_I2C_MspInit+0x158>)
 8003ace:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003ad0:	4b1c      	ldr	r3, [pc, #112]	@ (8003b44 <HAL_I2C_MspInit+0x154>)
 8003ad2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ad6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b44 <HAL_I2C_MspInit+0x154>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ade:	4b19      	ldr	r3, [pc, #100]	@ (8003b44 <HAL_I2C_MspInit+0x154>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ae4:	4b17      	ldr	r3, [pc, #92]	@ (8003b44 <HAL_I2C_MspInit+0x154>)
 8003ae6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003aea:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003aec:	4b15      	ldr	r3, [pc, #84]	@ (8003b44 <HAL_I2C_MspInit+0x154>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003af2:	4b14      	ldr	r3, [pc, #80]	@ (8003b44 <HAL_I2C_MspInit+0x154>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003af8:	4b12      	ldr	r3, [pc, #72]	@ (8003b44 <HAL_I2C_MspInit+0x154>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003afe:	4b11      	ldr	r3, [pc, #68]	@ (8003b44 <HAL_I2C_MspInit+0x154>)
 8003b00:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b04:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b06:	4b0f      	ldr	r3, [pc, #60]	@ (8003b44 <HAL_I2C_MspInit+0x154>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003b0c:	480d      	ldr	r0, [pc, #52]	@ (8003b44 <HAL_I2C_MspInit+0x154>)
 8003b0e:	f000 ff73 	bl	80049f8 <HAL_DMA_Init>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 8003b18:	f7fe fbf0 	bl	80022fc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a09      	ldr	r2, [pc, #36]	@ (8003b44 <HAL_I2C_MspInit+0x154>)
 8003b20:	639a      	str	r2, [r3, #56]	@ 0x38
 8003b22:	4a08      	ldr	r2, [pc, #32]	@ (8003b44 <HAL_I2C_MspInit+0x154>)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003b28:	bf00      	nop
 8003b2a:	3728      	adds	r7, #40	@ 0x28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40005400 	.word	0x40005400
 8003b34:	40023800 	.word	0x40023800
 8003b38:	40020400 	.word	0x40020400
 8003b3c:	200002cc 	.word	0x200002cc
 8003b40:	400260b8 	.word	0x400260b8
 8003b44:	2000032c 	.word	0x2000032c
 8003b48:	40026010 	.word	0x40026010

08003b4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08a      	sub	sp, #40	@ 0x28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b54:	f107 0314 	add.w	r3, r7, #20
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	605a      	str	r2, [r3, #4]
 8003b5e:	609a      	str	r2, [r3, #8]
 8003b60:	60da      	str	r2, [r3, #12]
 8003b62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a19      	ldr	r2, [pc, #100]	@ (8003bd0 <HAL_SPI_MspInit+0x84>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d12b      	bne.n	8003bc6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b6e:	2300      	movs	r3, #0
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	4b18      	ldr	r3, [pc, #96]	@ (8003bd4 <HAL_SPI_MspInit+0x88>)
 8003b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b76:	4a17      	ldr	r2, [pc, #92]	@ (8003bd4 <HAL_SPI_MspInit+0x88>)
 8003b78:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b7e:	4b15      	ldr	r3, [pc, #84]	@ (8003bd4 <HAL_SPI_MspInit+0x88>)
 8003b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b86:	613b      	str	r3, [r7, #16]
 8003b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	4b11      	ldr	r3, [pc, #68]	@ (8003bd4 <HAL_SPI_MspInit+0x88>)
 8003b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b92:	4a10      	ldr	r2, [pc, #64]	@ (8003bd4 <HAL_SPI_MspInit+0x88>)
 8003b94:	f043 0301 	orr.w	r3, r3, #1
 8003b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8003bd4 <HAL_SPI_MspInit+0x88>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003ba6:	23e0      	movs	r3, #224	@ 0xe0
 8003ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003baa:	2302      	movs	r3, #2
 8003bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003bb6:	2305      	movs	r3, #5
 8003bb8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bba:	f107 0314 	add.w	r3, r7, #20
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4805      	ldr	r0, [pc, #20]	@ (8003bd8 <HAL_SPI_MspInit+0x8c>)
 8003bc2:	f001 fa89 	bl	80050d8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003bc6:	bf00      	nop
 8003bc8:	3728      	adds	r7, #40	@ 0x28
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40013000 	.word	0x40013000
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	40020000 	.word	0x40020000

08003bdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a29      	ldr	r2, [pc, #164]	@ (8003c90 <HAL_TIM_Base_MspInit+0xb4>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d10e      	bne.n	8003c0c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003bee:	2300      	movs	r3, #0
 8003bf0:	617b      	str	r3, [r7, #20]
 8003bf2:	4b28      	ldr	r3, [pc, #160]	@ (8003c94 <HAL_TIM_Base_MspInit+0xb8>)
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf6:	4a27      	ldr	r2, [pc, #156]	@ (8003c94 <HAL_TIM_Base_MspInit+0xb8>)
 8003bf8:	f043 0301 	orr.w	r3, r3, #1
 8003bfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bfe:	4b25      	ldr	r3, [pc, #148]	@ (8003c94 <HAL_TIM_Base_MspInit+0xb8>)
 8003c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003c0a:	e03a      	b.n	8003c82 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c14:	d10e      	bne.n	8003c34 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c16:	2300      	movs	r3, #0
 8003c18:	613b      	str	r3, [r7, #16]
 8003c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003c94 <HAL_TIM_Base_MspInit+0xb8>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1e:	4a1d      	ldr	r2, [pc, #116]	@ (8003c94 <HAL_TIM_Base_MspInit+0xb8>)
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c26:	4b1b      	ldr	r3, [pc, #108]	@ (8003c94 <HAL_TIM_Base_MspInit+0xb8>)
 8003c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	613b      	str	r3, [r7, #16]
 8003c30:	693b      	ldr	r3, [r7, #16]
}
 8003c32:	e026      	b.n	8003c82 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a17      	ldr	r2, [pc, #92]	@ (8003c98 <HAL_TIM_Base_MspInit+0xbc>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d10e      	bne.n	8003c5c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	4b14      	ldr	r3, [pc, #80]	@ (8003c94 <HAL_TIM_Base_MspInit+0xb8>)
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	4a13      	ldr	r2, [pc, #76]	@ (8003c94 <HAL_TIM_Base_MspInit+0xb8>)
 8003c48:	f043 0302 	orr.w	r3, r3, #2
 8003c4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c4e:	4b11      	ldr	r3, [pc, #68]	@ (8003c94 <HAL_TIM_Base_MspInit+0xb8>)
 8003c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	68fb      	ldr	r3, [r7, #12]
}
 8003c5a:	e012      	b.n	8003c82 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM8)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a0e      	ldr	r2, [pc, #56]	@ (8003c9c <HAL_TIM_Base_MspInit+0xc0>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d10d      	bne.n	8003c82 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003c66:	2300      	movs	r3, #0
 8003c68:	60bb      	str	r3, [r7, #8]
 8003c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c94 <HAL_TIM_Base_MspInit+0xb8>)
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6e:	4a09      	ldr	r2, [pc, #36]	@ (8003c94 <HAL_TIM_Base_MspInit+0xb8>)
 8003c70:	f043 0302 	orr.w	r3, r3, #2
 8003c74:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c76:	4b07      	ldr	r3, [pc, #28]	@ (8003c94 <HAL_TIM_Base_MspInit+0xb8>)
 8003c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	60bb      	str	r3, [r7, #8]
 8003c80:	68bb      	ldr	r3, [r7, #8]
}
 8003c82:	bf00      	nop
 8003c84:	371c      	adds	r7, #28
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	40010000 	.word	0x40010000
 8003c94:	40023800 	.word	0x40023800
 8003c98:	40000400 	.word	0x40000400
 8003c9c:	40010400 	.word	0x40010400

08003ca0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08c      	sub	sp, #48	@ 0x30
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca8:	f107 031c 	add.w	r3, r7, #28
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	605a      	str	r2, [r3, #4]
 8003cb2:	609a      	str	r2, [r3, #8]
 8003cb4:	60da      	str	r2, [r3, #12]
 8003cb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a58      	ldr	r2, [pc, #352]	@ (8003e20 <HAL_TIM_MspPostInit+0x180>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d11f      	bne.n	8003d02 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61bb      	str	r3, [r7, #24]
 8003cc6:	4b57      	ldr	r3, [pc, #348]	@ (8003e24 <HAL_TIM_MspPostInit+0x184>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cca:	4a56      	ldr	r2, [pc, #344]	@ (8003e24 <HAL_TIM_MspPostInit+0x184>)
 8003ccc:	f043 0301 	orr.w	r3, r3, #1
 8003cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cd2:	4b54      	ldr	r3, [pc, #336]	@ (8003e24 <HAL_TIM_MspPostInit+0x184>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	61bb      	str	r3, [r7, #24]
 8003cdc:	69bb      	ldr	r3, [r7, #24]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003cde:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003cec:	2301      	movs	r3, #1
 8003cee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cf4:	f107 031c 	add.w	r3, r7, #28
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	484b      	ldr	r0, [pc, #300]	@ (8003e28 <HAL_TIM_MspPostInit+0x188>)
 8003cfc:	f001 f9ec 	bl	80050d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003d00:	e08a      	b.n	8003e18 <HAL_TIM_MspPostInit+0x178>
  else if(htim->Instance==TIM2)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d0a:	d13d      	bne.n	8003d88 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	4b44      	ldr	r3, [pc, #272]	@ (8003e24 <HAL_TIM_MspPostInit+0x184>)
 8003d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d14:	4a43      	ldr	r2, [pc, #268]	@ (8003e24 <HAL_TIM_MspPostInit+0x184>)
 8003d16:	f043 0301 	orr.w	r3, r3, #1
 8003d1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d1c:	4b41      	ldr	r3, [pc, #260]	@ (8003e24 <HAL_TIM_MspPostInit+0x184>)
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d28:	2300      	movs	r3, #0
 8003d2a:	613b      	str	r3, [r7, #16]
 8003d2c:	4b3d      	ldr	r3, [pc, #244]	@ (8003e24 <HAL_TIM_MspPostInit+0x184>)
 8003d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d30:	4a3c      	ldr	r2, [pc, #240]	@ (8003e24 <HAL_TIM_MspPostInit+0x184>)
 8003d32:	f043 0302 	orr.w	r3, r3, #2
 8003d36:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d38:	4b3a      	ldr	r3, [pc, #232]	@ (8003e24 <HAL_TIM_MspPostInit+0x184>)
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	613b      	str	r3, [r7, #16]
 8003d42:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003d44:	2302      	movs	r3, #2
 8003d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d48:	2302      	movs	r3, #2
 8003d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003d50:	2301      	movs	r3, #1
 8003d52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d54:	2301      	movs	r3, #1
 8003d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d58:	f107 031c 	add.w	r3, r7, #28
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4832      	ldr	r0, [pc, #200]	@ (8003e28 <HAL_TIM_MspPostInit+0x188>)
 8003d60:	f001 f9ba 	bl	80050d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003d64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d72:	2300      	movs	r3, #0
 8003d74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d76:	2301      	movs	r3, #1
 8003d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d7a:	f107 031c 	add.w	r3, r7, #28
 8003d7e:	4619      	mov	r1, r3
 8003d80:	482a      	ldr	r0, [pc, #168]	@ (8003e2c <HAL_TIM_MspPostInit+0x18c>)
 8003d82:	f001 f9a9 	bl	80050d8 <HAL_GPIO_Init>
}
 8003d86:	e047      	b.n	8003e18 <HAL_TIM_MspPostInit+0x178>
  else if(htim->Instance==TIM3)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a28      	ldr	r2, [pc, #160]	@ (8003e30 <HAL_TIM_MspPostInit+0x190>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d11e      	bne.n	8003dd0 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	4b23      	ldr	r3, [pc, #140]	@ (8003e24 <HAL_TIM_MspPostInit+0x184>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9a:	4a22      	ldr	r2, [pc, #136]	@ (8003e24 <HAL_TIM_MspPostInit+0x184>)
 8003d9c:	f043 0302 	orr.w	r3, r3, #2
 8003da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003da2:	4b20      	ldr	r3, [pc, #128]	@ (8003e24 <HAL_TIM_MspPostInit+0x184>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003dae:	2330      	movs	r3, #48	@ 0x30
 8003db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db2:	2302      	movs	r3, #2
 8003db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db6:	2300      	movs	r3, #0
 8003db8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dc2:	f107 031c 	add.w	r3, r7, #28
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4818      	ldr	r0, [pc, #96]	@ (8003e2c <HAL_TIM_MspPostInit+0x18c>)
 8003dca:	f001 f985 	bl	80050d8 <HAL_GPIO_Init>
}
 8003dce:	e023      	b.n	8003e18 <HAL_TIM_MspPostInit+0x178>
  else if(htim->Instance==TIM8)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a17      	ldr	r2, [pc, #92]	@ (8003e34 <HAL_TIM_MspPostInit+0x194>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d11e      	bne.n	8003e18 <HAL_TIM_MspPostInit+0x178>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	4b11      	ldr	r3, [pc, #68]	@ (8003e24 <HAL_TIM_MspPostInit+0x184>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de2:	4a10      	ldr	r2, [pc, #64]	@ (8003e24 <HAL_TIM_MspPostInit+0x184>)
 8003de4:	f043 0304 	orr.w	r3, r3, #4
 8003de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dea:	4b0e      	ldr	r3, [pc, #56]	@ (8003e24 <HAL_TIM_MspPostInit+0x184>)
 8003dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	60bb      	str	r3, [r7, #8]
 8003df4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003df6:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e00:	2300      	movs	r3, #0
 8003e02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003e04:	2301      	movs	r3, #1
 8003e06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e0c:	f107 031c 	add.w	r3, r7, #28
 8003e10:	4619      	mov	r1, r3
 8003e12:	4809      	ldr	r0, [pc, #36]	@ (8003e38 <HAL_TIM_MspPostInit+0x198>)
 8003e14:	f001 f960 	bl	80050d8 <HAL_GPIO_Init>
}
 8003e18:	bf00      	nop
 8003e1a:	3730      	adds	r7, #48	@ 0x30
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40010000 	.word	0x40010000
 8003e24:	40023800 	.word	0x40023800
 8003e28:	40020000 	.word	0x40020000
 8003e2c:	40020400 	.word	0x40020400
 8003e30:	40000400 	.word	0x40000400
 8003e34:	40010400 	.word	0x40010400
 8003e38:	40020800 	.word	0x40020800

08003e3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b08a      	sub	sp, #40	@ 0x28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e44:	f107 0314 	add.w	r3, r7, #20
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	605a      	str	r2, [r3, #4]
 8003e4e:	609a      	str	r2, [r3, #8]
 8003e50:	60da      	str	r2, [r3, #12]
 8003e52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a30      	ldr	r2, [pc, #192]	@ (8003f1c <HAL_UART_MspInit+0xe0>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d159      	bne.n	8003f12 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e5e:	2300      	movs	r3, #0
 8003e60:	613b      	str	r3, [r7, #16]
 8003e62:	4b2f      	ldr	r3, [pc, #188]	@ (8003f20 <HAL_UART_MspInit+0xe4>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e66:	4a2e      	ldr	r2, [pc, #184]	@ (8003f20 <HAL_UART_MspInit+0xe4>)
 8003e68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e6e:	4b2c      	ldr	r3, [pc, #176]	@ (8003f20 <HAL_UART_MspInit+0xe4>)
 8003e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e76:	613b      	str	r3, [r7, #16]
 8003e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	4b28      	ldr	r3, [pc, #160]	@ (8003f20 <HAL_UART_MspInit+0xe4>)
 8003e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e82:	4a27      	ldr	r2, [pc, #156]	@ (8003f20 <HAL_UART_MspInit+0xe4>)
 8003e84:	f043 0301 	orr.w	r3, r3, #1
 8003e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e8a:	4b25      	ldr	r3, [pc, #148]	@ (8003f20 <HAL_UART_MspInit+0xe4>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003e96:	230c      	movs	r3, #12
 8003e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ea6:	2307      	movs	r3, #7
 8003ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eaa:	f107 0314 	add.w	r3, r7, #20
 8003eae:	4619      	mov	r1, r3
 8003eb0:	481c      	ldr	r0, [pc, #112]	@ (8003f24 <HAL_UART_MspInit+0xe8>)
 8003eb2:	f001 f911 	bl	80050d8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8003f28 <HAL_UART_MspInit+0xec>)
 8003eb8:	4a1c      	ldr	r2, [pc, #112]	@ (8003f2c <HAL_UART_MspInit+0xf0>)
 8003eba:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8003f28 <HAL_UART_MspInit+0xec>)
 8003ebe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003ec2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ec4:	4b18      	ldr	r3, [pc, #96]	@ (8003f28 <HAL_UART_MspInit+0xec>)
 8003ec6:	2240      	movs	r2, #64	@ 0x40
 8003ec8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003eca:	4b17      	ldr	r3, [pc, #92]	@ (8003f28 <HAL_UART_MspInit+0xec>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ed0:	4b15      	ldr	r3, [pc, #84]	@ (8003f28 <HAL_UART_MspInit+0xec>)
 8003ed2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ed6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ed8:	4b13      	ldr	r3, [pc, #76]	@ (8003f28 <HAL_UART_MspInit+0xec>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ede:	4b12      	ldr	r3, [pc, #72]	@ (8003f28 <HAL_UART_MspInit+0xec>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003ee4:	4b10      	ldr	r3, [pc, #64]	@ (8003f28 <HAL_UART_MspInit+0xec>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003eea:	4b0f      	ldr	r3, [pc, #60]	@ (8003f28 <HAL_UART_MspInit+0xec>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ef0:	4b0d      	ldr	r3, [pc, #52]	@ (8003f28 <HAL_UART_MspInit+0xec>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003ef6:	480c      	ldr	r0, [pc, #48]	@ (8003f28 <HAL_UART_MspInit+0xec>)
 8003ef8:	f000 fd7e 	bl	80049f8 <HAL_DMA_Init>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8003f02:	f7fe f9fb 	bl	80022fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a07      	ldr	r2, [pc, #28]	@ (8003f28 <HAL_UART_MspInit+0xec>)
 8003f0a:	639a      	str	r2, [r3, #56]	@ 0x38
 8003f0c:	4a06      	ldr	r2, [pc, #24]	@ (8003f28 <HAL_UART_MspInit+0xec>)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8003f12:	bf00      	nop
 8003f14:	3728      	adds	r7, #40	@ 0x28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40004400 	.word	0x40004400
 8003f20:	40023800 	.word	0x40023800
 8003f24:	40020000 	.word	0x40020000
 8003f28:	2000054c 	.word	0x2000054c
 8003f2c:	400260a0 	.word	0x400260a0

08003f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003f34:	bf00      	nop
 8003f36:	e7fd      	b.n	8003f34 <NMI_Handler+0x4>

08003f38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f3c:	bf00      	nop
 8003f3e:	e7fd      	b.n	8003f3c <HardFault_Handler+0x4>

08003f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f44:	bf00      	nop
 8003f46:	e7fd      	b.n	8003f44 <MemManage_Handler+0x4>

08003f48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f4c:	bf00      	nop
 8003f4e:	e7fd      	b.n	8003f4c <BusFault_Handler+0x4>

08003f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f54:	bf00      	nop
 8003f56:	e7fd      	b.n	8003f54 <UsageFault_Handler+0x4>

08003f58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f5c:	bf00      	nop
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f6a:	f000 f97d 	bl	8004268 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003f6e:	f007 fd4f 	bl	800ba10 <xTaskGetSchedulerState>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d001      	beq.n	8003f7c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003f78:	f008 fc46 	bl	800c808 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f7c:	bf00      	nop
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003f84:	4802      	ldr	r0, [pc, #8]	@ (8003f90 <DMA1_Stream0_IRQHandler+0x10>)
 8003f86:	f000 fe3d 	bl	8004c04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003f8a:	bf00      	nop
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	2000032c 	.word	0x2000032c

08003f94 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003f98:	4802      	ldr	r0, [pc, #8]	@ (8003fa4 <DMA1_Stream6_IRQHandler+0x10>)
 8003f9a:	f000 fe33 	bl	8004c04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003f9e:	bf00      	nop
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	2000054c 	.word	0x2000054c

08003fa8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003fac:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003fb0:	f001 fa40 	bl	8005434 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003fb4:	bf00      	nop
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003fbc:	4802      	ldr	r0, [pc, #8]	@ (8003fc8 <DMA1_Stream7_IRQHandler+0x10>)
 8003fbe:	f000 fe21 	bl	8004c04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003fc2:	bf00      	nop
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	200002cc 	.word	0x200002cc

08003fcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
  return 1;
 8003fd0:	2301      	movs	r3, #1
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <_kill>:

int _kill(int pid, int sig)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003fe6:	f009 fe7f 	bl	800dce8 <__errno>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2216      	movs	r2, #22
 8003fee:	601a      	str	r2, [r3, #0]
  return -1;
 8003ff0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <_exit>:

void _exit (int status)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004004:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f7ff ffe7 	bl	8003fdc <_kill>
  while (1) {}    /* Make sure we hang here */
 800400e:	bf00      	nop
 8004010:	e7fd      	b.n	800400e <_exit+0x12>

08004012 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b086      	sub	sp, #24
 8004016:	af00      	add	r7, sp, #0
 8004018:	60f8      	str	r0, [r7, #12]
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	e00a      	b.n	800403a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004024:	f3af 8000 	nop.w
 8004028:	4601      	mov	r1, r0
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	60ba      	str	r2, [r7, #8]
 8004030:	b2ca      	uxtb	r2, r1
 8004032:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	3301      	adds	r3, #1
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	429a      	cmp	r2, r3
 8004040:	dbf0      	blt.n	8004024 <_read+0x12>
  }

  return len;
 8004042:	687b      	ldr	r3, [r7, #4]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <_close>:
  }
  return len;
}

int _close(int file)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004054:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004074:	605a      	str	r2, [r3, #4]
  return 0;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <_isatty>:

int _isatty(int file)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800408c:	2301      	movs	r3, #1
}
 800408e:	4618      	mov	r0, r3
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800409a:	b480      	push	{r7}
 800409c:	b085      	sub	sp, #20
 800409e:	af00      	add	r7, sp, #0
 80040a0:	60f8      	str	r0, [r7, #12]
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040bc:	4a14      	ldr	r2, [pc, #80]	@ (8004110 <_sbrk+0x5c>)
 80040be:	4b15      	ldr	r3, [pc, #84]	@ (8004114 <_sbrk+0x60>)
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040c8:	4b13      	ldr	r3, [pc, #76]	@ (8004118 <_sbrk+0x64>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d102      	bne.n	80040d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040d0:	4b11      	ldr	r3, [pc, #68]	@ (8004118 <_sbrk+0x64>)
 80040d2:	4a12      	ldr	r2, [pc, #72]	@ (800411c <_sbrk+0x68>)
 80040d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040d6:	4b10      	ldr	r3, [pc, #64]	@ (8004118 <_sbrk+0x64>)
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4413      	add	r3, r2
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d207      	bcs.n	80040f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040e4:	f009 fe00 	bl	800dce8 <__errno>
 80040e8:	4603      	mov	r3, r0
 80040ea:	220c      	movs	r2, #12
 80040ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80040f2:	e009      	b.n	8004108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040f4:	4b08      	ldr	r3, [pc, #32]	@ (8004118 <_sbrk+0x64>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040fa:	4b07      	ldr	r3, [pc, #28]	@ (8004118 <_sbrk+0x64>)
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4413      	add	r3, r2
 8004102:	4a05      	ldr	r2, [pc, #20]	@ (8004118 <_sbrk+0x64>)
 8004104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004106:	68fb      	ldr	r3, [r7, #12]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	20020000 	.word	0x20020000
 8004114:	00000400 	.word	0x00000400
 8004118:	20000a08 	.word	0x20000a08
 800411c:	2000b8b0 	.word	0x2000b8b0

08004120 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004124:	4b06      	ldr	r3, [pc, #24]	@ (8004140 <SystemInit+0x20>)
 8004126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412a:	4a05      	ldr	r2, [pc, #20]	@ (8004140 <SystemInit+0x20>)
 800412c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004130:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004134:	bf00      	nop
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	e000ed00 	.word	0xe000ed00

08004144 <_write>:
 *      Author: patryk
 */

#include "write_printf.h"

int _write(int file, char *data, int len) {
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)data, len, HAL_MAX_DELAY);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	b29a      	uxth	r2, r3
 8004154:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004158:	68b9      	ldr	r1, [r7, #8]
 800415a:	4804      	ldr	r0, [pc, #16]	@ (800416c <_write+0x28>)
 800415c:	f004 faf8 	bl	8008750 <HAL_UART_Transmit>
    return len;
 8004160:	687b      	ldr	r3, [r7, #4]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20000504 	.word	0x20000504

08004170 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004170:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80041a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004174:	f7ff ffd4 	bl	8004120 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004178:	480c      	ldr	r0, [pc, #48]	@ (80041ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800417a:	490d      	ldr	r1, [pc, #52]	@ (80041b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800417c:	4a0d      	ldr	r2, [pc, #52]	@ (80041b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800417e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004180:	e002      	b.n	8004188 <LoopCopyDataInit>

08004182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004186:	3304      	adds	r3, #4

08004188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800418a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800418c:	d3f9      	bcc.n	8004182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800418e:	4a0a      	ldr	r2, [pc, #40]	@ (80041b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004190:	4c0a      	ldr	r4, [pc, #40]	@ (80041bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8004192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004194:	e001      	b.n	800419a <LoopFillZerobss>

08004196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004198:	3204      	adds	r2, #4

0800419a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800419a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800419c:	d3fb      	bcc.n	8004196 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800419e:	f009 fda9 	bl	800dcf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041a2:	f7fd fba3 	bl	80018ec <main>
  bx  lr    
 80041a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80041a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80041ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041b0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80041b4:	080128a0 	.word	0x080128a0
  ldr r2, =_sbss
 80041b8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80041bc:	2000b8ac 	.word	0x2000b8ac

080041c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041c0:	e7fe      	b.n	80041c0 <ADC_IRQHandler>
	...

080041c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004204 <HAL_Init+0x40>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a0d      	ldr	r2, [pc, #52]	@ (8004204 <HAL_Init+0x40>)
 80041ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80041d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80041d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004204 <HAL_Init+0x40>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a0a      	ldr	r2, [pc, #40]	@ (8004204 <HAL_Init+0x40>)
 80041da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80041de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041e0:	4b08      	ldr	r3, [pc, #32]	@ (8004204 <HAL_Init+0x40>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a07      	ldr	r2, [pc, #28]	@ (8004204 <HAL_Init+0x40>)
 80041e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041ec:	2003      	movs	r0, #3
 80041ee:	f000 fbc1 	bl	8004974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041f2:	200f      	movs	r0, #15
 80041f4:	f000 f808 	bl	8004208 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041f8:	f7ff fb8a 	bl	8003910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40023c00 	.word	0x40023c00

08004208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004210:	4b12      	ldr	r3, [pc, #72]	@ (800425c <HAL_InitTick+0x54>)
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	4b12      	ldr	r3, [pc, #72]	@ (8004260 <HAL_InitTick+0x58>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	4619      	mov	r1, r3
 800421a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800421e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004222:	fbb2 f3f3 	udiv	r3, r2, r3
 8004226:	4618      	mov	r0, r3
 8004228:	f000 fbd9 	bl	80049de <HAL_SYSTICK_Config>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e00e      	b.n	8004254 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b0f      	cmp	r3, #15
 800423a:	d80a      	bhi.n	8004252 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800423c:	2200      	movs	r2, #0
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004244:	f000 fba1 	bl	800498a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004248:	4a06      	ldr	r2, [pc, #24]	@ (8004264 <HAL_InitTick+0x5c>)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800424e:	2300      	movs	r3, #0
 8004250:	e000      	b.n	8004254 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
}
 8004254:	4618      	mov	r0, r3
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	20000000 	.word	0x20000000
 8004260:	20000008 	.word	0x20000008
 8004264:	20000004 	.word	0x20000004

08004268 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800426c:	4b06      	ldr	r3, [pc, #24]	@ (8004288 <HAL_IncTick+0x20>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	4b06      	ldr	r3, [pc, #24]	@ (800428c <HAL_IncTick+0x24>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4413      	add	r3, r2
 8004278:	4a04      	ldr	r2, [pc, #16]	@ (800428c <HAL_IncTick+0x24>)
 800427a:	6013      	str	r3, [r2, #0]
}
 800427c:	bf00      	nop
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	20000008 	.word	0x20000008
 800428c:	20000a0c 	.word	0x20000a0c

08004290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  return uwTick;
 8004294:	4b03      	ldr	r3, [pc, #12]	@ (80042a4 <HAL_GetTick+0x14>)
 8004296:	681b      	ldr	r3, [r3, #0]
}
 8004298:	4618      	mov	r0, r3
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	20000a0c 	.word	0x20000a0c

080042a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042b0:	f7ff ffee 	bl	8004290 <HAL_GetTick>
 80042b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80042c0:	d005      	beq.n	80042ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042c2:	4b0a      	ldr	r3, [pc, #40]	@ (80042ec <HAL_Delay+0x44>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	461a      	mov	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4413      	add	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80042ce:	bf00      	nop
 80042d0:	f7ff ffde 	bl	8004290 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d8f7      	bhi.n	80042d0 <HAL_Delay+0x28>
  {
  }
}
 80042e0:	bf00      	nop
 80042e2:	bf00      	nop
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20000008 	.word	0x20000008

080042f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042f8:	2300      	movs	r3, #0
 80042fa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e033      	b.n	800436e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430a:	2b00      	cmp	r3, #0
 800430c:	d109      	bne.n	8004322 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7ff fb2a 	bl	8003968 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004326:	f003 0310 	and.w	r3, r3, #16
 800432a:	2b00      	cmp	r3, #0
 800432c:	d118      	bne.n	8004360 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004332:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004336:	f023 0302 	bic.w	r3, r3, #2
 800433a:	f043 0202 	orr.w	r2, r3, #2
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f94a 	bl	80045dc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004352:	f023 0303 	bic.w	r3, r3, #3
 8004356:	f043 0201 	orr.w	r2, r3, #1
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	641a      	str	r2, [r3, #64]	@ 0x40
 800435e:	e001      	b.n	8004364 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800436c:	7bfb      	ldrb	r3, [r7, #15]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004382:	2300      	movs	r3, #0
 8004384:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_ADC_ConfigChannel+0x1c>
 8004390:	2302      	movs	r3, #2
 8004392:	e113      	b.n	80045bc <HAL_ADC_ConfigChannel+0x244>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b09      	cmp	r3, #9
 80043a2:	d925      	bls.n	80043f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68d9      	ldr	r1, [r3, #12]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	461a      	mov	r2, r3
 80043b2:	4613      	mov	r3, r2
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	4413      	add	r3, r2
 80043b8:	3b1e      	subs	r3, #30
 80043ba:	2207      	movs	r2, #7
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	43da      	mvns	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	400a      	ands	r2, r1
 80043c8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68d9      	ldr	r1, [r3, #12]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	b29b      	uxth	r3, r3
 80043da:	4618      	mov	r0, r3
 80043dc:	4603      	mov	r3, r0
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	4403      	add	r3, r0
 80043e2:	3b1e      	subs	r3, #30
 80043e4:	409a      	lsls	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	60da      	str	r2, [r3, #12]
 80043ee:	e022      	b.n	8004436 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6919      	ldr	r1, [r3, #16]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	461a      	mov	r2, r3
 80043fe:	4613      	mov	r3, r2
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	4413      	add	r3, r2
 8004404:	2207      	movs	r2, #7
 8004406:	fa02 f303 	lsl.w	r3, r2, r3
 800440a:	43da      	mvns	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	400a      	ands	r2, r1
 8004412:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6919      	ldr	r1, [r3, #16]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	b29b      	uxth	r3, r3
 8004424:	4618      	mov	r0, r3
 8004426:	4603      	mov	r3, r0
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	4403      	add	r3, r0
 800442c:	409a      	lsls	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	2b06      	cmp	r3, #6
 800443c:	d824      	bhi.n	8004488 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	3b05      	subs	r3, #5
 8004450:	221f      	movs	r2, #31
 8004452:	fa02 f303 	lsl.w	r3, r2, r3
 8004456:	43da      	mvns	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	400a      	ands	r2, r1
 800445e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	b29b      	uxth	r3, r3
 800446c:	4618      	mov	r0, r3
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	4613      	mov	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	3b05      	subs	r3, #5
 800447a:	fa00 f203 	lsl.w	r2, r0, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	635a      	str	r2, [r3, #52]	@ 0x34
 8004486:	e04c      	b.n	8004522 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	2b0c      	cmp	r3, #12
 800448e:	d824      	bhi.n	80044da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	4613      	mov	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	3b23      	subs	r3, #35	@ 0x23
 80044a2:	221f      	movs	r2, #31
 80044a4:	fa02 f303 	lsl.w	r3, r2, r3
 80044a8:	43da      	mvns	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	400a      	ands	r2, r1
 80044b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	b29b      	uxth	r3, r3
 80044be:	4618      	mov	r0, r3
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	4613      	mov	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	3b23      	subs	r3, #35	@ 0x23
 80044cc:	fa00 f203 	lsl.w	r2, r0, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80044d8:	e023      	b.n	8004522 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	4613      	mov	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	3b41      	subs	r3, #65	@ 0x41
 80044ec:	221f      	movs	r2, #31
 80044ee:	fa02 f303 	lsl.w	r3, r2, r3
 80044f2:	43da      	mvns	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	400a      	ands	r2, r1
 80044fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	b29b      	uxth	r3, r3
 8004508:	4618      	mov	r0, r3
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	4613      	mov	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	3b41      	subs	r3, #65	@ 0x41
 8004516:	fa00 f203 	lsl.w	r2, r0, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004522:	4b29      	ldr	r3, [pc, #164]	@ (80045c8 <HAL_ADC_ConfigChannel+0x250>)
 8004524:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a28      	ldr	r2, [pc, #160]	@ (80045cc <HAL_ADC_ConfigChannel+0x254>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d10f      	bne.n	8004550 <HAL_ADC_ConfigChannel+0x1d8>
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b12      	cmp	r3, #18
 8004536:	d10b      	bne.n	8004550 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a1d      	ldr	r2, [pc, #116]	@ (80045cc <HAL_ADC_ConfigChannel+0x254>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d12b      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x23a>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a1c      	ldr	r2, [pc, #112]	@ (80045d0 <HAL_ADC_ConfigChannel+0x258>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d003      	beq.n	800456c <HAL_ADC_ConfigChannel+0x1f4>
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2b11      	cmp	r3, #17
 800456a:	d122      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a11      	ldr	r2, [pc, #68]	@ (80045d0 <HAL_ADC_ConfigChannel+0x258>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d111      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800458e:	4b11      	ldr	r3, [pc, #68]	@ (80045d4 <HAL_ADC_ConfigChannel+0x25c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a11      	ldr	r2, [pc, #68]	@ (80045d8 <HAL_ADC_ConfigChannel+0x260>)
 8004594:	fba2 2303 	umull	r2, r3, r2, r3
 8004598:	0c9a      	lsrs	r2, r3, #18
 800459a:	4613      	mov	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80045a4:	e002      	b.n	80045ac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	3b01      	subs	r3, #1
 80045aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1f9      	bne.n	80045a6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	40012300 	.word	0x40012300
 80045cc:	40012000 	.word	0x40012000
 80045d0:	10000012 	.word	0x10000012
 80045d4:	20000000 	.word	0x20000000
 80045d8:	431bde83 	.word	0x431bde83

080045dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045e4:	4b79      	ldr	r3, [pc, #484]	@ (80047cc <ADC_Init+0x1f0>)
 80045e6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	431a      	orrs	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004610:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6859      	ldr	r1, [r3, #4]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	021a      	lsls	r2, r3, #8
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004634:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6859      	ldr	r1, [r3, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689a      	ldr	r2, [r3, #8]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004656:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6899      	ldr	r1, [r3, #8]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466e:	4a58      	ldr	r2, [pc, #352]	@ (80047d0 <ADC_Init+0x1f4>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d022      	beq.n	80046ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689a      	ldr	r2, [r3, #8]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004682:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6899      	ldr	r1, [r3, #8]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80046a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6899      	ldr	r1, [r3, #8]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	609a      	str	r2, [r3, #8]
 80046b8:	e00f      	b.n	80046da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689a      	ldr	r2, [r3, #8]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80046c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80046d8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 0202 	bic.w	r2, r2, #2
 80046e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6899      	ldr	r1, [r3, #8]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	7e1b      	ldrb	r3, [r3, #24]
 80046f4:	005a      	lsls	r2, r3, #1
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d01b      	beq.n	8004740 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004716:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004726:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6859      	ldr	r1, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004732:	3b01      	subs	r3, #1
 8004734:	035a      	lsls	r2, r3, #13
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	605a      	str	r2, [r3, #4]
 800473e:	e007      	b.n	8004750 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800474e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800475e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	3b01      	subs	r3, #1
 800476c:	051a      	lsls	r2, r3, #20
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004784:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6899      	ldr	r1, [r3, #8]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004792:	025a      	lsls	r2, r3, #9
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689a      	ldr	r2, [r3, #8]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6899      	ldr	r1, [r3, #8]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	029a      	lsls	r2, r3, #10
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	609a      	str	r2, [r3, #8]
}
 80047c0:	bf00      	nop
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	40012300 	.word	0x40012300
 80047d0:	0f000001 	.word	0x0f000001

080047d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f003 0307 	and.w	r3, r3, #7
 80047e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004818 <__NVIC_SetPriorityGrouping+0x44>)
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80047f0:	4013      	ands	r3, r2
 80047f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004800:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004806:	4a04      	ldr	r2, [pc, #16]	@ (8004818 <__NVIC_SetPriorityGrouping+0x44>)
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	60d3      	str	r3, [r2, #12]
}
 800480c:	bf00      	nop
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	e000ed00 	.word	0xe000ed00

0800481c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800481c:	b480      	push	{r7}
 800481e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004820:	4b04      	ldr	r3, [pc, #16]	@ (8004834 <__NVIC_GetPriorityGrouping+0x18>)
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	0a1b      	lsrs	r3, r3, #8
 8004826:	f003 0307 	and.w	r3, r3, #7
}
 800482a:	4618      	mov	r0, r3
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	e000ed00 	.word	0xe000ed00

08004838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	4603      	mov	r3, r0
 8004840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004846:	2b00      	cmp	r3, #0
 8004848:	db0b      	blt.n	8004862 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800484a:	79fb      	ldrb	r3, [r7, #7]
 800484c:	f003 021f 	and.w	r2, r3, #31
 8004850:	4907      	ldr	r1, [pc, #28]	@ (8004870 <__NVIC_EnableIRQ+0x38>)
 8004852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004856:	095b      	lsrs	r3, r3, #5
 8004858:	2001      	movs	r0, #1
 800485a:	fa00 f202 	lsl.w	r2, r0, r2
 800485e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	e000e100 	.word	0xe000e100

08004874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	4603      	mov	r3, r0
 800487c:	6039      	str	r1, [r7, #0]
 800487e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004884:	2b00      	cmp	r3, #0
 8004886:	db0a      	blt.n	800489e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	b2da      	uxtb	r2, r3
 800488c:	490c      	ldr	r1, [pc, #48]	@ (80048c0 <__NVIC_SetPriority+0x4c>)
 800488e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004892:	0112      	lsls	r2, r2, #4
 8004894:	b2d2      	uxtb	r2, r2
 8004896:	440b      	add	r3, r1
 8004898:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800489c:	e00a      	b.n	80048b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	4908      	ldr	r1, [pc, #32]	@ (80048c4 <__NVIC_SetPriority+0x50>)
 80048a4:	79fb      	ldrb	r3, [r7, #7]
 80048a6:	f003 030f 	and.w	r3, r3, #15
 80048aa:	3b04      	subs	r3, #4
 80048ac:	0112      	lsls	r2, r2, #4
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	440b      	add	r3, r1
 80048b2:	761a      	strb	r2, [r3, #24]
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	e000e100 	.word	0xe000e100
 80048c4:	e000ed00 	.word	0xe000ed00

080048c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b089      	sub	sp, #36	@ 0x24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f003 0307 	and.w	r3, r3, #7
 80048da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	f1c3 0307 	rsb	r3, r3, #7
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	bf28      	it	cs
 80048e6:	2304      	movcs	r3, #4
 80048e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	3304      	adds	r3, #4
 80048ee:	2b06      	cmp	r3, #6
 80048f0:	d902      	bls.n	80048f8 <NVIC_EncodePriority+0x30>
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	3b03      	subs	r3, #3
 80048f6:	e000      	b.n	80048fa <NVIC_EncodePriority+0x32>
 80048f8:	2300      	movs	r3, #0
 80048fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	43da      	mvns	r2, r3
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	401a      	ands	r2, r3
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004910:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	fa01 f303 	lsl.w	r3, r1, r3
 800491a:	43d9      	mvns	r1, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004920:	4313      	orrs	r3, r2
         );
}
 8004922:	4618      	mov	r0, r3
 8004924:	3724      	adds	r7, #36	@ 0x24
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
	...

08004930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3b01      	subs	r3, #1
 800493c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004940:	d301      	bcc.n	8004946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004942:	2301      	movs	r3, #1
 8004944:	e00f      	b.n	8004966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004946:	4a0a      	ldr	r2, [pc, #40]	@ (8004970 <SysTick_Config+0x40>)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3b01      	subs	r3, #1
 800494c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800494e:	210f      	movs	r1, #15
 8004950:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004954:	f7ff ff8e 	bl	8004874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004958:	4b05      	ldr	r3, [pc, #20]	@ (8004970 <SysTick_Config+0x40>)
 800495a:	2200      	movs	r2, #0
 800495c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800495e:	4b04      	ldr	r3, [pc, #16]	@ (8004970 <SysTick_Config+0x40>)
 8004960:	2207      	movs	r2, #7
 8004962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	e000e010 	.word	0xe000e010

08004974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7ff ff29 	bl	80047d4 <__NVIC_SetPriorityGrouping>
}
 8004982:	bf00      	nop
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800498a:	b580      	push	{r7, lr}
 800498c:	b086      	sub	sp, #24
 800498e:	af00      	add	r7, sp, #0
 8004990:	4603      	mov	r3, r0
 8004992:	60b9      	str	r1, [r7, #8]
 8004994:	607a      	str	r2, [r7, #4]
 8004996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004998:	2300      	movs	r3, #0
 800499a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800499c:	f7ff ff3e 	bl	800481c <__NVIC_GetPriorityGrouping>
 80049a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	68b9      	ldr	r1, [r7, #8]
 80049a6:	6978      	ldr	r0, [r7, #20]
 80049a8:	f7ff ff8e 	bl	80048c8 <NVIC_EncodePriority>
 80049ac:	4602      	mov	r2, r0
 80049ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049b2:	4611      	mov	r1, r2
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff ff5d 	bl	8004874 <__NVIC_SetPriority>
}
 80049ba:	bf00      	nop
 80049bc:	3718      	adds	r7, #24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b082      	sub	sp, #8
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	4603      	mov	r3, r0
 80049ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff ff31 	bl	8004838 <__NVIC_EnableIRQ>
}
 80049d6:	bf00      	nop
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b082      	sub	sp, #8
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7ff ffa2 	bl	8004930 <SysTick_Config>
 80049ec:	4603      	mov	r3, r0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
	...

080049f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004a04:	f7ff fc44 	bl	8004290 <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e099      	b.n	8004b48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2202      	movs	r2, #2
 8004a18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0201 	bic.w	r2, r2, #1
 8004a32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a34:	e00f      	b.n	8004a56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a36:	f7ff fc2b 	bl	8004290 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b05      	cmp	r3, #5
 8004a42:	d908      	bls.n	8004a56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2220      	movs	r2, #32
 8004a48:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2203      	movs	r2, #3
 8004a4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e078      	b.n	8004b48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0301 	and.w	r3, r3, #1
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1e8      	bne.n	8004a36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	4b38      	ldr	r3, [pc, #224]	@ (8004b50 <HAL_DMA_Init+0x158>)
 8004a70:	4013      	ands	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d107      	bne.n	8004ac0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f023 0307 	bic.w	r3, r3, #7
 8004ad6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d117      	bne.n	8004b1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00e      	beq.n	8004b1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 fa6f 	bl	8004fe0 <DMA_CheckFifoParam>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d008      	beq.n	8004b1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2240      	movs	r2, #64	@ 0x40
 8004b0c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004b16:	2301      	movs	r3, #1
 8004b18:	e016      	b.n	8004b48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 fa26 	bl	8004f74 <DMA_CalcBaseAndBitshift>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b30:	223f      	movs	r2, #63	@ 0x3f
 8004b32:	409a      	lsls	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3718      	adds	r7, #24
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	f010803f 	.word	0xf010803f

08004b54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
 8004b60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d101      	bne.n	8004b7a <HAL_DMA_Start_IT+0x26>
 8004b76:	2302      	movs	r3, #2
 8004b78:	e040      	b.n	8004bfc <HAL_DMA_Start_IT+0xa8>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d12f      	bne.n	8004bee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2202      	movs	r2, #2
 8004b92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	68b9      	ldr	r1, [r7, #8]
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f000 f9b8 	bl	8004f18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bac:	223f      	movs	r2, #63	@ 0x3f
 8004bae:	409a      	lsls	r2, r3
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f042 0216 	orr.w	r2, r2, #22
 8004bc2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d007      	beq.n	8004bdc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f042 0208 	orr.w	r2, r2, #8
 8004bda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 0201 	orr.w	r2, r2, #1
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	e005      	b.n	8004bfa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3718      	adds	r7, #24
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c10:	4b8e      	ldr	r3, [pc, #568]	@ (8004e4c <HAL_DMA_IRQHandler+0x248>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a8e      	ldr	r2, [pc, #568]	@ (8004e50 <HAL_DMA_IRQHandler+0x24c>)
 8004c16:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1a:	0a9b      	lsrs	r3, r3, #10
 8004c1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c2e:	2208      	movs	r2, #8
 8004c30:	409a      	lsls	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	4013      	ands	r3, r2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d01a      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d013      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 0204 	bic.w	r2, r2, #4
 8004c56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c5c:	2208      	movs	r2, #8
 8004c5e:	409a      	lsls	r2, r3
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c68:	f043 0201 	orr.w	r2, r3, #1
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c74:	2201      	movs	r2, #1
 8004c76:	409a      	lsls	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d012      	beq.n	8004ca6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00b      	beq.n	8004ca6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c92:	2201      	movs	r2, #1
 8004c94:	409a      	lsls	r2, r3
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c9e:	f043 0202 	orr.w	r2, r3, #2
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004caa:	2204      	movs	r2, #4
 8004cac:	409a      	lsls	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d012      	beq.n	8004cdc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00b      	beq.n	8004cdc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc8:	2204      	movs	r2, #4
 8004cca:	409a      	lsls	r2, r3
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd4:	f043 0204 	orr.w	r2, r3, #4
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ce0:	2210      	movs	r2, #16
 8004ce2:	409a      	lsls	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d043      	beq.n	8004d74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0308 	and.w	r3, r3, #8
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d03c      	beq.n	8004d74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cfe:	2210      	movs	r2, #16
 8004d00:	409a      	lsls	r2, r3
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d018      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d108      	bne.n	8004d34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d024      	beq.n	8004d74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	4798      	blx	r3
 8004d32:	e01f      	b.n	8004d74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d01b      	beq.n	8004d74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	4798      	blx	r3
 8004d44:	e016      	b.n	8004d74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d107      	bne.n	8004d64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0208 	bic.w	r2, r2, #8
 8004d62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d003      	beq.n	8004d74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d78:	2220      	movs	r2, #32
 8004d7a:	409a      	lsls	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4013      	ands	r3, r2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 808f 	beq.w	8004ea4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0310 	and.w	r3, r3, #16
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 8087 	beq.w	8004ea4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	409a      	lsls	r2, r3
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b05      	cmp	r3, #5
 8004dac:	d136      	bne.n	8004e1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 0216 	bic.w	r2, r2, #22
 8004dbc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	695a      	ldr	r2, [r3, #20]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004dcc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d103      	bne.n	8004dde <HAL_DMA_IRQHandler+0x1da>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d007      	beq.n	8004dee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 0208 	bic.w	r2, r2, #8
 8004dec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004df2:	223f      	movs	r2, #63	@ 0x3f
 8004df4:	409a      	lsls	r2, r3
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d07e      	beq.n	8004f10 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	4798      	blx	r3
        }
        return;
 8004e1a:	e079      	b.n	8004f10 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d01d      	beq.n	8004e66 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10d      	bne.n	8004e54 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d031      	beq.n	8004ea4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	4798      	blx	r3
 8004e48:	e02c      	b.n	8004ea4 <HAL_DMA_IRQHandler+0x2a0>
 8004e4a:	bf00      	nop
 8004e4c:	20000000 	.word	0x20000000
 8004e50:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d023      	beq.n	8004ea4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	4798      	blx	r3
 8004e64:	e01e      	b.n	8004ea4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10f      	bne.n	8004e94 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f022 0210 	bic.w	r2, r2, #16
 8004e82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d003      	beq.n	8004ea4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d032      	beq.n	8004f12 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d022      	beq.n	8004efe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2205      	movs	r2, #5
 8004ebc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 0201 	bic.w	r2, r2, #1
 8004ece:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	60bb      	str	r3, [r7, #8]
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d307      	bcc.n	8004eec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1f2      	bne.n	8004ed0 <HAL_DMA_IRQHandler+0x2cc>
 8004eea:	e000      	b.n	8004eee <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004eec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d005      	beq.n	8004f12 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	4798      	blx	r3
 8004f0e:	e000      	b.n	8004f12 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004f10:	bf00      	nop
    }
  }
}
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
 8004f24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004f34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	2b40      	cmp	r3, #64	@ 0x40
 8004f44:	d108      	bne.n	8004f58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004f56:	e007      	b.n	8004f68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	60da      	str	r2, [r3, #12]
}
 8004f68:	bf00      	nop
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	3b10      	subs	r3, #16
 8004f84:	4a14      	ldr	r2, [pc, #80]	@ (8004fd8 <DMA_CalcBaseAndBitshift+0x64>)
 8004f86:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8a:	091b      	lsrs	r3, r3, #4
 8004f8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f8e:	4a13      	ldr	r2, [pc, #76]	@ (8004fdc <DMA_CalcBaseAndBitshift+0x68>)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4413      	add	r3, r2
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	461a      	mov	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2b03      	cmp	r3, #3
 8004fa0:	d909      	bls.n	8004fb6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004faa:	f023 0303 	bic.w	r3, r3, #3
 8004fae:	1d1a      	adds	r2, r3, #4
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	659a      	str	r2, [r3, #88]	@ 0x58
 8004fb4:	e007      	b.n	8004fc6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004fbe:	f023 0303 	bic.w	r3, r3, #3
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	aaaaaaab 	.word	0xaaaaaaab
 8004fdc:	080120a4 	.word	0x080120a4

08004fe0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d11f      	bne.n	800503a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2b03      	cmp	r3, #3
 8004ffe:	d856      	bhi.n	80050ae <DMA_CheckFifoParam+0xce>
 8005000:	a201      	add	r2, pc, #4	@ (adr r2, 8005008 <DMA_CheckFifoParam+0x28>)
 8005002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005006:	bf00      	nop
 8005008:	08005019 	.word	0x08005019
 800500c:	0800502b 	.word	0x0800502b
 8005010:	08005019 	.word	0x08005019
 8005014:	080050af 	.word	0x080050af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d046      	beq.n	80050b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005028:	e043      	b.n	80050b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005032:	d140      	bne.n	80050b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005038:	e03d      	b.n	80050b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005042:	d121      	bne.n	8005088 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	2b03      	cmp	r3, #3
 8005048:	d837      	bhi.n	80050ba <DMA_CheckFifoParam+0xda>
 800504a:	a201      	add	r2, pc, #4	@ (adr r2, 8005050 <DMA_CheckFifoParam+0x70>)
 800504c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005050:	08005061 	.word	0x08005061
 8005054:	08005067 	.word	0x08005067
 8005058:	08005061 	.word	0x08005061
 800505c:	08005079 	.word	0x08005079
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	73fb      	strb	r3, [r7, #15]
      break;
 8005064:	e030      	b.n	80050c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d025      	beq.n	80050be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005076:	e022      	b.n	80050be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005080:	d11f      	bne.n	80050c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005086:	e01c      	b.n	80050c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2b02      	cmp	r3, #2
 800508c:	d903      	bls.n	8005096 <DMA_CheckFifoParam+0xb6>
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2b03      	cmp	r3, #3
 8005092:	d003      	beq.n	800509c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005094:	e018      	b.n	80050c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	73fb      	strb	r3, [r7, #15]
      break;
 800509a:	e015      	b.n	80050c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00e      	beq.n	80050c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	73fb      	strb	r3, [r7, #15]
      break;
 80050ac:	e00b      	b.n	80050c6 <DMA_CheckFifoParam+0xe6>
      break;
 80050ae:	bf00      	nop
 80050b0:	e00a      	b.n	80050c8 <DMA_CheckFifoParam+0xe8>
      break;
 80050b2:	bf00      	nop
 80050b4:	e008      	b.n	80050c8 <DMA_CheckFifoParam+0xe8>
      break;
 80050b6:	bf00      	nop
 80050b8:	e006      	b.n	80050c8 <DMA_CheckFifoParam+0xe8>
      break;
 80050ba:	bf00      	nop
 80050bc:	e004      	b.n	80050c8 <DMA_CheckFifoParam+0xe8>
      break;
 80050be:	bf00      	nop
 80050c0:	e002      	b.n	80050c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80050c2:	bf00      	nop
 80050c4:	e000      	b.n	80050c8 <DMA_CheckFifoParam+0xe8>
      break;
 80050c6:	bf00      	nop
    }
  } 
  
  return status; 
 80050c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop

080050d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050d8:	b480      	push	{r7}
 80050da:	b089      	sub	sp, #36	@ 0x24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80050e2:	2300      	movs	r3, #0
 80050e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050ee:	2300      	movs	r3, #0
 80050f0:	61fb      	str	r3, [r7, #28]
 80050f2:	e165      	b.n	80053c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80050f4:	2201      	movs	r2, #1
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	fa02 f303 	lsl.w	r3, r2, r3
 80050fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	4013      	ands	r3, r2
 8005106:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	429a      	cmp	r2, r3
 800510e:	f040 8154 	bne.w	80053ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f003 0303 	and.w	r3, r3, #3
 800511a:	2b01      	cmp	r3, #1
 800511c:	d005      	beq.n	800512a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005126:	2b02      	cmp	r3, #2
 8005128:	d130      	bne.n	800518c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	2203      	movs	r2, #3
 8005136:	fa02 f303 	lsl.w	r3, r2, r3
 800513a:	43db      	mvns	r3, r3
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	4013      	ands	r3, r2
 8005140:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	005b      	lsls	r3, r3, #1
 800514a:	fa02 f303 	lsl.w	r3, r2, r3
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	4313      	orrs	r3, r2
 8005152:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005160:	2201      	movs	r2, #1
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	fa02 f303 	lsl.w	r3, r2, r3
 8005168:	43db      	mvns	r3, r3
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	4013      	ands	r3, r2
 800516e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	091b      	lsrs	r3, r3, #4
 8005176:	f003 0201 	and.w	r2, r3, #1
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	fa02 f303 	lsl.w	r3, r2, r3
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	4313      	orrs	r3, r2
 8005184:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f003 0303 	and.w	r3, r3, #3
 8005194:	2b03      	cmp	r3, #3
 8005196:	d017      	beq.n	80051c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	2203      	movs	r2, #3
 80051a4:	fa02 f303 	lsl.w	r3, r2, r3
 80051a8:	43db      	mvns	r3, r3
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	4013      	ands	r3, r2
 80051ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	005b      	lsls	r3, r3, #1
 80051b8:	fa02 f303 	lsl.w	r3, r2, r3
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	4313      	orrs	r3, r2
 80051c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f003 0303 	and.w	r3, r3, #3
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d123      	bne.n	800521c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	08da      	lsrs	r2, r3, #3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3208      	adds	r2, #8
 80051dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	f003 0307 	and.w	r3, r3, #7
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	220f      	movs	r2, #15
 80051ec:	fa02 f303 	lsl.w	r3, r2, r3
 80051f0:	43db      	mvns	r3, r3
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	4013      	ands	r3, r2
 80051f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	691a      	ldr	r2, [r3, #16]
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	fa02 f303 	lsl.w	r3, r2, r3
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	4313      	orrs	r3, r2
 800520c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	08da      	lsrs	r2, r3, #3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	3208      	adds	r2, #8
 8005216:	69b9      	ldr	r1, [r7, #24]
 8005218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	2203      	movs	r2, #3
 8005228:	fa02 f303 	lsl.w	r3, r2, r3
 800522c:	43db      	mvns	r3, r3
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	4013      	ands	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f003 0203 	and.w	r2, r3, #3
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	005b      	lsls	r3, r3, #1
 8005240:	fa02 f303 	lsl.w	r3, r2, r3
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	4313      	orrs	r3, r2
 8005248:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 80ae 	beq.w	80053ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]
 8005262:	4b5d      	ldr	r3, [pc, #372]	@ (80053d8 <HAL_GPIO_Init+0x300>)
 8005264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005266:	4a5c      	ldr	r2, [pc, #368]	@ (80053d8 <HAL_GPIO_Init+0x300>)
 8005268:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800526c:	6453      	str	r3, [r2, #68]	@ 0x44
 800526e:	4b5a      	ldr	r3, [pc, #360]	@ (80053d8 <HAL_GPIO_Init+0x300>)
 8005270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005272:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005276:	60fb      	str	r3, [r7, #12]
 8005278:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800527a:	4a58      	ldr	r2, [pc, #352]	@ (80053dc <HAL_GPIO_Init+0x304>)
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	089b      	lsrs	r3, r3, #2
 8005280:	3302      	adds	r3, #2
 8005282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005286:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	f003 0303 	and.w	r3, r3, #3
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	220f      	movs	r2, #15
 8005292:	fa02 f303 	lsl.w	r3, r2, r3
 8005296:	43db      	mvns	r3, r3
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	4013      	ands	r3, r2
 800529c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a4f      	ldr	r2, [pc, #316]	@ (80053e0 <HAL_GPIO_Init+0x308>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d025      	beq.n	80052f2 <HAL_GPIO_Init+0x21a>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a4e      	ldr	r2, [pc, #312]	@ (80053e4 <HAL_GPIO_Init+0x30c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d01f      	beq.n	80052ee <HAL_GPIO_Init+0x216>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a4d      	ldr	r2, [pc, #308]	@ (80053e8 <HAL_GPIO_Init+0x310>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d019      	beq.n	80052ea <HAL_GPIO_Init+0x212>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a4c      	ldr	r2, [pc, #304]	@ (80053ec <HAL_GPIO_Init+0x314>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d013      	beq.n	80052e6 <HAL_GPIO_Init+0x20e>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a4b      	ldr	r2, [pc, #300]	@ (80053f0 <HAL_GPIO_Init+0x318>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d00d      	beq.n	80052e2 <HAL_GPIO_Init+0x20a>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a4a      	ldr	r2, [pc, #296]	@ (80053f4 <HAL_GPIO_Init+0x31c>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d007      	beq.n	80052de <HAL_GPIO_Init+0x206>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a49      	ldr	r2, [pc, #292]	@ (80053f8 <HAL_GPIO_Init+0x320>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d101      	bne.n	80052da <HAL_GPIO_Init+0x202>
 80052d6:	2306      	movs	r3, #6
 80052d8:	e00c      	b.n	80052f4 <HAL_GPIO_Init+0x21c>
 80052da:	2307      	movs	r3, #7
 80052dc:	e00a      	b.n	80052f4 <HAL_GPIO_Init+0x21c>
 80052de:	2305      	movs	r3, #5
 80052e0:	e008      	b.n	80052f4 <HAL_GPIO_Init+0x21c>
 80052e2:	2304      	movs	r3, #4
 80052e4:	e006      	b.n	80052f4 <HAL_GPIO_Init+0x21c>
 80052e6:	2303      	movs	r3, #3
 80052e8:	e004      	b.n	80052f4 <HAL_GPIO_Init+0x21c>
 80052ea:	2302      	movs	r3, #2
 80052ec:	e002      	b.n	80052f4 <HAL_GPIO_Init+0x21c>
 80052ee:	2301      	movs	r3, #1
 80052f0:	e000      	b.n	80052f4 <HAL_GPIO_Init+0x21c>
 80052f2:	2300      	movs	r3, #0
 80052f4:	69fa      	ldr	r2, [r7, #28]
 80052f6:	f002 0203 	and.w	r2, r2, #3
 80052fa:	0092      	lsls	r2, r2, #2
 80052fc:	4093      	lsls	r3, r2
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	4313      	orrs	r3, r2
 8005302:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005304:	4935      	ldr	r1, [pc, #212]	@ (80053dc <HAL_GPIO_Init+0x304>)
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	089b      	lsrs	r3, r3, #2
 800530a:	3302      	adds	r3, #2
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005312:	4b3a      	ldr	r3, [pc, #232]	@ (80053fc <HAL_GPIO_Init+0x324>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	43db      	mvns	r3, r3
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	4013      	ands	r3, r2
 8005320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	4313      	orrs	r3, r2
 8005334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005336:	4a31      	ldr	r2, [pc, #196]	@ (80053fc <HAL_GPIO_Init+0x324>)
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800533c:	4b2f      	ldr	r3, [pc, #188]	@ (80053fc <HAL_GPIO_Init+0x324>)
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	43db      	mvns	r3, r3
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	4013      	ands	r3, r2
 800534a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d003      	beq.n	8005360 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	4313      	orrs	r3, r2
 800535e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005360:	4a26      	ldr	r2, [pc, #152]	@ (80053fc <HAL_GPIO_Init+0x324>)
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005366:	4b25      	ldr	r3, [pc, #148]	@ (80053fc <HAL_GPIO_Init+0x324>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	43db      	mvns	r3, r3
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	4013      	ands	r3, r2
 8005374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	4313      	orrs	r3, r2
 8005388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800538a:	4a1c      	ldr	r2, [pc, #112]	@ (80053fc <HAL_GPIO_Init+0x324>)
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005390:	4b1a      	ldr	r3, [pc, #104]	@ (80053fc <HAL_GPIO_Init+0x324>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	43db      	mvns	r3, r3
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	4013      	ands	r3, r2
 800539e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053b4:	4a11      	ldr	r2, [pc, #68]	@ (80053fc <HAL_GPIO_Init+0x324>)
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	3301      	adds	r3, #1
 80053be:	61fb      	str	r3, [r7, #28]
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	2b0f      	cmp	r3, #15
 80053c4:	f67f ae96 	bls.w	80050f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053c8:	bf00      	nop
 80053ca:	bf00      	nop
 80053cc:	3724      	adds	r7, #36	@ 0x24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40023800 	.word	0x40023800
 80053dc:	40013800 	.word	0x40013800
 80053e0:	40020000 	.word	0x40020000
 80053e4:	40020400 	.word	0x40020400
 80053e8:	40020800 	.word	0x40020800
 80053ec:	40020c00 	.word	0x40020c00
 80053f0:	40021000 	.word	0x40021000
 80053f4:	40021400 	.word	0x40021400
 80053f8:	40021800 	.word	0x40021800
 80053fc:	40013c00 	.word	0x40013c00

08005400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	460b      	mov	r3, r1
 800540a:	807b      	strh	r3, [r7, #2]
 800540c:	4613      	mov	r3, r2
 800540e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005410:	787b      	ldrb	r3, [r7, #1]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005416:	887a      	ldrh	r2, [r7, #2]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800541c:	e003      	b.n	8005426 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800541e:	887b      	ldrh	r3, [r7, #2]
 8005420:	041a      	lsls	r2, r3, #16
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	619a      	str	r2, [r3, #24]
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
	...

08005434 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	4603      	mov	r3, r0
 800543c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800543e:	4b08      	ldr	r3, [pc, #32]	@ (8005460 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005440:	695a      	ldr	r2, [r3, #20]
 8005442:	88fb      	ldrh	r3, [r7, #6]
 8005444:	4013      	ands	r3, r2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d006      	beq.n	8005458 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800544a:	4a05      	ldr	r2, [pc, #20]	@ (8005460 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800544c:	88fb      	ldrh	r3, [r7, #6]
 800544e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005450:	88fb      	ldrh	r3, [r7, #6]
 8005452:	4618      	mov	r0, r3
 8005454:	f7fd fc54 	bl	8002d00 <HAL_GPIO_EXTI_Callback>
  }
}
 8005458:	bf00      	nop
 800545a:	3708      	adds	r7, #8
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40013c00 	.word	0x40013c00

08005464 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e12b      	b.n	80056ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d106      	bne.n	8005490 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7fe fab0 	bl	80039f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2224      	movs	r2, #36	@ 0x24
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 0201 	bic.w	r2, r2, #1
 80054a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80054c8:	f001 fa6e 	bl	80069a8 <HAL_RCC_GetPCLK1Freq>
 80054cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	4a81      	ldr	r2, [pc, #516]	@ (80056d8 <HAL_I2C_Init+0x274>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d807      	bhi.n	80054e8 <HAL_I2C_Init+0x84>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4a80      	ldr	r2, [pc, #512]	@ (80056dc <HAL_I2C_Init+0x278>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	bf94      	ite	ls
 80054e0:	2301      	movls	r3, #1
 80054e2:	2300      	movhi	r3, #0
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	e006      	b.n	80054f6 <HAL_I2C_Init+0x92>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4a7d      	ldr	r2, [pc, #500]	@ (80056e0 <HAL_I2C_Init+0x27c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	bf94      	ite	ls
 80054f0:	2301      	movls	r3, #1
 80054f2:	2300      	movhi	r3, #0
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e0e7      	b.n	80056ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4a78      	ldr	r2, [pc, #480]	@ (80056e4 <HAL_I2C_Init+0x280>)
 8005502:	fba2 2303 	umull	r2, r3, r2, r3
 8005506:	0c9b      	lsrs	r3, r3, #18
 8005508:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	430a      	orrs	r2, r1
 800551c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	4a6a      	ldr	r2, [pc, #424]	@ (80056d8 <HAL_I2C_Init+0x274>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d802      	bhi.n	8005538 <HAL_I2C_Init+0xd4>
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	3301      	adds	r3, #1
 8005536:	e009      	b.n	800554c <HAL_I2C_Init+0xe8>
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800553e:	fb02 f303 	mul.w	r3, r2, r3
 8005542:	4a69      	ldr	r2, [pc, #420]	@ (80056e8 <HAL_I2C_Init+0x284>)
 8005544:	fba2 2303 	umull	r2, r3, r2, r3
 8005548:	099b      	lsrs	r3, r3, #6
 800554a:	3301      	adds	r3, #1
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	6812      	ldr	r2, [r2, #0]
 8005550:	430b      	orrs	r3, r1
 8005552:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800555e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	495c      	ldr	r1, [pc, #368]	@ (80056d8 <HAL_I2C_Init+0x274>)
 8005568:	428b      	cmp	r3, r1
 800556a:	d819      	bhi.n	80055a0 <HAL_I2C_Init+0x13c>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	1e59      	subs	r1, r3, #1
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	fbb1 f3f3 	udiv	r3, r1, r3
 800557a:	1c59      	adds	r1, r3, #1
 800557c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005580:	400b      	ands	r3, r1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00a      	beq.n	800559c <HAL_I2C_Init+0x138>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	1e59      	subs	r1, r3, #1
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	fbb1 f3f3 	udiv	r3, r1, r3
 8005594:	3301      	adds	r3, #1
 8005596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800559a:	e051      	b.n	8005640 <HAL_I2C_Init+0x1dc>
 800559c:	2304      	movs	r3, #4
 800559e:	e04f      	b.n	8005640 <HAL_I2C_Init+0x1dc>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d111      	bne.n	80055cc <HAL_I2C_Init+0x168>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	1e58      	subs	r0, r3, #1
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6859      	ldr	r1, [r3, #4]
 80055b0:	460b      	mov	r3, r1
 80055b2:	005b      	lsls	r3, r3, #1
 80055b4:	440b      	add	r3, r1
 80055b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80055ba:	3301      	adds	r3, #1
 80055bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	bf0c      	ite	eq
 80055c4:	2301      	moveq	r3, #1
 80055c6:	2300      	movne	r3, #0
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	e012      	b.n	80055f2 <HAL_I2C_Init+0x18e>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	1e58      	subs	r0, r3, #1
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6859      	ldr	r1, [r3, #4]
 80055d4:	460b      	mov	r3, r1
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	440b      	add	r3, r1
 80055da:	0099      	lsls	r1, r3, #2
 80055dc:	440b      	add	r3, r1
 80055de:	fbb0 f3f3 	udiv	r3, r0, r3
 80055e2:	3301      	adds	r3, #1
 80055e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	bf0c      	ite	eq
 80055ec:	2301      	moveq	r3, #1
 80055ee:	2300      	movne	r3, #0
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <HAL_I2C_Init+0x196>
 80055f6:	2301      	movs	r3, #1
 80055f8:	e022      	b.n	8005640 <HAL_I2C_Init+0x1dc>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10e      	bne.n	8005620 <HAL_I2C_Init+0x1bc>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	1e58      	subs	r0, r3, #1
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6859      	ldr	r1, [r3, #4]
 800560a:	460b      	mov	r3, r1
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	440b      	add	r3, r1
 8005610:	fbb0 f3f3 	udiv	r3, r0, r3
 8005614:	3301      	adds	r3, #1
 8005616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800561a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800561e:	e00f      	b.n	8005640 <HAL_I2C_Init+0x1dc>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	1e58      	subs	r0, r3, #1
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6859      	ldr	r1, [r3, #4]
 8005628:	460b      	mov	r3, r1
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	440b      	add	r3, r1
 800562e:	0099      	lsls	r1, r3, #2
 8005630:	440b      	add	r3, r1
 8005632:	fbb0 f3f3 	udiv	r3, r0, r3
 8005636:	3301      	adds	r3, #1
 8005638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800563c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005640:	6879      	ldr	r1, [r7, #4]
 8005642:	6809      	ldr	r1, [r1, #0]
 8005644:	4313      	orrs	r3, r2
 8005646:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	69da      	ldr	r2, [r3, #28]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	431a      	orrs	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800566e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	6911      	ldr	r1, [r2, #16]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	68d2      	ldr	r2, [r2, #12]
 800567a:	4311      	orrs	r1, r2
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6812      	ldr	r2, [r2, #0]
 8005680:	430b      	orrs	r3, r1
 8005682:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	695a      	ldr	r2, [r3, #20]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	431a      	orrs	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 0201 	orr.w	r2, r2, #1
 80056ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2220      	movs	r2, #32
 80056ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	000186a0 	.word	0x000186a0
 80056dc:	001e847f 	.word	0x001e847f
 80056e0:	003d08ff 	.word	0x003d08ff
 80056e4:	431bde83 	.word	0x431bde83
 80056e8:	10624dd3 	.word	0x10624dd3

080056ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b088      	sub	sp, #32
 80056f0:	af02      	add	r7, sp, #8
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	607a      	str	r2, [r7, #4]
 80056f6:	461a      	mov	r2, r3
 80056f8:	460b      	mov	r3, r1
 80056fa:	817b      	strh	r3, [r7, #10]
 80056fc:	4613      	mov	r3, r2
 80056fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005700:	f7fe fdc6 	bl	8004290 <HAL_GetTick>
 8005704:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b20      	cmp	r3, #32
 8005710:	f040 80e0 	bne.w	80058d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	2319      	movs	r3, #25
 800571a:	2201      	movs	r2, #1
 800571c:	4970      	ldr	r1, [pc, #448]	@ (80058e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f000 fe1a 	bl	8006358 <I2C_WaitOnFlagUntilTimeout>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d001      	beq.n	800572e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800572a:	2302      	movs	r3, #2
 800572c:	e0d3      	b.n	80058d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005734:	2b01      	cmp	r3, #1
 8005736:	d101      	bne.n	800573c <HAL_I2C_Master_Transmit+0x50>
 8005738:	2302      	movs	r3, #2
 800573a:	e0cc      	b.n	80058d6 <HAL_I2C_Master_Transmit+0x1ea>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b01      	cmp	r3, #1
 8005750:	d007      	beq.n	8005762 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f042 0201 	orr.w	r2, r2, #1
 8005760:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005770:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2221      	movs	r2, #33	@ 0x21
 8005776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2210      	movs	r2, #16
 800577e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	893a      	ldrh	r2, [r7, #8]
 8005792:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005798:	b29a      	uxth	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	4a50      	ldr	r2, [pc, #320]	@ (80058e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80057a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80057a4:	8979      	ldrh	r1, [r7, #10]
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	6a3a      	ldr	r2, [r7, #32]
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f000 fbd4 	bl	8005f58 <I2C_MasterRequestWrite>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e08d      	b.n	80058d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057ba:	2300      	movs	r3, #0
 80057bc:	613b      	str	r3, [r7, #16]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	613b      	str	r3, [r7, #16]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	613b      	str	r3, [r7, #16]
 80057ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80057d0:	e066      	b.n	80058a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	6a39      	ldr	r1, [r7, #32]
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f000 fed8 	bl	800658c <I2C_WaitOnTXEFlagUntilTimeout>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00d      	beq.n	80057fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e6:	2b04      	cmp	r3, #4
 80057e8:	d107      	bne.n	80057fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e06b      	b.n	80058d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005802:	781a      	ldrb	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580e:	1c5a      	adds	r2, r3, #1
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005818:	b29b      	uxth	r3, r3
 800581a:	3b01      	subs	r3, #1
 800581c:	b29a      	uxth	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005826:	3b01      	subs	r3, #1
 8005828:	b29a      	uxth	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	f003 0304 	and.w	r3, r3, #4
 8005838:	2b04      	cmp	r3, #4
 800583a:	d11b      	bne.n	8005874 <HAL_I2C_Master_Transmit+0x188>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005840:	2b00      	cmp	r3, #0
 8005842:	d017      	beq.n	8005874 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005848:	781a      	ldrb	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005854:	1c5a      	adds	r2, r3, #1
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800585e:	b29b      	uxth	r3, r3
 8005860:	3b01      	subs	r3, #1
 8005862:	b29a      	uxth	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800586c:	3b01      	subs	r3, #1
 800586e:	b29a      	uxth	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	6a39      	ldr	r1, [r7, #32]
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 fecf 	bl	800661c <I2C_WaitOnBTFFlagUntilTimeout>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00d      	beq.n	80058a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005888:	2b04      	cmp	r3, #4
 800588a:	d107      	bne.n	800589c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800589a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e01a      	b.n	80058d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d194      	bne.n	80057d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2220      	movs	r2, #32
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80058d0:	2300      	movs	r3, #0
 80058d2:	e000      	b.n	80058d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80058d4:	2302      	movs	r3, #2
  }
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3718      	adds	r7, #24
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	00100002 	.word	0x00100002
 80058e4:	ffff0000 	.word	0xffff0000

080058e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b088      	sub	sp, #32
 80058ec:	af02      	add	r7, sp, #8
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	4608      	mov	r0, r1
 80058f2:	4611      	mov	r1, r2
 80058f4:	461a      	mov	r2, r3
 80058f6:	4603      	mov	r3, r0
 80058f8:	817b      	strh	r3, [r7, #10]
 80058fa:	460b      	mov	r3, r1
 80058fc:	813b      	strh	r3, [r7, #8]
 80058fe:	4613      	mov	r3, r2
 8005900:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005902:	f7fe fcc5 	bl	8004290 <HAL_GetTick>
 8005906:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b20      	cmp	r3, #32
 8005912:	f040 80d9 	bne.w	8005ac8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	9300      	str	r3, [sp, #0]
 800591a:	2319      	movs	r3, #25
 800591c:	2201      	movs	r2, #1
 800591e:	496d      	ldr	r1, [pc, #436]	@ (8005ad4 <HAL_I2C_Mem_Write+0x1ec>)
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f000 fd19 	bl	8006358 <I2C_WaitOnFlagUntilTimeout>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800592c:	2302      	movs	r3, #2
 800592e:	e0cc      	b.n	8005aca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005936:	2b01      	cmp	r3, #1
 8005938:	d101      	bne.n	800593e <HAL_I2C_Mem_Write+0x56>
 800593a:	2302      	movs	r3, #2
 800593c:	e0c5      	b.n	8005aca <HAL_I2C_Mem_Write+0x1e2>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b01      	cmp	r3, #1
 8005952:	d007      	beq.n	8005964 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 0201 	orr.w	r2, r2, #1
 8005962:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005972:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2221      	movs	r2, #33	@ 0x21
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2240      	movs	r2, #64	@ 0x40
 8005980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6a3a      	ldr	r2, [r7, #32]
 800598e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005994:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800599a:	b29a      	uxth	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4a4d      	ldr	r2, [pc, #308]	@ (8005ad8 <HAL_I2C_Mem_Write+0x1f0>)
 80059a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059a6:	88f8      	ldrh	r0, [r7, #6]
 80059a8:	893a      	ldrh	r2, [r7, #8]
 80059aa:	8979      	ldrh	r1, [r7, #10]
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	9301      	str	r3, [sp, #4]
 80059b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	4603      	mov	r3, r0
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f000 fb50 	bl	800605c <I2C_RequestMemoryWrite>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d052      	beq.n	8005a68 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e081      	b.n	8005aca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f000 fdde 	bl	800658c <I2C_WaitOnTXEFlagUntilTimeout>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00d      	beq.n	80059f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059da:	2b04      	cmp	r3, #4
 80059dc:	d107      	bne.n	80059ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e06b      	b.n	8005aca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f6:	781a      	ldrb	r2, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a02:	1c5a      	adds	r2, r3, #1
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	d11b      	bne.n	8005a68 <HAL_I2C_Mem_Write+0x180>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d017      	beq.n	8005a68 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3c:	781a      	ldrb	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a48:	1c5a      	adds	r2, r3, #1
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a52:	3b01      	subs	r3, #1
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	3b01      	subs	r3, #1
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1aa      	bne.n	80059c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f000 fdd1 	bl	800661c <I2C_WaitOnBTFFlagUntilTimeout>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00d      	beq.n	8005a9c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	d107      	bne.n	8005a98 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a96:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e016      	b.n	8005aca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005aaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	e000      	b.n	8005aca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005ac8:	2302      	movs	r3, #2
  }
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3718      	adds	r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	00100002 	.word	0x00100002
 8005ad8:	ffff0000 	.word	0xffff0000

08005adc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b08c      	sub	sp, #48	@ 0x30
 8005ae0:	af02      	add	r7, sp, #8
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	4608      	mov	r0, r1
 8005ae6:	4611      	mov	r1, r2
 8005ae8:	461a      	mov	r2, r3
 8005aea:	4603      	mov	r3, r0
 8005aec:	817b      	strh	r3, [r7, #10]
 8005aee:	460b      	mov	r3, r1
 8005af0:	813b      	strh	r3, [r7, #8]
 8005af2:	4613      	mov	r3, r2
 8005af4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005af6:	f7fe fbcb 	bl	8004290 <HAL_GetTick>
 8005afa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2b20      	cmp	r3, #32
 8005b06:	f040 8214 	bne.w	8005f32 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	2319      	movs	r3, #25
 8005b10:	2201      	movs	r2, #1
 8005b12:	497b      	ldr	r1, [pc, #492]	@ (8005d00 <HAL_I2C_Mem_Read+0x224>)
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 fc1f 	bl	8006358 <I2C_WaitOnFlagUntilTimeout>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d001      	beq.n	8005b24 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005b20:	2302      	movs	r3, #2
 8005b22:	e207      	b.n	8005f34 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d101      	bne.n	8005b32 <HAL_I2C_Mem_Read+0x56>
 8005b2e:	2302      	movs	r3, #2
 8005b30:	e200      	b.n	8005f34 <HAL_I2C_Mem_Read+0x458>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d007      	beq.n	8005b58 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0201 	orr.w	r2, r2, #1
 8005b56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2222      	movs	r2, #34	@ 0x22
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2240      	movs	r2, #64	@ 0x40
 8005b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b82:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005b88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4a5b      	ldr	r2, [pc, #364]	@ (8005d04 <HAL_I2C_Mem_Read+0x228>)
 8005b98:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b9a:	88f8      	ldrh	r0, [r7, #6]
 8005b9c:	893a      	ldrh	r2, [r7, #8]
 8005b9e:	8979      	ldrh	r1, [r7, #10]
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba2:	9301      	str	r3, [sp, #4]
 8005ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	4603      	mov	r3, r0
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f000 faec 	bl	8006188 <I2C_RequestMemoryRead>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d001      	beq.n	8005bba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e1bc      	b.n	8005f34 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d113      	bne.n	8005bea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	623b      	str	r3, [r7, #32]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	623b      	str	r3, [r7, #32]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	623b      	str	r3, [r7, #32]
 8005bd6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005be6:	601a      	str	r2, [r3, #0]
 8005be8:	e190      	b.n	8005f0c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d11b      	bne.n	8005c2a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c02:	2300      	movs	r3, #0
 8005c04:	61fb      	str	r3, [r7, #28]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	61fb      	str	r3, [r7, #28]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	61fb      	str	r3, [r7, #28]
 8005c16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	e170      	b.n	8005f0c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d11b      	bne.n	8005c6a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c40:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c52:	2300      	movs	r3, #0
 8005c54:	61bb      	str	r3, [r7, #24]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	61bb      	str	r3, [r7, #24]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	61bb      	str	r3, [r7, #24]
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	e150      	b.n	8005f0c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	617b      	str	r3, [r7, #20]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	695b      	ldr	r3, [r3, #20]
 8005c74:	617b      	str	r3, [r7, #20]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	617b      	str	r3, [r7, #20]
 8005c7e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005c80:	e144      	b.n	8005f0c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c86:	2b03      	cmp	r3, #3
 8005c88:	f200 80f1 	bhi.w	8005e6e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d123      	bne.n	8005cdc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c96:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f000 fd07 	bl	80066ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e145      	b.n	8005f34 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	691a      	ldr	r2, [r3, #16]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb2:	b2d2      	uxtb	r2, r2
 8005cb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cba:	1c5a      	adds	r2, r3, #1
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005cda:	e117      	b.n	8005f0c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d14e      	bne.n	8005d82 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cea:	2200      	movs	r2, #0
 8005cec:	4906      	ldr	r1, [pc, #24]	@ (8005d08 <HAL_I2C_Mem_Read+0x22c>)
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 fb32 	bl	8006358 <I2C_WaitOnFlagUntilTimeout>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d008      	beq.n	8005d0c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e11a      	b.n	8005f34 <HAL_I2C_Mem_Read+0x458>
 8005cfe:	bf00      	nop
 8005d00:	00100002 	.word	0x00100002
 8005d04:	ffff0000 	.word	0xffff0000
 8005d08:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	691a      	ldr	r2, [r3, #16]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d26:	b2d2      	uxtb	r2, r2
 8005d28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	3b01      	subs	r3, #1
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	691a      	ldr	r2, [r3, #16]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d58:	b2d2      	uxtb	r2, r2
 8005d5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005d80:	e0c4      	b.n	8005f0c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d88:	2200      	movs	r2, #0
 8005d8a:	496c      	ldr	r1, [pc, #432]	@ (8005f3c <HAL_I2C_Mem_Read+0x460>)
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f000 fae3 	bl	8006358 <I2C_WaitOnFlagUntilTimeout>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e0cb      	b.n	8005f34 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005daa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	691a      	ldr	r2, [r3, #16]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db6:	b2d2      	uxtb	r2, r2
 8005db8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dbe:	1c5a      	adds	r2, r3, #1
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de4:	2200      	movs	r2, #0
 8005de6:	4955      	ldr	r1, [pc, #340]	@ (8005f3c <HAL_I2C_Mem_Read+0x460>)
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f000 fab5 	bl	8006358 <I2C_WaitOnFlagUntilTimeout>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e09d      	b.n	8005f34 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	691a      	ldr	r2, [r3, #16]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e12:	b2d2      	uxtb	r2, r2
 8005e14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e1a:	1c5a      	adds	r2, r3, #1
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e24:	3b01      	subs	r3, #1
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	3b01      	subs	r3, #1
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	691a      	ldr	r2, [r3, #16]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e44:	b2d2      	uxtb	r2, r2
 8005e46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4c:	1c5a      	adds	r2, r3, #1
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e56:	3b01      	subs	r3, #1
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	3b01      	subs	r3, #1
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005e6c:	e04e      	b.n	8005f0c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e70:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f000 fc1a 	bl	80066ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e058      	b.n	8005f34 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	691a      	ldr	r2, [r3, #16]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8c:	b2d2      	uxtb	r2, r2
 8005e8e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e94:	1c5a      	adds	r2, r3, #1
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	3b01      	subs	r3, #1
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	f003 0304 	and.w	r3, r3, #4
 8005ebe:	2b04      	cmp	r3, #4
 8005ec0:	d124      	bne.n	8005f0c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ec6:	2b03      	cmp	r3, #3
 8005ec8:	d107      	bne.n	8005eda <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ed8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	691a      	ldr	r2, [r3, #16]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	3b01      	subs	r3, #1
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f47f aeb6 	bne.w	8005c82 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	e000      	b.n	8005f34 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005f32:	2302      	movs	r3, #2
  }
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3728      	adds	r7, #40	@ 0x28
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	00010004 	.word	0x00010004

08005f40 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b088      	sub	sp, #32
 8005f5c:	af02      	add	r7, sp, #8
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	607a      	str	r2, [r7, #4]
 8005f62:	603b      	str	r3, [r7, #0]
 8005f64:	460b      	mov	r3, r1
 8005f66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f6c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	2b08      	cmp	r3, #8
 8005f72:	d006      	beq.n	8005f82 <I2C_MasterRequestWrite+0x2a>
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d003      	beq.n	8005f82 <I2C_MasterRequestWrite+0x2a>
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f80:	d108      	bne.n	8005f94 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f90:	601a      	str	r2, [r3, #0]
 8005f92:	e00b      	b.n	8005fac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f98:	2b12      	cmp	r3, #18
 8005f9a:	d107      	bne.n	8005fac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005faa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 f9cd 	bl	8006358 <I2C_WaitOnFlagUntilTimeout>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00d      	beq.n	8005fe0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fd2:	d103      	bne.n	8005fdc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fda:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e035      	b.n	800604c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fe8:	d108      	bne.n	8005ffc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fea:	897b      	ldrh	r3, [r7, #10]
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	461a      	mov	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005ff8:	611a      	str	r2, [r3, #16]
 8005ffa:	e01b      	b.n	8006034 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ffc:	897b      	ldrh	r3, [r7, #10]
 8005ffe:	11db      	asrs	r3, r3, #7
 8006000:	b2db      	uxtb	r3, r3
 8006002:	f003 0306 	and.w	r3, r3, #6
 8006006:	b2db      	uxtb	r3, r3
 8006008:	f063 030f 	orn	r3, r3, #15
 800600c:	b2da      	uxtb	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	490e      	ldr	r1, [pc, #56]	@ (8006054 <I2C_MasterRequestWrite+0xfc>)
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f000 fa16 	bl	800644c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d001      	beq.n	800602a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e010      	b.n	800604c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800602a:	897b      	ldrh	r3, [r7, #10]
 800602c:	b2da      	uxtb	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	4907      	ldr	r1, [pc, #28]	@ (8006058 <I2C_MasterRequestWrite+0x100>)
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f000 fa06 	bl	800644c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d001      	beq.n	800604a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e000      	b.n	800604c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3718      	adds	r7, #24
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	00010008 	.word	0x00010008
 8006058:	00010002 	.word	0x00010002

0800605c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b088      	sub	sp, #32
 8006060:	af02      	add	r7, sp, #8
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	4608      	mov	r0, r1
 8006066:	4611      	mov	r1, r2
 8006068:	461a      	mov	r2, r3
 800606a:	4603      	mov	r3, r0
 800606c:	817b      	strh	r3, [r7, #10]
 800606e:	460b      	mov	r3, r1
 8006070:	813b      	strh	r3, [r7, #8]
 8006072:	4613      	mov	r3, r2
 8006074:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006084:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	6a3b      	ldr	r3, [r7, #32]
 800608c:	2200      	movs	r2, #0
 800608e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f000 f960 	bl	8006358 <I2C_WaitOnFlagUntilTimeout>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00d      	beq.n	80060ba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060ac:	d103      	bne.n	80060b6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e05f      	b.n	800617a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80060ba:	897b      	ldrh	r3, [r7, #10]
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	461a      	mov	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80060c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060cc:	6a3a      	ldr	r2, [r7, #32]
 80060ce:	492d      	ldr	r1, [pc, #180]	@ (8006184 <I2C_RequestMemoryWrite+0x128>)
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f000 f9bb 	bl	800644c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d001      	beq.n	80060e0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e04c      	b.n	800617a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060e0:	2300      	movs	r3, #0
 80060e2:	617b      	str	r3, [r7, #20]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	617b      	str	r3, [r7, #20]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	617b      	str	r3, [r7, #20]
 80060f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060f8:	6a39      	ldr	r1, [r7, #32]
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f000 fa46 	bl	800658c <I2C_WaitOnTXEFlagUntilTimeout>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00d      	beq.n	8006122 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610a:	2b04      	cmp	r3, #4
 800610c:	d107      	bne.n	800611e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800611c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e02b      	b.n	800617a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006122:	88fb      	ldrh	r3, [r7, #6]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d105      	bne.n	8006134 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006128:	893b      	ldrh	r3, [r7, #8]
 800612a:	b2da      	uxtb	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	611a      	str	r2, [r3, #16]
 8006132:	e021      	b.n	8006178 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006134:	893b      	ldrh	r3, [r7, #8]
 8006136:	0a1b      	lsrs	r3, r3, #8
 8006138:	b29b      	uxth	r3, r3
 800613a:	b2da      	uxtb	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006142:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006144:	6a39      	ldr	r1, [r7, #32]
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 fa20 	bl	800658c <I2C_WaitOnTXEFlagUntilTimeout>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00d      	beq.n	800616e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006156:	2b04      	cmp	r3, #4
 8006158:	d107      	bne.n	800616a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006168:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e005      	b.n	800617a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800616e:	893b      	ldrh	r3, [r7, #8]
 8006170:	b2da      	uxtb	r2, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3718      	adds	r7, #24
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	00010002 	.word	0x00010002

08006188 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b088      	sub	sp, #32
 800618c:	af02      	add	r7, sp, #8
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	4608      	mov	r0, r1
 8006192:	4611      	mov	r1, r2
 8006194:	461a      	mov	r2, r3
 8006196:	4603      	mov	r3, r0
 8006198:	817b      	strh	r3, [r7, #10]
 800619a:	460b      	mov	r3, r1
 800619c:	813b      	strh	r3, [r7, #8]
 800619e:	4613      	mov	r3, r2
 80061a0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80061b0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c4:	9300      	str	r3, [sp, #0]
 80061c6:	6a3b      	ldr	r3, [r7, #32]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f000 f8c2 	bl	8006358 <I2C_WaitOnFlagUntilTimeout>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00d      	beq.n	80061f6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061e8:	d103      	bne.n	80061f2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e0aa      	b.n	800634c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061f6:	897b      	ldrh	r3, [r7, #10]
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	461a      	mov	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006204:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006208:	6a3a      	ldr	r2, [r7, #32]
 800620a:	4952      	ldr	r1, [pc, #328]	@ (8006354 <I2C_RequestMemoryRead+0x1cc>)
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f000 f91d 	bl	800644c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d001      	beq.n	800621c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e097      	b.n	800634c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800621c:	2300      	movs	r3, #0
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	617b      	str	r3, [r7, #20]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	617b      	str	r3, [r7, #20]
 8006230:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006234:	6a39      	ldr	r1, [r7, #32]
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f000 f9a8 	bl	800658c <I2C_WaitOnTXEFlagUntilTimeout>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00d      	beq.n	800625e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006246:	2b04      	cmp	r3, #4
 8006248:	d107      	bne.n	800625a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006258:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e076      	b.n	800634c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800625e:	88fb      	ldrh	r3, [r7, #6]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d105      	bne.n	8006270 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006264:	893b      	ldrh	r3, [r7, #8]
 8006266:	b2da      	uxtb	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	611a      	str	r2, [r3, #16]
 800626e:	e021      	b.n	80062b4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006270:	893b      	ldrh	r3, [r7, #8]
 8006272:	0a1b      	lsrs	r3, r3, #8
 8006274:	b29b      	uxth	r3, r3
 8006276:	b2da      	uxtb	r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800627e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006280:	6a39      	ldr	r1, [r7, #32]
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f000 f982 	bl	800658c <I2C_WaitOnTXEFlagUntilTimeout>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00d      	beq.n	80062aa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006292:	2b04      	cmp	r3, #4
 8006294:	d107      	bne.n	80062a6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e050      	b.n	800634c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062aa:	893b      	ldrh	r3, [r7, #8]
 80062ac:	b2da      	uxtb	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062b6:	6a39      	ldr	r1, [r7, #32]
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f000 f967 	bl	800658c <I2C_WaitOnTXEFlagUntilTimeout>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00d      	beq.n	80062e0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c8:	2b04      	cmp	r3, #4
 80062ca:	d107      	bne.n	80062dc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062da:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e035      	b.n	800634c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062ee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	6a3b      	ldr	r3, [r7, #32]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f000 f82b 	bl	8006358 <I2C_WaitOnFlagUntilTimeout>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00d      	beq.n	8006324 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006312:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006316:	d103      	bne.n	8006320 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800631e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e013      	b.n	800634c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006324:	897b      	ldrh	r3, [r7, #10]
 8006326:	b2db      	uxtb	r3, r3
 8006328:	f043 0301 	orr.w	r3, r3, #1
 800632c:	b2da      	uxtb	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006336:	6a3a      	ldr	r2, [r7, #32]
 8006338:	4906      	ldr	r1, [pc, #24]	@ (8006354 <I2C_RequestMemoryRead+0x1cc>)
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f000 f886 	bl	800644c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d001      	beq.n	800634a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e000      	b.n	800634c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3718      	adds	r7, #24
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	00010002 	.word	0x00010002

08006358 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	603b      	str	r3, [r7, #0]
 8006364:	4613      	mov	r3, r2
 8006366:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006368:	e048      	b.n	80063fc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006370:	d044      	beq.n	80063fc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006372:	f7fd ff8d 	bl	8004290 <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	429a      	cmp	r2, r3
 8006380:	d302      	bcc.n	8006388 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d139      	bne.n	80063fc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	0c1b      	lsrs	r3, r3, #16
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b01      	cmp	r3, #1
 8006390:	d10d      	bne.n	80063ae <I2C_WaitOnFlagUntilTimeout+0x56>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	43da      	mvns	r2, r3
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	4013      	ands	r3, r2
 800639e:	b29b      	uxth	r3, r3
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	bf0c      	ite	eq
 80063a4:	2301      	moveq	r3, #1
 80063a6:	2300      	movne	r3, #0
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	461a      	mov	r2, r3
 80063ac:	e00c      	b.n	80063c8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	43da      	mvns	r2, r3
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	4013      	ands	r3, r2
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	2b00      	cmp	r3, #0
 80063be:	bf0c      	ite	eq
 80063c0:	2301      	moveq	r3, #1
 80063c2:	2300      	movne	r3, #0
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	461a      	mov	r2, r3
 80063c8:	79fb      	ldrb	r3, [r7, #7]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d116      	bne.n	80063fc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2220      	movs	r2, #32
 80063d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e8:	f043 0220 	orr.w	r2, r3, #32
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e023      	b.n	8006444 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	0c1b      	lsrs	r3, r3, #16
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b01      	cmp	r3, #1
 8006404:	d10d      	bne.n	8006422 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	43da      	mvns	r2, r3
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	4013      	ands	r3, r2
 8006412:	b29b      	uxth	r3, r3
 8006414:	2b00      	cmp	r3, #0
 8006416:	bf0c      	ite	eq
 8006418:	2301      	moveq	r3, #1
 800641a:	2300      	movne	r3, #0
 800641c:	b2db      	uxtb	r3, r3
 800641e:	461a      	mov	r2, r3
 8006420:	e00c      	b.n	800643c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	43da      	mvns	r2, r3
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	4013      	ands	r3, r2
 800642e:	b29b      	uxth	r3, r3
 8006430:	2b00      	cmp	r3, #0
 8006432:	bf0c      	ite	eq
 8006434:	2301      	moveq	r3, #1
 8006436:	2300      	movne	r3, #0
 8006438:	b2db      	uxtb	r3, r3
 800643a:	461a      	mov	r2, r3
 800643c:	79fb      	ldrb	r3, [r7, #7]
 800643e:	429a      	cmp	r2, r3
 8006440:	d093      	beq.n	800636a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
 8006458:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800645a:	e071      	b.n	8006540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006466:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800646a:	d123      	bne.n	80064b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800647a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006484:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2220      	movs	r2, #32
 8006490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a0:	f043 0204 	orr.w	r2, r3, #4
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e067      	b.n	8006584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064ba:	d041      	beq.n	8006540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064bc:	f7fd fee8 	bl	8004290 <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d302      	bcc.n	80064d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d136      	bne.n	8006540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	0c1b      	lsrs	r3, r3, #16
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d10c      	bne.n	80064f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	43da      	mvns	r2, r3
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	4013      	ands	r3, r2
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	bf14      	ite	ne
 80064ee:	2301      	movne	r3, #1
 80064f0:	2300      	moveq	r3, #0
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	e00b      	b.n	800650e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	43da      	mvns	r2, r3
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	4013      	ands	r3, r2
 8006502:	b29b      	uxth	r3, r3
 8006504:	2b00      	cmp	r3, #0
 8006506:	bf14      	ite	ne
 8006508:	2301      	movne	r3, #1
 800650a:	2300      	moveq	r3, #0
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d016      	beq.n	8006540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2220      	movs	r2, #32
 800651c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800652c:	f043 0220 	orr.w	r2, r3, #32
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e021      	b.n	8006584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	0c1b      	lsrs	r3, r3, #16
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b01      	cmp	r3, #1
 8006548:	d10c      	bne.n	8006564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	695b      	ldr	r3, [r3, #20]
 8006550:	43da      	mvns	r2, r3
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	4013      	ands	r3, r2
 8006556:	b29b      	uxth	r3, r3
 8006558:	2b00      	cmp	r3, #0
 800655a:	bf14      	ite	ne
 800655c:	2301      	movne	r3, #1
 800655e:	2300      	moveq	r3, #0
 8006560:	b2db      	uxtb	r3, r3
 8006562:	e00b      	b.n	800657c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	43da      	mvns	r2, r3
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	4013      	ands	r3, r2
 8006570:	b29b      	uxth	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	bf14      	ite	ne
 8006576:	2301      	movne	r3, #1
 8006578:	2300      	moveq	r3, #0
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b00      	cmp	r3, #0
 800657e:	f47f af6d 	bne.w	800645c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006598:	e034      	b.n	8006604 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f000 f8e3 	bl	8006766 <I2C_IsAcknowledgeFailed>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e034      	b.n	8006614 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065b0:	d028      	beq.n	8006604 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065b2:	f7fd fe6d 	bl	8004290 <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d302      	bcc.n	80065c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d11d      	bne.n	8006604 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065d2:	2b80      	cmp	r3, #128	@ 0x80
 80065d4:	d016      	beq.n	8006604 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2220      	movs	r2, #32
 80065e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f0:	f043 0220 	orr.w	r2, r3, #32
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e007      	b.n	8006614 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800660e:	2b80      	cmp	r3, #128	@ 0x80
 8006610:	d1c3      	bne.n	800659a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006628:	e034      	b.n	8006694 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f000 f89b 	bl	8006766 <I2C_IsAcknowledgeFailed>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e034      	b.n	80066a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006640:	d028      	beq.n	8006694 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006642:	f7fd fe25 	bl	8004290 <HAL_GetTick>
 8006646:	4602      	mov	r2, r0
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	429a      	cmp	r2, r3
 8006650:	d302      	bcc.n	8006658 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d11d      	bne.n	8006694 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	f003 0304 	and.w	r3, r3, #4
 8006662:	2b04      	cmp	r3, #4
 8006664:	d016      	beq.n	8006694 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2220      	movs	r2, #32
 8006670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006680:	f043 0220 	orr.w	r2, r3, #32
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e007      	b.n	80066a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	f003 0304 	and.w	r3, r3, #4
 800669e:	2b04      	cmp	r3, #4
 80066a0:	d1c3      	bne.n	800662a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3710      	adds	r7, #16
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066b8:	e049      	b.n	800674e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	f003 0310 	and.w	r3, r3, #16
 80066c4:	2b10      	cmp	r3, #16
 80066c6:	d119      	bne.n	80066fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f06f 0210 	mvn.w	r2, #16
 80066d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2220      	movs	r2, #32
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e030      	b.n	800675e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066fc:	f7fd fdc8 	bl	8004290 <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	429a      	cmp	r2, r3
 800670a:	d302      	bcc.n	8006712 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d11d      	bne.n	800674e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800671c:	2b40      	cmp	r3, #64	@ 0x40
 800671e:	d016      	beq.n	800674e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2220      	movs	r2, #32
 800672a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800673a:	f043 0220 	orr.w	r2, r3, #32
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e007      	b.n	800675e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	695b      	ldr	r3, [r3, #20]
 8006754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006758:	2b40      	cmp	r3, #64	@ 0x40
 800675a:	d1ae      	bne.n	80066ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006766:	b480      	push	{r7}
 8006768:	b083      	sub	sp, #12
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006778:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800677c:	d11b      	bne.n	80067b6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006786:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2220      	movs	r2, #32
 8006792:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a2:	f043 0204 	orr.w	r2, r3, #4
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e000      	b.n	80067b8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d101      	bne.n	80067d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e0cc      	b.n	8006972 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80067d8:	4b68      	ldr	r3, [pc, #416]	@ (800697c <HAL_RCC_ClockConfig+0x1b8>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 030f 	and.w	r3, r3, #15
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d90c      	bls.n	8006800 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067e6:	4b65      	ldr	r3, [pc, #404]	@ (800697c <HAL_RCC_ClockConfig+0x1b8>)
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	b2d2      	uxtb	r2, r2
 80067ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ee:	4b63      	ldr	r3, [pc, #396]	@ (800697c <HAL_RCC_ClockConfig+0x1b8>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 030f 	and.w	r3, r3, #15
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d001      	beq.n	8006800 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e0b8      	b.n	8006972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0302 	and.w	r3, r3, #2
 8006808:	2b00      	cmp	r3, #0
 800680a:	d020      	beq.n	800684e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0304 	and.w	r3, r3, #4
 8006814:	2b00      	cmp	r3, #0
 8006816:	d005      	beq.n	8006824 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006818:	4b59      	ldr	r3, [pc, #356]	@ (8006980 <HAL_RCC_ClockConfig+0x1bc>)
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	4a58      	ldr	r2, [pc, #352]	@ (8006980 <HAL_RCC_ClockConfig+0x1bc>)
 800681e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006822:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0308 	and.w	r3, r3, #8
 800682c:	2b00      	cmp	r3, #0
 800682e:	d005      	beq.n	800683c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006830:	4b53      	ldr	r3, [pc, #332]	@ (8006980 <HAL_RCC_ClockConfig+0x1bc>)
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	4a52      	ldr	r2, [pc, #328]	@ (8006980 <HAL_RCC_ClockConfig+0x1bc>)
 8006836:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800683a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800683c:	4b50      	ldr	r3, [pc, #320]	@ (8006980 <HAL_RCC_ClockConfig+0x1bc>)
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	494d      	ldr	r1, [pc, #308]	@ (8006980 <HAL_RCC_ClockConfig+0x1bc>)
 800684a:	4313      	orrs	r3, r2
 800684c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	2b00      	cmp	r3, #0
 8006858:	d044      	beq.n	80068e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d107      	bne.n	8006872 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006862:	4b47      	ldr	r3, [pc, #284]	@ (8006980 <HAL_RCC_ClockConfig+0x1bc>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d119      	bne.n	80068a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e07f      	b.n	8006972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	2b02      	cmp	r3, #2
 8006878:	d003      	beq.n	8006882 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800687e:	2b03      	cmp	r3, #3
 8006880:	d107      	bne.n	8006892 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006882:	4b3f      	ldr	r3, [pc, #252]	@ (8006980 <HAL_RCC_ClockConfig+0x1bc>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d109      	bne.n	80068a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e06f      	b.n	8006972 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006892:	4b3b      	ldr	r3, [pc, #236]	@ (8006980 <HAL_RCC_ClockConfig+0x1bc>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0302 	and.w	r3, r3, #2
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e067      	b.n	8006972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068a2:	4b37      	ldr	r3, [pc, #220]	@ (8006980 <HAL_RCC_ClockConfig+0x1bc>)
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f023 0203 	bic.w	r2, r3, #3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	4934      	ldr	r1, [pc, #208]	@ (8006980 <HAL_RCC_ClockConfig+0x1bc>)
 80068b0:	4313      	orrs	r3, r2
 80068b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068b4:	f7fd fcec 	bl	8004290 <HAL_GetTick>
 80068b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068ba:	e00a      	b.n	80068d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068bc:	f7fd fce8 	bl	8004290 <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d901      	bls.n	80068d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e04f      	b.n	8006972 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068d2:	4b2b      	ldr	r3, [pc, #172]	@ (8006980 <HAL_RCC_ClockConfig+0x1bc>)
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f003 020c 	and.w	r2, r3, #12
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d1eb      	bne.n	80068bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80068e4:	4b25      	ldr	r3, [pc, #148]	@ (800697c <HAL_RCC_ClockConfig+0x1b8>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 030f 	and.w	r3, r3, #15
 80068ec:	683a      	ldr	r2, [r7, #0]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d20c      	bcs.n	800690c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068f2:	4b22      	ldr	r3, [pc, #136]	@ (800697c <HAL_RCC_ClockConfig+0x1b8>)
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	b2d2      	uxtb	r2, r2
 80068f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068fa:	4b20      	ldr	r3, [pc, #128]	@ (800697c <HAL_RCC_ClockConfig+0x1b8>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 030f 	and.w	r3, r3, #15
 8006902:	683a      	ldr	r2, [r7, #0]
 8006904:	429a      	cmp	r2, r3
 8006906:	d001      	beq.n	800690c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e032      	b.n	8006972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0304 	and.w	r3, r3, #4
 8006914:	2b00      	cmp	r3, #0
 8006916:	d008      	beq.n	800692a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006918:	4b19      	ldr	r3, [pc, #100]	@ (8006980 <HAL_RCC_ClockConfig+0x1bc>)
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	4916      	ldr	r1, [pc, #88]	@ (8006980 <HAL_RCC_ClockConfig+0x1bc>)
 8006926:	4313      	orrs	r3, r2
 8006928:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 0308 	and.w	r3, r3, #8
 8006932:	2b00      	cmp	r3, #0
 8006934:	d009      	beq.n	800694a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006936:	4b12      	ldr	r3, [pc, #72]	@ (8006980 <HAL_RCC_ClockConfig+0x1bc>)
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	00db      	lsls	r3, r3, #3
 8006944:	490e      	ldr	r1, [pc, #56]	@ (8006980 <HAL_RCC_ClockConfig+0x1bc>)
 8006946:	4313      	orrs	r3, r2
 8006948:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800694a:	f000 f855 	bl	80069f8 <HAL_RCC_GetSysClockFreq>
 800694e:	4602      	mov	r2, r0
 8006950:	4b0b      	ldr	r3, [pc, #44]	@ (8006980 <HAL_RCC_ClockConfig+0x1bc>)
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	091b      	lsrs	r3, r3, #4
 8006956:	f003 030f 	and.w	r3, r3, #15
 800695a:	490a      	ldr	r1, [pc, #40]	@ (8006984 <HAL_RCC_ClockConfig+0x1c0>)
 800695c:	5ccb      	ldrb	r3, [r1, r3]
 800695e:	fa22 f303 	lsr.w	r3, r2, r3
 8006962:	4a09      	ldr	r2, [pc, #36]	@ (8006988 <HAL_RCC_ClockConfig+0x1c4>)
 8006964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006966:	4b09      	ldr	r3, [pc, #36]	@ (800698c <HAL_RCC_ClockConfig+0x1c8>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4618      	mov	r0, r3
 800696c:	f7fd fc4c 	bl	8004208 <HAL_InitTick>

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	40023c00 	.word	0x40023c00
 8006980:	40023800 	.word	0x40023800
 8006984:	0801208c 	.word	0x0801208c
 8006988:	20000000 	.word	0x20000000
 800698c:	20000004 	.word	0x20000004

08006990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006990:	b480      	push	{r7}
 8006992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006994:	4b03      	ldr	r3, [pc, #12]	@ (80069a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006996:	681b      	ldr	r3, [r3, #0]
}
 8006998:	4618      	mov	r0, r3
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	20000000 	.word	0x20000000

080069a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80069ac:	f7ff fff0 	bl	8006990 <HAL_RCC_GetHCLKFreq>
 80069b0:	4602      	mov	r2, r0
 80069b2:	4b05      	ldr	r3, [pc, #20]	@ (80069c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	0a9b      	lsrs	r3, r3, #10
 80069b8:	f003 0307 	and.w	r3, r3, #7
 80069bc:	4903      	ldr	r1, [pc, #12]	@ (80069cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80069be:	5ccb      	ldrb	r3, [r1, r3]
 80069c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	40023800 	.word	0x40023800
 80069cc:	0801209c 	.word	0x0801209c

080069d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80069d4:	f7ff ffdc 	bl	8006990 <HAL_RCC_GetHCLKFreq>
 80069d8:	4602      	mov	r2, r0
 80069da:	4b05      	ldr	r3, [pc, #20]	@ (80069f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	0b5b      	lsrs	r3, r3, #13
 80069e0:	f003 0307 	and.w	r3, r3, #7
 80069e4:	4903      	ldr	r1, [pc, #12]	@ (80069f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069e6:	5ccb      	ldrb	r3, [r1, r3]
 80069e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	40023800 	.word	0x40023800
 80069f4:	0801209c 	.word	0x0801209c

080069f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069fc:	b0ae      	sub	sp, #184	@ 0xb8
 80069fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006a00:	2300      	movs	r3, #0
 8006a02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8006a06:	2300      	movs	r3, #0
 8006a08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8006a12:	2300      	movs	r3, #0
 8006a14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a1e:	4bcb      	ldr	r3, [pc, #812]	@ (8006d4c <HAL_RCC_GetSysClockFreq+0x354>)
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f003 030c 	and.w	r3, r3, #12
 8006a26:	2b0c      	cmp	r3, #12
 8006a28:	f200 8206 	bhi.w	8006e38 <HAL_RCC_GetSysClockFreq+0x440>
 8006a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8006a34 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a32:	bf00      	nop
 8006a34:	08006a69 	.word	0x08006a69
 8006a38:	08006e39 	.word	0x08006e39
 8006a3c:	08006e39 	.word	0x08006e39
 8006a40:	08006e39 	.word	0x08006e39
 8006a44:	08006a71 	.word	0x08006a71
 8006a48:	08006e39 	.word	0x08006e39
 8006a4c:	08006e39 	.word	0x08006e39
 8006a50:	08006e39 	.word	0x08006e39
 8006a54:	08006a79 	.word	0x08006a79
 8006a58:	08006e39 	.word	0x08006e39
 8006a5c:	08006e39 	.word	0x08006e39
 8006a60:	08006e39 	.word	0x08006e39
 8006a64:	08006c69 	.word	0x08006c69
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a68:	4bb9      	ldr	r3, [pc, #740]	@ (8006d50 <HAL_RCC_GetSysClockFreq+0x358>)
 8006a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006a6e:	e1e7      	b.n	8006e40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a70:	4bb8      	ldr	r3, [pc, #736]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006a72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006a76:	e1e3      	b.n	8006e40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a78:	4bb4      	ldr	r3, [pc, #720]	@ (8006d4c <HAL_RCC_GetSysClockFreq+0x354>)
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a84:	4bb1      	ldr	r3, [pc, #708]	@ (8006d4c <HAL_RCC_GetSysClockFreq+0x354>)
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d071      	beq.n	8006b74 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a90:	4bae      	ldr	r3, [pc, #696]	@ (8006d4c <HAL_RCC_GetSysClockFreq+0x354>)
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	099b      	lsrs	r3, r3, #6
 8006a96:	2200      	movs	r2, #0
 8006a98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006a9c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006aa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aa8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006aac:	2300      	movs	r3, #0
 8006aae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006ab2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006ab6:	4622      	mov	r2, r4
 8006ab8:	462b      	mov	r3, r5
 8006aba:	f04f 0000 	mov.w	r0, #0
 8006abe:	f04f 0100 	mov.w	r1, #0
 8006ac2:	0159      	lsls	r1, r3, #5
 8006ac4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ac8:	0150      	lsls	r0, r2, #5
 8006aca:	4602      	mov	r2, r0
 8006acc:	460b      	mov	r3, r1
 8006ace:	4621      	mov	r1, r4
 8006ad0:	1a51      	subs	r1, r2, r1
 8006ad2:	6439      	str	r1, [r7, #64]	@ 0x40
 8006ad4:	4629      	mov	r1, r5
 8006ad6:	eb63 0301 	sbc.w	r3, r3, r1
 8006ada:	647b      	str	r3, [r7, #68]	@ 0x44
 8006adc:	f04f 0200 	mov.w	r2, #0
 8006ae0:	f04f 0300 	mov.w	r3, #0
 8006ae4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8006ae8:	4649      	mov	r1, r9
 8006aea:	018b      	lsls	r3, r1, #6
 8006aec:	4641      	mov	r1, r8
 8006aee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006af2:	4641      	mov	r1, r8
 8006af4:	018a      	lsls	r2, r1, #6
 8006af6:	4641      	mov	r1, r8
 8006af8:	1a51      	subs	r1, r2, r1
 8006afa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006afc:	4649      	mov	r1, r9
 8006afe:	eb63 0301 	sbc.w	r3, r3, r1
 8006b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b04:	f04f 0200 	mov.w	r2, #0
 8006b08:	f04f 0300 	mov.w	r3, #0
 8006b0c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8006b10:	4649      	mov	r1, r9
 8006b12:	00cb      	lsls	r3, r1, #3
 8006b14:	4641      	mov	r1, r8
 8006b16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b1a:	4641      	mov	r1, r8
 8006b1c:	00ca      	lsls	r2, r1, #3
 8006b1e:	4610      	mov	r0, r2
 8006b20:	4619      	mov	r1, r3
 8006b22:	4603      	mov	r3, r0
 8006b24:	4622      	mov	r2, r4
 8006b26:	189b      	adds	r3, r3, r2
 8006b28:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b2a:	462b      	mov	r3, r5
 8006b2c:	460a      	mov	r2, r1
 8006b2e:	eb42 0303 	adc.w	r3, r2, r3
 8006b32:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b34:	f04f 0200 	mov.w	r2, #0
 8006b38:	f04f 0300 	mov.w	r3, #0
 8006b3c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006b40:	4629      	mov	r1, r5
 8006b42:	024b      	lsls	r3, r1, #9
 8006b44:	4621      	mov	r1, r4
 8006b46:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006b4a:	4621      	mov	r1, r4
 8006b4c:	024a      	lsls	r2, r1, #9
 8006b4e:	4610      	mov	r0, r2
 8006b50:	4619      	mov	r1, r3
 8006b52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b56:	2200      	movs	r2, #0
 8006b58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006b60:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006b64:	f7fa f890 	bl	8000c88 <__aeabi_uldivmod>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b72:	e067      	b.n	8006c44 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b74:	4b75      	ldr	r3, [pc, #468]	@ (8006d4c <HAL_RCC_GetSysClockFreq+0x354>)
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	099b      	lsrs	r3, r3, #6
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b80:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006b84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b8e:	2300      	movs	r3, #0
 8006b90:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006b92:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8006b96:	4622      	mov	r2, r4
 8006b98:	462b      	mov	r3, r5
 8006b9a:	f04f 0000 	mov.w	r0, #0
 8006b9e:	f04f 0100 	mov.w	r1, #0
 8006ba2:	0159      	lsls	r1, r3, #5
 8006ba4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ba8:	0150      	lsls	r0, r2, #5
 8006baa:	4602      	mov	r2, r0
 8006bac:	460b      	mov	r3, r1
 8006bae:	4621      	mov	r1, r4
 8006bb0:	1a51      	subs	r1, r2, r1
 8006bb2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006bb4:	4629      	mov	r1, r5
 8006bb6:	eb63 0301 	sbc.w	r3, r3, r1
 8006bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bbc:	f04f 0200 	mov.w	r2, #0
 8006bc0:	f04f 0300 	mov.w	r3, #0
 8006bc4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8006bc8:	4649      	mov	r1, r9
 8006bca:	018b      	lsls	r3, r1, #6
 8006bcc:	4641      	mov	r1, r8
 8006bce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006bd2:	4641      	mov	r1, r8
 8006bd4:	018a      	lsls	r2, r1, #6
 8006bd6:	4641      	mov	r1, r8
 8006bd8:	ebb2 0a01 	subs.w	sl, r2, r1
 8006bdc:	4649      	mov	r1, r9
 8006bde:	eb63 0b01 	sbc.w	fp, r3, r1
 8006be2:	f04f 0200 	mov.w	r2, #0
 8006be6:	f04f 0300 	mov.w	r3, #0
 8006bea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006bee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006bf2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006bf6:	4692      	mov	sl, r2
 8006bf8:	469b      	mov	fp, r3
 8006bfa:	4623      	mov	r3, r4
 8006bfc:	eb1a 0303 	adds.w	r3, sl, r3
 8006c00:	623b      	str	r3, [r7, #32]
 8006c02:	462b      	mov	r3, r5
 8006c04:	eb4b 0303 	adc.w	r3, fp, r3
 8006c08:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c0a:	f04f 0200 	mov.w	r2, #0
 8006c0e:	f04f 0300 	mov.w	r3, #0
 8006c12:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006c16:	4629      	mov	r1, r5
 8006c18:	028b      	lsls	r3, r1, #10
 8006c1a:	4621      	mov	r1, r4
 8006c1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006c20:	4621      	mov	r1, r4
 8006c22:	028a      	lsls	r2, r1, #10
 8006c24:	4610      	mov	r0, r2
 8006c26:	4619      	mov	r1, r3
 8006c28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006c30:	677a      	str	r2, [r7, #116]	@ 0x74
 8006c32:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006c36:	f7fa f827 	bl	8000c88 <__aeabi_uldivmod>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	4613      	mov	r3, r2
 8006c40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006c44:	4b41      	ldr	r3, [pc, #260]	@ (8006d4c <HAL_RCC_GetSysClockFreq+0x354>)
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	0c1b      	lsrs	r3, r3, #16
 8006c4a:	f003 0303 	and.w	r3, r3, #3
 8006c4e:	3301      	adds	r3, #1
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8006c56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006c5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006c66:	e0eb      	b.n	8006e40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c68:	4b38      	ldr	r3, [pc, #224]	@ (8006d4c <HAL_RCC_GetSysClockFreq+0x354>)
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c74:	4b35      	ldr	r3, [pc, #212]	@ (8006d4c <HAL_RCC_GetSysClockFreq+0x354>)
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d06b      	beq.n	8006d58 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c80:	4b32      	ldr	r3, [pc, #200]	@ (8006d4c <HAL_RCC_GetSysClockFreq+0x354>)
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	099b      	lsrs	r3, r3, #6
 8006c86:	2200      	movs	r2, #0
 8006c88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c8a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006c8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c92:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c94:	2300      	movs	r3, #0
 8006c96:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c98:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006c9c:	4622      	mov	r2, r4
 8006c9e:	462b      	mov	r3, r5
 8006ca0:	f04f 0000 	mov.w	r0, #0
 8006ca4:	f04f 0100 	mov.w	r1, #0
 8006ca8:	0159      	lsls	r1, r3, #5
 8006caa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cae:	0150      	lsls	r0, r2, #5
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	4621      	mov	r1, r4
 8006cb6:	1a51      	subs	r1, r2, r1
 8006cb8:	61b9      	str	r1, [r7, #24]
 8006cba:	4629      	mov	r1, r5
 8006cbc:	eb63 0301 	sbc.w	r3, r3, r1
 8006cc0:	61fb      	str	r3, [r7, #28]
 8006cc2:	f04f 0200 	mov.w	r2, #0
 8006cc6:	f04f 0300 	mov.w	r3, #0
 8006cca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006cce:	4659      	mov	r1, fp
 8006cd0:	018b      	lsls	r3, r1, #6
 8006cd2:	4651      	mov	r1, sl
 8006cd4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006cd8:	4651      	mov	r1, sl
 8006cda:	018a      	lsls	r2, r1, #6
 8006cdc:	4651      	mov	r1, sl
 8006cde:	ebb2 0801 	subs.w	r8, r2, r1
 8006ce2:	4659      	mov	r1, fp
 8006ce4:	eb63 0901 	sbc.w	r9, r3, r1
 8006ce8:	f04f 0200 	mov.w	r2, #0
 8006cec:	f04f 0300 	mov.w	r3, #0
 8006cf0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cf4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cf8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cfc:	4690      	mov	r8, r2
 8006cfe:	4699      	mov	r9, r3
 8006d00:	4623      	mov	r3, r4
 8006d02:	eb18 0303 	adds.w	r3, r8, r3
 8006d06:	613b      	str	r3, [r7, #16]
 8006d08:	462b      	mov	r3, r5
 8006d0a:	eb49 0303 	adc.w	r3, r9, r3
 8006d0e:	617b      	str	r3, [r7, #20]
 8006d10:	f04f 0200 	mov.w	r2, #0
 8006d14:	f04f 0300 	mov.w	r3, #0
 8006d18:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006d1c:	4629      	mov	r1, r5
 8006d1e:	024b      	lsls	r3, r1, #9
 8006d20:	4621      	mov	r1, r4
 8006d22:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d26:	4621      	mov	r1, r4
 8006d28:	024a      	lsls	r2, r1, #9
 8006d2a:	4610      	mov	r0, r2
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d32:	2200      	movs	r2, #0
 8006d34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d36:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006d38:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006d3c:	f7f9 ffa4 	bl	8000c88 <__aeabi_uldivmod>
 8006d40:	4602      	mov	r2, r0
 8006d42:	460b      	mov	r3, r1
 8006d44:	4613      	mov	r3, r2
 8006d46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d4a:	e065      	b.n	8006e18 <HAL_RCC_GetSysClockFreq+0x420>
 8006d4c:	40023800 	.word	0x40023800
 8006d50:	00f42400 	.word	0x00f42400
 8006d54:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d58:	4b3d      	ldr	r3, [pc, #244]	@ (8006e50 <HAL_RCC_GetSysClockFreq+0x458>)
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	099b      	lsrs	r3, r3, #6
 8006d5e:	2200      	movs	r2, #0
 8006d60:	4618      	mov	r0, r3
 8006d62:	4611      	mov	r1, r2
 8006d64:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d68:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d6e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8006d72:	4642      	mov	r2, r8
 8006d74:	464b      	mov	r3, r9
 8006d76:	f04f 0000 	mov.w	r0, #0
 8006d7a:	f04f 0100 	mov.w	r1, #0
 8006d7e:	0159      	lsls	r1, r3, #5
 8006d80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d84:	0150      	lsls	r0, r2, #5
 8006d86:	4602      	mov	r2, r0
 8006d88:	460b      	mov	r3, r1
 8006d8a:	4641      	mov	r1, r8
 8006d8c:	1a51      	subs	r1, r2, r1
 8006d8e:	60b9      	str	r1, [r7, #8]
 8006d90:	4649      	mov	r1, r9
 8006d92:	eb63 0301 	sbc.w	r3, r3, r1
 8006d96:	60fb      	str	r3, [r7, #12]
 8006d98:	f04f 0200 	mov.w	r2, #0
 8006d9c:	f04f 0300 	mov.w	r3, #0
 8006da0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006da4:	4659      	mov	r1, fp
 8006da6:	018b      	lsls	r3, r1, #6
 8006da8:	4651      	mov	r1, sl
 8006daa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006dae:	4651      	mov	r1, sl
 8006db0:	018a      	lsls	r2, r1, #6
 8006db2:	4651      	mov	r1, sl
 8006db4:	1a54      	subs	r4, r2, r1
 8006db6:	4659      	mov	r1, fp
 8006db8:	eb63 0501 	sbc.w	r5, r3, r1
 8006dbc:	f04f 0200 	mov.w	r2, #0
 8006dc0:	f04f 0300 	mov.w	r3, #0
 8006dc4:	00eb      	lsls	r3, r5, #3
 8006dc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006dca:	00e2      	lsls	r2, r4, #3
 8006dcc:	4614      	mov	r4, r2
 8006dce:	461d      	mov	r5, r3
 8006dd0:	4643      	mov	r3, r8
 8006dd2:	18e3      	adds	r3, r4, r3
 8006dd4:	603b      	str	r3, [r7, #0]
 8006dd6:	464b      	mov	r3, r9
 8006dd8:	eb45 0303 	adc.w	r3, r5, r3
 8006ddc:	607b      	str	r3, [r7, #4]
 8006dde:	f04f 0200 	mov.w	r2, #0
 8006de2:	f04f 0300 	mov.w	r3, #0
 8006de6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006dea:	4629      	mov	r1, r5
 8006dec:	028b      	lsls	r3, r1, #10
 8006dee:	4621      	mov	r1, r4
 8006df0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006df4:	4621      	mov	r1, r4
 8006df6:	028a      	lsls	r2, r1, #10
 8006df8:	4610      	mov	r0, r2
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e00:	2200      	movs	r2, #0
 8006e02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e04:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006e06:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006e0a:	f7f9 ff3d 	bl	8000c88 <__aeabi_uldivmod>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	460b      	mov	r3, r1
 8006e12:	4613      	mov	r3, r2
 8006e14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006e18:	4b0d      	ldr	r3, [pc, #52]	@ (8006e50 <HAL_RCC_GetSysClockFreq+0x458>)
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	0f1b      	lsrs	r3, r3, #28
 8006e1e:	f003 0307 	and.w	r3, r3, #7
 8006e22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8006e26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006e2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006e36:	e003      	b.n	8006e40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e38:	4b06      	ldr	r3, [pc, #24]	@ (8006e54 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006e3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006e3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	37b8      	adds	r7, #184	@ 0xb8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e4e:	bf00      	nop
 8006e50:	40023800 	.word	0x40023800
 8006e54:	00f42400 	.word	0x00f42400

08006e58 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b086      	sub	sp, #24
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d101      	bne.n	8006e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e28d      	b.n	8007386 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f000 8083 	beq.w	8006f7e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006e78:	4b94      	ldr	r3, [pc, #592]	@ (80070cc <HAL_RCC_OscConfig+0x274>)
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	f003 030c 	and.w	r3, r3, #12
 8006e80:	2b04      	cmp	r3, #4
 8006e82:	d019      	beq.n	8006eb8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006e84:	4b91      	ldr	r3, [pc, #580]	@ (80070cc <HAL_RCC_OscConfig+0x274>)
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f003 030c 	and.w	r3, r3, #12
        || \
 8006e8c:	2b08      	cmp	r3, #8
 8006e8e:	d106      	bne.n	8006e9e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006e90:	4b8e      	ldr	r3, [pc, #568]	@ (80070cc <HAL_RCC_OscConfig+0x274>)
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e9c:	d00c      	beq.n	8006eb8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e9e:	4b8b      	ldr	r3, [pc, #556]	@ (80070cc <HAL_RCC_OscConfig+0x274>)
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006ea6:	2b0c      	cmp	r3, #12
 8006ea8:	d112      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006eaa:	4b88      	ldr	r3, [pc, #544]	@ (80070cc <HAL_RCC_OscConfig+0x274>)
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006eb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006eb6:	d10b      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006eb8:	4b84      	ldr	r3, [pc, #528]	@ (80070cc <HAL_RCC_OscConfig+0x274>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d05b      	beq.n	8006f7c <HAL_RCC_OscConfig+0x124>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d157      	bne.n	8006f7c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e25a      	b.n	8007386 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ed8:	d106      	bne.n	8006ee8 <HAL_RCC_OscConfig+0x90>
 8006eda:	4b7c      	ldr	r3, [pc, #496]	@ (80070cc <HAL_RCC_OscConfig+0x274>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a7b      	ldr	r2, [pc, #492]	@ (80070cc <HAL_RCC_OscConfig+0x274>)
 8006ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ee4:	6013      	str	r3, [r2, #0]
 8006ee6:	e01d      	b.n	8006f24 <HAL_RCC_OscConfig+0xcc>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ef0:	d10c      	bne.n	8006f0c <HAL_RCC_OscConfig+0xb4>
 8006ef2:	4b76      	ldr	r3, [pc, #472]	@ (80070cc <HAL_RCC_OscConfig+0x274>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a75      	ldr	r2, [pc, #468]	@ (80070cc <HAL_RCC_OscConfig+0x274>)
 8006ef8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006efc:	6013      	str	r3, [r2, #0]
 8006efe:	4b73      	ldr	r3, [pc, #460]	@ (80070cc <HAL_RCC_OscConfig+0x274>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a72      	ldr	r2, [pc, #456]	@ (80070cc <HAL_RCC_OscConfig+0x274>)
 8006f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f08:	6013      	str	r3, [r2, #0]
 8006f0a:	e00b      	b.n	8006f24 <HAL_RCC_OscConfig+0xcc>
 8006f0c:	4b6f      	ldr	r3, [pc, #444]	@ (80070cc <HAL_RCC_OscConfig+0x274>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a6e      	ldr	r2, [pc, #440]	@ (80070cc <HAL_RCC_OscConfig+0x274>)
 8006f12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f16:	6013      	str	r3, [r2, #0]
 8006f18:	4b6c      	ldr	r3, [pc, #432]	@ (80070cc <HAL_RCC_OscConfig+0x274>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a6b      	ldr	r2, [pc, #428]	@ (80070cc <HAL_RCC_OscConfig+0x274>)
 8006f1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d013      	beq.n	8006f54 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f2c:	f7fd f9b0 	bl	8004290 <HAL_GetTick>
 8006f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f32:	e008      	b.n	8006f46 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f34:	f7fd f9ac 	bl	8004290 <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	2b64      	cmp	r3, #100	@ 0x64
 8006f40:	d901      	bls.n	8006f46 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e21f      	b.n	8007386 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f46:	4b61      	ldr	r3, [pc, #388]	@ (80070cc <HAL_RCC_OscConfig+0x274>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d0f0      	beq.n	8006f34 <HAL_RCC_OscConfig+0xdc>
 8006f52:	e014      	b.n	8006f7e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f54:	f7fd f99c 	bl	8004290 <HAL_GetTick>
 8006f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f5a:	e008      	b.n	8006f6e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f5c:	f7fd f998 	bl	8004290 <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	2b64      	cmp	r3, #100	@ 0x64
 8006f68:	d901      	bls.n	8006f6e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e20b      	b.n	8007386 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f6e:	4b57      	ldr	r3, [pc, #348]	@ (80070cc <HAL_RCC_OscConfig+0x274>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1f0      	bne.n	8006f5c <HAL_RCC_OscConfig+0x104>
 8006f7a:	e000      	b.n	8006f7e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0302 	and.w	r3, r3, #2
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d06f      	beq.n	800706a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006f8a:	4b50      	ldr	r3, [pc, #320]	@ (80070cc <HAL_RCC_OscConfig+0x274>)
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	f003 030c 	and.w	r3, r3, #12
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d017      	beq.n	8006fc6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006f96:	4b4d      	ldr	r3, [pc, #308]	@ (80070cc <HAL_RCC_OscConfig+0x274>)
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f003 030c 	and.w	r3, r3, #12
        || \
 8006f9e:	2b08      	cmp	r3, #8
 8006fa0:	d105      	bne.n	8006fae <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006fa2:	4b4a      	ldr	r3, [pc, #296]	@ (80070cc <HAL_RCC_OscConfig+0x274>)
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00b      	beq.n	8006fc6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fae:	4b47      	ldr	r3, [pc, #284]	@ (80070cc <HAL_RCC_OscConfig+0x274>)
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006fb6:	2b0c      	cmp	r3, #12
 8006fb8:	d11c      	bne.n	8006ff4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fba:	4b44      	ldr	r3, [pc, #272]	@ (80070cc <HAL_RCC_OscConfig+0x274>)
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d116      	bne.n	8006ff4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fc6:	4b41      	ldr	r3, [pc, #260]	@ (80070cc <HAL_RCC_OscConfig+0x274>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0302 	and.w	r3, r3, #2
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d005      	beq.n	8006fde <HAL_RCC_OscConfig+0x186>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d001      	beq.n	8006fde <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e1d3      	b.n	8007386 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fde:	4b3b      	ldr	r3, [pc, #236]	@ (80070cc <HAL_RCC_OscConfig+0x274>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	00db      	lsls	r3, r3, #3
 8006fec:	4937      	ldr	r1, [pc, #220]	@ (80070cc <HAL_RCC_OscConfig+0x274>)
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ff2:	e03a      	b.n	800706a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d020      	beq.n	800703e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ffc:	4b34      	ldr	r3, [pc, #208]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8006ffe:	2201      	movs	r2, #1
 8007000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007002:	f7fd f945 	bl	8004290 <HAL_GetTick>
 8007006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007008:	e008      	b.n	800701c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800700a:	f7fd f941 	bl	8004290 <HAL_GetTick>
 800700e:	4602      	mov	r2, r0
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	1ad3      	subs	r3, r2, r3
 8007014:	2b02      	cmp	r3, #2
 8007016:	d901      	bls.n	800701c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007018:	2303      	movs	r3, #3
 800701a:	e1b4      	b.n	8007386 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800701c:	4b2b      	ldr	r3, [pc, #172]	@ (80070cc <HAL_RCC_OscConfig+0x274>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0302 	and.w	r3, r3, #2
 8007024:	2b00      	cmp	r3, #0
 8007026:	d0f0      	beq.n	800700a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007028:	4b28      	ldr	r3, [pc, #160]	@ (80070cc <HAL_RCC_OscConfig+0x274>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	00db      	lsls	r3, r3, #3
 8007036:	4925      	ldr	r1, [pc, #148]	@ (80070cc <HAL_RCC_OscConfig+0x274>)
 8007038:	4313      	orrs	r3, r2
 800703a:	600b      	str	r3, [r1, #0]
 800703c:	e015      	b.n	800706a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800703e:	4b24      	ldr	r3, [pc, #144]	@ (80070d0 <HAL_RCC_OscConfig+0x278>)
 8007040:	2200      	movs	r2, #0
 8007042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007044:	f7fd f924 	bl	8004290 <HAL_GetTick>
 8007048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800704a:	e008      	b.n	800705e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800704c:	f7fd f920 	bl	8004290 <HAL_GetTick>
 8007050:	4602      	mov	r2, r0
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	2b02      	cmp	r3, #2
 8007058:	d901      	bls.n	800705e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e193      	b.n	8007386 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800705e:	4b1b      	ldr	r3, [pc, #108]	@ (80070cc <HAL_RCC_OscConfig+0x274>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0302 	and.w	r3, r3, #2
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1f0      	bne.n	800704c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0308 	and.w	r3, r3, #8
 8007072:	2b00      	cmp	r3, #0
 8007074:	d036      	beq.n	80070e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d016      	beq.n	80070ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800707e:	4b15      	ldr	r3, [pc, #84]	@ (80070d4 <HAL_RCC_OscConfig+0x27c>)
 8007080:	2201      	movs	r2, #1
 8007082:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007084:	f7fd f904 	bl	8004290 <HAL_GetTick>
 8007088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800708a:	e008      	b.n	800709e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800708c:	f7fd f900 	bl	8004290 <HAL_GetTick>
 8007090:	4602      	mov	r2, r0
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	2b02      	cmp	r3, #2
 8007098:	d901      	bls.n	800709e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e173      	b.n	8007386 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800709e:	4b0b      	ldr	r3, [pc, #44]	@ (80070cc <HAL_RCC_OscConfig+0x274>)
 80070a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070a2:	f003 0302 	and.w	r3, r3, #2
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d0f0      	beq.n	800708c <HAL_RCC_OscConfig+0x234>
 80070aa:	e01b      	b.n	80070e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070ac:	4b09      	ldr	r3, [pc, #36]	@ (80070d4 <HAL_RCC_OscConfig+0x27c>)
 80070ae:	2200      	movs	r2, #0
 80070b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070b2:	f7fd f8ed 	bl	8004290 <HAL_GetTick>
 80070b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070b8:	e00e      	b.n	80070d8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070ba:	f7fd f8e9 	bl	8004290 <HAL_GetTick>
 80070be:	4602      	mov	r2, r0
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	1ad3      	subs	r3, r2, r3
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d907      	bls.n	80070d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e15c      	b.n	8007386 <HAL_RCC_OscConfig+0x52e>
 80070cc:	40023800 	.word	0x40023800
 80070d0:	42470000 	.word	0x42470000
 80070d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070d8:	4b8a      	ldr	r3, [pc, #552]	@ (8007304 <HAL_RCC_OscConfig+0x4ac>)
 80070da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070dc:	f003 0302 	and.w	r3, r3, #2
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1ea      	bne.n	80070ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0304 	and.w	r3, r3, #4
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f000 8097 	beq.w	8007220 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070f2:	2300      	movs	r3, #0
 80070f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070f6:	4b83      	ldr	r3, [pc, #524]	@ (8007304 <HAL_RCC_OscConfig+0x4ac>)
 80070f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10f      	bne.n	8007122 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007102:	2300      	movs	r3, #0
 8007104:	60bb      	str	r3, [r7, #8]
 8007106:	4b7f      	ldr	r3, [pc, #508]	@ (8007304 <HAL_RCC_OscConfig+0x4ac>)
 8007108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800710a:	4a7e      	ldr	r2, [pc, #504]	@ (8007304 <HAL_RCC_OscConfig+0x4ac>)
 800710c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007110:	6413      	str	r3, [r2, #64]	@ 0x40
 8007112:	4b7c      	ldr	r3, [pc, #496]	@ (8007304 <HAL_RCC_OscConfig+0x4ac>)
 8007114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800711a:	60bb      	str	r3, [r7, #8]
 800711c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800711e:	2301      	movs	r3, #1
 8007120:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007122:	4b79      	ldr	r3, [pc, #484]	@ (8007308 <HAL_RCC_OscConfig+0x4b0>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800712a:	2b00      	cmp	r3, #0
 800712c:	d118      	bne.n	8007160 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800712e:	4b76      	ldr	r3, [pc, #472]	@ (8007308 <HAL_RCC_OscConfig+0x4b0>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a75      	ldr	r2, [pc, #468]	@ (8007308 <HAL_RCC_OscConfig+0x4b0>)
 8007134:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800713a:	f7fd f8a9 	bl	8004290 <HAL_GetTick>
 800713e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007140:	e008      	b.n	8007154 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007142:	f7fd f8a5 	bl	8004290 <HAL_GetTick>
 8007146:	4602      	mov	r2, r0
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	2b02      	cmp	r3, #2
 800714e:	d901      	bls.n	8007154 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e118      	b.n	8007386 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007154:	4b6c      	ldr	r3, [pc, #432]	@ (8007308 <HAL_RCC_OscConfig+0x4b0>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800715c:	2b00      	cmp	r3, #0
 800715e:	d0f0      	beq.n	8007142 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d106      	bne.n	8007176 <HAL_RCC_OscConfig+0x31e>
 8007168:	4b66      	ldr	r3, [pc, #408]	@ (8007304 <HAL_RCC_OscConfig+0x4ac>)
 800716a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800716c:	4a65      	ldr	r2, [pc, #404]	@ (8007304 <HAL_RCC_OscConfig+0x4ac>)
 800716e:	f043 0301 	orr.w	r3, r3, #1
 8007172:	6713      	str	r3, [r2, #112]	@ 0x70
 8007174:	e01c      	b.n	80071b0 <HAL_RCC_OscConfig+0x358>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	2b05      	cmp	r3, #5
 800717c:	d10c      	bne.n	8007198 <HAL_RCC_OscConfig+0x340>
 800717e:	4b61      	ldr	r3, [pc, #388]	@ (8007304 <HAL_RCC_OscConfig+0x4ac>)
 8007180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007182:	4a60      	ldr	r2, [pc, #384]	@ (8007304 <HAL_RCC_OscConfig+0x4ac>)
 8007184:	f043 0304 	orr.w	r3, r3, #4
 8007188:	6713      	str	r3, [r2, #112]	@ 0x70
 800718a:	4b5e      	ldr	r3, [pc, #376]	@ (8007304 <HAL_RCC_OscConfig+0x4ac>)
 800718c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800718e:	4a5d      	ldr	r2, [pc, #372]	@ (8007304 <HAL_RCC_OscConfig+0x4ac>)
 8007190:	f043 0301 	orr.w	r3, r3, #1
 8007194:	6713      	str	r3, [r2, #112]	@ 0x70
 8007196:	e00b      	b.n	80071b0 <HAL_RCC_OscConfig+0x358>
 8007198:	4b5a      	ldr	r3, [pc, #360]	@ (8007304 <HAL_RCC_OscConfig+0x4ac>)
 800719a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800719c:	4a59      	ldr	r2, [pc, #356]	@ (8007304 <HAL_RCC_OscConfig+0x4ac>)
 800719e:	f023 0301 	bic.w	r3, r3, #1
 80071a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80071a4:	4b57      	ldr	r3, [pc, #348]	@ (8007304 <HAL_RCC_OscConfig+0x4ac>)
 80071a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071a8:	4a56      	ldr	r2, [pc, #344]	@ (8007304 <HAL_RCC_OscConfig+0x4ac>)
 80071aa:	f023 0304 	bic.w	r3, r3, #4
 80071ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d015      	beq.n	80071e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071b8:	f7fd f86a 	bl	8004290 <HAL_GetTick>
 80071bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071be:	e00a      	b.n	80071d6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071c0:	f7fd f866 	bl	8004290 <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d901      	bls.n	80071d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	e0d7      	b.n	8007386 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071d6:	4b4b      	ldr	r3, [pc, #300]	@ (8007304 <HAL_RCC_OscConfig+0x4ac>)
 80071d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071da:	f003 0302 	and.w	r3, r3, #2
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d0ee      	beq.n	80071c0 <HAL_RCC_OscConfig+0x368>
 80071e2:	e014      	b.n	800720e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071e4:	f7fd f854 	bl	8004290 <HAL_GetTick>
 80071e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071ea:	e00a      	b.n	8007202 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071ec:	f7fd f850 	bl	8004290 <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d901      	bls.n	8007202 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e0c1      	b.n	8007386 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007202:	4b40      	ldr	r3, [pc, #256]	@ (8007304 <HAL_RCC_OscConfig+0x4ac>)
 8007204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007206:	f003 0302 	and.w	r3, r3, #2
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1ee      	bne.n	80071ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800720e:	7dfb      	ldrb	r3, [r7, #23]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d105      	bne.n	8007220 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007214:	4b3b      	ldr	r3, [pc, #236]	@ (8007304 <HAL_RCC_OscConfig+0x4ac>)
 8007216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007218:	4a3a      	ldr	r2, [pc, #232]	@ (8007304 <HAL_RCC_OscConfig+0x4ac>)
 800721a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800721e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	2b00      	cmp	r3, #0
 8007226:	f000 80ad 	beq.w	8007384 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800722a:	4b36      	ldr	r3, [pc, #216]	@ (8007304 <HAL_RCC_OscConfig+0x4ac>)
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f003 030c 	and.w	r3, r3, #12
 8007232:	2b08      	cmp	r3, #8
 8007234:	d060      	beq.n	80072f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	2b02      	cmp	r3, #2
 800723c:	d145      	bne.n	80072ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800723e:	4b33      	ldr	r3, [pc, #204]	@ (800730c <HAL_RCC_OscConfig+0x4b4>)
 8007240:	2200      	movs	r2, #0
 8007242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007244:	f7fd f824 	bl	8004290 <HAL_GetTick>
 8007248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800724a:	e008      	b.n	800725e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800724c:	f7fd f820 	bl	8004290 <HAL_GetTick>
 8007250:	4602      	mov	r2, r0
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	2b02      	cmp	r3, #2
 8007258:	d901      	bls.n	800725e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	e093      	b.n	8007386 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800725e:	4b29      	ldr	r3, [pc, #164]	@ (8007304 <HAL_RCC_OscConfig+0x4ac>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1f0      	bne.n	800724c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	69da      	ldr	r2, [r3, #28]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	431a      	orrs	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007278:	019b      	lsls	r3, r3, #6
 800727a:	431a      	orrs	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007280:	085b      	lsrs	r3, r3, #1
 8007282:	3b01      	subs	r3, #1
 8007284:	041b      	lsls	r3, r3, #16
 8007286:	431a      	orrs	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800728c:	061b      	lsls	r3, r3, #24
 800728e:	431a      	orrs	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007294:	071b      	lsls	r3, r3, #28
 8007296:	491b      	ldr	r1, [pc, #108]	@ (8007304 <HAL_RCC_OscConfig+0x4ac>)
 8007298:	4313      	orrs	r3, r2
 800729a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800729c:	4b1b      	ldr	r3, [pc, #108]	@ (800730c <HAL_RCC_OscConfig+0x4b4>)
 800729e:	2201      	movs	r2, #1
 80072a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a2:	f7fc fff5 	bl	8004290 <HAL_GetTick>
 80072a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072a8:	e008      	b.n	80072bc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072aa:	f7fc fff1 	bl	8004290 <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d901      	bls.n	80072bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e064      	b.n	8007386 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072bc:	4b11      	ldr	r3, [pc, #68]	@ (8007304 <HAL_RCC_OscConfig+0x4ac>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d0f0      	beq.n	80072aa <HAL_RCC_OscConfig+0x452>
 80072c8:	e05c      	b.n	8007384 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072ca:	4b10      	ldr	r3, [pc, #64]	@ (800730c <HAL_RCC_OscConfig+0x4b4>)
 80072cc:	2200      	movs	r2, #0
 80072ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072d0:	f7fc ffde 	bl	8004290 <HAL_GetTick>
 80072d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072d6:	e008      	b.n	80072ea <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072d8:	f7fc ffda 	bl	8004290 <HAL_GetTick>
 80072dc:	4602      	mov	r2, r0
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d901      	bls.n	80072ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e04d      	b.n	8007386 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072ea:	4b06      	ldr	r3, [pc, #24]	@ (8007304 <HAL_RCC_OscConfig+0x4ac>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1f0      	bne.n	80072d8 <HAL_RCC_OscConfig+0x480>
 80072f6:	e045      	b.n	8007384 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d107      	bne.n	8007310 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e040      	b.n	8007386 <HAL_RCC_OscConfig+0x52e>
 8007304:	40023800 	.word	0x40023800
 8007308:	40007000 	.word	0x40007000
 800730c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007310:	4b1f      	ldr	r3, [pc, #124]	@ (8007390 <HAL_RCC_OscConfig+0x538>)
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d030      	beq.n	8007380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007328:	429a      	cmp	r2, r3
 800732a:	d129      	bne.n	8007380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007336:	429a      	cmp	r2, r3
 8007338:	d122      	bne.n	8007380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007340:	4013      	ands	r3, r2
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007346:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007348:	4293      	cmp	r3, r2
 800734a:	d119      	bne.n	8007380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007356:	085b      	lsrs	r3, r3, #1
 8007358:	3b01      	subs	r3, #1
 800735a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800735c:	429a      	cmp	r2, r3
 800735e:	d10f      	bne.n	8007380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800736a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800736c:	429a      	cmp	r2, r3
 800736e:	d107      	bne.n	8007380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800737a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800737c:	429a      	cmp	r2, r3
 800737e:	d001      	beq.n	8007384 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	e000      	b.n	8007386 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3718      	adds	r7, #24
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	40023800 	.word	0x40023800

08007394 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d101      	bne.n	80073a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e07b      	b.n	800749e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d108      	bne.n	80073c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073b6:	d009      	beq.n	80073cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	61da      	str	r2, [r3, #28]
 80073be:	e005      	b.n	80073cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d106      	bne.n	80073ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f7fc fbb0 	bl	8003b4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2202      	movs	r2, #2
 80073f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007402:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007414:	431a      	orrs	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800741e:	431a      	orrs	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	f003 0302 	and.w	r3, r3, #2
 8007428:	431a      	orrs	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	431a      	orrs	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	699b      	ldr	r3, [r3, #24]
 8007438:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800743c:	431a      	orrs	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	69db      	ldr	r3, [r3, #28]
 8007442:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007446:	431a      	orrs	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a1b      	ldr	r3, [r3, #32]
 800744c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007450:	ea42 0103 	orr.w	r1, r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007458:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	430a      	orrs	r2, r1
 8007462:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	0c1b      	lsrs	r3, r3, #16
 800746a:	f003 0104 	and.w	r1, r3, #4
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007472:	f003 0210 	and.w	r2, r3, #16
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	430a      	orrs	r2, r1
 800747c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	69da      	ldr	r2, [r3, #28]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800748c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b088      	sub	sp, #32
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	60f8      	str	r0, [r7, #12]
 80074ae:	60b9      	str	r1, [r7, #8]
 80074b0:	603b      	str	r3, [r7, #0]
 80074b2:	4613      	mov	r3, r2
 80074b4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074b6:	f7fc feeb 	bl	8004290 <HAL_GetTick>
 80074ba:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80074bc:	88fb      	ldrh	r3, [r7, #6]
 80074be:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d001      	beq.n	80074d0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80074cc:	2302      	movs	r3, #2
 80074ce:	e12a      	b.n	8007726 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d002      	beq.n	80074dc <HAL_SPI_Transmit+0x36>
 80074d6:	88fb      	ldrh	r3, [r7, #6]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d101      	bne.n	80074e0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e122      	b.n	8007726 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d101      	bne.n	80074ee <HAL_SPI_Transmit+0x48>
 80074ea:	2302      	movs	r3, #2
 80074ec:	e11b      	b.n	8007726 <HAL_SPI_Transmit+0x280>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2203      	movs	r2, #3
 80074fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	88fa      	ldrh	r2, [r7, #6]
 800750e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	88fa      	ldrh	r2, [r7, #6]
 8007514:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800753c:	d10f      	bne.n	800755e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800754c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800755c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007568:	2b40      	cmp	r3, #64	@ 0x40
 800756a:	d007      	beq.n	800757c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800757a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007584:	d152      	bne.n	800762c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d002      	beq.n	8007594 <HAL_SPI_Transmit+0xee>
 800758e:	8b7b      	ldrh	r3, [r7, #26]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d145      	bne.n	8007620 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007598:	881a      	ldrh	r2, [r3, #0]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075a4:	1c9a      	adds	r2, r3, #2
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	3b01      	subs	r3, #1
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80075b8:	e032      	b.n	8007620 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f003 0302 	and.w	r3, r3, #2
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d112      	bne.n	80075ee <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075cc:	881a      	ldrh	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075d8:	1c9a      	adds	r2, r3, #2
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	3b01      	subs	r3, #1
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	86da      	strh	r2, [r3, #54]	@ 0x36
 80075ec:	e018      	b.n	8007620 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075ee:	f7fc fe4f 	bl	8004290 <HAL_GetTick>
 80075f2:	4602      	mov	r2, r0
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d803      	bhi.n	8007606 <HAL_SPI_Transmit+0x160>
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007604:	d102      	bne.n	800760c <HAL_SPI_Transmit+0x166>
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d109      	bne.n	8007620 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2200      	movs	r2, #0
 8007618:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	e082      	b.n	8007726 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007624:	b29b      	uxth	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1c7      	bne.n	80075ba <HAL_SPI_Transmit+0x114>
 800762a:	e053      	b.n	80076d4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d002      	beq.n	800763a <HAL_SPI_Transmit+0x194>
 8007634:	8b7b      	ldrh	r3, [r7, #26]
 8007636:	2b01      	cmp	r3, #1
 8007638:	d147      	bne.n	80076ca <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	330c      	adds	r3, #12
 8007644:	7812      	ldrb	r2, [r2, #0]
 8007646:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800764c:	1c5a      	adds	r2, r3, #1
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007656:	b29b      	uxth	r3, r3
 8007658:	3b01      	subs	r3, #1
 800765a:	b29a      	uxth	r2, r3
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007660:	e033      	b.n	80076ca <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f003 0302 	and.w	r3, r3, #2
 800766c:	2b02      	cmp	r3, #2
 800766e:	d113      	bne.n	8007698 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	330c      	adds	r3, #12
 800767a:	7812      	ldrb	r2, [r2, #0]
 800767c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007682:	1c5a      	adds	r2, r3, #1
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800768c:	b29b      	uxth	r3, r3
 800768e:	3b01      	subs	r3, #1
 8007690:	b29a      	uxth	r2, r3
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007696:	e018      	b.n	80076ca <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007698:	f7fc fdfa 	bl	8004290 <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d803      	bhi.n	80076b0 <HAL_SPI_Transmit+0x20a>
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076ae:	d102      	bne.n	80076b6 <HAL_SPI_Transmit+0x210>
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d109      	bne.n	80076ca <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e02d      	b.n	8007726 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1c6      	bne.n	8007662 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076d4:	69fa      	ldr	r2, [r7, #28]
 80076d6:	6839      	ldr	r1, [r7, #0]
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f000 f8b1 	bl	8007840 <SPI_EndRxTxTransaction>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d002      	beq.n	80076ea <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2220      	movs	r2, #32
 80076e8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10a      	bne.n	8007708 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076f2:	2300      	movs	r3, #0
 80076f4:	617b      	str	r3, [r7, #20]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	617b      	str	r3, [r7, #20]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	617b      	str	r3, [r7, #20]
 8007706:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800771c:	2b00      	cmp	r3, #0
 800771e:	d001      	beq.n	8007724 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e000      	b.n	8007726 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007724:	2300      	movs	r3, #0
  }
}
 8007726:	4618      	mov	r0, r3
 8007728:	3720      	adds	r7, #32
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
	...

08007730 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b088      	sub	sp, #32
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	603b      	str	r3, [r7, #0]
 800773c:	4613      	mov	r3, r2
 800773e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007740:	f7fc fda6 	bl	8004290 <HAL_GetTick>
 8007744:	4602      	mov	r2, r0
 8007746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007748:	1a9b      	subs	r3, r3, r2
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	4413      	add	r3, r2
 800774e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007750:	f7fc fd9e 	bl	8004290 <HAL_GetTick>
 8007754:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007756:	4b39      	ldr	r3, [pc, #228]	@ (800783c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	015b      	lsls	r3, r3, #5
 800775c:	0d1b      	lsrs	r3, r3, #20
 800775e:	69fa      	ldr	r2, [r7, #28]
 8007760:	fb02 f303 	mul.w	r3, r2, r3
 8007764:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007766:	e054      	b.n	8007812 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800776e:	d050      	beq.n	8007812 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007770:	f7fc fd8e 	bl	8004290 <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	69fa      	ldr	r2, [r7, #28]
 800777c:	429a      	cmp	r2, r3
 800777e:	d902      	bls.n	8007786 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d13d      	bne.n	8007802 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	685a      	ldr	r2, [r3, #4]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007794:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800779e:	d111      	bne.n	80077c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077a8:	d004      	beq.n	80077b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077b2:	d107      	bne.n	80077c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077cc:	d10f      	bne.n	80077ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80077dc:	601a      	str	r2, [r3, #0]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80077ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e017      	b.n	8007832 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d101      	bne.n	800780c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007808:	2300      	movs	r3, #0
 800780a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	3b01      	subs	r3, #1
 8007810:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	689a      	ldr	r2, [r3, #8]
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	4013      	ands	r3, r2
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	429a      	cmp	r2, r3
 8007820:	bf0c      	ite	eq
 8007822:	2301      	moveq	r3, #1
 8007824:	2300      	movne	r3, #0
 8007826:	b2db      	uxtb	r3, r3
 8007828:	461a      	mov	r2, r3
 800782a:	79fb      	ldrb	r3, [r7, #7]
 800782c:	429a      	cmp	r2, r3
 800782e:	d19b      	bne.n	8007768 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	3720      	adds	r7, #32
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	20000000 	.word	0x20000000

08007840 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b088      	sub	sp, #32
 8007844:	af02      	add	r7, sp, #8
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	2201      	movs	r2, #1
 8007854:	2102      	movs	r1, #2
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f7ff ff6a 	bl	8007730 <SPI_WaitFlagStateUntilTimeout>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d007      	beq.n	8007872 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007866:	f043 0220 	orr.w	r2, r3, #32
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e032      	b.n	80078d8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007872:	4b1b      	ldr	r3, [pc, #108]	@ (80078e0 <SPI_EndRxTxTransaction+0xa0>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a1b      	ldr	r2, [pc, #108]	@ (80078e4 <SPI_EndRxTxTransaction+0xa4>)
 8007878:	fba2 2303 	umull	r2, r3, r2, r3
 800787c:	0d5b      	lsrs	r3, r3, #21
 800787e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007882:	fb02 f303 	mul.w	r3, r2, r3
 8007886:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007890:	d112      	bne.n	80078b8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	2200      	movs	r2, #0
 800789a:	2180      	movs	r1, #128	@ 0x80
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f7ff ff47 	bl	8007730 <SPI_WaitFlagStateUntilTimeout>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d016      	beq.n	80078d6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ac:	f043 0220 	orr.w	r2, r3, #32
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80078b4:	2303      	movs	r3, #3
 80078b6:	e00f      	b.n	80078d8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00a      	beq.n	80078d4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	3b01      	subs	r3, #1
 80078c2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078ce:	2b80      	cmp	r3, #128	@ 0x80
 80078d0:	d0f2      	beq.n	80078b8 <SPI_EndRxTxTransaction+0x78>
 80078d2:	e000      	b.n	80078d6 <SPI_EndRxTxTransaction+0x96>
        break;
 80078d4:	bf00      	nop
  }

  return HAL_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3718      	adds	r7, #24
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	20000000 	.word	0x20000000
 80078e4:	165e9f81 	.word	0x165e9f81

080078e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e041      	b.n	800797e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d106      	bne.n	8007914 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f7fc f964 	bl	8003bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2202      	movs	r2, #2
 8007918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	3304      	adds	r3, #4
 8007924:	4619      	mov	r1, r3
 8007926:	4610      	mov	r0, r2
 8007928:	f000 fad8 	bl	8007edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b082      	sub	sp, #8
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d101      	bne.n	8007998 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	e041      	b.n	8007a1c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d106      	bne.n	80079b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f839 	bl	8007a24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2202      	movs	r2, #2
 80079b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	3304      	adds	r3, #4
 80079c2:	4619      	mov	r1, r3
 80079c4:	4610      	mov	r0, r2
 80079c6:	f000 fa89 	bl	8007edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2201      	movs	r2, #1
 80079de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2201      	movs	r2, #1
 80079f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2201      	movs	r2, #1
 8007a06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2201      	movs	r2, #1
 8007a16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007a2c:	bf00      	nop
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d109      	bne.n	8007a5c <HAL_TIM_PWM_Start+0x24>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	bf14      	ite	ne
 8007a54:	2301      	movne	r3, #1
 8007a56:	2300      	moveq	r3, #0
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	e022      	b.n	8007aa2 <HAL_TIM_PWM_Start+0x6a>
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	2b04      	cmp	r3, #4
 8007a60:	d109      	bne.n	8007a76 <HAL_TIM_PWM_Start+0x3e>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	bf14      	ite	ne
 8007a6e:	2301      	movne	r3, #1
 8007a70:	2300      	moveq	r3, #0
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	e015      	b.n	8007aa2 <HAL_TIM_PWM_Start+0x6a>
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	2b08      	cmp	r3, #8
 8007a7a:	d109      	bne.n	8007a90 <HAL_TIM_PWM_Start+0x58>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	bf14      	ite	ne
 8007a88:	2301      	movne	r3, #1
 8007a8a:	2300      	moveq	r3, #0
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	e008      	b.n	8007aa2 <HAL_TIM_PWM_Start+0x6a>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	bf14      	ite	ne
 8007a9c:	2301      	movne	r3, #1
 8007a9e:	2300      	moveq	r3, #0
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d001      	beq.n	8007aaa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e07c      	b.n	8007ba4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d104      	bne.n	8007aba <HAL_TIM_PWM_Start+0x82>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2202      	movs	r2, #2
 8007ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ab8:	e013      	b.n	8007ae2 <HAL_TIM_PWM_Start+0xaa>
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	2b04      	cmp	r3, #4
 8007abe:	d104      	bne.n	8007aca <HAL_TIM_PWM_Start+0x92>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2202      	movs	r2, #2
 8007ac4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ac8:	e00b      	b.n	8007ae2 <HAL_TIM_PWM_Start+0xaa>
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	2b08      	cmp	r3, #8
 8007ace:	d104      	bne.n	8007ada <HAL_TIM_PWM_Start+0xa2>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2202      	movs	r2, #2
 8007ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ad8:	e003      	b.n	8007ae2 <HAL_TIM_PWM_Start+0xaa>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2202      	movs	r2, #2
 8007ade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	6839      	ldr	r1, [r7, #0]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f000 fcec 	bl	80084c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a2d      	ldr	r2, [pc, #180]	@ (8007bac <HAL_TIM_PWM_Start+0x174>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d004      	beq.n	8007b04 <HAL_TIM_PWM_Start+0xcc>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a2c      	ldr	r2, [pc, #176]	@ (8007bb0 <HAL_TIM_PWM_Start+0x178>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d101      	bne.n	8007b08 <HAL_TIM_PWM_Start+0xd0>
 8007b04:	2301      	movs	r3, #1
 8007b06:	e000      	b.n	8007b0a <HAL_TIM_PWM_Start+0xd2>
 8007b08:	2300      	movs	r3, #0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d007      	beq.n	8007b1e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a22      	ldr	r2, [pc, #136]	@ (8007bac <HAL_TIM_PWM_Start+0x174>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d022      	beq.n	8007b6e <HAL_TIM_PWM_Start+0x136>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b30:	d01d      	beq.n	8007b6e <HAL_TIM_PWM_Start+0x136>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a1f      	ldr	r2, [pc, #124]	@ (8007bb4 <HAL_TIM_PWM_Start+0x17c>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d018      	beq.n	8007b6e <HAL_TIM_PWM_Start+0x136>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a1d      	ldr	r2, [pc, #116]	@ (8007bb8 <HAL_TIM_PWM_Start+0x180>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d013      	beq.n	8007b6e <HAL_TIM_PWM_Start+0x136>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a1c      	ldr	r2, [pc, #112]	@ (8007bbc <HAL_TIM_PWM_Start+0x184>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d00e      	beq.n	8007b6e <HAL_TIM_PWM_Start+0x136>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a16      	ldr	r2, [pc, #88]	@ (8007bb0 <HAL_TIM_PWM_Start+0x178>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d009      	beq.n	8007b6e <HAL_TIM_PWM_Start+0x136>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a18      	ldr	r2, [pc, #96]	@ (8007bc0 <HAL_TIM_PWM_Start+0x188>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d004      	beq.n	8007b6e <HAL_TIM_PWM_Start+0x136>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a16      	ldr	r2, [pc, #88]	@ (8007bc4 <HAL_TIM_PWM_Start+0x18c>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d111      	bne.n	8007b92 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	f003 0307 	and.w	r3, r3, #7
 8007b78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2b06      	cmp	r3, #6
 8007b7e:	d010      	beq.n	8007ba2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f042 0201 	orr.w	r2, r2, #1
 8007b8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b90:	e007      	b.n	8007ba2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f042 0201 	orr.w	r2, r2, #1
 8007ba0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	40010000 	.word	0x40010000
 8007bb0:	40010400 	.word	0x40010400
 8007bb4:	40000400 	.word	0x40000400
 8007bb8:	40000800 	.word	0x40000800
 8007bbc:	40000c00 	.word	0x40000c00
 8007bc0:	40014000 	.word	0x40014000
 8007bc4:	40001800 	.word	0x40001800

08007bc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b086      	sub	sp, #24
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d101      	bne.n	8007be6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007be2:	2302      	movs	r3, #2
 8007be4:	e0ae      	b.n	8007d44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2b0c      	cmp	r3, #12
 8007bf2:	f200 809f 	bhi.w	8007d34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8007bfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfc:	08007c31 	.word	0x08007c31
 8007c00:	08007d35 	.word	0x08007d35
 8007c04:	08007d35 	.word	0x08007d35
 8007c08:	08007d35 	.word	0x08007d35
 8007c0c:	08007c71 	.word	0x08007c71
 8007c10:	08007d35 	.word	0x08007d35
 8007c14:	08007d35 	.word	0x08007d35
 8007c18:	08007d35 	.word	0x08007d35
 8007c1c:	08007cb3 	.word	0x08007cb3
 8007c20:	08007d35 	.word	0x08007d35
 8007c24:	08007d35 	.word	0x08007d35
 8007c28:	08007d35 	.word	0x08007d35
 8007c2c:	08007cf3 	.word	0x08007cf3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68b9      	ldr	r1, [r7, #8]
 8007c36:	4618      	mov	r0, r3
 8007c38:	f000 f9fc 	bl	8008034 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	699a      	ldr	r2, [r3, #24]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f042 0208 	orr.w	r2, r2, #8
 8007c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	699a      	ldr	r2, [r3, #24]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f022 0204 	bic.w	r2, r2, #4
 8007c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	6999      	ldr	r1, [r3, #24]
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	691a      	ldr	r2, [r3, #16]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	430a      	orrs	r2, r1
 8007c6c:	619a      	str	r2, [r3, #24]
      break;
 8007c6e:	e064      	b.n	8007d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68b9      	ldr	r1, [r7, #8]
 8007c76:	4618      	mov	r0, r3
 8007c78:	f000 fa4c 	bl	8008114 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	699a      	ldr	r2, [r3, #24]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	699a      	ldr	r2, [r3, #24]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	6999      	ldr	r1, [r3, #24]
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	021a      	lsls	r2, r3, #8
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	430a      	orrs	r2, r1
 8007cae:	619a      	str	r2, [r3, #24]
      break;
 8007cb0:	e043      	b.n	8007d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68b9      	ldr	r1, [r7, #8]
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f000 faa1 	bl	8008200 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	69da      	ldr	r2, [r3, #28]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f042 0208 	orr.w	r2, r2, #8
 8007ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	69da      	ldr	r2, [r3, #28]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f022 0204 	bic.w	r2, r2, #4
 8007cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	69d9      	ldr	r1, [r3, #28]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	691a      	ldr	r2, [r3, #16]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	430a      	orrs	r2, r1
 8007cee:	61da      	str	r2, [r3, #28]
      break;
 8007cf0:	e023      	b.n	8007d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68b9      	ldr	r1, [r7, #8]
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f000 faf5 	bl	80082e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	69da      	ldr	r2, [r3, #28]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	69da      	ldr	r2, [r3, #28]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	69d9      	ldr	r1, [r3, #28]
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	021a      	lsls	r2, r3, #8
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	430a      	orrs	r2, r1
 8007d30:	61da      	str	r2, [r3, #28]
      break;
 8007d32:	e002      	b.n	8007d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	75fb      	strb	r3, [r7, #23]
      break;
 8007d38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3718      	adds	r7, #24
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d101      	bne.n	8007d68 <HAL_TIM_ConfigClockSource+0x1c>
 8007d64:	2302      	movs	r3, #2
 8007d66:	e0b4      	b.n	8007ed2 <HAL_TIM_ConfigClockSource+0x186>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2202      	movs	r2, #2
 8007d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007d8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007da0:	d03e      	beq.n	8007e20 <HAL_TIM_ConfigClockSource+0xd4>
 8007da2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007da6:	f200 8087 	bhi.w	8007eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007daa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dae:	f000 8086 	beq.w	8007ebe <HAL_TIM_ConfigClockSource+0x172>
 8007db2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007db6:	d87f      	bhi.n	8007eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007db8:	2b70      	cmp	r3, #112	@ 0x70
 8007dba:	d01a      	beq.n	8007df2 <HAL_TIM_ConfigClockSource+0xa6>
 8007dbc:	2b70      	cmp	r3, #112	@ 0x70
 8007dbe:	d87b      	bhi.n	8007eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007dc0:	2b60      	cmp	r3, #96	@ 0x60
 8007dc2:	d050      	beq.n	8007e66 <HAL_TIM_ConfigClockSource+0x11a>
 8007dc4:	2b60      	cmp	r3, #96	@ 0x60
 8007dc6:	d877      	bhi.n	8007eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007dc8:	2b50      	cmp	r3, #80	@ 0x50
 8007dca:	d03c      	beq.n	8007e46 <HAL_TIM_ConfigClockSource+0xfa>
 8007dcc:	2b50      	cmp	r3, #80	@ 0x50
 8007dce:	d873      	bhi.n	8007eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007dd0:	2b40      	cmp	r3, #64	@ 0x40
 8007dd2:	d058      	beq.n	8007e86 <HAL_TIM_ConfigClockSource+0x13a>
 8007dd4:	2b40      	cmp	r3, #64	@ 0x40
 8007dd6:	d86f      	bhi.n	8007eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007dd8:	2b30      	cmp	r3, #48	@ 0x30
 8007dda:	d064      	beq.n	8007ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8007ddc:	2b30      	cmp	r3, #48	@ 0x30
 8007dde:	d86b      	bhi.n	8007eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007de0:	2b20      	cmp	r3, #32
 8007de2:	d060      	beq.n	8007ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8007de4:	2b20      	cmp	r3, #32
 8007de6:	d867      	bhi.n	8007eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d05c      	beq.n	8007ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8007dec:	2b10      	cmp	r3, #16
 8007dee:	d05a      	beq.n	8007ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8007df0:	e062      	b.n	8007eb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e02:	f000 fb41 	bl	8008488 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007e14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	609a      	str	r2, [r3, #8]
      break;
 8007e1e:	e04f      	b.n	8007ec0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e30:	f000 fb2a 	bl	8008488 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	689a      	ldr	r2, [r3, #8]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e42:	609a      	str	r2, [r3, #8]
      break;
 8007e44:	e03c      	b.n	8007ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e52:	461a      	mov	r2, r3
 8007e54:	f000 fa9e 	bl	8008394 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2150      	movs	r1, #80	@ 0x50
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f000 faf7 	bl	8008452 <TIM_ITRx_SetConfig>
      break;
 8007e64:	e02c      	b.n	8007ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e72:	461a      	mov	r2, r3
 8007e74:	f000 fabd 	bl	80083f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2160      	movs	r1, #96	@ 0x60
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 fae7 	bl	8008452 <TIM_ITRx_SetConfig>
      break;
 8007e84:	e01c      	b.n	8007ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e92:	461a      	mov	r2, r3
 8007e94:	f000 fa7e 	bl	8008394 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2140      	movs	r1, #64	@ 0x40
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f000 fad7 	bl	8008452 <TIM_ITRx_SetConfig>
      break;
 8007ea4:	e00c      	b.n	8007ec0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4619      	mov	r1, r3
 8007eb0:	4610      	mov	r0, r2
 8007eb2:	f000 face 	bl	8008452 <TIM_ITRx_SetConfig>
      break;
 8007eb6:	e003      	b.n	8007ec0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	73fb      	strb	r3, [r7, #15]
      break;
 8007ebc:	e000      	b.n	8007ec0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007ebe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
	...

08007edc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a46      	ldr	r2, [pc, #280]	@ (8008008 <TIM_Base_SetConfig+0x12c>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d013      	beq.n	8007f1c <TIM_Base_SetConfig+0x40>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007efa:	d00f      	beq.n	8007f1c <TIM_Base_SetConfig+0x40>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a43      	ldr	r2, [pc, #268]	@ (800800c <TIM_Base_SetConfig+0x130>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d00b      	beq.n	8007f1c <TIM_Base_SetConfig+0x40>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a42      	ldr	r2, [pc, #264]	@ (8008010 <TIM_Base_SetConfig+0x134>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d007      	beq.n	8007f1c <TIM_Base_SetConfig+0x40>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a41      	ldr	r2, [pc, #260]	@ (8008014 <TIM_Base_SetConfig+0x138>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d003      	beq.n	8007f1c <TIM_Base_SetConfig+0x40>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a40      	ldr	r2, [pc, #256]	@ (8008018 <TIM_Base_SetConfig+0x13c>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d108      	bne.n	8007f2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a35      	ldr	r2, [pc, #212]	@ (8008008 <TIM_Base_SetConfig+0x12c>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d02b      	beq.n	8007f8e <TIM_Base_SetConfig+0xb2>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f3c:	d027      	beq.n	8007f8e <TIM_Base_SetConfig+0xb2>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a32      	ldr	r2, [pc, #200]	@ (800800c <TIM_Base_SetConfig+0x130>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d023      	beq.n	8007f8e <TIM_Base_SetConfig+0xb2>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a31      	ldr	r2, [pc, #196]	@ (8008010 <TIM_Base_SetConfig+0x134>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d01f      	beq.n	8007f8e <TIM_Base_SetConfig+0xb2>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a30      	ldr	r2, [pc, #192]	@ (8008014 <TIM_Base_SetConfig+0x138>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d01b      	beq.n	8007f8e <TIM_Base_SetConfig+0xb2>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a2f      	ldr	r2, [pc, #188]	@ (8008018 <TIM_Base_SetConfig+0x13c>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d017      	beq.n	8007f8e <TIM_Base_SetConfig+0xb2>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a2e      	ldr	r2, [pc, #184]	@ (800801c <TIM_Base_SetConfig+0x140>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d013      	beq.n	8007f8e <TIM_Base_SetConfig+0xb2>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a2d      	ldr	r2, [pc, #180]	@ (8008020 <TIM_Base_SetConfig+0x144>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d00f      	beq.n	8007f8e <TIM_Base_SetConfig+0xb2>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a2c      	ldr	r2, [pc, #176]	@ (8008024 <TIM_Base_SetConfig+0x148>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d00b      	beq.n	8007f8e <TIM_Base_SetConfig+0xb2>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a2b      	ldr	r2, [pc, #172]	@ (8008028 <TIM_Base_SetConfig+0x14c>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d007      	beq.n	8007f8e <TIM_Base_SetConfig+0xb2>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a2a      	ldr	r2, [pc, #168]	@ (800802c <TIM_Base_SetConfig+0x150>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d003      	beq.n	8007f8e <TIM_Base_SetConfig+0xb2>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4a29      	ldr	r2, [pc, #164]	@ (8008030 <TIM_Base_SetConfig+0x154>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d108      	bne.n	8007fa0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	695b      	ldr	r3, [r3, #20]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	689a      	ldr	r2, [r3, #8]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a10      	ldr	r2, [pc, #64]	@ (8008008 <TIM_Base_SetConfig+0x12c>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d003      	beq.n	8007fd4 <TIM_Base_SetConfig+0xf8>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a12      	ldr	r2, [pc, #72]	@ (8008018 <TIM_Base_SetConfig+0x13c>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d103      	bne.n	8007fdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	691a      	ldr	r2, [r3, #16]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	f003 0301 	and.w	r3, r3, #1
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d105      	bne.n	8007ffa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	f023 0201 	bic.w	r2, r3, #1
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	611a      	str	r2, [r3, #16]
  }
}
 8007ffa:	bf00      	nop
 8007ffc:	3714      	adds	r7, #20
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop
 8008008:	40010000 	.word	0x40010000
 800800c:	40000400 	.word	0x40000400
 8008010:	40000800 	.word	0x40000800
 8008014:	40000c00 	.word	0x40000c00
 8008018:	40010400 	.word	0x40010400
 800801c:	40014000 	.word	0x40014000
 8008020:	40014400 	.word	0x40014400
 8008024:	40014800 	.word	0x40014800
 8008028:	40001800 	.word	0x40001800
 800802c:	40001c00 	.word	0x40001c00
 8008030:	40002000 	.word	0x40002000

08008034 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008034:	b480      	push	{r7}
 8008036:	b087      	sub	sp, #28
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a1b      	ldr	r3, [r3, #32]
 8008042:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6a1b      	ldr	r3, [r3, #32]
 8008048:	f023 0201 	bic.w	r2, r3, #1
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f023 0303 	bic.w	r3, r3, #3
 800806a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	4313      	orrs	r3, r2
 8008074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	f023 0302 	bic.w	r3, r3, #2
 800807c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	697a      	ldr	r2, [r7, #20]
 8008084:	4313      	orrs	r3, r2
 8008086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a20      	ldr	r2, [pc, #128]	@ (800810c <TIM_OC1_SetConfig+0xd8>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d003      	beq.n	8008098 <TIM_OC1_SetConfig+0x64>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a1f      	ldr	r2, [pc, #124]	@ (8008110 <TIM_OC1_SetConfig+0xdc>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d10c      	bne.n	80080b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	f023 0308 	bic.w	r3, r3, #8
 800809e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	697a      	ldr	r2, [r7, #20]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	f023 0304 	bic.w	r3, r3, #4
 80080b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a15      	ldr	r2, [pc, #84]	@ (800810c <TIM_OC1_SetConfig+0xd8>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d003      	beq.n	80080c2 <TIM_OC1_SetConfig+0x8e>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a14      	ldr	r2, [pc, #80]	@ (8008110 <TIM_OC1_SetConfig+0xdc>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d111      	bne.n	80080e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80080d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	693a      	ldr	r2, [r7, #16]
 80080d8:	4313      	orrs	r3, r2
 80080da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	693a      	ldr	r2, [r7, #16]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	685a      	ldr	r2, [r3, #4]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	697a      	ldr	r2, [r7, #20]
 80080fe:	621a      	str	r2, [r3, #32]
}
 8008100:	bf00      	nop
 8008102:	371c      	adds	r7, #28
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr
 800810c:	40010000 	.word	0x40010000
 8008110:	40010400 	.word	0x40010400

08008114 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008114:	b480      	push	{r7}
 8008116:	b087      	sub	sp, #28
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a1b      	ldr	r3, [r3, #32]
 8008122:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a1b      	ldr	r3, [r3, #32]
 8008128:	f023 0210 	bic.w	r2, r3, #16
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800814a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	021b      	lsls	r3, r3, #8
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	4313      	orrs	r3, r2
 8008156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	f023 0320 	bic.w	r3, r3, #32
 800815e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	011b      	lsls	r3, r3, #4
 8008166:	697a      	ldr	r2, [r7, #20]
 8008168:	4313      	orrs	r3, r2
 800816a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4a22      	ldr	r2, [pc, #136]	@ (80081f8 <TIM_OC2_SetConfig+0xe4>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d003      	beq.n	800817c <TIM_OC2_SetConfig+0x68>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4a21      	ldr	r2, [pc, #132]	@ (80081fc <TIM_OC2_SetConfig+0xe8>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d10d      	bne.n	8008198 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008182:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	011b      	lsls	r3, r3, #4
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	4313      	orrs	r3, r2
 800818e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008196:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a17      	ldr	r2, [pc, #92]	@ (80081f8 <TIM_OC2_SetConfig+0xe4>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d003      	beq.n	80081a8 <TIM_OC2_SetConfig+0x94>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a16      	ldr	r2, [pc, #88]	@ (80081fc <TIM_OC2_SetConfig+0xe8>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d113      	bne.n	80081d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80081ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80081b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	695b      	ldr	r3, [r3, #20]
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	693a      	ldr	r2, [r7, #16]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	699b      	ldr	r3, [r3, #24]
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	693a      	ldr	r2, [r7, #16]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	693a      	ldr	r2, [r7, #16]
 80081d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	685a      	ldr	r2, [r3, #4]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	697a      	ldr	r2, [r7, #20]
 80081e8:	621a      	str	r2, [r3, #32]
}
 80081ea:	bf00      	nop
 80081ec:	371c      	adds	r7, #28
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop
 80081f8:	40010000 	.word	0x40010000
 80081fc:	40010400 	.word	0x40010400

08008200 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008200:	b480      	push	{r7}
 8008202:	b087      	sub	sp, #28
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a1b      	ldr	r3, [r3, #32]
 800820e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a1b      	ldr	r3, [r3, #32]
 8008214:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	69db      	ldr	r3, [r3, #28]
 8008226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800822e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f023 0303 	bic.w	r3, r3, #3
 8008236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	4313      	orrs	r3, r2
 8008240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	021b      	lsls	r3, r3, #8
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	4313      	orrs	r3, r2
 8008254:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	4a21      	ldr	r2, [pc, #132]	@ (80082e0 <TIM_OC3_SetConfig+0xe0>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d003      	beq.n	8008266 <TIM_OC3_SetConfig+0x66>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a20      	ldr	r2, [pc, #128]	@ (80082e4 <TIM_OC3_SetConfig+0xe4>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d10d      	bne.n	8008282 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800826c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	021b      	lsls	r3, r3, #8
 8008274:	697a      	ldr	r2, [r7, #20]
 8008276:	4313      	orrs	r3, r2
 8008278:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008280:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a16      	ldr	r2, [pc, #88]	@ (80082e0 <TIM_OC3_SetConfig+0xe0>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d003      	beq.n	8008292 <TIM_OC3_SetConfig+0x92>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a15      	ldr	r2, [pc, #84]	@ (80082e4 <TIM_OC3_SetConfig+0xe4>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d113      	bne.n	80082ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008298:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80082a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	695b      	ldr	r3, [r3, #20]
 80082a6:	011b      	lsls	r3, r3, #4
 80082a8:	693a      	ldr	r2, [r7, #16]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	011b      	lsls	r3, r3, #4
 80082b4:	693a      	ldr	r2, [r7, #16]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	693a      	ldr	r2, [r7, #16]
 80082be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	68fa      	ldr	r2, [r7, #12]
 80082c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	685a      	ldr	r2, [r3, #4]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	697a      	ldr	r2, [r7, #20]
 80082d2:	621a      	str	r2, [r3, #32]
}
 80082d4:	bf00      	nop
 80082d6:	371c      	adds	r7, #28
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr
 80082e0:	40010000 	.word	0x40010000
 80082e4:	40010400 	.word	0x40010400

080082e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b087      	sub	sp, #28
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a1b      	ldr	r3, [r3, #32]
 80082f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6a1b      	ldr	r3, [r3, #32]
 80082fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	69db      	ldr	r3, [r3, #28]
 800830e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800831e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	021b      	lsls	r3, r3, #8
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	4313      	orrs	r3, r2
 800832a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008332:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	031b      	lsls	r3, r3, #12
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	4313      	orrs	r3, r2
 800833e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a12      	ldr	r2, [pc, #72]	@ (800838c <TIM_OC4_SetConfig+0xa4>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d003      	beq.n	8008350 <TIM_OC4_SetConfig+0x68>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a11      	ldr	r2, [pc, #68]	@ (8008390 <TIM_OC4_SetConfig+0xa8>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d109      	bne.n	8008364 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008356:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	695b      	ldr	r3, [r3, #20]
 800835c:	019b      	lsls	r3, r3, #6
 800835e:	697a      	ldr	r2, [r7, #20]
 8008360:	4313      	orrs	r3, r2
 8008362:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	697a      	ldr	r2, [r7, #20]
 8008368:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	685a      	ldr	r2, [r3, #4]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	693a      	ldr	r2, [r7, #16]
 800837c:	621a      	str	r2, [r3, #32]
}
 800837e:	bf00      	nop
 8008380:	371c      	adds	r7, #28
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	40010000 	.word	0x40010000
 8008390:	40010400 	.word	0x40010400

08008394 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008394:	b480      	push	{r7}
 8008396:	b087      	sub	sp, #28
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6a1b      	ldr	r3, [r3, #32]
 80083a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6a1b      	ldr	r3, [r3, #32]
 80083aa:	f023 0201 	bic.w	r2, r3, #1
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	699b      	ldr	r3, [r3, #24]
 80083b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80083be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	011b      	lsls	r3, r3, #4
 80083c4:	693a      	ldr	r2, [r7, #16]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	f023 030a 	bic.w	r3, r3, #10
 80083d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	693a      	ldr	r2, [r7, #16]
 80083de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	697a      	ldr	r2, [r7, #20]
 80083e4:	621a      	str	r2, [r3, #32]
}
 80083e6:	bf00      	nop
 80083e8:	371c      	adds	r7, #28
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083f2:	b480      	push	{r7}
 80083f4:	b087      	sub	sp, #28
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	60f8      	str	r0, [r7, #12]
 80083fa:	60b9      	str	r1, [r7, #8]
 80083fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6a1b      	ldr	r3, [r3, #32]
 8008402:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6a1b      	ldr	r3, [r3, #32]
 8008408:	f023 0210 	bic.w	r2, r3, #16
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	699b      	ldr	r3, [r3, #24]
 8008414:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800841c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	031b      	lsls	r3, r3, #12
 8008422:	693a      	ldr	r2, [r7, #16]
 8008424:	4313      	orrs	r3, r2
 8008426:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800842e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	011b      	lsls	r3, r3, #4
 8008434:	697a      	ldr	r2, [r7, #20]
 8008436:	4313      	orrs	r3, r2
 8008438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	693a      	ldr	r2, [r7, #16]
 800843e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	697a      	ldr	r2, [r7, #20]
 8008444:	621a      	str	r2, [r3, #32]
}
 8008446:	bf00      	nop
 8008448:	371c      	adds	r7, #28
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr

08008452 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008452:	b480      	push	{r7}
 8008454:	b085      	sub	sp, #20
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008468:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800846a:	683a      	ldr	r2, [r7, #0]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	4313      	orrs	r3, r2
 8008470:	f043 0307 	orr.w	r3, r3, #7
 8008474:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	609a      	str	r2, [r3, #8]
}
 800847c:	bf00      	nop
 800847e:	3714      	adds	r7, #20
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008488:	b480      	push	{r7}
 800848a:	b087      	sub	sp, #28
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
 8008494:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80084a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	021a      	lsls	r2, r3, #8
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	431a      	orrs	r2, r3
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	697a      	ldr	r2, [r7, #20]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	609a      	str	r2, [r3, #8]
}
 80084bc:	bf00      	nop
 80084be:	371c      	adds	r7, #28
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b087      	sub	sp, #28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	f003 031f 	and.w	r3, r3, #31
 80084da:	2201      	movs	r2, #1
 80084dc:	fa02 f303 	lsl.w	r3, r2, r3
 80084e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6a1a      	ldr	r2, [r3, #32]
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	43db      	mvns	r3, r3
 80084ea:	401a      	ands	r2, r3
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6a1a      	ldr	r2, [r3, #32]
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	f003 031f 	and.w	r3, r3, #31
 80084fa:	6879      	ldr	r1, [r7, #4]
 80084fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008500:	431a      	orrs	r2, r3
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	621a      	str	r2, [r3, #32]
}
 8008506:	bf00      	nop
 8008508:	371c      	adds	r7, #28
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr
	...

08008514 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008524:	2b01      	cmp	r3, #1
 8008526:	d101      	bne.n	800852c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008528:	2302      	movs	r3, #2
 800852a:	e05a      	b.n	80085e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2202      	movs	r2, #2
 8008538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008552:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	4313      	orrs	r3, r2
 800855c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a21      	ldr	r2, [pc, #132]	@ (80085f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d022      	beq.n	80085b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008578:	d01d      	beq.n	80085b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a1d      	ldr	r2, [pc, #116]	@ (80085f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d018      	beq.n	80085b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a1b      	ldr	r2, [pc, #108]	@ (80085f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d013      	beq.n	80085b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a1a      	ldr	r2, [pc, #104]	@ (80085fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d00e      	beq.n	80085b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a18      	ldr	r2, [pc, #96]	@ (8008600 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d009      	beq.n	80085b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a17      	ldr	r2, [pc, #92]	@ (8008604 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d004      	beq.n	80085b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a15      	ldr	r2, [pc, #84]	@ (8008608 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d10c      	bne.n	80085d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	68ba      	ldr	r2, [r7, #8]
 80085c4:	4313      	orrs	r3, r2
 80085c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68ba      	ldr	r2, [r7, #8]
 80085ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3714      	adds	r7, #20
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop
 80085f0:	40010000 	.word	0x40010000
 80085f4:	40000400 	.word	0x40000400
 80085f8:	40000800 	.word	0x40000800
 80085fc:	40000c00 	.word	0x40000c00
 8008600:	40010400 	.word	0x40010400
 8008604:	40014000 	.word	0x40014000
 8008608:	40001800 	.word	0x40001800

0800860c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800860c:	b480      	push	{r7}
 800860e:	b085      	sub	sp, #20
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008616:	2300      	movs	r3, #0
 8008618:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008620:	2b01      	cmp	r3, #1
 8008622:	d101      	bne.n	8008628 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008624:	2302      	movs	r3, #2
 8008626:	e03d      	b.n	80086a4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	4313      	orrs	r3, r2
 800863c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	4313      	orrs	r3, r2
 800864a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	4313      	orrs	r3, r2
 8008658:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4313      	orrs	r3, r2
 8008666:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	4313      	orrs	r3, r2
 8008674:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	695b      	ldr	r3, [r3, #20]
 8008680:	4313      	orrs	r3, r2
 8008682:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	69db      	ldr	r3, [r3, #28]
 800868e:	4313      	orrs	r3, r2
 8008690:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3714      	adds	r7, #20
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d101      	bne.n	80086c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e042      	b.n	8008748 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d106      	bne.n	80086dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f7fb fbb0 	bl	8003e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2224      	movs	r2, #36	@ 0x24
 80086e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68da      	ldr	r2, [r3, #12]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80086f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 facf 	bl	8008c98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	691a      	ldr	r2, [r3, #16]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008708:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	695a      	ldr	r2, [r3, #20]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008718:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68da      	ldr	r2, [r3, #12]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008728:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2200      	movs	r2, #0
 800872e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2220      	movs	r2, #32
 8008734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2220      	movs	r2, #32
 800873c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008746:	2300      	movs	r3, #0
}
 8008748:	4618      	mov	r0, r3
 800874a:	3708      	adds	r7, #8
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b08a      	sub	sp, #40	@ 0x28
 8008754:	af02      	add	r7, sp, #8
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	603b      	str	r3, [r7, #0]
 800875c:	4613      	mov	r3, r2
 800875e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008760:	2300      	movs	r3, #0
 8008762:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800876a:	b2db      	uxtb	r3, r3
 800876c:	2b20      	cmp	r3, #32
 800876e:	d175      	bne.n	800885c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d002      	beq.n	800877c <HAL_UART_Transmit+0x2c>
 8008776:	88fb      	ldrh	r3, [r7, #6]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d101      	bne.n	8008780 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	e06e      	b.n	800885e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2200      	movs	r2, #0
 8008784:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2221      	movs	r2, #33	@ 0x21
 800878a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800878e:	f7fb fd7f 	bl	8004290 <HAL_GetTick>
 8008792:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	88fa      	ldrh	r2, [r7, #6]
 8008798:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	88fa      	ldrh	r2, [r7, #6]
 800879e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087a8:	d108      	bne.n	80087bc <HAL_UART_Transmit+0x6c>
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	691b      	ldr	r3, [r3, #16]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d104      	bne.n	80087bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80087b2:	2300      	movs	r3, #0
 80087b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	61bb      	str	r3, [r7, #24]
 80087ba:	e003      	b.n	80087c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80087c0:	2300      	movs	r3, #0
 80087c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80087c4:	e02e      	b.n	8008824 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	9300      	str	r3, [sp, #0]
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	2200      	movs	r2, #0
 80087ce:	2180      	movs	r1, #128	@ 0x80
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f000 f97c 	bl	8008ace <UART_WaitOnFlagUntilTimeout>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d005      	beq.n	80087e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2220      	movs	r2, #32
 80087e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80087e4:	2303      	movs	r3, #3
 80087e6:	e03a      	b.n	800885e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d10b      	bne.n	8008806 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	881b      	ldrh	r3, [r3, #0]
 80087f2:	461a      	mov	r2, r3
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	3302      	adds	r3, #2
 8008802:	61bb      	str	r3, [r7, #24]
 8008804:	e007      	b.n	8008816 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	781a      	ldrb	r2, [r3, #0]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	3301      	adds	r3, #1
 8008814:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800881a:	b29b      	uxth	r3, r3
 800881c:	3b01      	subs	r3, #1
 800881e:	b29a      	uxth	r2, r3
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008828:	b29b      	uxth	r3, r3
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1cb      	bne.n	80087c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	9300      	str	r3, [sp, #0]
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	2200      	movs	r2, #0
 8008836:	2140      	movs	r1, #64	@ 0x40
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f000 f948 	bl	8008ace <UART_WaitOnFlagUntilTimeout>
 800883e:	4603      	mov	r3, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d005      	beq.n	8008850 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2220      	movs	r2, #32
 8008848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800884c:	2303      	movs	r3, #3
 800884e:	e006      	b.n	800885e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2220      	movs	r2, #32
 8008854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008858:	2300      	movs	r3, #0
 800885a:	e000      	b.n	800885e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800885c:	2302      	movs	r3, #2
  }
}
 800885e:	4618      	mov	r0, r3
 8008860:	3720      	adds	r7, #32
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
	...

08008868 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b08c      	sub	sp, #48	@ 0x30
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	4613      	mov	r3, r2
 8008874:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800887c:	b2db      	uxtb	r3, r3
 800887e:	2b20      	cmp	r3, #32
 8008880:	d156      	bne.n	8008930 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d002      	beq.n	800888e <HAL_UART_Transmit_DMA+0x26>
 8008888:	88fb      	ldrh	r3, [r7, #6]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d101      	bne.n	8008892 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e04f      	b.n	8008932 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8008892:	68ba      	ldr	r2, [r7, #8]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	88fa      	ldrh	r2, [r7, #6]
 800889c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	88fa      	ldrh	r2, [r7, #6]
 80088a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2200      	movs	r2, #0
 80088a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2221      	movs	r2, #33	@ 0x21
 80088ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088b6:	4a21      	ldr	r2, [pc, #132]	@ (800893c <HAL_UART_Transmit_DMA+0xd4>)
 80088b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088be:	4a20      	ldr	r2, [pc, #128]	@ (8008940 <HAL_UART_Transmit_DMA+0xd8>)
 80088c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088c6:	4a1f      	ldr	r2, [pc, #124]	@ (8008944 <HAL_UART_Transmit_DMA+0xdc>)
 80088c8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088ce:	2200      	movs	r2, #0
 80088d0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80088d2:	f107 0308 	add.w	r3, r7, #8
 80088d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80088dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088de:	6819      	ldr	r1, [r3, #0]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	3304      	adds	r3, #4
 80088e6:	461a      	mov	r2, r3
 80088e8:	88fb      	ldrh	r3, [r7, #6]
 80088ea:	f7fc f933 	bl	8004b54 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80088f6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	3314      	adds	r3, #20
 80088fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	e853 3f00 	ldrex	r3, [r3]
 8008906:	617b      	str	r3, [r7, #20]
   return(result);
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800890e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	3314      	adds	r3, #20
 8008916:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008918:	627a      	str	r2, [r7, #36]	@ 0x24
 800891a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891c:	6a39      	ldr	r1, [r7, #32]
 800891e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008920:	e841 2300 	strex	r3, r2, [r1]
 8008924:	61fb      	str	r3, [r7, #28]
   return(result);
 8008926:	69fb      	ldr	r3, [r7, #28]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d1e5      	bne.n	80088f8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800892c:	2300      	movs	r3, #0
 800892e:	e000      	b.n	8008932 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8008930:	2302      	movs	r3, #2
  }
}
 8008932:	4618      	mov	r0, r3
 8008934:	3730      	adds	r7, #48	@ 0x30
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	08008985 	.word	0x08008985
 8008940:	08008a1f 	.word	0x08008a1f
 8008944:	08008a3b 	.word	0x08008a3b

08008948 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008950:	bf00      	nop
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008964:	bf00      	nop
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008978:	bf00      	nop
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b090      	sub	sp, #64	@ 0x40
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008990:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800899c:	2b00      	cmp	r3, #0
 800899e:	d137      	bne.n	8008a10 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80089a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089a2:	2200      	movs	r2, #0
 80089a4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80089a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	3314      	adds	r3, #20
 80089ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b0:	e853 3f00 	ldrex	r3, [r3]
 80089b4:	623b      	str	r3, [r7, #32]
   return(result);
 80089b6:	6a3b      	ldr	r3, [r7, #32]
 80089b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80089be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	3314      	adds	r3, #20
 80089c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80089c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80089c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089ce:	e841 2300 	strex	r3, r2, [r1]
 80089d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80089d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1e5      	bne.n	80089a6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80089da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	330c      	adds	r3, #12
 80089e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	e853 3f00 	ldrex	r3, [r3]
 80089e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80089f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	330c      	adds	r3, #12
 80089f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80089fa:	61fa      	str	r2, [r7, #28]
 80089fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fe:	69b9      	ldr	r1, [r7, #24]
 8008a00:	69fa      	ldr	r2, [r7, #28]
 8008a02:	e841 2300 	strex	r3, r2, [r1]
 8008a06:	617b      	str	r3, [r7, #20]
   return(result);
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d1e5      	bne.n	80089da <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008a0e:	e002      	b.n	8008a16 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008a10:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008a12:	f7ff ff99 	bl	8008948 <HAL_UART_TxCpltCallback>
}
 8008a16:	bf00      	nop
 8008a18:	3740      	adds	r7, #64	@ 0x40
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b084      	sub	sp, #16
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a2a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f7ff ff95 	bl	800895c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a32:	bf00      	nop
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b084      	sub	sp, #16
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008a42:	2300      	movs	r3, #0
 8008a44:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a4a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	695b      	ldr	r3, [r3, #20]
 8008a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a56:	2b80      	cmp	r3, #128	@ 0x80
 8008a58:	bf0c      	ite	eq
 8008a5a:	2301      	moveq	r3, #1
 8008a5c:	2300      	movne	r3, #0
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	2b21      	cmp	r3, #33	@ 0x21
 8008a6c:	d108      	bne.n	8008a80 <UART_DMAError+0x46>
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d005      	beq.n	8008a80 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	2200      	movs	r2, #0
 8008a78:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8008a7a:	68b8      	ldr	r0, [r7, #8]
 8008a7c:	f000 f880 	bl	8008b80 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	695b      	ldr	r3, [r3, #20]
 8008a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a8a:	2b40      	cmp	r3, #64	@ 0x40
 8008a8c:	bf0c      	ite	eq
 8008a8e:	2301      	moveq	r3, #1
 8008a90:	2300      	movne	r3, #0
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	2b22      	cmp	r3, #34	@ 0x22
 8008aa0:	d108      	bne.n	8008ab4 <UART_DMAError+0x7a>
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d005      	beq.n	8008ab4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8008aae:	68b8      	ldr	r0, [r7, #8]
 8008ab0:	f000 f88e 	bl	8008bd0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ab8:	f043 0210 	orr.w	r2, r3, #16
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ac0:	68b8      	ldr	r0, [r7, #8]
 8008ac2:	f7ff ff55 	bl	8008970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ac6:	bf00      	nop
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b086      	sub	sp, #24
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	60f8      	str	r0, [r7, #12]
 8008ad6:	60b9      	str	r1, [r7, #8]
 8008ad8:	603b      	str	r3, [r7, #0]
 8008ada:	4613      	mov	r3, r2
 8008adc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ade:	e03b      	b.n	8008b58 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ae0:	6a3b      	ldr	r3, [r7, #32]
 8008ae2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ae6:	d037      	beq.n	8008b58 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ae8:	f7fb fbd2 	bl	8004290 <HAL_GetTick>
 8008aec:	4602      	mov	r2, r0
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	1ad3      	subs	r3, r2, r3
 8008af2:	6a3a      	ldr	r2, [r7, #32]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d302      	bcc.n	8008afe <UART_WaitOnFlagUntilTimeout+0x30>
 8008af8:	6a3b      	ldr	r3, [r7, #32]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d101      	bne.n	8008b02 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008afe:	2303      	movs	r3, #3
 8008b00:	e03a      	b.n	8008b78 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	f003 0304 	and.w	r3, r3, #4
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d023      	beq.n	8008b58 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	2b80      	cmp	r3, #128	@ 0x80
 8008b14:	d020      	beq.n	8008b58 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	2b40      	cmp	r3, #64	@ 0x40
 8008b1a:	d01d      	beq.n	8008b58 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f003 0308 	and.w	r3, r3, #8
 8008b26:	2b08      	cmp	r3, #8
 8008b28:	d116      	bne.n	8008b58 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	617b      	str	r3, [r7, #20]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	617b      	str	r3, [r7, #20]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	617b      	str	r3, [r7, #20]
 8008b3e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f000 f845 	bl	8008bd0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2208      	movs	r2, #8
 8008b4a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	e00f      	b.n	8008b78 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	4013      	ands	r3, r2
 8008b62:	68ba      	ldr	r2, [r7, #8]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	bf0c      	ite	eq
 8008b68:	2301      	moveq	r3, #1
 8008b6a:	2300      	movne	r3, #0
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	461a      	mov	r2, r3
 8008b70:	79fb      	ldrb	r3, [r7, #7]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d0b4      	beq.n	8008ae0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3718      	adds	r7, #24
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b089      	sub	sp, #36	@ 0x24
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	330c      	adds	r3, #12
 8008b8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	e853 3f00 	ldrex	r3, [r3]
 8008b96:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008b9e:	61fb      	str	r3, [r7, #28]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	330c      	adds	r3, #12
 8008ba6:	69fa      	ldr	r2, [r7, #28]
 8008ba8:	61ba      	str	r2, [r7, #24]
 8008baa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bac:	6979      	ldr	r1, [r7, #20]
 8008bae:	69ba      	ldr	r2, [r7, #24]
 8008bb0:	e841 2300 	strex	r3, r2, [r1]
 8008bb4:	613b      	str	r3, [r7, #16]
   return(result);
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d1e5      	bne.n	8008b88 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2220      	movs	r2, #32
 8008bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8008bc4:	bf00      	nop
 8008bc6:	3724      	adds	r7, #36	@ 0x24
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b095      	sub	sp, #84	@ 0x54
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	330c      	adds	r3, #12
 8008bde:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008be2:	e853 3f00 	ldrex	r3, [r3]
 8008be6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	330c      	adds	r3, #12
 8008bf6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008bf8:	643a      	str	r2, [r7, #64]	@ 0x40
 8008bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008bfe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c00:	e841 2300 	strex	r3, r2, [r1]
 8008c04:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d1e5      	bne.n	8008bd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	3314      	adds	r3, #20
 8008c12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c14:	6a3b      	ldr	r3, [r7, #32]
 8008c16:	e853 3f00 	ldrex	r3, [r3]
 8008c1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	f023 0301 	bic.w	r3, r3, #1
 8008c22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	3314      	adds	r3, #20
 8008c2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c34:	e841 2300 	strex	r3, r2, [r1]
 8008c38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d1e5      	bne.n	8008c0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d119      	bne.n	8008c7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	330c      	adds	r3, #12
 8008c4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	e853 3f00 	ldrex	r3, [r3]
 8008c56:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	f023 0310 	bic.w	r3, r3, #16
 8008c5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	330c      	adds	r3, #12
 8008c66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c68:	61ba      	str	r2, [r7, #24]
 8008c6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6c:	6979      	ldr	r1, [r7, #20]
 8008c6e:	69ba      	ldr	r2, [r7, #24]
 8008c70:	e841 2300 	strex	r3, r2, [r1]
 8008c74:	613b      	str	r3, [r7, #16]
   return(result);
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d1e5      	bne.n	8008c48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2220      	movs	r2, #32
 8008c80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008c8a:	bf00      	nop
 8008c8c:	3754      	adds	r7, #84	@ 0x54
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr
	...

08008c98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c9c:	b0c0      	sub	sp, #256	@ 0x100
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	691b      	ldr	r3, [r3, #16]
 8008cac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cb4:	68d9      	ldr	r1, [r3, #12]
 8008cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	ea40 0301 	orr.w	r3, r0, r1
 8008cc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cc6:	689a      	ldr	r2, [r3, #8]
 8008cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	431a      	orrs	r2, r3
 8008cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cd4:	695b      	ldr	r3, [r3, #20]
 8008cd6:	431a      	orrs	r2, r3
 8008cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cdc:	69db      	ldr	r3, [r3, #28]
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008cf0:	f021 010c 	bic.w	r1, r1, #12
 8008cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008cfe:	430b      	orrs	r3, r1
 8008d00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	695b      	ldr	r3, [r3, #20]
 8008d0a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d12:	6999      	ldr	r1, [r3, #24]
 8008d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	ea40 0301 	orr.w	r3, r0, r1
 8008d1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	4b8f      	ldr	r3, [pc, #572]	@ (8008f64 <UART_SetConfig+0x2cc>)
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d005      	beq.n	8008d38 <UART_SetConfig+0xa0>
 8008d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	4b8d      	ldr	r3, [pc, #564]	@ (8008f68 <UART_SetConfig+0x2d0>)
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d104      	bne.n	8008d42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008d38:	f7fd fe4a 	bl	80069d0 <HAL_RCC_GetPCLK2Freq>
 8008d3c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008d40:	e003      	b.n	8008d4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008d42:	f7fd fe31 	bl	80069a8 <HAL_RCC_GetPCLK1Freq>
 8008d46:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d4e:	69db      	ldr	r3, [r3, #28]
 8008d50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d54:	f040 810c 	bne.w	8008f70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008d58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008d62:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008d66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008d6a:	4622      	mov	r2, r4
 8008d6c:	462b      	mov	r3, r5
 8008d6e:	1891      	adds	r1, r2, r2
 8008d70:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008d72:	415b      	adcs	r3, r3
 8008d74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008d7a:	4621      	mov	r1, r4
 8008d7c:	eb12 0801 	adds.w	r8, r2, r1
 8008d80:	4629      	mov	r1, r5
 8008d82:	eb43 0901 	adc.w	r9, r3, r1
 8008d86:	f04f 0200 	mov.w	r2, #0
 8008d8a:	f04f 0300 	mov.w	r3, #0
 8008d8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008d92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008d96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008d9a:	4690      	mov	r8, r2
 8008d9c:	4699      	mov	r9, r3
 8008d9e:	4623      	mov	r3, r4
 8008da0:	eb18 0303 	adds.w	r3, r8, r3
 8008da4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008da8:	462b      	mov	r3, r5
 8008daa:	eb49 0303 	adc.w	r3, r9, r3
 8008dae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008dbe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008dc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	18db      	adds	r3, r3, r3
 8008dca:	653b      	str	r3, [r7, #80]	@ 0x50
 8008dcc:	4613      	mov	r3, r2
 8008dce:	eb42 0303 	adc.w	r3, r2, r3
 8008dd2:	657b      	str	r3, [r7, #84]	@ 0x54
 8008dd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008dd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008ddc:	f7f7 ff54 	bl	8000c88 <__aeabi_uldivmod>
 8008de0:	4602      	mov	r2, r0
 8008de2:	460b      	mov	r3, r1
 8008de4:	4b61      	ldr	r3, [pc, #388]	@ (8008f6c <UART_SetConfig+0x2d4>)
 8008de6:	fba3 2302 	umull	r2, r3, r3, r2
 8008dea:	095b      	lsrs	r3, r3, #5
 8008dec:	011c      	lsls	r4, r3, #4
 8008dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008df2:	2200      	movs	r2, #0
 8008df4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008df8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008dfc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008e00:	4642      	mov	r2, r8
 8008e02:	464b      	mov	r3, r9
 8008e04:	1891      	adds	r1, r2, r2
 8008e06:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008e08:	415b      	adcs	r3, r3
 8008e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008e10:	4641      	mov	r1, r8
 8008e12:	eb12 0a01 	adds.w	sl, r2, r1
 8008e16:	4649      	mov	r1, r9
 8008e18:	eb43 0b01 	adc.w	fp, r3, r1
 8008e1c:	f04f 0200 	mov.w	r2, #0
 8008e20:	f04f 0300 	mov.w	r3, #0
 8008e24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008e28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008e2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e30:	4692      	mov	sl, r2
 8008e32:	469b      	mov	fp, r3
 8008e34:	4643      	mov	r3, r8
 8008e36:	eb1a 0303 	adds.w	r3, sl, r3
 8008e3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008e3e:	464b      	mov	r3, r9
 8008e40:	eb4b 0303 	adc.w	r3, fp, r3
 8008e44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008e54:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008e58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	18db      	adds	r3, r3, r3
 8008e60:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e62:	4613      	mov	r3, r2
 8008e64:	eb42 0303 	adc.w	r3, r2, r3
 8008e68:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008e6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008e72:	f7f7 ff09 	bl	8000c88 <__aeabi_uldivmod>
 8008e76:	4602      	mov	r2, r0
 8008e78:	460b      	mov	r3, r1
 8008e7a:	4611      	mov	r1, r2
 8008e7c:	4b3b      	ldr	r3, [pc, #236]	@ (8008f6c <UART_SetConfig+0x2d4>)
 8008e7e:	fba3 2301 	umull	r2, r3, r3, r1
 8008e82:	095b      	lsrs	r3, r3, #5
 8008e84:	2264      	movs	r2, #100	@ 0x64
 8008e86:	fb02 f303 	mul.w	r3, r2, r3
 8008e8a:	1acb      	subs	r3, r1, r3
 8008e8c:	00db      	lsls	r3, r3, #3
 8008e8e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008e92:	4b36      	ldr	r3, [pc, #216]	@ (8008f6c <UART_SetConfig+0x2d4>)
 8008e94:	fba3 2302 	umull	r2, r3, r3, r2
 8008e98:	095b      	lsrs	r3, r3, #5
 8008e9a:	005b      	lsls	r3, r3, #1
 8008e9c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008ea0:	441c      	add	r4, r3
 8008ea2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008eac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008eb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008eb4:	4642      	mov	r2, r8
 8008eb6:	464b      	mov	r3, r9
 8008eb8:	1891      	adds	r1, r2, r2
 8008eba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008ebc:	415b      	adcs	r3, r3
 8008ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ec0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008ec4:	4641      	mov	r1, r8
 8008ec6:	1851      	adds	r1, r2, r1
 8008ec8:	6339      	str	r1, [r7, #48]	@ 0x30
 8008eca:	4649      	mov	r1, r9
 8008ecc:	414b      	adcs	r3, r1
 8008ece:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ed0:	f04f 0200 	mov.w	r2, #0
 8008ed4:	f04f 0300 	mov.w	r3, #0
 8008ed8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008edc:	4659      	mov	r1, fp
 8008ede:	00cb      	lsls	r3, r1, #3
 8008ee0:	4651      	mov	r1, sl
 8008ee2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ee6:	4651      	mov	r1, sl
 8008ee8:	00ca      	lsls	r2, r1, #3
 8008eea:	4610      	mov	r0, r2
 8008eec:	4619      	mov	r1, r3
 8008eee:	4603      	mov	r3, r0
 8008ef0:	4642      	mov	r2, r8
 8008ef2:	189b      	adds	r3, r3, r2
 8008ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008ef8:	464b      	mov	r3, r9
 8008efa:	460a      	mov	r2, r1
 8008efc:	eb42 0303 	adc.w	r3, r2, r3
 8008f00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008f10:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008f14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008f18:	460b      	mov	r3, r1
 8008f1a:	18db      	adds	r3, r3, r3
 8008f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008f1e:	4613      	mov	r3, r2
 8008f20:	eb42 0303 	adc.w	r3, r2, r3
 8008f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008f2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008f2e:	f7f7 feab 	bl	8000c88 <__aeabi_uldivmod>
 8008f32:	4602      	mov	r2, r0
 8008f34:	460b      	mov	r3, r1
 8008f36:	4b0d      	ldr	r3, [pc, #52]	@ (8008f6c <UART_SetConfig+0x2d4>)
 8008f38:	fba3 1302 	umull	r1, r3, r3, r2
 8008f3c:	095b      	lsrs	r3, r3, #5
 8008f3e:	2164      	movs	r1, #100	@ 0x64
 8008f40:	fb01 f303 	mul.w	r3, r1, r3
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	00db      	lsls	r3, r3, #3
 8008f48:	3332      	adds	r3, #50	@ 0x32
 8008f4a:	4a08      	ldr	r2, [pc, #32]	@ (8008f6c <UART_SetConfig+0x2d4>)
 8008f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f50:	095b      	lsrs	r3, r3, #5
 8008f52:	f003 0207 	and.w	r2, r3, #7
 8008f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4422      	add	r2, r4
 8008f5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008f60:	e106      	b.n	8009170 <UART_SetConfig+0x4d8>
 8008f62:	bf00      	nop
 8008f64:	40011000 	.word	0x40011000
 8008f68:	40011400 	.word	0x40011400
 8008f6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f74:	2200      	movs	r2, #0
 8008f76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008f7a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008f7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008f82:	4642      	mov	r2, r8
 8008f84:	464b      	mov	r3, r9
 8008f86:	1891      	adds	r1, r2, r2
 8008f88:	6239      	str	r1, [r7, #32]
 8008f8a:	415b      	adcs	r3, r3
 8008f8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008f92:	4641      	mov	r1, r8
 8008f94:	1854      	adds	r4, r2, r1
 8008f96:	4649      	mov	r1, r9
 8008f98:	eb43 0501 	adc.w	r5, r3, r1
 8008f9c:	f04f 0200 	mov.w	r2, #0
 8008fa0:	f04f 0300 	mov.w	r3, #0
 8008fa4:	00eb      	lsls	r3, r5, #3
 8008fa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008faa:	00e2      	lsls	r2, r4, #3
 8008fac:	4614      	mov	r4, r2
 8008fae:	461d      	mov	r5, r3
 8008fb0:	4643      	mov	r3, r8
 8008fb2:	18e3      	adds	r3, r4, r3
 8008fb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008fb8:	464b      	mov	r3, r9
 8008fba:	eb45 0303 	adc.w	r3, r5, r3
 8008fbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008fce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008fd2:	f04f 0200 	mov.w	r2, #0
 8008fd6:	f04f 0300 	mov.w	r3, #0
 8008fda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008fde:	4629      	mov	r1, r5
 8008fe0:	008b      	lsls	r3, r1, #2
 8008fe2:	4621      	mov	r1, r4
 8008fe4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fe8:	4621      	mov	r1, r4
 8008fea:	008a      	lsls	r2, r1, #2
 8008fec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008ff0:	f7f7 fe4a 	bl	8000c88 <__aeabi_uldivmod>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	4b60      	ldr	r3, [pc, #384]	@ (800917c <UART_SetConfig+0x4e4>)
 8008ffa:	fba3 2302 	umull	r2, r3, r3, r2
 8008ffe:	095b      	lsrs	r3, r3, #5
 8009000:	011c      	lsls	r4, r3, #4
 8009002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009006:	2200      	movs	r2, #0
 8009008:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800900c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009010:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009014:	4642      	mov	r2, r8
 8009016:	464b      	mov	r3, r9
 8009018:	1891      	adds	r1, r2, r2
 800901a:	61b9      	str	r1, [r7, #24]
 800901c:	415b      	adcs	r3, r3
 800901e:	61fb      	str	r3, [r7, #28]
 8009020:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009024:	4641      	mov	r1, r8
 8009026:	1851      	adds	r1, r2, r1
 8009028:	6139      	str	r1, [r7, #16]
 800902a:	4649      	mov	r1, r9
 800902c:	414b      	adcs	r3, r1
 800902e:	617b      	str	r3, [r7, #20]
 8009030:	f04f 0200 	mov.w	r2, #0
 8009034:	f04f 0300 	mov.w	r3, #0
 8009038:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800903c:	4659      	mov	r1, fp
 800903e:	00cb      	lsls	r3, r1, #3
 8009040:	4651      	mov	r1, sl
 8009042:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009046:	4651      	mov	r1, sl
 8009048:	00ca      	lsls	r2, r1, #3
 800904a:	4610      	mov	r0, r2
 800904c:	4619      	mov	r1, r3
 800904e:	4603      	mov	r3, r0
 8009050:	4642      	mov	r2, r8
 8009052:	189b      	adds	r3, r3, r2
 8009054:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009058:	464b      	mov	r3, r9
 800905a:	460a      	mov	r2, r1
 800905c:	eb42 0303 	adc.w	r3, r2, r3
 8009060:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800906e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009070:	f04f 0200 	mov.w	r2, #0
 8009074:	f04f 0300 	mov.w	r3, #0
 8009078:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800907c:	4649      	mov	r1, r9
 800907e:	008b      	lsls	r3, r1, #2
 8009080:	4641      	mov	r1, r8
 8009082:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009086:	4641      	mov	r1, r8
 8009088:	008a      	lsls	r2, r1, #2
 800908a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800908e:	f7f7 fdfb 	bl	8000c88 <__aeabi_uldivmod>
 8009092:	4602      	mov	r2, r0
 8009094:	460b      	mov	r3, r1
 8009096:	4611      	mov	r1, r2
 8009098:	4b38      	ldr	r3, [pc, #224]	@ (800917c <UART_SetConfig+0x4e4>)
 800909a:	fba3 2301 	umull	r2, r3, r3, r1
 800909e:	095b      	lsrs	r3, r3, #5
 80090a0:	2264      	movs	r2, #100	@ 0x64
 80090a2:	fb02 f303 	mul.w	r3, r2, r3
 80090a6:	1acb      	subs	r3, r1, r3
 80090a8:	011b      	lsls	r3, r3, #4
 80090aa:	3332      	adds	r3, #50	@ 0x32
 80090ac:	4a33      	ldr	r2, [pc, #204]	@ (800917c <UART_SetConfig+0x4e4>)
 80090ae:	fba2 2303 	umull	r2, r3, r2, r3
 80090b2:	095b      	lsrs	r3, r3, #5
 80090b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80090b8:	441c      	add	r4, r3
 80090ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090be:	2200      	movs	r2, #0
 80090c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80090c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80090c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80090c8:	4642      	mov	r2, r8
 80090ca:	464b      	mov	r3, r9
 80090cc:	1891      	adds	r1, r2, r2
 80090ce:	60b9      	str	r1, [r7, #8]
 80090d0:	415b      	adcs	r3, r3
 80090d2:	60fb      	str	r3, [r7, #12]
 80090d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80090d8:	4641      	mov	r1, r8
 80090da:	1851      	adds	r1, r2, r1
 80090dc:	6039      	str	r1, [r7, #0]
 80090de:	4649      	mov	r1, r9
 80090e0:	414b      	adcs	r3, r1
 80090e2:	607b      	str	r3, [r7, #4]
 80090e4:	f04f 0200 	mov.w	r2, #0
 80090e8:	f04f 0300 	mov.w	r3, #0
 80090ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80090f0:	4659      	mov	r1, fp
 80090f2:	00cb      	lsls	r3, r1, #3
 80090f4:	4651      	mov	r1, sl
 80090f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090fa:	4651      	mov	r1, sl
 80090fc:	00ca      	lsls	r2, r1, #3
 80090fe:	4610      	mov	r0, r2
 8009100:	4619      	mov	r1, r3
 8009102:	4603      	mov	r3, r0
 8009104:	4642      	mov	r2, r8
 8009106:	189b      	adds	r3, r3, r2
 8009108:	66bb      	str	r3, [r7, #104]	@ 0x68
 800910a:	464b      	mov	r3, r9
 800910c:	460a      	mov	r2, r1
 800910e:	eb42 0303 	adc.w	r3, r2, r3
 8009112:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	663b      	str	r3, [r7, #96]	@ 0x60
 800911e:	667a      	str	r2, [r7, #100]	@ 0x64
 8009120:	f04f 0200 	mov.w	r2, #0
 8009124:	f04f 0300 	mov.w	r3, #0
 8009128:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800912c:	4649      	mov	r1, r9
 800912e:	008b      	lsls	r3, r1, #2
 8009130:	4641      	mov	r1, r8
 8009132:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009136:	4641      	mov	r1, r8
 8009138:	008a      	lsls	r2, r1, #2
 800913a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800913e:	f7f7 fda3 	bl	8000c88 <__aeabi_uldivmod>
 8009142:	4602      	mov	r2, r0
 8009144:	460b      	mov	r3, r1
 8009146:	4b0d      	ldr	r3, [pc, #52]	@ (800917c <UART_SetConfig+0x4e4>)
 8009148:	fba3 1302 	umull	r1, r3, r3, r2
 800914c:	095b      	lsrs	r3, r3, #5
 800914e:	2164      	movs	r1, #100	@ 0x64
 8009150:	fb01 f303 	mul.w	r3, r1, r3
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	011b      	lsls	r3, r3, #4
 8009158:	3332      	adds	r3, #50	@ 0x32
 800915a:	4a08      	ldr	r2, [pc, #32]	@ (800917c <UART_SetConfig+0x4e4>)
 800915c:	fba2 2303 	umull	r2, r3, r2, r3
 8009160:	095b      	lsrs	r3, r3, #5
 8009162:	f003 020f 	and.w	r2, r3, #15
 8009166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4422      	add	r2, r4
 800916e:	609a      	str	r2, [r3, #8]
}
 8009170:	bf00      	nop
 8009172:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009176:	46bd      	mov	sp, r7
 8009178:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800917c:	51eb851f 	.word	0x51eb851f

08009180 <__NVIC_SetPriority>:
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	4603      	mov	r3, r0
 8009188:	6039      	str	r1, [r7, #0]
 800918a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800918c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009190:	2b00      	cmp	r3, #0
 8009192:	db0a      	blt.n	80091aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	b2da      	uxtb	r2, r3
 8009198:	490c      	ldr	r1, [pc, #48]	@ (80091cc <__NVIC_SetPriority+0x4c>)
 800919a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800919e:	0112      	lsls	r2, r2, #4
 80091a0:	b2d2      	uxtb	r2, r2
 80091a2:	440b      	add	r3, r1
 80091a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80091a8:	e00a      	b.n	80091c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	b2da      	uxtb	r2, r3
 80091ae:	4908      	ldr	r1, [pc, #32]	@ (80091d0 <__NVIC_SetPriority+0x50>)
 80091b0:	79fb      	ldrb	r3, [r7, #7]
 80091b2:	f003 030f 	and.w	r3, r3, #15
 80091b6:	3b04      	subs	r3, #4
 80091b8:	0112      	lsls	r2, r2, #4
 80091ba:	b2d2      	uxtb	r2, r2
 80091bc:	440b      	add	r3, r1
 80091be:	761a      	strb	r2, [r3, #24]
}
 80091c0:	bf00      	nop
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr
 80091cc:	e000e100 	.word	0xe000e100
 80091d0:	e000ed00 	.word	0xe000ed00

080091d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80091d4:	b580      	push	{r7, lr}
 80091d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80091d8:	2100      	movs	r1, #0
 80091da:	f06f 0004 	mvn.w	r0, #4
 80091de:	f7ff ffcf 	bl	8009180 <__NVIC_SetPriority>
#endif
}
 80091e2:	bf00      	nop
 80091e4:	bd80      	pop	{r7, pc}
	...

080091e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091ee:	f3ef 8305 	mrs	r3, IPSR
 80091f2:	603b      	str	r3, [r7, #0]
  return(result);
 80091f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d003      	beq.n	8009202 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80091fa:	f06f 0305 	mvn.w	r3, #5
 80091fe:	607b      	str	r3, [r7, #4]
 8009200:	e00c      	b.n	800921c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009202:	4b0a      	ldr	r3, [pc, #40]	@ (800922c <osKernelInitialize+0x44>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d105      	bne.n	8009216 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800920a:	4b08      	ldr	r3, [pc, #32]	@ (800922c <osKernelInitialize+0x44>)
 800920c:	2201      	movs	r2, #1
 800920e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009210:	2300      	movs	r3, #0
 8009212:	607b      	str	r3, [r7, #4]
 8009214:	e002      	b.n	800921c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009216:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800921a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800921c:	687b      	ldr	r3, [r7, #4]
}
 800921e:	4618      	mov	r0, r3
 8009220:	370c      	adds	r7, #12
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop
 800922c:	20000a10 	.word	0x20000a10

08009230 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009236:	f3ef 8305 	mrs	r3, IPSR
 800923a:	603b      	str	r3, [r7, #0]
  return(result);
 800923c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800923e:	2b00      	cmp	r3, #0
 8009240:	d003      	beq.n	800924a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009242:	f06f 0305 	mvn.w	r3, #5
 8009246:	607b      	str	r3, [r7, #4]
 8009248:	e010      	b.n	800926c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800924a:	4b0b      	ldr	r3, [pc, #44]	@ (8009278 <osKernelStart+0x48>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2b01      	cmp	r3, #1
 8009250:	d109      	bne.n	8009266 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009252:	f7ff ffbf 	bl	80091d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009256:	4b08      	ldr	r3, [pc, #32]	@ (8009278 <osKernelStart+0x48>)
 8009258:	2202      	movs	r2, #2
 800925a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800925c:	f001 ff68 	bl	800b130 <vTaskStartScheduler>
      stat = osOK;
 8009260:	2300      	movs	r3, #0
 8009262:	607b      	str	r3, [r7, #4]
 8009264:	e002      	b.n	800926c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009266:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800926a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800926c:	687b      	ldr	r3, [r7, #4]
}
 800926e:	4618      	mov	r0, r3
 8009270:	3708      	adds	r7, #8
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	20000a10 	.word	0x20000a10

0800927c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009282:	f3ef 8305 	mrs	r3, IPSR
 8009286:	603b      	str	r3, [r7, #0]
  return(result);
 8009288:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800928a:	2b00      	cmp	r3, #0
 800928c:	d003      	beq.n	8009296 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800928e:	f002 f873 	bl	800b378 <xTaskGetTickCountFromISR>
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	e002      	b.n	800929c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8009296:	f002 f85f 	bl	800b358 <xTaskGetTickCount>
 800929a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800929c:	687b      	ldr	r3, [r7, #4]
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3708      	adds	r7, #8
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 80092a6:	b480      	push	{r7}
 80092a8:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 80092aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b08e      	sub	sp, #56	@ 0x38
 80092bc:	af04      	add	r7, sp, #16
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80092c4:	2300      	movs	r3, #0
 80092c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092c8:	f3ef 8305 	mrs	r3, IPSR
 80092cc:	617b      	str	r3, [r7, #20]
  return(result);
 80092ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d17e      	bne.n	80093d2 <osThreadNew+0x11a>
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d07b      	beq.n	80093d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80092da:	2380      	movs	r3, #128	@ 0x80
 80092dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80092de:	2318      	movs	r3, #24
 80092e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80092e2:	2300      	movs	r3, #0
 80092e4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80092e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80092ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d045      	beq.n	800937e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d002      	beq.n	8009300 <osThreadNew+0x48>
        name = attr->name;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	699b      	ldr	r3, [r3, #24]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d002      	beq.n	800930e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	699b      	ldr	r3, [r3, #24]
 800930c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d008      	beq.n	8009326 <osThreadNew+0x6e>
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	2b38      	cmp	r3, #56	@ 0x38
 8009318:	d805      	bhi.n	8009326 <osThreadNew+0x6e>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	f003 0301 	and.w	r3, r3, #1
 8009322:	2b00      	cmp	r3, #0
 8009324:	d001      	beq.n	800932a <osThreadNew+0x72>
        return (NULL);
 8009326:	2300      	movs	r3, #0
 8009328:	e054      	b.n	80093d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	695b      	ldr	r3, [r3, #20]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d003      	beq.n	800933a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	695b      	ldr	r3, [r3, #20]
 8009336:	089b      	lsrs	r3, r3, #2
 8009338:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00e      	beq.n	8009360 <osThreadNew+0xa8>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	2b5b      	cmp	r3, #91	@ 0x5b
 8009348:	d90a      	bls.n	8009360 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800934e:	2b00      	cmp	r3, #0
 8009350:	d006      	beq.n	8009360 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	695b      	ldr	r3, [r3, #20]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d002      	beq.n	8009360 <osThreadNew+0xa8>
        mem = 1;
 800935a:	2301      	movs	r3, #1
 800935c:	61bb      	str	r3, [r7, #24]
 800935e:	e010      	b.n	8009382 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d10c      	bne.n	8009382 <osThreadNew+0xca>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d108      	bne.n	8009382 <osThreadNew+0xca>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	691b      	ldr	r3, [r3, #16]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d104      	bne.n	8009382 <osThreadNew+0xca>
          mem = 0;
 8009378:	2300      	movs	r3, #0
 800937a:	61bb      	str	r3, [r7, #24]
 800937c:	e001      	b.n	8009382 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800937e:	2300      	movs	r3, #0
 8009380:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	2b01      	cmp	r3, #1
 8009386:	d110      	bne.n	80093aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009390:	9202      	str	r2, [sp, #8]
 8009392:	9301      	str	r3, [sp, #4]
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	9300      	str	r3, [sp, #0]
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	6a3a      	ldr	r2, [r7, #32]
 800939c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800939e:	68f8      	ldr	r0, [r7, #12]
 80093a0:	f001 fca0 	bl	800ace4 <xTaskCreateStatic>
 80093a4:	4603      	mov	r3, r0
 80093a6:	613b      	str	r3, [r7, #16]
 80093a8:	e013      	b.n	80093d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d110      	bne.n	80093d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80093b0:	6a3b      	ldr	r3, [r7, #32]
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	f107 0310 	add.w	r3, r7, #16
 80093b8:	9301      	str	r3, [sp, #4]
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	9300      	str	r3, [sp, #0]
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80093c2:	68f8      	ldr	r0, [r7, #12]
 80093c4:	f001 fcee 	bl	800ada4 <xTaskCreate>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d001      	beq.n	80093d2 <osThreadNew+0x11a>
            hTask = NULL;
 80093ce:	2300      	movs	r3, #0
 80093d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80093d2:	693b      	ldr	r3, [r7, #16]
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3728      	adds	r7, #40	@ 0x28
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 80093dc:	b580      	push	{r7, lr}
 80093de:	b086      	sub	sp, #24
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093e4:	f3ef 8305 	mrs	r3, IPSR
 80093e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80093ea:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d003      	beq.n	80093f8 <osDelayUntil+0x1c>
    stat = osErrorISR;
 80093f0:	f06f 0305 	mvn.w	r3, #5
 80093f4:	617b      	str	r3, [r7, #20]
 80093f6:	e019      	b.n	800942c <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 80093f8:	2300      	movs	r3, #0
 80093fa:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 80093fc:	f001 ffac 	bl	800b358 <xTaskGetTickCount>
 8009400:	4603      	mov	r3, r0
 8009402:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	1ad3      	subs	r3, r2, r3
 800940a:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d009      	beq.n	8009426 <osDelayUntil+0x4a>
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	2b00      	cmp	r3, #0
 8009416:	db06      	blt.n	8009426 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8009418:	f107 0308 	add.w	r3, r7, #8
 800941c:	6939      	ldr	r1, [r7, #16]
 800941e:	4618      	mov	r0, r3
 8009420:	f001 fe06 	bl	800b030 <vTaskDelayUntil>
 8009424:	e002      	b.n	800942c <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8009426:	f06f 0303 	mvn.w	r3, #3
 800942a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800942c:	697b      	ldr	r3, [r7, #20]
}
 800942e:	4618      	mov	r0, r3
 8009430:	3718      	adds	r7, #24
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009436:	b580      	push	{r7, lr}
 8009438:	b088      	sub	sp, #32
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800943e:	2300      	movs	r3, #0
 8009440:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009442:	f3ef 8305 	mrs	r3, IPSR
 8009446:	60bb      	str	r3, [r7, #8]
  return(result);
 8009448:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800944a:	2b00      	cmp	r3, #0
 800944c:	d174      	bne.n	8009538 <osMutexNew+0x102>
    if (attr != NULL) {
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d003      	beq.n	800945c <osMutexNew+0x26>
      type = attr->attr_bits;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	61bb      	str	r3, [r7, #24]
 800945a:	e001      	b.n	8009460 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800945c:	2300      	movs	r3, #0
 800945e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	f003 0301 	and.w	r3, r3, #1
 8009466:	2b00      	cmp	r3, #0
 8009468:	d002      	beq.n	8009470 <osMutexNew+0x3a>
      rmtx = 1U;
 800946a:	2301      	movs	r3, #1
 800946c:	617b      	str	r3, [r7, #20]
 800946e:	e001      	b.n	8009474 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8009470:	2300      	movs	r3, #0
 8009472:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009474:	69bb      	ldr	r3, [r7, #24]
 8009476:	f003 0308 	and.w	r3, r3, #8
 800947a:	2b00      	cmp	r3, #0
 800947c:	d15c      	bne.n	8009538 <osMutexNew+0x102>
      mem = -1;
 800947e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009482:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d015      	beq.n	80094b6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d006      	beq.n	80094a0 <osMutexNew+0x6a>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	2b4f      	cmp	r3, #79	@ 0x4f
 8009498:	d902      	bls.n	80094a0 <osMutexNew+0x6a>
          mem = 1;
 800949a:	2301      	movs	r3, #1
 800949c:	613b      	str	r3, [r7, #16]
 800949e:	e00c      	b.n	80094ba <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d108      	bne.n	80094ba <osMutexNew+0x84>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d104      	bne.n	80094ba <osMutexNew+0x84>
            mem = 0;
 80094b0:	2300      	movs	r3, #0
 80094b2:	613b      	str	r3, [r7, #16]
 80094b4:	e001      	b.n	80094ba <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80094b6:	2300      	movs	r3, #0
 80094b8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d112      	bne.n	80094e6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d007      	beq.n	80094d6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	4619      	mov	r1, r3
 80094cc:	2004      	movs	r0, #4
 80094ce:	f000 fd2c 	bl	8009f2a <xQueueCreateMutexStatic>
 80094d2:	61f8      	str	r0, [r7, #28]
 80094d4:	e016      	b.n	8009504 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	4619      	mov	r1, r3
 80094dc:	2001      	movs	r0, #1
 80094de:	f000 fd24 	bl	8009f2a <xQueueCreateMutexStatic>
 80094e2:	61f8      	str	r0, [r7, #28]
 80094e4:	e00e      	b.n	8009504 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d10b      	bne.n	8009504 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d004      	beq.n	80094fc <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80094f2:	2004      	movs	r0, #4
 80094f4:	f000 fd01 	bl	8009efa <xQueueCreateMutex>
 80094f8:	61f8      	str	r0, [r7, #28]
 80094fa:	e003      	b.n	8009504 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80094fc:	2001      	movs	r0, #1
 80094fe:	f000 fcfc 	bl	8009efa <xQueueCreateMutex>
 8009502:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009504:	69fb      	ldr	r3, [r7, #28]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d00c      	beq.n	8009524 <osMutexNew+0xee>
        if (attr != NULL) {
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d003      	beq.n	8009518 <osMutexNew+0xe2>
          name = attr->name;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	60fb      	str	r3, [r7, #12]
 8009516:	e001      	b.n	800951c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8009518:	2300      	movs	r3, #0
 800951a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800951c:	68f9      	ldr	r1, [r7, #12]
 800951e:	69f8      	ldr	r0, [r7, #28]
 8009520:	f001 fb58 	bl	800abd4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d006      	beq.n	8009538 <osMutexNew+0x102>
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d003      	beq.n	8009538 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	f043 0301 	orr.w	r3, r3, #1
 8009536:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009538:	69fb      	ldr	r3, [r7, #28]
}
 800953a:	4618      	mov	r0, r3
 800953c:	3720      	adds	r7, #32
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}

08009542 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009542:	b580      	push	{r7, lr}
 8009544:	b086      	sub	sp, #24
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
 800954a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f023 0301 	bic.w	r3, r3, #1
 8009552:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f003 0301 	and.w	r3, r3, #1
 800955a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800955c:	2300      	movs	r3, #0
 800955e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009560:	f3ef 8305 	mrs	r3, IPSR
 8009564:	60bb      	str	r3, [r7, #8]
  return(result);
 8009566:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8009568:	2b00      	cmp	r3, #0
 800956a:	d003      	beq.n	8009574 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800956c:	f06f 0305 	mvn.w	r3, #5
 8009570:	617b      	str	r3, [r7, #20]
 8009572:	e02c      	b.n	80095ce <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d103      	bne.n	8009582 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800957a:	f06f 0303 	mvn.w	r3, #3
 800957e:	617b      	str	r3, [r7, #20]
 8009580:	e025      	b.n	80095ce <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d011      	beq.n	80095ac <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009588:	6839      	ldr	r1, [r7, #0]
 800958a:	6938      	ldr	r0, [r7, #16]
 800958c:	f000 fd1d 	bl	8009fca <xQueueTakeMutexRecursive>
 8009590:	4603      	mov	r3, r0
 8009592:	2b01      	cmp	r3, #1
 8009594:	d01b      	beq.n	80095ce <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d003      	beq.n	80095a4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800959c:	f06f 0301 	mvn.w	r3, #1
 80095a0:	617b      	str	r3, [r7, #20]
 80095a2:	e014      	b.n	80095ce <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80095a4:	f06f 0302 	mvn.w	r3, #2
 80095a8:	617b      	str	r3, [r7, #20]
 80095aa:	e010      	b.n	80095ce <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80095ac:	6839      	ldr	r1, [r7, #0]
 80095ae:	6938      	ldr	r0, [r7, #16]
 80095b0:	f001 f832 	bl	800a618 <xQueueSemaphoreTake>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d009      	beq.n	80095ce <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d003      	beq.n	80095c8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80095c0:	f06f 0301 	mvn.w	r3, #1
 80095c4:	617b      	str	r3, [r7, #20]
 80095c6:	e002      	b.n	80095ce <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80095c8:	f06f 0302 	mvn.w	r3, #2
 80095cc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80095ce:	697b      	ldr	r3, [r7, #20]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3718      	adds	r7, #24
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80095d8:	b580      	push	{r7, lr}
 80095da:	b086      	sub	sp, #24
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f023 0301 	bic.w	r3, r3, #1
 80095e6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f003 0301 	and.w	r3, r3, #1
 80095ee:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80095f0:	2300      	movs	r3, #0
 80095f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095f4:	f3ef 8305 	mrs	r3, IPSR
 80095f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80095fa:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d003      	beq.n	8009608 <osMutexRelease+0x30>
    stat = osErrorISR;
 8009600:	f06f 0305 	mvn.w	r3, #5
 8009604:	617b      	str	r3, [r7, #20]
 8009606:	e01f      	b.n	8009648 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d103      	bne.n	8009616 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800960e:	f06f 0303 	mvn.w	r3, #3
 8009612:	617b      	str	r3, [r7, #20]
 8009614:	e018      	b.n	8009648 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d009      	beq.n	8009630 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800961c:	6938      	ldr	r0, [r7, #16]
 800961e:	f000 fc9f 	bl	8009f60 <xQueueGiveMutexRecursive>
 8009622:	4603      	mov	r3, r0
 8009624:	2b01      	cmp	r3, #1
 8009626:	d00f      	beq.n	8009648 <osMutexRelease+0x70>
        stat = osErrorResource;
 8009628:	f06f 0302 	mvn.w	r3, #2
 800962c:	617b      	str	r3, [r7, #20]
 800962e:	e00b      	b.n	8009648 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8009630:	2300      	movs	r3, #0
 8009632:	2200      	movs	r2, #0
 8009634:	2100      	movs	r1, #0
 8009636:	6938      	ldr	r0, [r7, #16]
 8009638:	f000 fd6c 	bl	800a114 <xQueueGenericSend>
 800963c:	4603      	mov	r3, r0
 800963e:	2b01      	cmp	r3, #1
 8009640:	d002      	beq.n	8009648 <osMutexRelease+0x70>
        stat = osErrorResource;
 8009642:	f06f 0302 	mvn.w	r3, #2
 8009646:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009648:	697b      	ldr	r3, [r7, #20]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3718      	adds	r7, #24
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009652:	b580      	push	{r7, lr}
 8009654:	b08a      	sub	sp, #40	@ 0x28
 8009656:	af02      	add	r7, sp, #8
 8009658:	60f8      	str	r0, [r7, #12]
 800965a:	60b9      	str	r1, [r7, #8]
 800965c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800965e:	2300      	movs	r3, #0
 8009660:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009662:	f3ef 8305 	mrs	r3, IPSR
 8009666:	613b      	str	r3, [r7, #16]
  return(result);
 8009668:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800966a:	2b00      	cmp	r3, #0
 800966c:	d175      	bne.n	800975a <osSemaphoreNew+0x108>
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d072      	beq.n	800975a <osSemaphoreNew+0x108>
 8009674:	68ba      	ldr	r2, [r7, #8]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	429a      	cmp	r2, r3
 800967a:	d86e      	bhi.n	800975a <osSemaphoreNew+0x108>
    mem = -1;
 800967c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009680:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d015      	beq.n	80096b4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d006      	beq.n	800969e <osSemaphoreNew+0x4c>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	2b4f      	cmp	r3, #79	@ 0x4f
 8009696:	d902      	bls.n	800969e <osSemaphoreNew+0x4c>
        mem = 1;
 8009698:	2301      	movs	r3, #1
 800969a:	61bb      	str	r3, [r7, #24]
 800969c:	e00c      	b.n	80096b8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d108      	bne.n	80096b8 <osSemaphoreNew+0x66>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d104      	bne.n	80096b8 <osSemaphoreNew+0x66>
          mem = 0;
 80096ae:	2300      	movs	r3, #0
 80096b0:	61bb      	str	r3, [r7, #24]
 80096b2:	e001      	b.n	80096b8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80096b4:	2300      	movs	r3, #0
 80096b6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80096b8:	69bb      	ldr	r3, [r7, #24]
 80096ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096be:	d04c      	beq.n	800975a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d128      	bne.n	8009718 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80096c6:	69bb      	ldr	r3, [r7, #24]
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d10a      	bne.n	80096e2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	2203      	movs	r2, #3
 80096d2:	9200      	str	r2, [sp, #0]
 80096d4:	2200      	movs	r2, #0
 80096d6:	2100      	movs	r1, #0
 80096d8:	2001      	movs	r0, #1
 80096da:	f000 fb19 	bl	8009d10 <xQueueGenericCreateStatic>
 80096de:	61f8      	str	r0, [r7, #28]
 80096e0:	e005      	b.n	80096ee <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80096e2:	2203      	movs	r2, #3
 80096e4:	2100      	movs	r1, #0
 80096e6:	2001      	movs	r0, #1
 80096e8:	f000 fb8f 	bl	8009e0a <xQueueGenericCreate>
 80096ec:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d022      	beq.n	800973a <osSemaphoreNew+0xe8>
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d01f      	beq.n	800973a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80096fa:	2300      	movs	r3, #0
 80096fc:	2200      	movs	r2, #0
 80096fe:	2100      	movs	r1, #0
 8009700:	69f8      	ldr	r0, [r7, #28]
 8009702:	f000 fd07 	bl	800a114 <xQueueGenericSend>
 8009706:	4603      	mov	r3, r0
 8009708:	2b01      	cmp	r3, #1
 800970a:	d016      	beq.n	800973a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800970c:	69f8      	ldr	r0, [r7, #28]
 800970e:	f001 f915 	bl	800a93c <vQueueDelete>
            hSemaphore = NULL;
 8009712:	2300      	movs	r3, #0
 8009714:	61fb      	str	r3, [r7, #28]
 8009716:	e010      	b.n	800973a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	2b01      	cmp	r3, #1
 800971c:	d108      	bne.n	8009730 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	461a      	mov	r2, r3
 8009724:	68b9      	ldr	r1, [r7, #8]
 8009726:	68f8      	ldr	r0, [r7, #12]
 8009728:	f000 fc86 	bl	800a038 <xQueueCreateCountingSemaphoreStatic>
 800972c:	61f8      	str	r0, [r7, #28]
 800972e:	e004      	b.n	800973a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009730:	68b9      	ldr	r1, [r7, #8]
 8009732:	68f8      	ldr	r0, [r7, #12]
 8009734:	f000 fcb9 	bl	800a0aa <xQueueCreateCountingSemaphore>
 8009738:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d00c      	beq.n	800975a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d003      	beq.n	800974e <osSemaphoreNew+0xfc>
          name = attr->name;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	617b      	str	r3, [r7, #20]
 800974c:	e001      	b.n	8009752 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800974e:	2300      	movs	r3, #0
 8009750:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009752:	6979      	ldr	r1, [r7, #20]
 8009754:	69f8      	ldr	r0, [r7, #28]
 8009756:	f001 fa3d 	bl	800abd4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800975a:	69fb      	ldr	r3, [r7, #28]
}
 800975c:	4618      	mov	r0, r3
 800975e:	3720      	adds	r7, #32
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009764:	b580      	push	{r7, lr}
 8009766:	b086      	sub	sp, #24
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009772:	2300      	movs	r3, #0
 8009774:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d103      	bne.n	8009784 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800977c:	f06f 0303 	mvn.w	r3, #3
 8009780:	617b      	str	r3, [r7, #20]
 8009782:	e039      	b.n	80097f8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009784:	f3ef 8305 	mrs	r3, IPSR
 8009788:	60fb      	str	r3, [r7, #12]
  return(result);
 800978a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800978c:	2b00      	cmp	r3, #0
 800978e:	d022      	beq.n	80097d6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d003      	beq.n	800979e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009796:	f06f 0303 	mvn.w	r3, #3
 800979a:	617b      	str	r3, [r7, #20]
 800979c:	e02c      	b.n	80097f8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800979e:	2300      	movs	r3, #0
 80097a0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80097a2:	f107 0308 	add.w	r3, r7, #8
 80097a6:	461a      	mov	r2, r3
 80097a8:	2100      	movs	r1, #0
 80097aa:	6938      	ldr	r0, [r7, #16]
 80097ac:	f001 f844 	bl	800a838 <xQueueReceiveFromISR>
 80097b0:	4603      	mov	r3, r0
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d003      	beq.n	80097be <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80097b6:	f06f 0302 	mvn.w	r3, #2
 80097ba:	617b      	str	r3, [r7, #20]
 80097bc:	e01c      	b.n	80097f8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d019      	beq.n	80097f8 <osSemaphoreAcquire+0x94>
 80097c4:	4b0f      	ldr	r3, [pc, #60]	@ (8009804 <osSemaphoreAcquire+0xa0>)
 80097c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097ca:	601a      	str	r2, [r3, #0]
 80097cc:	f3bf 8f4f 	dsb	sy
 80097d0:	f3bf 8f6f 	isb	sy
 80097d4:	e010      	b.n	80097f8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80097d6:	6839      	ldr	r1, [r7, #0]
 80097d8:	6938      	ldr	r0, [r7, #16]
 80097da:	f000 ff1d 	bl	800a618 <xQueueSemaphoreTake>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d009      	beq.n	80097f8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d003      	beq.n	80097f2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80097ea:	f06f 0301 	mvn.w	r3, #1
 80097ee:	617b      	str	r3, [r7, #20]
 80097f0:	e002      	b.n	80097f8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80097f2:	f06f 0302 	mvn.w	r3, #2
 80097f6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80097f8:	697b      	ldr	r3, [r7, #20]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3718      	adds	r7, #24
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	e000ed04 	.word	0xe000ed04

08009808 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009808:	b580      	push	{r7, lr}
 800980a:	b08a      	sub	sp, #40	@ 0x28
 800980c:	af02      	add	r7, sp, #8
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009814:	2300      	movs	r3, #0
 8009816:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009818:	f3ef 8305 	mrs	r3, IPSR
 800981c:	613b      	str	r3, [r7, #16]
  return(result);
 800981e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009820:	2b00      	cmp	r3, #0
 8009822:	d15f      	bne.n	80098e4 <osMessageQueueNew+0xdc>
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d05c      	beq.n	80098e4 <osMessageQueueNew+0xdc>
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d059      	beq.n	80098e4 <osMessageQueueNew+0xdc>
    mem = -1;
 8009830:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009834:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d029      	beq.n	8009890 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d012      	beq.n	800986a <osMessageQueueNew+0x62>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	2b4f      	cmp	r3, #79	@ 0x4f
 800984a:	d90e      	bls.n	800986a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00a      	beq.n	800986a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	695a      	ldr	r2, [r3, #20]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	68b9      	ldr	r1, [r7, #8]
 800985c:	fb01 f303 	mul.w	r3, r1, r3
 8009860:	429a      	cmp	r2, r3
 8009862:	d302      	bcc.n	800986a <osMessageQueueNew+0x62>
        mem = 1;
 8009864:	2301      	movs	r3, #1
 8009866:	61bb      	str	r3, [r7, #24]
 8009868:	e014      	b.n	8009894 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d110      	bne.n	8009894 <osMessageQueueNew+0x8c>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d10c      	bne.n	8009894 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800987e:	2b00      	cmp	r3, #0
 8009880:	d108      	bne.n	8009894 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	695b      	ldr	r3, [r3, #20]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d104      	bne.n	8009894 <osMessageQueueNew+0x8c>
          mem = 0;
 800988a:	2300      	movs	r3, #0
 800988c:	61bb      	str	r3, [r7, #24]
 800988e:	e001      	b.n	8009894 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009890:	2300      	movs	r3, #0
 8009892:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	2b01      	cmp	r3, #1
 8009898:	d10b      	bne.n	80098b2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	691a      	ldr	r2, [r3, #16]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	2100      	movs	r1, #0
 80098a4:	9100      	str	r1, [sp, #0]
 80098a6:	68b9      	ldr	r1, [r7, #8]
 80098a8:	68f8      	ldr	r0, [r7, #12]
 80098aa:	f000 fa31 	bl	8009d10 <xQueueGenericCreateStatic>
 80098ae:	61f8      	str	r0, [r7, #28]
 80098b0:	e008      	b.n	80098c4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d105      	bne.n	80098c4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80098b8:	2200      	movs	r2, #0
 80098ba:	68b9      	ldr	r1, [r7, #8]
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f000 faa4 	bl	8009e0a <xQueueGenericCreate>
 80098c2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d00c      	beq.n	80098e4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d003      	beq.n	80098d8 <osMessageQueueNew+0xd0>
        name = attr->name;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	617b      	str	r3, [r7, #20]
 80098d6:	e001      	b.n	80098dc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80098d8:	2300      	movs	r3, #0
 80098da:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80098dc:	6979      	ldr	r1, [r7, #20]
 80098de:	69f8      	ldr	r0, [r7, #28]
 80098e0:	f001 f978 	bl	800abd4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80098e4:	69fb      	ldr	r3, [r7, #28]
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3720      	adds	r7, #32
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
	...

080098f0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b088      	sub	sp, #32
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	603b      	str	r3, [r7, #0]
 80098fc:	4613      	mov	r3, r2
 80098fe:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009904:	2300      	movs	r3, #0
 8009906:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009908:	f3ef 8305 	mrs	r3, IPSR
 800990c:	617b      	str	r3, [r7, #20]
  return(result);
 800990e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009910:	2b00      	cmp	r3, #0
 8009912:	d028      	beq.n	8009966 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d005      	beq.n	8009926 <osMessageQueuePut+0x36>
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d002      	beq.n	8009926 <osMessageQueuePut+0x36>
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d003      	beq.n	800992e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009926:	f06f 0303 	mvn.w	r3, #3
 800992a:	61fb      	str	r3, [r7, #28]
 800992c:	e038      	b.n	80099a0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800992e:	2300      	movs	r3, #0
 8009930:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009932:	f107 0210 	add.w	r2, r7, #16
 8009936:	2300      	movs	r3, #0
 8009938:	68b9      	ldr	r1, [r7, #8]
 800993a:	69b8      	ldr	r0, [r7, #24]
 800993c:	f000 fcec 	bl	800a318 <xQueueGenericSendFromISR>
 8009940:	4603      	mov	r3, r0
 8009942:	2b01      	cmp	r3, #1
 8009944:	d003      	beq.n	800994e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009946:	f06f 0302 	mvn.w	r3, #2
 800994a:	61fb      	str	r3, [r7, #28]
 800994c:	e028      	b.n	80099a0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d025      	beq.n	80099a0 <osMessageQueuePut+0xb0>
 8009954:	4b15      	ldr	r3, [pc, #84]	@ (80099ac <osMessageQueuePut+0xbc>)
 8009956:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800995a:	601a      	str	r2, [r3, #0]
 800995c:	f3bf 8f4f 	dsb	sy
 8009960:	f3bf 8f6f 	isb	sy
 8009964:	e01c      	b.n	80099a0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d002      	beq.n	8009972 <osMessageQueuePut+0x82>
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d103      	bne.n	800997a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009972:	f06f 0303 	mvn.w	r3, #3
 8009976:	61fb      	str	r3, [r7, #28]
 8009978:	e012      	b.n	80099a0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800997a:	2300      	movs	r3, #0
 800997c:	683a      	ldr	r2, [r7, #0]
 800997e:	68b9      	ldr	r1, [r7, #8]
 8009980:	69b8      	ldr	r0, [r7, #24]
 8009982:	f000 fbc7 	bl	800a114 <xQueueGenericSend>
 8009986:	4603      	mov	r3, r0
 8009988:	2b01      	cmp	r3, #1
 800998a:	d009      	beq.n	80099a0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d003      	beq.n	800999a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009992:	f06f 0301 	mvn.w	r3, #1
 8009996:	61fb      	str	r3, [r7, #28]
 8009998:	e002      	b.n	80099a0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800999a:	f06f 0302 	mvn.w	r3, #2
 800999e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80099a0:	69fb      	ldr	r3, [r7, #28]
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3720      	adds	r7, #32
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	e000ed04 	.word	0xe000ed04

080099b0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b088      	sub	sp, #32
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	60b9      	str	r1, [r7, #8]
 80099ba:	607a      	str	r2, [r7, #4]
 80099bc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80099c2:	2300      	movs	r3, #0
 80099c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099c6:	f3ef 8305 	mrs	r3, IPSR
 80099ca:	617b      	str	r3, [r7, #20]
  return(result);
 80099cc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d028      	beq.n	8009a24 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80099d2:	69bb      	ldr	r3, [r7, #24]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d005      	beq.n	80099e4 <osMessageQueueGet+0x34>
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d002      	beq.n	80099e4 <osMessageQueueGet+0x34>
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d003      	beq.n	80099ec <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80099e4:	f06f 0303 	mvn.w	r3, #3
 80099e8:	61fb      	str	r3, [r7, #28]
 80099ea:	e037      	b.n	8009a5c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80099ec:	2300      	movs	r3, #0
 80099ee:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80099f0:	f107 0310 	add.w	r3, r7, #16
 80099f4:	461a      	mov	r2, r3
 80099f6:	68b9      	ldr	r1, [r7, #8]
 80099f8:	69b8      	ldr	r0, [r7, #24]
 80099fa:	f000 ff1d 	bl	800a838 <xQueueReceiveFromISR>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d003      	beq.n	8009a0c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009a04:	f06f 0302 	mvn.w	r3, #2
 8009a08:	61fb      	str	r3, [r7, #28]
 8009a0a:	e027      	b.n	8009a5c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d024      	beq.n	8009a5c <osMessageQueueGet+0xac>
 8009a12:	4b15      	ldr	r3, [pc, #84]	@ (8009a68 <osMessageQueueGet+0xb8>)
 8009a14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a18:	601a      	str	r2, [r3, #0]
 8009a1a:	f3bf 8f4f 	dsb	sy
 8009a1e:	f3bf 8f6f 	isb	sy
 8009a22:	e01b      	b.n	8009a5c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009a24:	69bb      	ldr	r3, [r7, #24]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d002      	beq.n	8009a30 <osMessageQueueGet+0x80>
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d103      	bne.n	8009a38 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009a30:	f06f 0303 	mvn.w	r3, #3
 8009a34:	61fb      	str	r3, [r7, #28]
 8009a36:	e011      	b.n	8009a5c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009a38:	683a      	ldr	r2, [r7, #0]
 8009a3a:	68b9      	ldr	r1, [r7, #8]
 8009a3c:	69b8      	ldr	r0, [r7, #24]
 8009a3e:	f000 fd09 	bl	800a454 <xQueueReceive>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d009      	beq.n	8009a5c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d003      	beq.n	8009a56 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009a4e:	f06f 0301 	mvn.w	r3, #1
 8009a52:	61fb      	str	r3, [r7, #28]
 8009a54:	e002      	b.n	8009a5c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009a56:	f06f 0302 	mvn.w	r3, #2
 8009a5a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009a5c:	69fb      	ldr	r3, [r7, #28]
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3720      	adds	r7, #32
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	e000ed04 	.word	0xe000ed04

08009a6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009a6c:	b480      	push	{r7}
 8009a6e:	b085      	sub	sp, #20
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	60b9      	str	r1, [r7, #8]
 8009a76:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	4a07      	ldr	r2, [pc, #28]	@ (8009a98 <vApplicationGetIdleTaskMemory+0x2c>)
 8009a7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	4a06      	ldr	r2, [pc, #24]	@ (8009a9c <vApplicationGetIdleTaskMemory+0x30>)
 8009a82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2280      	movs	r2, #128	@ 0x80
 8009a88:	601a      	str	r2, [r3, #0]
}
 8009a8a:	bf00      	nop
 8009a8c:	3714      	adds	r7, #20
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr
 8009a96:	bf00      	nop
 8009a98:	20000a14 	.word	0x20000a14
 8009a9c:	20000a70 	.word	0x20000a70

08009aa0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009aa0:	b480      	push	{r7}
 8009aa2:	b085      	sub	sp, #20
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	4a07      	ldr	r2, [pc, #28]	@ (8009acc <vApplicationGetTimerTaskMemory+0x2c>)
 8009ab0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	4a06      	ldr	r2, [pc, #24]	@ (8009ad0 <vApplicationGetTimerTaskMemory+0x30>)
 8009ab6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009abe:	601a      	str	r2, [r3, #0]
}
 8009ac0:	bf00      	nop
 8009ac2:	3714      	adds	r7, #20
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr
 8009acc:	20000c70 	.word	0x20000c70
 8009ad0:	20000ccc 	.word	0x20000ccc

08009ad4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f103 0208 	add.w	r2, r3, #8
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009aec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f103 0208 	add.w	r2, r3, #8
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f103 0208 	add.w	r2, r3, #8
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009b08:	bf00      	nop
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009b22:	bf00      	nop
 8009b24:	370c      	adds	r7, #12
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr

08009b2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b2e:	b480      	push	{r7}
 8009b30:	b085      	sub	sp, #20
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
 8009b36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	689a      	ldr	r2, [r3, #8]
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	683a      	ldr	r2, [r7, #0]
 8009b52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	683a      	ldr	r2, [r7, #0]
 8009b58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	1c5a      	adds	r2, r3, #1
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	601a      	str	r2, [r3, #0]
}
 8009b6a:	bf00      	nop
 8009b6c:	3714      	adds	r7, #20
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr

08009b76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b76:	b480      	push	{r7}
 8009b78:	b085      	sub	sp, #20
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
 8009b7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b8c:	d103      	bne.n	8009b96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	691b      	ldr	r3, [r3, #16]
 8009b92:	60fb      	str	r3, [r7, #12]
 8009b94:	e00c      	b.n	8009bb0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	3308      	adds	r3, #8
 8009b9a:	60fb      	str	r3, [r7, #12]
 8009b9c:	e002      	b.n	8009ba4 <vListInsert+0x2e>
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	60fb      	str	r3, [r7, #12]
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	68ba      	ldr	r2, [r7, #8]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d2f6      	bcs.n	8009b9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	685a      	ldr	r2, [r3, #4]
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	683a      	ldr	r2, [r7, #0]
 8009bbe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	68fa      	ldr	r2, [r7, #12]
 8009bc4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	683a      	ldr	r2, [r7, #0]
 8009bca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	1c5a      	adds	r2, r3, #1
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	601a      	str	r2, [r3, #0]
}
 8009bdc:	bf00      	nop
 8009bde:	3714      	adds	r7, #20
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009be8:	b480      	push	{r7}
 8009bea:	b085      	sub	sp, #20
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	6892      	ldr	r2, [r2, #8]
 8009bfe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	6852      	ldr	r2, [r2, #4]
 8009c08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d103      	bne.n	8009c1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	689a      	ldr	r2, [r3, #8]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	1e5a      	subs	r2, r3, #1
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3714      	adds	r7, #20
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr

08009c3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d10b      	bne.n	8009c68 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c54:	f383 8811 	msr	BASEPRI, r3
 8009c58:	f3bf 8f6f 	isb	sy
 8009c5c:	f3bf 8f4f 	dsb	sy
 8009c60:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009c62:	bf00      	nop
 8009c64:	bf00      	nop
 8009c66:	e7fd      	b.n	8009c64 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009c68:	f002 fd3e 	bl	800c6e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c74:	68f9      	ldr	r1, [r7, #12]
 8009c76:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009c78:	fb01 f303 	mul.w	r3, r1, r3
 8009c7c:	441a      	add	r2, r3
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2200      	movs	r2, #0
 8009c86:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c98:	3b01      	subs	r3, #1
 8009c9a:	68f9      	ldr	r1, [r7, #12]
 8009c9c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009c9e:	fb01 f303 	mul.w	r3, r1, r3
 8009ca2:	441a      	add	r2, r3
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	22ff      	movs	r2, #255	@ 0xff
 8009cac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	22ff      	movs	r2, #255	@ 0xff
 8009cb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d114      	bne.n	8009ce8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	691b      	ldr	r3, [r3, #16]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d01a      	beq.n	8009cfc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	3310      	adds	r3, #16
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f001 fcd0 	bl	800b670 <xTaskRemoveFromEventList>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d012      	beq.n	8009cfc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8009d0c <xQueueGenericReset+0xd0>)
 8009cd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cdc:	601a      	str	r2, [r3, #0]
 8009cde:	f3bf 8f4f 	dsb	sy
 8009ce2:	f3bf 8f6f 	isb	sy
 8009ce6:	e009      	b.n	8009cfc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	3310      	adds	r3, #16
 8009cec:	4618      	mov	r0, r3
 8009cee:	f7ff fef1 	bl	8009ad4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	3324      	adds	r3, #36	@ 0x24
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7ff feec 	bl	8009ad4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009cfc:	f002 fd26 	bl	800c74c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009d00:	2301      	movs	r3, #1
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3710      	adds	r7, #16
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	e000ed04 	.word	0xe000ed04

08009d10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b08e      	sub	sp, #56	@ 0x38
 8009d14:	af02      	add	r7, sp, #8
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	607a      	str	r2, [r7, #4]
 8009d1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d10b      	bne.n	8009d3c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d28:	f383 8811 	msr	BASEPRI, r3
 8009d2c:	f3bf 8f6f 	isb	sy
 8009d30:	f3bf 8f4f 	dsb	sy
 8009d34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009d36:	bf00      	nop
 8009d38:	bf00      	nop
 8009d3a:	e7fd      	b.n	8009d38 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d10b      	bne.n	8009d5a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d46:	f383 8811 	msr	BASEPRI, r3
 8009d4a:	f3bf 8f6f 	isb	sy
 8009d4e:	f3bf 8f4f 	dsb	sy
 8009d52:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009d54:	bf00      	nop
 8009d56:	bf00      	nop
 8009d58:	e7fd      	b.n	8009d56 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d002      	beq.n	8009d66 <xQueueGenericCreateStatic+0x56>
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d001      	beq.n	8009d6a <xQueueGenericCreateStatic+0x5a>
 8009d66:	2301      	movs	r3, #1
 8009d68:	e000      	b.n	8009d6c <xQueueGenericCreateStatic+0x5c>
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d10b      	bne.n	8009d88 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d74:	f383 8811 	msr	BASEPRI, r3
 8009d78:	f3bf 8f6f 	isb	sy
 8009d7c:	f3bf 8f4f 	dsb	sy
 8009d80:	623b      	str	r3, [r7, #32]
}
 8009d82:	bf00      	nop
 8009d84:	bf00      	nop
 8009d86:	e7fd      	b.n	8009d84 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d102      	bne.n	8009d94 <xQueueGenericCreateStatic+0x84>
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d101      	bne.n	8009d98 <xQueueGenericCreateStatic+0x88>
 8009d94:	2301      	movs	r3, #1
 8009d96:	e000      	b.n	8009d9a <xQueueGenericCreateStatic+0x8a>
 8009d98:	2300      	movs	r3, #0
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d10b      	bne.n	8009db6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da2:	f383 8811 	msr	BASEPRI, r3
 8009da6:	f3bf 8f6f 	isb	sy
 8009daa:	f3bf 8f4f 	dsb	sy
 8009dae:	61fb      	str	r3, [r7, #28]
}
 8009db0:	bf00      	nop
 8009db2:	bf00      	nop
 8009db4:	e7fd      	b.n	8009db2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009db6:	2350      	movs	r3, #80	@ 0x50
 8009db8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	2b50      	cmp	r3, #80	@ 0x50
 8009dbe:	d00b      	beq.n	8009dd8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dc4:	f383 8811 	msr	BASEPRI, r3
 8009dc8:	f3bf 8f6f 	isb	sy
 8009dcc:	f3bf 8f4f 	dsb	sy
 8009dd0:	61bb      	str	r3, [r7, #24]
}
 8009dd2:	bf00      	nop
 8009dd4:	bf00      	nop
 8009dd6:	e7fd      	b.n	8009dd4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009dd8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d00d      	beq.n	8009e00 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009de6:	2201      	movs	r2, #1
 8009de8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009dec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	4613      	mov	r3, r2
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	68b9      	ldr	r1, [r7, #8]
 8009dfa:	68f8      	ldr	r0, [r7, #12]
 8009dfc:	f000 f840 	bl	8009e80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3730      	adds	r7, #48	@ 0x30
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}

08009e0a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009e0a:	b580      	push	{r7, lr}
 8009e0c:	b08a      	sub	sp, #40	@ 0x28
 8009e0e:	af02      	add	r7, sp, #8
 8009e10:	60f8      	str	r0, [r7, #12]
 8009e12:	60b9      	str	r1, [r7, #8]
 8009e14:	4613      	mov	r3, r2
 8009e16:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d10b      	bne.n	8009e36 <xQueueGenericCreate+0x2c>
	__asm volatile
 8009e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e22:	f383 8811 	msr	BASEPRI, r3
 8009e26:	f3bf 8f6f 	isb	sy
 8009e2a:	f3bf 8f4f 	dsb	sy
 8009e2e:	613b      	str	r3, [r7, #16]
}
 8009e30:	bf00      	nop
 8009e32:	bf00      	nop
 8009e34:	e7fd      	b.n	8009e32 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	68ba      	ldr	r2, [r7, #8]
 8009e3a:	fb02 f303 	mul.w	r3, r2, r3
 8009e3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009e40:	69fb      	ldr	r3, [r7, #28]
 8009e42:	3350      	adds	r3, #80	@ 0x50
 8009e44:	4618      	mov	r0, r3
 8009e46:	f002 fd71 	bl	800c92c <pvPortMalloc>
 8009e4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009e4c:	69bb      	ldr	r3, [r7, #24]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d011      	beq.n	8009e76 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009e52:	69bb      	ldr	r3, [r7, #24]
 8009e54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	3350      	adds	r3, #80	@ 0x50
 8009e5a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009e5c:	69bb      	ldr	r3, [r7, #24]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e64:	79fa      	ldrb	r2, [r7, #7]
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	9300      	str	r3, [sp, #0]
 8009e6a:	4613      	mov	r3, r2
 8009e6c:	697a      	ldr	r2, [r7, #20]
 8009e6e:	68b9      	ldr	r1, [r7, #8]
 8009e70:	68f8      	ldr	r0, [r7, #12]
 8009e72:	f000 f805 	bl	8009e80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e76:	69bb      	ldr	r3, [r7, #24]
	}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3720      	adds	r7, #32
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	607a      	str	r2, [r7, #4]
 8009e8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d103      	bne.n	8009e9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009e94:	69bb      	ldr	r3, [r7, #24]
 8009e96:	69ba      	ldr	r2, [r7, #24]
 8009e98:	601a      	str	r2, [r3, #0]
 8009e9a:	e002      	b.n	8009ea2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009e9c:	69bb      	ldr	r3, [r7, #24]
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	68fa      	ldr	r2, [r7, #12]
 8009ea6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009ea8:	69bb      	ldr	r3, [r7, #24]
 8009eaa:	68ba      	ldr	r2, [r7, #8]
 8009eac:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009eae:	2101      	movs	r1, #1
 8009eb0:	69b8      	ldr	r0, [r7, #24]
 8009eb2:	f7ff fec3 	bl	8009c3c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	78fa      	ldrb	r2, [r7, #3]
 8009eba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009ebe:	bf00      	nop
 8009ec0:	3710      	adds	r7, #16
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b082      	sub	sp, #8
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d00e      	beq.n	8009ef2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	2200      	movs	r2, #0
 8009eea:	2100      	movs	r1, #0
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 f911 	bl	800a114 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009ef2:	bf00      	nop
 8009ef4:	3708      	adds	r7, #8
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b086      	sub	sp, #24
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	4603      	mov	r3, r0
 8009f02:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009f04:	2301      	movs	r3, #1
 8009f06:	617b      	str	r3, [r7, #20]
 8009f08:	2300      	movs	r3, #0
 8009f0a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009f0c:	79fb      	ldrb	r3, [r7, #7]
 8009f0e:	461a      	mov	r2, r3
 8009f10:	6939      	ldr	r1, [r7, #16]
 8009f12:	6978      	ldr	r0, [r7, #20]
 8009f14:	f7ff ff79 	bl	8009e0a <xQueueGenericCreate>
 8009f18:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009f1a:	68f8      	ldr	r0, [r7, #12]
 8009f1c:	f7ff ffd3 	bl	8009ec6 <prvInitialiseMutex>

		return xNewQueue;
 8009f20:	68fb      	ldr	r3, [r7, #12]
	}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3718      	adds	r7, #24
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b088      	sub	sp, #32
 8009f2e:	af02      	add	r7, sp, #8
 8009f30:	4603      	mov	r3, r0
 8009f32:	6039      	str	r1, [r7, #0]
 8009f34:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009f36:	2301      	movs	r3, #1
 8009f38:	617b      	str	r3, [r7, #20]
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009f3e:	79fb      	ldrb	r3, [r7, #7]
 8009f40:	9300      	str	r3, [sp, #0]
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	2200      	movs	r2, #0
 8009f46:	6939      	ldr	r1, [r7, #16]
 8009f48:	6978      	ldr	r0, [r7, #20]
 8009f4a:	f7ff fee1 	bl	8009d10 <xQueueGenericCreateStatic>
 8009f4e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009f50:	68f8      	ldr	r0, [r7, #12]
 8009f52:	f7ff ffb8 	bl	8009ec6 <prvInitialiseMutex>

		return xNewQueue;
 8009f56:	68fb      	ldr	r3, [r7, #12]
	}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3718      	adds	r7, #24
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009f60:	b590      	push	{r4, r7, lr}
 8009f62:	b087      	sub	sp, #28
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d10b      	bne.n	8009f8a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8009f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f76:	f383 8811 	msr	BASEPRI, r3
 8009f7a:	f3bf 8f6f 	isb	sy
 8009f7e:	f3bf 8f4f 	dsb	sy
 8009f82:	60fb      	str	r3, [r7, #12]
}
 8009f84:	bf00      	nop
 8009f86:	bf00      	nop
 8009f88:	e7fd      	b.n	8009f86 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	689c      	ldr	r4, [r3, #8]
 8009f8e:	f001 fd2f 	bl	800b9f0 <xTaskGetCurrentTaskHandle>
 8009f92:	4603      	mov	r3, r0
 8009f94:	429c      	cmp	r4, r3
 8009f96:	d111      	bne.n	8009fbc <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	1e5a      	subs	r2, r3, #1
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d105      	bne.n	8009fb6 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009faa:	2300      	movs	r3, #0
 8009fac:	2200      	movs	r2, #0
 8009fae:	2100      	movs	r1, #0
 8009fb0:	6938      	ldr	r0, [r7, #16]
 8009fb2:	f000 f8af 	bl	800a114 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	617b      	str	r3, [r7, #20]
 8009fba:	e001      	b.n	8009fc0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009fc0:	697b      	ldr	r3, [r7, #20]
	}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	371c      	adds	r7, #28
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd90      	pop	{r4, r7, pc}

08009fca <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009fca:	b590      	push	{r4, r7, lr}
 8009fcc:	b087      	sub	sp, #28
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
 8009fd2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10b      	bne.n	8009ff6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8009fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fe2:	f383 8811 	msr	BASEPRI, r3
 8009fe6:	f3bf 8f6f 	isb	sy
 8009fea:	f3bf 8f4f 	dsb	sy
 8009fee:	60fb      	str	r3, [r7, #12]
}
 8009ff0:	bf00      	nop
 8009ff2:	bf00      	nop
 8009ff4:	e7fd      	b.n	8009ff2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	689c      	ldr	r4, [r3, #8]
 8009ffa:	f001 fcf9 	bl	800b9f0 <xTaskGetCurrentTaskHandle>
 8009ffe:	4603      	mov	r3, r0
 800a000:	429c      	cmp	r4, r3
 800a002:	d107      	bne.n	800a014 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	68db      	ldr	r3, [r3, #12]
 800a008:	1c5a      	adds	r2, r3, #1
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a00e:	2301      	movs	r3, #1
 800a010:	617b      	str	r3, [r7, #20]
 800a012:	e00c      	b.n	800a02e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a014:	6839      	ldr	r1, [r7, #0]
 800a016:	6938      	ldr	r0, [r7, #16]
 800a018:	f000 fafe 	bl	800a618 <xQueueSemaphoreTake>
 800a01c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d004      	beq.n	800a02e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	1c5a      	adds	r2, r3, #1
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a02e:	697b      	ldr	r3, [r7, #20]
	}
 800a030:	4618      	mov	r0, r3
 800a032:	371c      	adds	r7, #28
 800a034:	46bd      	mov	sp, r7
 800a036:	bd90      	pop	{r4, r7, pc}

0800a038 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b08a      	sub	sp, #40	@ 0x28
 800a03c:	af02      	add	r7, sp, #8
 800a03e:	60f8      	str	r0, [r7, #12]
 800a040:	60b9      	str	r1, [r7, #8]
 800a042:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d10b      	bne.n	800a062 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800a04a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a04e:	f383 8811 	msr	BASEPRI, r3
 800a052:	f3bf 8f6f 	isb	sy
 800a056:	f3bf 8f4f 	dsb	sy
 800a05a:	61bb      	str	r3, [r7, #24]
}
 800a05c:	bf00      	nop
 800a05e:	bf00      	nop
 800a060:	e7fd      	b.n	800a05e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a062:	68ba      	ldr	r2, [r7, #8]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	429a      	cmp	r2, r3
 800a068:	d90b      	bls.n	800a082 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800a06a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a06e:	f383 8811 	msr	BASEPRI, r3
 800a072:	f3bf 8f6f 	isb	sy
 800a076:	f3bf 8f4f 	dsb	sy
 800a07a:	617b      	str	r3, [r7, #20]
}
 800a07c:	bf00      	nop
 800a07e:	bf00      	nop
 800a080:	e7fd      	b.n	800a07e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a082:	2302      	movs	r3, #2
 800a084:	9300      	str	r3, [sp, #0]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	2100      	movs	r1, #0
 800a08c:	68f8      	ldr	r0, [r7, #12]
 800a08e:	f7ff fe3f 	bl	8009d10 <xQueueGenericCreateStatic>
 800a092:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d002      	beq.n	800a0a0 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	68ba      	ldr	r2, [r7, #8]
 800a09e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a0a0:	69fb      	ldr	r3, [r7, #28]
	}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3720      	adds	r7, #32
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b086      	sub	sp, #24
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
 800a0b2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d10b      	bne.n	800a0d2 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800a0ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0be:	f383 8811 	msr	BASEPRI, r3
 800a0c2:	f3bf 8f6f 	isb	sy
 800a0c6:	f3bf 8f4f 	dsb	sy
 800a0ca:	613b      	str	r3, [r7, #16]
}
 800a0cc:	bf00      	nop
 800a0ce:	bf00      	nop
 800a0d0:	e7fd      	b.n	800a0ce <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a0d2:	683a      	ldr	r2, [r7, #0]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d90b      	bls.n	800a0f2 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800a0da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0de:	f383 8811 	msr	BASEPRI, r3
 800a0e2:	f3bf 8f6f 	isb	sy
 800a0e6:	f3bf 8f4f 	dsb	sy
 800a0ea:	60fb      	str	r3, [r7, #12]
}
 800a0ec:	bf00      	nop
 800a0ee:	bf00      	nop
 800a0f0:	e7fd      	b.n	800a0ee <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a0f2:	2202      	movs	r2, #2
 800a0f4:	2100      	movs	r1, #0
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f7ff fe87 	bl	8009e0a <xQueueGenericCreate>
 800a0fc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d002      	beq.n	800a10a <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	683a      	ldr	r2, [r7, #0]
 800a108:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a10a:	697b      	ldr	r3, [r7, #20]
	}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3718      	adds	r7, #24
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b08e      	sub	sp, #56	@ 0x38
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	607a      	str	r2, [r7, #4]
 800a120:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a122:	2300      	movs	r3, #0
 800a124:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a12a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d10b      	bne.n	800a148 <xQueueGenericSend+0x34>
	__asm volatile
 800a130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a142:	bf00      	nop
 800a144:	bf00      	nop
 800a146:	e7fd      	b.n	800a144 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d103      	bne.n	800a156 <xQueueGenericSend+0x42>
 800a14e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a152:	2b00      	cmp	r3, #0
 800a154:	d101      	bne.n	800a15a <xQueueGenericSend+0x46>
 800a156:	2301      	movs	r3, #1
 800a158:	e000      	b.n	800a15c <xQueueGenericSend+0x48>
 800a15a:	2300      	movs	r3, #0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d10b      	bne.n	800a178 <xQueueGenericSend+0x64>
	__asm volatile
 800a160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a164:	f383 8811 	msr	BASEPRI, r3
 800a168:	f3bf 8f6f 	isb	sy
 800a16c:	f3bf 8f4f 	dsb	sy
 800a170:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a172:	bf00      	nop
 800a174:	bf00      	nop
 800a176:	e7fd      	b.n	800a174 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	2b02      	cmp	r3, #2
 800a17c:	d103      	bne.n	800a186 <xQueueGenericSend+0x72>
 800a17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a182:	2b01      	cmp	r3, #1
 800a184:	d101      	bne.n	800a18a <xQueueGenericSend+0x76>
 800a186:	2301      	movs	r3, #1
 800a188:	e000      	b.n	800a18c <xQueueGenericSend+0x78>
 800a18a:	2300      	movs	r3, #0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d10b      	bne.n	800a1a8 <xQueueGenericSend+0x94>
	__asm volatile
 800a190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a194:	f383 8811 	msr	BASEPRI, r3
 800a198:	f3bf 8f6f 	isb	sy
 800a19c:	f3bf 8f4f 	dsb	sy
 800a1a0:	623b      	str	r3, [r7, #32]
}
 800a1a2:	bf00      	nop
 800a1a4:	bf00      	nop
 800a1a6:	e7fd      	b.n	800a1a4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a1a8:	f001 fc32 	bl	800ba10 <xTaskGetSchedulerState>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d102      	bne.n	800a1b8 <xQueueGenericSend+0xa4>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d101      	bne.n	800a1bc <xQueueGenericSend+0xa8>
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	e000      	b.n	800a1be <xQueueGenericSend+0xaa>
 800a1bc:	2300      	movs	r3, #0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d10b      	bne.n	800a1da <xQueueGenericSend+0xc6>
	__asm volatile
 800a1c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1c6:	f383 8811 	msr	BASEPRI, r3
 800a1ca:	f3bf 8f6f 	isb	sy
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	61fb      	str	r3, [r7, #28]
}
 800a1d4:	bf00      	nop
 800a1d6:	bf00      	nop
 800a1d8:	e7fd      	b.n	800a1d6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a1da:	f002 fa85 	bl	800c6e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d302      	bcc.n	800a1f0 <xQueueGenericSend+0xdc>
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	2b02      	cmp	r3, #2
 800a1ee:	d129      	bne.n	800a244 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a1f0:	683a      	ldr	r2, [r7, #0]
 800a1f2:	68b9      	ldr	r1, [r7, #8]
 800a1f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a1f6:	f000 fbdd 	bl	800a9b4 <prvCopyDataToQueue>
 800a1fa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a200:	2b00      	cmp	r3, #0
 800a202:	d010      	beq.n	800a226 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a206:	3324      	adds	r3, #36	@ 0x24
 800a208:	4618      	mov	r0, r3
 800a20a:	f001 fa31 	bl	800b670 <xTaskRemoveFromEventList>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d013      	beq.n	800a23c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a214:	4b3f      	ldr	r3, [pc, #252]	@ (800a314 <xQueueGenericSend+0x200>)
 800a216:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a21a:	601a      	str	r2, [r3, #0]
 800a21c:	f3bf 8f4f 	dsb	sy
 800a220:	f3bf 8f6f 	isb	sy
 800a224:	e00a      	b.n	800a23c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d007      	beq.n	800a23c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a22c:	4b39      	ldr	r3, [pc, #228]	@ (800a314 <xQueueGenericSend+0x200>)
 800a22e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a232:	601a      	str	r2, [r3, #0]
 800a234:	f3bf 8f4f 	dsb	sy
 800a238:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a23c:	f002 fa86 	bl	800c74c <vPortExitCritical>
				return pdPASS;
 800a240:	2301      	movs	r3, #1
 800a242:	e063      	b.n	800a30c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d103      	bne.n	800a252 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a24a:	f002 fa7f 	bl	800c74c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a24e:	2300      	movs	r3, #0
 800a250:	e05c      	b.n	800a30c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a254:	2b00      	cmp	r3, #0
 800a256:	d106      	bne.n	800a266 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a258:	f107 0314 	add.w	r3, r7, #20
 800a25c:	4618      	mov	r0, r3
 800a25e:	f001 fa6b 	bl	800b738 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a262:	2301      	movs	r3, #1
 800a264:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a266:	f002 fa71 	bl	800c74c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a26a:	f000 ffc9 	bl	800b200 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a26e:	f002 fa3b 	bl	800c6e8 <vPortEnterCritical>
 800a272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a274:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a278:	b25b      	sxtb	r3, r3
 800a27a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a27e:	d103      	bne.n	800a288 <xQueueGenericSend+0x174>
 800a280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a282:	2200      	movs	r2, #0
 800a284:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a28a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a28e:	b25b      	sxtb	r3, r3
 800a290:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a294:	d103      	bne.n	800a29e <xQueueGenericSend+0x18a>
 800a296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a298:	2200      	movs	r2, #0
 800a29a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a29e:	f002 fa55 	bl	800c74c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2a2:	1d3a      	adds	r2, r7, #4
 800a2a4:	f107 0314 	add.w	r3, r7, #20
 800a2a8:	4611      	mov	r1, r2
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f001 fa5a 	bl	800b764 <xTaskCheckForTimeOut>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d124      	bne.n	800a300 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a2b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2b8:	f000 fc74 	bl	800aba4 <prvIsQueueFull>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d018      	beq.n	800a2f4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c4:	3310      	adds	r3, #16
 800a2c6:	687a      	ldr	r2, [r7, #4]
 800a2c8:	4611      	mov	r1, r2
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f001 f97e 	bl	800b5cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a2d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2d2:	f000 fbff 	bl	800aad4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a2d6:	f000 ffa1 	bl	800b21c <xTaskResumeAll>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	f47f af7c 	bne.w	800a1da <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a2e2:	4b0c      	ldr	r3, [pc, #48]	@ (800a314 <xQueueGenericSend+0x200>)
 800a2e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2e8:	601a      	str	r2, [r3, #0]
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	f3bf 8f6f 	isb	sy
 800a2f2:	e772      	b.n	800a1da <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a2f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2f6:	f000 fbed 	bl	800aad4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2fa:	f000 ff8f 	bl	800b21c <xTaskResumeAll>
 800a2fe:	e76c      	b.n	800a1da <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a300:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a302:	f000 fbe7 	bl	800aad4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a306:	f000 ff89 	bl	800b21c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a30a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3738      	adds	r7, #56	@ 0x38
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	e000ed04 	.word	0xe000ed04

0800a318 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b090      	sub	sp, #64	@ 0x40
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	607a      	str	r2, [r7, #4]
 800a324:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a32a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d10b      	bne.n	800a348 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a334:	f383 8811 	msr	BASEPRI, r3
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a342:	bf00      	nop
 800a344:	bf00      	nop
 800a346:	e7fd      	b.n	800a344 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d103      	bne.n	800a356 <xQueueGenericSendFromISR+0x3e>
 800a34e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a352:	2b00      	cmp	r3, #0
 800a354:	d101      	bne.n	800a35a <xQueueGenericSendFromISR+0x42>
 800a356:	2301      	movs	r3, #1
 800a358:	e000      	b.n	800a35c <xQueueGenericSendFromISR+0x44>
 800a35a:	2300      	movs	r3, #0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d10b      	bne.n	800a378 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a364:	f383 8811 	msr	BASEPRI, r3
 800a368:	f3bf 8f6f 	isb	sy
 800a36c:	f3bf 8f4f 	dsb	sy
 800a370:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a372:	bf00      	nop
 800a374:	bf00      	nop
 800a376:	e7fd      	b.n	800a374 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d103      	bne.n	800a386 <xQueueGenericSendFromISR+0x6e>
 800a37e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a382:	2b01      	cmp	r3, #1
 800a384:	d101      	bne.n	800a38a <xQueueGenericSendFromISR+0x72>
 800a386:	2301      	movs	r3, #1
 800a388:	e000      	b.n	800a38c <xQueueGenericSendFromISR+0x74>
 800a38a:	2300      	movs	r3, #0
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d10b      	bne.n	800a3a8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a394:	f383 8811 	msr	BASEPRI, r3
 800a398:	f3bf 8f6f 	isb	sy
 800a39c:	f3bf 8f4f 	dsb	sy
 800a3a0:	623b      	str	r3, [r7, #32]
}
 800a3a2:	bf00      	nop
 800a3a4:	bf00      	nop
 800a3a6:	e7fd      	b.n	800a3a4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a3a8:	f002 fa7e 	bl	800c8a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a3ac:	f3ef 8211 	mrs	r2, BASEPRI
 800a3b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3b4:	f383 8811 	msr	BASEPRI, r3
 800a3b8:	f3bf 8f6f 	isb	sy
 800a3bc:	f3bf 8f4f 	dsb	sy
 800a3c0:	61fa      	str	r2, [r7, #28]
 800a3c2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a3c4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a3c6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d302      	bcc.n	800a3da <xQueueGenericSendFromISR+0xc2>
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	2b02      	cmp	r3, #2
 800a3d8:	d12f      	bne.n	800a43a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a3da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3ea:	683a      	ldr	r2, [r7, #0]
 800a3ec:	68b9      	ldr	r1, [r7, #8]
 800a3ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a3f0:	f000 fae0 	bl	800a9b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a3f4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a3f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a3fc:	d112      	bne.n	800a424 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a402:	2b00      	cmp	r3, #0
 800a404:	d016      	beq.n	800a434 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a408:	3324      	adds	r3, #36	@ 0x24
 800a40a:	4618      	mov	r0, r3
 800a40c:	f001 f930 	bl	800b670 <xTaskRemoveFromEventList>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d00e      	beq.n	800a434 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d00b      	beq.n	800a434 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2201      	movs	r2, #1
 800a420:	601a      	str	r2, [r3, #0]
 800a422:	e007      	b.n	800a434 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a424:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a428:	3301      	adds	r3, #1
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	b25a      	sxtb	r2, r3
 800a42e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a430:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a434:	2301      	movs	r3, #1
 800a436:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a438:	e001      	b.n	800a43e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a43a:	2300      	movs	r3, #0
 800a43c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a43e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a440:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a448:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a44a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3740      	adds	r7, #64	@ 0x40
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b08c      	sub	sp, #48	@ 0x30
 800a458:	af00      	add	r7, sp, #0
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a460:	2300      	movs	r3, #0
 800a462:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d10b      	bne.n	800a486 <xQueueReceive+0x32>
	__asm volatile
 800a46e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a472:	f383 8811 	msr	BASEPRI, r3
 800a476:	f3bf 8f6f 	isb	sy
 800a47a:	f3bf 8f4f 	dsb	sy
 800a47e:	623b      	str	r3, [r7, #32]
}
 800a480:	bf00      	nop
 800a482:	bf00      	nop
 800a484:	e7fd      	b.n	800a482 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d103      	bne.n	800a494 <xQueueReceive+0x40>
 800a48c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a48e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a490:	2b00      	cmp	r3, #0
 800a492:	d101      	bne.n	800a498 <xQueueReceive+0x44>
 800a494:	2301      	movs	r3, #1
 800a496:	e000      	b.n	800a49a <xQueueReceive+0x46>
 800a498:	2300      	movs	r3, #0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d10b      	bne.n	800a4b6 <xQueueReceive+0x62>
	__asm volatile
 800a49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a2:	f383 8811 	msr	BASEPRI, r3
 800a4a6:	f3bf 8f6f 	isb	sy
 800a4aa:	f3bf 8f4f 	dsb	sy
 800a4ae:	61fb      	str	r3, [r7, #28]
}
 800a4b0:	bf00      	nop
 800a4b2:	bf00      	nop
 800a4b4:	e7fd      	b.n	800a4b2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4b6:	f001 faab 	bl	800ba10 <xTaskGetSchedulerState>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d102      	bne.n	800a4c6 <xQueueReceive+0x72>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d101      	bne.n	800a4ca <xQueueReceive+0x76>
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e000      	b.n	800a4cc <xQueueReceive+0x78>
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d10b      	bne.n	800a4e8 <xQueueReceive+0x94>
	__asm volatile
 800a4d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4d4:	f383 8811 	msr	BASEPRI, r3
 800a4d8:	f3bf 8f6f 	isb	sy
 800a4dc:	f3bf 8f4f 	dsb	sy
 800a4e0:	61bb      	str	r3, [r7, #24]
}
 800a4e2:	bf00      	nop
 800a4e4:	bf00      	nop
 800a4e6:	e7fd      	b.n	800a4e4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4e8:	f002 f8fe 	bl	800c6e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4f0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d01f      	beq.n	800a538 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a4f8:	68b9      	ldr	r1, [r7, #8]
 800a4fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a4fc:	f000 fac4 	bl	800aa88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a502:	1e5a      	subs	r2, r3, #1
 800a504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a506:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a50a:	691b      	ldr	r3, [r3, #16]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d00f      	beq.n	800a530 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a512:	3310      	adds	r3, #16
 800a514:	4618      	mov	r0, r3
 800a516:	f001 f8ab 	bl	800b670 <xTaskRemoveFromEventList>
 800a51a:	4603      	mov	r3, r0
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d007      	beq.n	800a530 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a520:	4b3c      	ldr	r3, [pc, #240]	@ (800a614 <xQueueReceive+0x1c0>)
 800a522:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a526:	601a      	str	r2, [r3, #0]
 800a528:	f3bf 8f4f 	dsb	sy
 800a52c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a530:	f002 f90c 	bl	800c74c <vPortExitCritical>
				return pdPASS;
 800a534:	2301      	movs	r3, #1
 800a536:	e069      	b.n	800a60c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d103      	bne.n	800a546 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a53e:	f002 f905 	bl	800c74c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a542:	2300      	movs	r3, #0
 800a544:	e062      	b.n	800a60c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d106      	bne.n	800a55a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a54c:	f107 0310 	add.w	r3, r7, #16
 800a550:	4618      	mov	r0, r3
 800a552:	f001 f8f1 	bl	800b738 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a556:	2301      	movs	r3, #1
 800a558:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a55a:	f002 f8f7 	bl	800c74c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a55e:	f000 fe4f 	bl	800b200 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a562:	f002 f8c1 	bl	800c6e8 <vPortEnterCritical>
 800a566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a568:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a56c:	b25b      	sxtb	r3, r3
 800a56e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a572:	d103      	bne.n	800a57c <xQueueReceive+0x128>
 800a574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a576:	2200      	movs	r2, #0
 800a578:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a57c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a57e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a582:	b25b      	sxtb	r3, r3
 800a584:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a588:	d103      	bne.n	800a592 <xQueueReceive+0x13e>
 800a58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a58c:	2200      	movs	r2, #0
 800a58e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a592:	f002 f8db 	bl	800c74c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a596:	1d3a      	adds	r2, r7, #4
 800a598:	f107 0310 	add.w	r3, r7, #16
 800a59c:	4611      	mov	r1, r2
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f001 f8e0 	bl	800b764 <xTaskCheckForTimeOut>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d123      	bne.n	800a5f2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5ac:	f000 fae4 	bl	800ab78 <prvIsQueueEmpty>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d017      	beq.n	800a5e6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a5b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b8:	3324      	adds	r3, #36	@ 0x24
 800a5ba:	687a      	ldr	r2, [r7, #4]
 800a5bc:	4611      	mov	r1, r2
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f001 f804 	bl	800b5cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a5c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5c6:	f000 fa85 	bl	800aad4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a5ca:	f000 fe27 	bl	800b21c <xTaskResumeAll>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d189      	bne.n	800a4e8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a5d4:	4b0f      	ldr	r3, [pc, #60]	@ (800a614 <xQueueReceive+0x1c0>)
 800a5d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5da:	601a      	str	r2, [r3, #0]
 800a5dc:	f3bf 8f4f 	dsb	sy
 800a5e0:	f3bf 8f6f 	isb	sy
 800a5e4:	e780      	b.n	800a4e8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a5e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5e8:	f000 fa74 	bl	800aad4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a5ec:	f000 fe16 	bl	800b21c <xTaskResumeAll>
 800a5f0:	e77a      	b.n	800a4e8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a5f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5f4:	f000 fa6e 	bl	800aad4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a5f8:	f000 fe10 	bl	800b21c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5fe:	f000 fabb 	bl	800ab78 <prvIsQueueEmpty>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	f43f af6f 	beq.w	800a4e8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a60a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3730      	adds	r7, #48	@ 0x30
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	e000ed04 	.word	0xe000ed04

0800a618 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b08e      	sub	sp, #56	@ 0x38
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a622:	2300      	movs	r3, #0
 800a624:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a62a:	2300      	movs	r3, #0
 800a62c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a62e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a630:	2b00      	cmp	r3, #0
 800a632:	d10b      	bne.n	800a64c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a638:	f383 8811 	msr	BASEPRI, r3
 800a63c:	f3bf 8f6f 	isb	sy
 800a640:	f3bf 8f4f 	dsb	sy
 800a644:	623b      	str	r3, [r7, #32]
}
 800a646:	bf00      	nop
 800a648:	bf00      	nop
 800a64a:	e7fd      	b.n	800a648 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a64c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a64e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a650:	2b00      	cmp	r3, #0
 800a652:	d00b      	beq.n	800a66c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a658:	f383 8811 	msr	BASEPRI, r3
 800a65c:	f3bf 8f6f 	isb	sy
 800a660:	f3bf 8f4f 	dsb	sy
 800a664:	61fb      	str	r3, [r7, #28]
}
 800a666:	bf00      	nop
 800a668:	bf00      	nop
 800a66a:	e7fd      	b.n	800a668 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a66c:	f001 f9d0 	bl	800ba10 <xTaskGetSchedulerState>
 800a670:	4603      	mov	r3, r0
 800a672:	2b00      	cmp	r3, #0
 800a674:	d102      	bne.n	800a67c <xQueueSemaphoreTake+0x64>
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d101      	bne.n	800a680 <xQueueSemaphoreTake+0x68>
 800a67c:	2301      	movs	r3, #1
 800a67e:	e000      	b.n	800a682 <xQueueSemaphoreTake+0x6a>
 800a680:	2300      	movs	r3, #0
 800a682:	2b00      	cmp	r3, #0
 800a684:	d10b      	bne.n	800a69e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a68a:	f383 8811 	msr	BASEPRI, r3
 800a68e:	f3bf 8f6f 	isb	sy
 800a692:	f3bf 8f4f 	dsb	sy
 800a696:	61bb      	str	r3, [r7, #24]
}
 800a698:	bf00      	nop
 800a69a:	bf00      	nop
 800a69c:	e7fd      	b.n	800a69a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a69e:	f002 f823 	bl	800c6e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a6a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6a6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a6a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d024      	beq.n	800a6f8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a6ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b0:	1e5a      	subs	r2, r3, #1
 800a6b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6b4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a6b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d104      	bne.n	800a6c8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a6be:	f001 fb21 	bl	800bd04 <pvTaskIncrementMutexHeldCount>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6c6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6ca:	691b      	ldr	r3, [r3, #16]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d00f      	beq.n	800a6f0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6d2:	3310      	adds	r3, #16
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f000 ffcb 	bl	800b670 <xTaskRemoveFromEventList>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d007      	beq.n	800a6f0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a6e0:	4b54      	ldr	r3, [pc, #336]	@ (800a834 <xQueueSemaphoreTake+0x21c>)
 800a6e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6e6:	601a      	str	r2, [r3, #0]
 800a6e8:	f3bf 8f4f 	dsb	sy
 800a6ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a6f0:	f002 f82c 	bl	800c74c <vPortExitCritical>
				return pdPASS;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	e098      	b.n	800a82a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d112      	bne.n	800a724 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a700:	2b00      	cmp	r3, #0
 800a702:	d00b      	beq.n	800a71c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a708:	f383 8811 	msr	BASEPRI, r3
 800a70c:	f3bf 8f6f 	isb	sy
 800a710:	f3bf 8f4f 	dsb	sy
 800a714:	617b      	str	r3, [r7, #20]
}
 800a716:	bf00      	nop
 800a718:	bf00      	nop
 800a71a:	e7fd      	b.n	800a718 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a71c:	f002 f816 	bl	800c74c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a720:	2300      	movs	r3, #0
 800a722:	e082      	b.n	800a82a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a726:	2b00      	cmp	r3, #0
 800a728:	d106      	bne.n	800a738 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a72a:	f107 030c 	add.w	r3, r7, #12
 800a72e:	4618      	mov	r0, r3
 800a730:	f001 f802 	bl	800b738 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a734:	2301      	movs	r3, #1
 800a736:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a738:	f002 f808 	bl	800c74c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a73c:	f000 fd60 	bl	800b200 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a740:	f001 ffd2 	bl	800c6e8 <vPortEnterCritical>
 800a744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a746:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a74a:	b25b      	sxtb	r3, r3
 800a74c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a750:	d103      	bne.n	800a75a <xQueueSemaphoreTake+0x142>
 800a752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a754:	2200      	movs	r2, #0
 800a756:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a75a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a75c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a760:	b25b      	sxtb	r3, r3
 800a762:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a766:	d103      	bne.n	800a770 <xQueueSemaphoreTake+0x158>
 800a768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a76a:	2200      	movs	r2, #0
 800a76c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a770:	f001 ffec 	bl	800c74c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a774:	463a      	mov	r2, r7
 800a776:	f107 030c 	add.w	r3, r7, #12
 800a77a:	4611      	mov	r1, r2
 800a77c:	4618      	mov	r0, r3
 800a77e:	f000 fff1 	bl	800b764 <xTaskCheckForTimeOut>
 800a782:	4603      	mov	r3, r0
 800a784:	2b00      	cmp	r3, #0
 800a786:	d132      	bne.n	800a7ee <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a788:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a78a:	f000 f9f5 	bl	800ab78 <prvIsQueueEmpty>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d026      	beq.n	800a7e2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d109      	bne.n	800a7b0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800a79c:	f001 ffa4 	bl	800c6e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a7a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f001 f951 	bl	800ba4c <xTaskPriorityInherit>
 800a7aa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800a7ac:	f001 ffce 	bl	800c74c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a7b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7b2:	3324      	adds	r3, #36	@ 0x24
 800a7b4:	683a      	ldr	r2, [r7, #0]
 800a7b6:	4611      	mov	r1, r2
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f000 ff07 	bl	800b5cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a7be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a7c0:	f000 f988 	bl	800aad4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a7c4:	f000 fd2a 	bl	800b21c <xTaskResumeAll>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	f47f af67 	bne.w	800a69e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800a7d0:	4b18      	ldr	r3, [pc, #96]	@ (800a834 <xQueueSemaphoreTake+0x21c>)
 800a7d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7d6:	601a      	str	r2, [r3, #0]
 800a7d8:	f3bf 8f4f 	dsb	sy
 800a7dc:	f3bf 8f6f 	isb	sy
 800a7e0:	e75d      	b.n	800a69e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a7e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a7e4:	f000 f976 	bl	800aad4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7e8:	f000 fd18 	bl	800b21c <xTaskResumeAll>
 800a7ec:	e757      	b.n	800a69e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a7ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a7f0:	f000 f970 	bl	800aad4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7f4:	f000 fd12 	bl	800b21c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a7fa:	f000 f9bd 	bl	800ab78 <prvIsQueueEmpty>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	f43f af4c 	beq.w	800a69e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d00d      	beq.n	800a828 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800a80c:	f001 ff6c 	bl	800c6e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a810:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a812:	f000 f8b7 	bl	800a984 <prvGetDisinheritPriorityAfterTimeout>
 800a816:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a81a:	689b      	ldr	r3, [r3, #8]
 800a81c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a81e:	4618      	mov	r0, r3
 800a820:	f001 f9ec 	bl	800bbfc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a824:	f001 ff92 	bl	800c74c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a828:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3738      	adds	r7, #56	@ 0x38
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	e000ed04 	.word	0xe000ed04

0800a838 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b08e      	sub	sp, #56	@ 0x38
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d10b      	bne.n	800a866 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a84e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a852:	f383 8811 	msr	BASEPRI, r3
 800a856:	f3bf 8f6f 	isb	sy
 800a85a:	f3bf 8f4f 	dsb	sy
 800a85e:	623b      	str	r3, [r7, #32]
}
 800a860:	bf00      	nop
 800a862:	bf00      	nop
 800a864:	e7fd      	b.n	800a862 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d103      	bne.n	800a874 <xQueueReceiveFromISR+0x3c>
 800a86c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a86e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a870:	2b00      	cmp	r3, #0
 800a872:	d101      	bne.n	800a878 <xQueueReceiveFromISR+0x40>
 800a874:	2301      	movs	r3, #1
 800a876:	e000      	b.n	800a87a <xQueueReceiveFromISR+0x42>
 800a878:	2300      	movs	r3, #0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d10b      	bne.n	800a896 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800a87e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a882:	f383 8811 	msr	BASEPRI, r3
 800a886:	f3bf 8f6f 	isb	sy
 800a88a:	f3bf 8f4f 	dsb	sy
 800a88e:	61fb      	str	r3, [r7, #28]
}
 800a890:	bf00      	nop
 800a892:	bf00      	nop
 800a894:	e7fd      	b.n	800a892 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a896:	f002 f807 	bl	800c8a8 <vPortValidateInterruptPriority>
	__asm volatile
 800a89a:	f3ef 8211 	mrs	r2, BASEPRI
 800a89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8a2:	f383 8811 	msr	BASEPRI, r3
 800a8a6:	f3bf 8f6f 	isb	sy
 800a8aa:	f3bf 8f4f 	dsb	sy
 800a8ae:	61ba      	str	r2, [r7, #24]
 800a8b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a8b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a8b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8ba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a8bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d02f      	beq.n	800a922 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a8c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a8cc:	68b9      	ldr	r1, [r7, #8]
 800a8ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a8d0:	f000 f8da 	bl	800aa88 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a8d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8d6:	1e5a      	subs	r2, r3, #1
 800a8d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8da:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a8dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a8e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a8e4:	d112      	bne.n	800a90c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8e8:	691b      	ldr	r3, [r3, #16]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d016      	beq.n	800a91c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8f0:	3310      	adds	r3, #16
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f000 febc 	bl	800b670 <xTaskRemoveFromEventList>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00e      	beq.n	800a91c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d00b      	beq.n	800a91c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2201      	movs	r2, #1
 800a908:	601a      	str	r2, [r3, #0]
 800a90a:	e007      	b.n	800a91c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a90c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a910:	3301      	adds	r3, #1
 800a912:	b2db      	uxtb	r3, r3
 800a914:	b25a      	sxtb	r2, r3
 800a916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a918:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800a91c:	2301      	movs	r3, #1
 800a91e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a920:	e001      	b.n	800a926 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800a922:	2300      	movs	r3, #0
 800a924:	637b      	str	r3, [r7, #52]	@ 0x34
 800a926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a928:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	f383 8811 	msr	BASEPRI, r3
}
 800a930:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a934:	4618      	mov	r0, r3
 800a936:	3738      	adds	r7, #56	@ 0x38
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d10b      	bne.n	800a966 <vQueueDelete+0x2a>
	__asm volatile
 800a94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a952:	f383 8811 	msr	BASEPRI, r3
 800a956:	f3bf 8f6f 	isb	sy
 800a95a:	f3bf 8f4f 	dsb	sy
 800a95e:	60bb      	str	r3, [r7, #8]
}
 800a960:	bf00      	nop
 800a962:	bf00      	nop
 800a964:	e7fd      	b.n	800a962 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	f000 f95e 	bl	800ac28 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a972:	2b00      	cmp	r3, #0
 800a974:	d102      	bne.n	800a97c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800a976:	68f8      	ldr	r0, [r7, #12]
 800a978:	f002 f8a6 	bl	800cac8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a97c:	bf00      	nop
 800a97e:	3710      	adds	r7, #16
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a984:	b480      	push	{r7}
 800a986:	b085      	sub	sp, #20
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a990:	2b00      	cmp	r3, #0
 800a992:	d006      	beq.n	800a9a2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800a99e:	60fb      	str	r3, [r7, #12]
 800a9a0:	e001      	b.n	800a9a6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
	}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3714      	adds	r7, #20
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b086      	sub	sp, #24
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	60f8      	str	r0, [r7, #12]
 800a9bc:	60b9      	str	r1, [r7, #8]
 800a9be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d10d      	bne.n	800a9ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d14d      	bne.n	800aa76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	689b      	ldr	r3, [r3, #8]
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f001 f89c 	bl	800bb1c <xTaskPriorityDisinherit>
 800a9e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	609a      	str	r2, [r3, #8]
 800a9ec:	e043      	b.n	800aa76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d119      	bne.n	800aa28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	6858      	ldr	r0, [r3, #4]
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	68b9      	ldr	r1, [r7, #8]
 800aa00:	f003 f99f 	bl	800dd42 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	685a      	ldr	r2, [r3, #4]
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa0c:	441a      	add	r2, r3
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	685a      	ldr	r2, [r3, #4]
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	689b      	ldr	r3, [r3, #8]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d32b      	bcc.n	800aa76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	605a      	str	r2, [r3, #4]
 800aa26:	e026      	b.n	800aa76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	68d8      	ldr	r0, [r3, #12]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa30:	461a      	mov	r2, r3
 800aa32:	68b9      	ldr	r1, [r7, #8]
 800aa34:	f003 f985 	bl	800dd42 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	68da      	ldr	r2, [r3, #12]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa40:	425b      	negs	r3, r3
 800aa42:	441a      	add	r2, r3
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	68da      	ldr	r2, [r3, #12]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d207      	bcs.n	800aa64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	689a      	ldr	r2, [r3, #8]
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa5c:	425b      	negs	r3, r3
 800aa5e:	441a      	add	r2, r3
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2b02      	cmp	r3, #2
 800aa68:	d105      	bne.n	800aa76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d002      	beq.n	800aa76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	3b01      	subs	r3, #1
 800aa74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	1c5a      	adds	r2, r3, #1
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800aa7e:	697b      	ldr	r3, [r7, #20]
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3718      	adds	r7, #24
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d018      	beq.n	800aacc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	68da      	ldr	r2, [r3, #12]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaa2:	441a      	add	r2, r3
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	68da      	ldr	r2, [r3, #12]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	689b      	ldr	r3, [r3, #8]
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d303      	bcc.n	800aabc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681a      	ldr	r2, [r3, #0]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	68d9      	ldr	r1, [r3, #12]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aac4:	461a      	mov	r2, r3
 800aac6:	6838      	ldr	r0, [r7, #0]
 800aac8:	f003 f93b 	bl	800dd42 <memcpy>
	}
}
 800aacc:	bf00      	nop
 800aace:	3708      	adds	r7, #8
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b084      	sub	sp, #16
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aadc:	f001 fe04 	bl	800c6e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aae6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aae8:	e011      	b.n	800ab0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d012      	beq.n	800ab18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	3324      	adds	r3, #36	@ 0x24
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f000 fdba 	bl	800b670 <xTaskRemoveFromEventList>
 800aafc:	4603      	mov	r3, r0
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d001      	beq.n	800ab06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ab02:	f000 fe93 	bl	800b82c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ab06:	7bfb      	ldrb	r3, [r7, #15]
 800ab08:	3b01      	subs	r3, #1
 800ab0a:	b2db      	uxtb	r3, r3
 800ab0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	dce9      	bgt.n	800aaea <prvUnlockQueue+0x16>
 800ab16:	e000      	b.n	800ab1a <prvUnlockQueue+0x46>
					break;
 800ab18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	22ff      	movs	r2, #255	@ 0xff
 800ab1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ab22:	f001 fe13 	bl	800c74c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ab26:	f001 fddf 	bl	800c6e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ab30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab32:	e011      	b.n	800ab58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	691b      	ldr	r3, [r3, #16]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d012      	beq.n	800ab62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	3310      	adds	r3, #16
 800ab40:	4618      	mov	r0, r3
 800ab42:	f000 fd95 	bl	800b670 <xTaskRemoveFromEventList>
 800ab46:	4603      	mov	r3, r0
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d001      	beq.n	800ab50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ab4c:	f000 fe6e 	bl	800b82c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ab50:	7bbb      	ldrb	r3, [r7, #14]
 800ab52:	3b01      	subs	r3, #1
 800ab54:	b2db      	uxtb	r3, r3
 800ab56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	dce9      	bgt.n	800ab34 <prvUnlockQueue+0x60>
 800ab60:	e000      	b.n	800ab64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ab62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	22ff      	movs	r2, #255	@ 0xff
 800ab68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ab6c:	f001 fdee 	bl	800c74c <vPortExitCritical>
}
 800ab70:	bf00      	nop
 800ab72:	3710      	adds	r7, #16
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab80:	f001 fdb2 	bl	800c6e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d102      	bne.n	800ab92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	60fb      	str	r3, [r7, #12]
 800ab90:	e001      	b.n	800ab96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ab92:	2300      	movs	r3, #0
 800ab94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab96:	f001 fdd9 	bl	800c74c <vPortExitCritical>

	return xReturn;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3710      	adds	r7, #16
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800abac:	f001 fd9c 	bl	800c6e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abb8:	429a      	cmp	r2, r3
 800abba:	d102      	bne.n	800abc2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800abbc:	2301      	movs	r3, #1
 800abbe:	60fb      	str	r3, [r7, #12]
 800abc0:	e001      	b.n	800abc6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800abc2:	2300      	movs	r3, #0
 800abc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800abc6:	f001 fdc1 	bl	800c74c <vPortExitCritical>

	return xReturn;
 800abca:	68fb      	ldr	r3, [r7, #12]
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3710      	adds	r7, #16
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800abd4:	b480      	push	{r7}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800abde:	2300      	movs	r3, #0
 800abe0:	60fb      	str	r3, [r7, #12]
 800abe2:	e014      	b.n	800ac0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800abe4:	4a0f      	ldr	r2, [pc, #60]	@ (800ac24 <vQueueAddToRegistry+0x50>)
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d10b      	bne.n	800ac08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800abf0:	490c      	ldr	r1, [pc, #48]	@ (800ac24 <vQueueAddToRegistry+0x50>)
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	683a      	ldr	r2, [r7, #0]
 800abf6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800abfa:	4a0a      	ldr	r2, [pc, #40]	@ (800ac24 <vQueueAddToRegistry+0x50>)
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	00db      	lsls	r3, r3, #3
 800ac00:	4413      	add	r3, r2
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ac06:	e006      	b.n	800ac16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	60fb      	str	r3, [r7, #12]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2b07      	cmp	r3, #7
 800ac12:	d9e7      	bls.n	800abe4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ac14:	bf00      	nop
 800ac16:	bf00      	nop
 800ac18:	3714      	adds	r7, #20
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	200010cc 	.word	0x200010cc

0800ac28 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ac28:	b480      	push	{r7}
 800ac2a:	b085      	sub	sp, #20
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac30:	2300      	movs	r3, #0
 800ac32:	60fb      	str	r3, [r7, #12]
 800ac34:	e016      	b.n	800ac64 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ac36:	4a10      	ldr	r2, [pc, #64]	@ (800ac78 <vQueueUnregisterQueue+0x50>)
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	00db      	lsls	r3, r3, #3
 800ac3c:	4413      	add	r3, r2
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d10b      	bne.n	800ac5e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ac46:	4a0c      	ldr	r2, [pc, #48]	@ (800ac78 <vQueueUnregisterQueue+0x50>)
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2100      	movs	r1, #0
 800ac4c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ac50:	4a09      	ldr	r2, [pc, #36]	@ (800ac78 <vQueueUnregisterQueue+0x50>)
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	00db      	lsls	r3, r3, #3
 800ac56:	4413      	add	r3, r2
 800ac58:	2200      	movs	r2, #0
 800ac5a:	605a      	str	r2, [r3, #4]
				break;
 800ac5c:	e006      	b.n	800ac6c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	3301      	adds	r3, #1
 800ac62:	60fb      	str	r3, [r7, #12]
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2b07      	cmp	r3, #7
 800ac68:	d9e5      	bls.n	800ac36 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ac6a:	bf00      	nop
 800ac6c:	bf00      	nop
 800ac6e:	3714      	adds	r7, #20
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr
 800ac78:	200010cc 	.word	0x200010cc

0800ac7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b086      	sub	sp, #24
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ac8c:	f001 fd2c 	bl	800c6e8 <vPortEnterCritical>
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac96:	b25b      	sxtb	r3, r3
 800ac98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac9c:	d103      	bne.n	800aca6 <vQueueWaitForMessageRestricted+0x2a>
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	2200      	movs	r2, #0
 800aca2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800acac:	b25b      	sxtb	r3, r3
 800acae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800acb2:	d103      	bne.n	800acbc <vQueueWaitForMessageRestricted+0x40>
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800acbc:	f001 fd46 	bl	800c74c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d106      	bne.n	800acd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	3324      	adds	r3, #36	@ 0x24
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	68b9      	ldr	r1, [r7, #8]
 800acd0:	4618      	mov	r0, r3
 800acd2:	f000 fca1 	bl	800b618 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800acd6:	6978      	ldr	r0, [r7, #20]
 800acd8:	f7ff fefc 	bl	800aad4 <prvUnlockQueue>
	}
 800acdc:	bf00      	nop
 800acde:	3718      	adds	r7, #24
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b08e      	sub	sp, #56	@ 0x38
 800ace8:	af04      	add	r7, sp, #16
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	607a      	str	r2, [r7, #4]
 800acf0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800acf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d10b      	bne.n	800ad10 <xTaskCreateStatic+0x2c>
	__asm volatile
 800acf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acfc:	f383 8811 	msr	BASEPRI, r3
 800ad00:	f3bf 8f6f 	isb	sy
 800ad04:	f3bf 8f4f 	dsb	sy
 800ad08:	623b      	str	r3, [r7, #32]
}
 800ad0a:	bf00      	nop
 800ad0c:	bf00      	nop
 800ad0e:	e7fd      	b.n	800ad0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ad10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d10b      	bne.n	800ad2e <xTaskCreateStatic+0x4a>
	__asm volatile
 800ad16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad1a:	f383 8811 	msr	BASEPRI, r3
 800ad1e:	f3bf 8f6f 	isb	sy
 800ad22:	f3bf 8f4f 	dsb	sy
 800ad26:	61fb      	str	r3, [r7, #28]
}
 800ad28:	bf00      	nop
 800ad2a:	bf00      	nop
 800ad2c:	e7fd      	b.n	800ad2a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ad2e:	235c      	movs	r3, #92	@ 0x5c
 800ad30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	2b5c      	cmp	r3, #92	@ 0x5c
 800ad36:	d00b      	beq.n	800ad50 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ad38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad3c:	f383 8811 	msr	BASEPRI, r3
 800ad40:	f3bf 8f6f 	isb	sy
 800ad44:	f3bf 8f4f 	dsb	sy
 800ad48:	61bb      	str	r3, [r7, #24]
}
 800ad4a:	bf00      	nop
 800ad4c:	bf00      	nop
 800ad4e:	e7fd      	b.n	800ad4c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ad50:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ad52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d01e      	beq.n	800ad96 <xTaskCreateStatic+0xb2>
 800ad58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d01b      	beq.n	800ad96 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad60:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ad62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ad66:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ad68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad6a:	2202      	movs	r2, #2
 800ad6c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ad70:	2300      	movs	r3, #0
 800ad72:	9303      	str	r3, [sp, #12]
 800ad74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad76:	9302      	str	r3, [sp, #8]
 800ad78:	f107 0314 	add.w	r3, r7, #20
 800ad7c:	9301      	str	r3, [sp, #4]
 800ad7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad80:	9300      	str	r3, [sp, #0]
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	68b9      	ldr	r1, [r7, #8]
 800ad88:	68f8      	ldr	r0, [r7, #12]
 800ad8a:	f000 f850 	bl	800ae2e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad8e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ad90:	f000 f8de 	bl	800af50 <prvAddNewTaskToReadyList>
 800ad94:	e001      	b.n	800ad9a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ad96:	2300      	movs	r3, #0
 800ad98:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ad9a:	697b      	ldr	r3, [r7, #20]
	}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3728      	adds	r7, #40	@ 0x28
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b08c      	sub	sp, #48	@ 0x30
 800ada8:	af04      	add	r7, sp, #16
 800adaa:	60f8      	str	r0, [r7, #12]
 800adac:	60b9      	str	r1, [r7, #8]
 800adae:	603b      	str	r3, [r7, #0]
 800adb0:	4613      	mov	r3, r2
 800adb2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800adb4:	88fb      	ldrh	r3, [r7, #6]
 800adb6:	009b      	lsls	r3, r3, #2
 800adb8:	4618      	mov	r0, r3
 800adba:	f001 fdb7 	bl	800c92c <pvPortMalloc>
 800adbe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d00e      	beq.n	800ade4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800adc6:	205c      	movs	r0, #92	@ 0x5c
 800adc8:	f001 fdb0 	bl	800c92c <pvPortMalloc>
 800adcc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800adce:	69fb      	ldr	r3, [r7, #28]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d003      	beq.n	800addc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800add4:	69fb      	ldr	r3, [r7, #28]
 800add6:	697a      	ldr	r2, [r7, #20]
 800add8:	631a      	str	r2, [r3, #48]	@ 0x30
 800adda:	e005      	b.n	800ade8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800addc:	6978      	ldr	r0, [r7, #20]
 800adde:	f001 fe73 	bl	800cac8 <vPortFree>
 800ade2:	e001      	b.n	800ade8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ade4:	2300      	movs	r3, #0
 800ade6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ade8:	69fb      	ldr	r3, [r7, #28]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d017      	beq.n	800ae1e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800adee:	69fb      	ldr	r3, [r7, #28]
 800adf0:	2200      	movs	r2, #0
 800adf2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800adf6:	88fa      	ldrh	r2, [r7, #6]
 800adf8:	2300      	movs	r3, #0
 800adfa:	9303      	str	r3, [sp, #12]
 800adfc:	69fb      	ldr	r3, [r7, #28]
 800adfe:	9302      	str	r3, [sp, #8]
 800ae00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae02:	9301      	str	r3, [sp, #4]
 800ae04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae06:	9300      	str	r3, [sp, #0]
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	68b9      	ldr	r1, [r7, #8]
 800ae0c:	68f8      	ldr	r0, [r7, #12]
 800ae0e:	f000 f80e 	bl	800ae2e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae12:	69f8      	ldr	r0, [r7, #28]
 800ae14:	f000 f89c 	bl	800af50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	61bb      	str	r3, [r7, #24]
 800ae1c:	e002      	b.n	800ae24 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ae1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ae22:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ae24:	69bb      	ldr	r3, [r7, #24]
	}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3720      	adds	r7, #32
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}

0800ae2e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ae2e:	b580      	push	{r7, lr}
 800ae30:	b088      	sub	sp, #32
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	60f8      	str	r0, [r7, #12]
 800ae36:	60b9      	str	r1, [r7, #8]
 800ae38:	607a      	str	r2, [r7, #4]
 800ae3a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ae3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae3e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	461a      	mov	r2, r3
 800ae46:	21a5      	movs	r1, #165	@ 0xa5
 800ae48:	f002 feec 	bl	800dc24 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ae4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ae56:	3b01      	subs	r3, #1
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	4413      	add	r3, r2
 800ae5c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ae5e:	69bb      	ldr	r3, [r7, #24]
 800ae60:	f023 0307 	bic.w	r3, r3, #7
 800ae64:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ae66:	69bb      	ldr	r3, [r7, #24]
 800ae68:	f003 0307 	and.w	r3, r3, #7
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d00b      	beq.n	800ae88 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ae70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae74:	f383 8811 	msr	BASEPRI, r3
 800ae78:	f3bf 8f6f 	isb	sy
 800ae7c:	f3bf 8f4f 	dsb	sy
 800ae80:	617b      	str	r3, [r7, #20]
}
 800ae82:	bf00      	nop
 800ae84:	bf00      	nop
 800ae86:	e7fd      	b.n	800ae84 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d01f      	beq.n	800aece <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae8e:	2300      	movs	r3, #0
 800ae90:	61fb      	str	r3, [r7, #28]
 800ae92:	e012      	b.n	800aeba <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ae94:	68ba      	ldr	r2, [r7, #8]
 800ae96:	69fb      	ldr	r3, [r7, #28]
 800ae98:	4413      	add	r3, r2
 800ae9a:	7819      	ldrb	r1, [r3, #0]
 800ae9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae9e:	69fb      	ldr	r3, [r7, #28]
 800aea0:	4413      	add	r3, r2
 800aea2:	3334      	adds	r3, #52	@ 0x34
 800aea4:	460a      	mov	r2, r1
 800aea6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aea8:	68ba      	ldr	r2, [r7, #8]
 800aeaa:	69fb      	ldr	r3, [r7, #28]
 800aeac:	4413      	add	r3, r2
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d006      	beq.n	800aec2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aeb4:	69fb      	ldr	r3, [r7, #28]
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	61fb      	str	r3, [r7, #28]
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	2b0f      	cmp	r3, #15
 800aebe:	d9e9      	bls.n	800ae94 <prvInitialiseNewTask+0x66>
 800aec0:	e000      	b.n	800aec4 <prvInitialiseNewTask+0x96>
			{
				break;
 800aec2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aec6:	2200      	movs	r2, #0
 800aec8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aecc:	e003      	b.n	800aed6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aed0:	2200      	movs	r2, #0
 800aed2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aed8:	2b37      	cmp	r3, #55	@ 0x37
 800aeda:	d901      	bls.n	800aee0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aedc:	2337      	movs	r3, #55	@ 0x37
 800aede:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aee2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aee4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aee8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aeea:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aeec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeee:	2200      	movs	r2, #0
 800aef0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef4:	3304      	adds	r3, #4
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7fe fe0c 	bl	8009b14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aefc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aefe:	3318      	adds	r3, #24
 800af00:	4618      	mov	r0, r3
 800af02:	f7fe fe07 	bl	8009b14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800af06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af0e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800af12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800af16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af1a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800af1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af1e:	2200      	movs	r2, #0
 800af20:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800af22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af24:	2200      	movs	r2, #0
 800af26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800af2a:	683a      	ldr	r2, [r7, #0]
 800af2c:	68f9      	ldr	r1, [r7, #12]
 800af2e:	69b8      	ldr	r0, [r7, #24]
 800af30:	f001 faaa 	bl	800c488 <pxPortInitialiseStack>
 800af34:	4602      	mov	r2, r0
 800af36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af38:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800af3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d002      	beq.n	800af46 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800af40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af46:	bf00      	nop
 800af48:	3720      	adds	r7, #32
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
	...

0800af50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800af58:	f001 fbc6 	bl	800c6e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800af5c:	4b2d      	ldr	r3, [pc, #180]	@ (800b014 <prvAddNewTaskToReadyList+0xc4>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	3301      	adds	r3, #1
 800af62:	4a2c      	ldr	r2, [pc, #176]	@ (800b014 <prvAddNewTaskToReadyList+0xc4>)
 800af64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800af66:	4b2c      	ldr	r3, [pc, #176]	@ (800b018 <prvAddNewTaskToReadyList+0xc8>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d109      	bne.n	800af82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800af6e:	4a2a      	ldr	r2, [pc, #168]	@ (800b018 <prvAddNewTaskToReadyList+0xc8>)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800af74:	4b27      	ldr	r3, [pc, #156]	@ (800b014 <prvAddNewTaskToReadyList+0xc4>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d110      	bne.n	800af9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800af7c:	f000 fc7a 	bl	800b874 <prvInitialiseTaskLists>
 800af80:	e00d      	b.n	800af9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800af82:	4b26      	ldr	r3, [pc, #152]	@ (800b01c <prvAddNewTaskToReadyList+0xcc>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d109      	bne.n	800af9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800af8a:	4b23      	ldr	r3, [pc, #140]	@ (800b018 <prvAddNewTaskToReadyList+0xc8>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af94:	429a      	cmp	r2, r3
 800af96:	d802      	bhi.n	800af9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800af98:	4a1f      	ldr	r2, [pc, #124]	@ (800b018 <prvAddNewTaskToReadyList+0xc8>)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800af9e:	4b20      	ldr	r3, [pc, #128]	@ (800b020 <prvAddNewTaskToReadyList+0xd0>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	3301      	adds	r3, #1
 800afa4:	4a1e      	ldr	r2, [pc, #120]	@ (800b020 <prvAddNewTaskToReadyList+0xd0>)
 800afa6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800afa8:	4b1d      	ldr	r3, [pc, #116]	@ (800b020 <prvAddNewTaskToReadyList+0xd0>)
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afb4:	4b1b      	ldr	r3, [pc, #108]	@ (800b024 <prvAddNewTaskToReadyList+0xd4>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	429a      	cmp	r2, r3
 800afba:	d903      	bls.n	800afc4 <prvAddNewTaskToReadyList+0x74>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afc0:	4a18      	ldr	r2, [pc, #96]	@ (800b024 <prvAddNewTaskToReadyList+0xd4>)
 800afc2:	6013      	str	r3, [r2, #0]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afc8:	4613      	mov	r3, r2
 800afca:	009b      	lsls	r3, r3, #2
 800afcc:	4413      	add	r3, r2
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	4a15      	ldr	r2, [pc, #84]	@ (800b028 <prvAddNewTaskToReadyList+0xd8>)
 800afd2:	441a      	add	r2, r3
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	3304      	adds	r3, #4
 800afd8:	4619      	mov	r1, r3
 800afda:	4610      	mov	r0, r2
 800afdc:	f7fe fda7 	bl	8009b2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800afe0:	f001 fbb4 	bl	800c74c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800afe4:	4b0d      	ldr	r3, [pc, #52]	@ (800b01c <prvAddNewTaskToReadyList+0xcc>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d00e      	beq.n	800b00a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800afec:	4b0a      	ldr	r3, [pc, #40]	@ (800b018 <prvAddNewTaskToReadyList+0xc8>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d207      	bcs.n	800b00a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800affa:	4b0c      	ldr	r3, [pc, #48]	@ (800b02c <prvAddNewTaskToReadyList+0xdc>)
 800affc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b000:	601a      	str	r2, [r3, #0]
 800b002:	f3bf 8f4f 	dsb	sy
 800b006:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b00a:	bf00      	nop
 800b00c:	3708      	adds	r7, #8
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}
 800b012:	bf00      	nop
 800b014:	200015e0 	.word	0x200015e0
 800b018:	2000110c 	.word	0x2000110c
 800b01c:	200015ec 	.word	0x200015ec
 800b020:	200015fc 	.word	0x200015fc
 800b024:	200015e8 	.word	0x200015e8
 800b028:	20001110 	.word	0x20001110
 800b02c:	e000ed04 	.word	0xe000ed04

0800b030 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b030:	b580      	push	{r7, lr}
 800b032:	b08a      	sub	sp, #40	@ 0x28
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b03a:	2300      	movs	r3, #0
 800b03c:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d10b      	bne.n	800b05c <vTaskDelayUntil+0x2c>
	__asm volatile
 800b044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b048:	f383 8811 	msr	BASEPRI, r3
 800b04c:	f3bf 8f6f 	isb	sy
 800b050:	f3bf 8f4f 	dsb	sy
 800b054:	617b      	str	r3, [r7, #20]
}
 800b056:	bf00      	nop
 800b058:	bf00      	nop
 800b05a:	e7fd      	b.n	800b058 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d10b      	bne.n	800b07a <vTaskDelayUntil+0x4a>
	__asm volatile
 800b062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b066:	f383 8811 	msr	BASEPRI, r3
 800b06a:	f3bf 8f6f 	isb	sy
 800b06e:	f3bf 8f4f 	dsb	sy
 800b072:	613b      	str	r3, [r7, #16]
}
 800b074:	bf00      	nop
 800b076:	bf00      	nop
 800b078:	e7fd      	b.n	800b076 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800b07a:	4b2a      	ldr	r3, [pc, #168]	@ (800b124 <vTaskDelayUntil+0xf4>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d00b      	beq.n	800b09a <vTaskDelayUntil+0x6a>
	__asm volatile
 800b082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b086:	f383 8811 	msr	BASEPRI, r3
 800b08a:	f3bf 8f6f 	isb	sy
 800b08e:	f3bf 8f4f 	dsb	sy
 800b092:	60fb      	str	r3, [r7, #12]
}
 800b094:	bf00      	nop
 800b096:	bf00      	nop
 800b098:	e7fd      	b.n	800b096 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800b09a:	f000 f8b1 	bl	800b200 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b09e:	4b22      	ldr	r3, [pc, #136]	@ (800b128 <vTaskDelayUntil+0xf8>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	683a      	ldr	r2, [r7, #0]
 800b0aa:	4413      	add	r3, r2
 800b0ac:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	6a3a      	ldr	r2, [r7, #32]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d20b      	bcs.n	800b0d0 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	69fa      	ldr	r2, [r7, #28]
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d211      	bcs.n	800b0e6 <vTaskDelayUntil+0xb6>
 800b0c2:	69fa      	ldr	r2, [r7, #28]
 800b0c4:	6a3b      	ldr	r3, [r7, #32]
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d90d      	bls.n	800b0e6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800b0ce:	e00a      	b.n	800b0e6 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	69fa      	ldr	r2, [r7, #28]
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d303      	bcc.n	800b0e2 <vTaskDelayUntil+0xb2>
 800b0da:	69fa      	ldr	r2, [r7, #28]
 800b0dc:	6a3b      	ldr	r3, [r7, #32]
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d901      	bls.n	800b0e6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	69fa      	ldr	r2, [r7, #28]
 800b0ea:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b0ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d006      	beq.n	800b100 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b0f2:	69fa      	ldr	r2, [r7, #28]
 800b0f4:	6a3b      	ldr	r3, [r7, #32]
 800b0f6:	1ad3      	subs	r3, r2, r3
 800b0f8:	2100      	movs	r1, #0
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f000 fe16 	bl	800bd2c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b100:	f000 f88c 	bl	800b21c <xTaskResumeAll>
 800b104:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b106:	69bb      	ldr	r3, [r7, #24]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d107      	bne.n	800b11c <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800b10c:	4b07      	ldr	r3, [pc, #28]	@ (800b12c <vTaskDelayUntil+0xfc>)
 800b10e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b112:	601a      	str	r2, [r3, #0]
 800b114:	f3bf 8f4f 	dsb	sy
 800b118:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b11c:	bf00      	nop
 800b11e:	3728      	adds	r7, #40	@ 0x28
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}
 800b124:	20001608 	.word	0x20001608
 800b128:	200015e4 	.word	0x200015e4
 800b12c:	e000ed04 	.word	0xe000ed04

0800b130 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b08a      	sub	sp, #40	@ 0x28
 800b134:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b136:	2300      	movs	r3, #0
 800b138:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b13a:	2300      	movs	r3, #0
 800b13c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b13e:	463a      	mov	r2, r7
 800b140:	1d39      	adds	r1, r7, #4
 800b142:	f107 0308 	add.w	r3, r7, #8
 800b146:	4618      	mov	r0, r3
 800b148:	f7fe fc90 	bl	8009a6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b14c:	6839      	ldr	r1, [r7, #0]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	68ba      	ldr	r2, [r7, #8]
 800b152:	9202      	str	r2, [sp, #8]
 800b154:	9301      	str	r3, [sp, #4]
 800b156:	2300      	movs	r3, #0
 800b158:	9300      	str	r3, [sp, #0]
 800b15a:	2300      	movs	r3, #0
 800b15c:	460a      	mov	r2, r1
 800b15e:	4922      	ldr	r1, [pc, #136]	@ (800b1e8 <vTaskStartScheduler+0xb8>)
 800b160:	4822      	ldr	r0, [pc, #136]	@ (800b1ec <vTaskStartScheduler+0xbc>)
 800b162:	f7ff fdbf 	bl	800ace4 <xTaskCreateStatic>
 800b166:	4603      	mov	r3, r0
 800b168:	4a21      	ldr	r2, [pc, #132]	@ (800b1f0 <vTaskStartScheduler+0xc0>)
 800b16a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b16c:	4b20      	ldr	r3, [pc, #128]	@ (800b1f0 <vTaskStartScheduler+0xc0>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d002      	beq.n	800b17a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b174:	2301      	movs	r3, #1
 800b176:	617b      	str	r3, [r7, #20]
 800b178:	e001      	b.n	800b17e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b17a:	2300      	movs	r3, #0
 800b17c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	2b01      	cmp	r3, #1
 800b182:	d102      	bne.n	800b18a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b184:	f000 fe26 	bl	800bdd4 <xTimerCreateTimerTask>
 800b188:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d116      	bne.n	800b1be <vTaskStartScheduler+0x8e>
	__asm volatile
 800b190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b194:	f383 8811 	msr	BASEPRI, r3
 800b198:	f3bf 8f6f 	isb	sy
 800b19c:	f3bf 8f4f 	dsb	sy
 800b1a0:	613b      	str	r3, [r7, #16]
}
 800b1a2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b1a4:	4b13      	ldr	r3, [pc, #76]	@ (800b1f4 <vTaskStartScheduler+0xc4>)
 800b1a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b1aa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b1ac:	4b12      	ldr	r3, [pc, #72]	@ (800b1f8 <vTaskStartScheduler+0xc8>)
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b1b2:	4b12      	ldr	r3, [pc, #72]	@ (800b1fc <vTaskStartScheduler+0xcc>)
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b1b8:	f001 f9f2 	bl	800c5a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b1bc:	e00f      	b.n	800b1de <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b1c4:	d10b      	bne.n	800b1de <vTaskStartScheduler+0xae>
	__asm volatile
 800b1c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ca:	f383 8811 	msr	BASEPRI, r3
 800b1ce:	f3bf 8f6f 	isb	sy
 800b1d2:	f3bf 8f4f 	dsb	sy
 800b1d6:	60fb      	str	r3, [r7, #12]
}
 800b1d8:	bf00      	nop
 800b1da:	bf00      	nop
 800b1dc:	e7fd      	b.n	800b1da <vTaskStartScheduler+0xaa>
}
 800b1de:	bf00      	nop
 800b1e0:	3718      	adds	r7, #24
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	bf00      	nop
 800b1e8:	08011ddc 	.word	0x08011ddc
 800b1ec:	0800b845 	.word	0x0800b845
 800b1f0:	20001604 	.word	0x20001604
 800b1f4:	20001600 	.word	0x20001600
 800b1f8:	200015ec 	.word	0x200015ec
 800b1fc:	200015e4 	.word	0x200015e4

0800b200 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b200:	b480      	push	{r7}
 800b202:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b204:	4b04      	ldr	r3, [pc, #16]	@ (800b218 <vTaskSuspendAll+0x18>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	3301      	adds	r3, #1
 800b20a:	4a03      	ldr	r2, [pc, #12]	@ (800b218 <vTaskSuspendAll+0x18>)
 800b20c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b20e:	bf00      	nop
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr
 800b218:	20001608 	.word	0x20001608

0800b21c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b084      	sub	sp, #16
 800b220:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b222:	2300      	movs	r3, #0
 800b224:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b226:	2300      	movs	r3, #0
 800b228:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b22a:	4b42      	ldr	r3, [pc, #264]	@ (800b334 <xTaskResumeAll+0x118>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d10b      	bne.n	800b24a <xTaskResumeAll+0x2e>
	__asm volatile
 800b232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b236:	f383 8811 	msr	BASEPRI, r3
 800b23a:	f3bf 8f6f 	isb	sy
 800b23e:	f3bf 8f4f 	dsb	sy
 800b242:	603b      	str	r3, [r7, #0]
}
 800b244:	bf00      	nop
 800b246:	bf00      	nop
 800b248:	e7fd      	b.n	800b246 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b24a:	f001 fa4d 	bl	800c6e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b24e:	4b39      	ldr	r3, [pc, #228]	@ (800b334 <xTaskResumeAll+0x118>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	3b01      	subs	r3, #1
 800b254:	4a37      	ldr	r2, [pc, #220]	@ (800b334 <xTaskResumeAll+0x118>)
 800b256:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b258:	4b36      	ldr	r3, [pc, #216]	@ (800b334 <xTaskResumeAll+0x118>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d162      	bne.n	800b326 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b260:	4b35      	ldr	r3, [pc, #212]	@ (800b338 <xTaskResumeAll+0x11c>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d05e      	beq.n	800b326 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b268:	e02f      	b.n	800b2ca <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b26a:	4b34      	ldr	r3, [pc, #208]	@ (800b33c <xTaskResumeAll+0x120>)
 800b26c:	68db      	ldr	r3, [r3, #12]
 800b26e:	68db      	ldr	r3, [r3, #12]
 800b270:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	3318      	adds	r3, #24
 800b276:	4618      	mov	r0, r3
 800b278:	f7fe fcb6 	bl	8009be8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	3304      	adds	r3, #4
 800b280:	4618      	mov	r0, r3
 800b282:	f7fe fcb1 	bl	8009be8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b28a:	4b2d      	ldr	r3, [pc, #180]	@ (800b340 <xTaskResumeAll+0x124>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	429a      	cmp	r2, r3
 800b290:	d903      	bls.n	800b29a <xTaskResumeAll+0x7e>
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b296:	4a2a      	ldr	r2, [pc, #168]	@ (800b340 <xTaskResumeAll+0x124>)
 800b298:	6013      	str	r3, [r2, #0]
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b29e:	4613      	mov	r3, r2
 800b2a0:	009b      	lsls	r3, r3, #2
 800b2a2:	4413      	add	r3, r2
 800b2a4:	009b      	lsls	r3, r3, #2
 800b2a6:	4a27      	ldr	r2, [pc, #156]	@ (800b344 <xTaskResumeAll+0x128>)
 800b2a8:	441a      	add	r2, r3
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	3304      	adds	r3, #4
 800b2ae:	4619      	mov	r1, r3
 800b2b0:	4610      	mov	r0, r2
 800b2b2:	f7fe fc3c 	bl	8009b2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2ba:	4b23      	ldr	r3, [pc, #140]	@ (800b348 <xTaskResumeAll+0x12c>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d302      	bcc.n	800b2ca <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b2c4:	4b21      	ldr	r3, [pc, #132]	@ (800b34c <xTaskResumeAll+0x130>)
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2ca:	4b1c      	ldr	r3, [pc, #112]	@ (800b33c <xTaskResumeAll+0x120>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d1cb      	bne.n	800b26a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d001      	beq.n	800b2dc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b2d8:	f000 fb6a 	bl	800b9b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b2dc:	4b1c      	ldr	r3, [pc, #112]	@ (800b350 <xTaskResumeAll+0x134>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d010      	beq.n	800b30a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b2e8:	f000 f858 	bl	800b39c <xTaskIncrementTick>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d002      	beq.n	800b2f8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b2f2:	4b16      	ldr	r3, [pc, #88]	@ (800b34c <xTaskResumeAll+0x130>)
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	3b01      	subs	r3, #1
 800b2fc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d1f1      	bne.n	800b2e8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b304:	4b12      	ldr	r3, [pc, #72]	@ (800b350 <xTaskResumeAll+0x134>)
 800b306:	2200      	movs	r2, #0
 800b308:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b30a:	4b10      	ldr	r3, [pc, #64]	@ (800b34c <xTaskResumeAll+0x130>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d009      	beq.n	800b326 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b312:	2301      	movs	r3, #1
 800b314:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b316:	4b0f      	ldr	r3, [pc, #60]	@ (800b354 <xTaskResumeAll+0x138>)
 800b318:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b31c:	601a      	str	r2, [r3, #0]
 800b31e:	f3bf 8f4f 	dsb	sy
 800b322:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b326:	f001 fa11 	bl	800c74c <vPortExitCritical>

	return xAlreadyYielded;
 800b32a:	68bb      	ldr	r3, [r7, #8]
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3710      	adds	r7, #16
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}
 800b334:	20001608 	.word	0x20001608
 800b338:	200015e0 	.word	0x200015e0
 800b33c:	200015a0 	.word	0x200015a0
 800b340:	200015e8 	.word	0x200015e8
 800b344:	20001110 	.word	0x20001110
 800b348:	2000110c 	.word	0x2000110c
 800b34c:	200015f4 	.word	0x200015f4
 800b350:	200015f0 	.word	0x200015f0
 800b354:	e000ed04 	.word	0xe000ed04

0800b358 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b35e:	4b05      	ldr	r3, [pc, #20]	@ (800b374 <xTaskGetTickCount+0x1c>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b364:	687b      	ldr	r3, [r7, #4]
}
 800b366:	4618      	mov	r0, r3
 800b368:	370c      	adds	r7, #12
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr
 800b372:	bf00      	nop
 800b374:	200015e4 	.word	0x200015e4

0800b378 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b37e:	f001 fa93 	bl	800c8a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b382:	2300      	movs	r3, #0
 800b384:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b386:	4b04      	ldr	r3, [pc, #16]	@ (800b398 <xTaskGetTickCountFromISR+0x20>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b38c:	683b      	ldr	r3, [r7, #0]
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3708      	adds	r7, #8
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	200015e4 	.word	0x200015e4

0800b39c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b086      	sub	sp, #24
 800b3a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3a6:	4b4f      	ldr	r3, [pc, #316]	@ (800b4e4 <xTaskIncrementTick+0x148>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	f040 8090 	bne.w	800b4d0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b3b0:	4b4d      	ldr	r3, [pc, #308]	@ (800b4e8 <xTaskIncrementTick+0x14c>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b3b8:	4a4b      	ldr	r2, [pc, #300]	@ (800b4e8 <xTaskIncrementTick+0x14c>)
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d121      	bne.n	800b408 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b3c4:	4b49      	ldr	r3, [pc, #292]	@ (800b4ec <xTaskIncrementTick+0x150>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00b      	beq.n	800b3e6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3d2:	f383 8811 	msr	BASEPRI, r3
 800b3d6:	f3bf 8f6f 	isb	sy
 800b3da:	f3bf 8f4f 	dsb	sy
 800b3de:	603b      	str	r3, [r7, #0]
}
 800b3e0:	bf00      	nop
 800b3e2:	bf00      	nop
 800b3e4:	e7fd      	b.n	800b3e2 <xTaskIncrementTick+0x46>
 800b3e6:	4b41      	ldr	r3, [pc, #260]	@ (800b4ec <xTaskIncrementTick+0x150>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	60fb      	str	r3, [r7, #12]
 800b3ec:	4b40      	ldr	r3, [pc, #256]	@ (800b4f0 <xTaskIncrementTick+0x154>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a3e      	ldr	r2, [pc, #248]	@ (800b4ec <xTaskIncrementTick+0x150>)
 800b3f2:	6013      	str	r3, [r2, #0]
 800b3f4:	4a3e      	ldr	r2, [pc, #248]	@ (800b4f0 <xTaskIncrementTick+0x154>)
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	6013      	str	r3, [r2, #0]
 800b3fa:	4b3e      	ldr	r3, [pc, #248]	@ (800b4f4 <xTaskIncrementTick+0x158>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	3301      	adds	r3, #1
 800b400:	4a3c      	ldr	r2, [pc, #240]	@ (800b4f4 <xTaskIncrementTick+0x158>)
 800b402:	6013      	str	r3, [r2, #0]
 800b404:	f000 fad4 	bl	800b9b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b408:	4b3b      	ldr	r3, [pc, #236]	@ (800b4f8 <xTaskIncrementTick+0x15c>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	693a      	ldr	r2, [r7, #16]
 800b40e:	429a      	cmp	r2, r3
 800b410:	d349      	bcc.n	800b4a6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b412:	4b36      	ldr	r3, [pc, #216]	@ (800b4ec <xTaskIncrementTick+0x150>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d104      	bne.n	800b426 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b41c:	4b36      	ldr	r3, [pc, #216]	@ (800b4f8 <xTaskIncrementTick+0x15c>)
 800b41e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b422:	601a      	str	r2, [r3, #0]
					break;
 800b424:	e03f      	b.n	800b4a6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b426:	4b31      	ldr	r3, [pc, #196]	@ (800b4ec <xTaskIncrementTick+0x150>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	68db      	ldr	r3, [r3, #12]
 800b42e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b436:	693a      	ldr	r2, [r7, #16]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d203      	bcs.n	800b446 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b43e:	4a2e      	ldr	r2, [pc, #184]	@ (800b4f8 <xTaskIncrementTick+0x15c>)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b444:	e02f      	b.n	800b4a6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	3304      	adds	r3, #4
 800b44a:	4618      	mov	r0, r3
 800b44c:	f7fe fbcc 	bl	8009be8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b454:	2b00      	cmp	r3, #0
 800b456:	d004      	beq.n	800b462 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	3318      	adds	r3, #24
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7fe fbc3 	bl	8009be8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b466:	4b25      	ldr	r3, [pc, #148]	@ (800b4fc <xTaskIncrementTick+0x160>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d903      	bls.n	800b476 <xTaskIncrementTick+0xda>
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b472:	4a22      	ldr	r2, [pc, #136]	@ (800b4fc <xTaskIncrementTick+0x160>)
 800b474:	6013      	str	r3, [r2, #0]
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b47a:	4613      	mov	r3, r2
 800b47c:	009b      	lsls	r3, r3, #2
 800b47e:	4413      	add	r3, r2
 800b480:	009b      	lsls	r3, r3, #2
 800b482:	4a1f      	ldr	r2, [pc, #124]	@ (800b500 <xTaskIncrementTick+0x164>)
 800b484:	441a      	add	r2, r3
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	3304      	adds	r3, #4
 800b48a:	4619      	mov	r1, r3
 800b48c:	4610      	mov	r0, r2
 800b48e:	f7fe fb4e 	bl	8009b2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b496:	4b1b      	ldr	r3, [pc, #108]	@ (800b504 <xTaskIncrementTick+0x168>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d3b8      	bcc.n	800b412 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4a4:	e7b5      	b.n	800b412 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b4a6:	4b17      	ldr	r3, [pc, #92]	@ (800b504 <xTaskIncrementTick+0x168>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4ac:	4914      	ldr	r1, [pc, #80]	@ (800b500 <xTaskIncrementTick+0x164>)
 800b4ae:	4613      	mov	r3, r2
 800b4b0:	009b      	lsls	r3, r3, #2
 800b4b2:	4413      	add	r3, r2
 800b4b4:	009b      	lsls	r3, r3, #2
 800b4b6:	440b      	add	r3, r1
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d901      	bls.n	800b4c2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b4c2:	4b11      	ldr	r3, [pc, #68]	@ (800b508 <xTaskIncrementTick+0x16c>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d007      	beq.n	800b4da <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	617b      	str	r3, [r7, #20]
 800b4ce:	e004      	b.n	800b4da <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b4d0:	4b0e      	ldr	r3, [pc, #56]	@ (800b50c <xTaskIncrementTick+0x170>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	4a0d      	ldr	r2, [pc, #52]	@ (800b50c <xTaskIncrementTick+0x170>)
 800b4d8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b4da:	697b      	ldr	r3, [r7, #20]
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3718      	adds	r7, #24
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	20001608 	.word	0x20001608
 800b4e8:	200015e4 	.word	0x200015e4
 800b4ec:	20001598 	.word	0x20001598
 800b4f0:	2000159c 	.word	0x2000159c
 800b4f4:	200015f8 	.word	0x200015f8
 800b4f8:	20001600 	.word	0x20001600
 800b4fc:	200015e8 	.word	0x200015e8
 800b500:	20001110 	.word	0x20001110
 800b504:	2000110c 	.word	0x2000110c
 800b508:	200015f4 	.word	0x200015f4
 800b50c:	200015f0 	.word	0x200015f0

0800b510 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b510:	b480      	push	{r7}
 800b512:	b085      	sub	sp, #20
 800b514:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b516:	4b28      	ldr	r3, [pc, #160]	@ (800b5b8 <vTaskSwitchContext+0xa8>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d003      	beq.n	800b526 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b51e:	4b27      	ldr	r3, [pc, #156]	@ (800b5bc <vTaskSwitchContext+0xac>)
 800b520:	2201      	movs	r2, #1
 800b522:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b524:	e042      	b.n	800b5ac <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b526:	4b25      	ldr	r3, [pc, #148]	@ (800b5bc <vTaskSwitchContext+0xac>)
 800b528:	2200      	movs	r2, #0
 800b52a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b52c:	4b24      	ldr	r3, [pc, #144]	@ (800b5c0 <vTaskSwitchContext+0xb0>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	60fb      	str	r3, [r7, #12]
 800b532:	e011      	b.n	800b558 <vTaskSwitchContext+0x48>
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d10b      	bne.n	800b552 <vTaskSwitchContext+0x42>
	__asm volatile
 800b53a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b53e:	f383 8811 	msr	BASEPRI, r3
 800b542:	f3bf 8f6f 	isb	sy
 800b546:	f3bf 8f4f 	dsb	sy
 800b54a:	607b      	str	r3, [r7, #4]
}
 800b54c:	bf00      	nop
 800b54e:	bf00      	nop
 800b550:	e7fd      	b.n	800b54e <vTaskSwitchContext+0x3e>
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	3b01      	subs	r3, #1
 800b556:	60fb      	str	r3, [r7, #12]
 800b558:	491a      	ldr	r1, [pc, #104]	@ (800b5c4 <vTaskSwitchContext+0xb4>)
 800b55a:	68fa      	ldr	r2, [r7, #12]
 800b55c:	4613      	mov	r3, r2
 800b55e:	009b      	lsls	r3, r3, #2
 800b560:	4413      	add	r3, r2
 800b562:	009b      	lsls	r3, r3, #2
 800b564:	440b      	add	r3, r1
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d0e3      	beq.n	800b534 <vTaskSwitchContext+0x24>
 800b56c:	68fa      	ldr	r2, [r7, #12]
 800b56e:	4613      	mov	r3, r2
 800b570:	009b      	lsls	r3, r3, #2
 800b572:	4413      	add	r3, r2
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	4a13      	ldr	r2, [pc, #76]	@ (800b5c4 <vTaskSwitchContext+0xb4>)
 800b578:	4413      	add	r3, r2
 800b57a:	60bb      	str	r3, [r7, #8]
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	685a      	ldr	r2, [r3, #4]
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	605a      	str	r2, [r3, #4]
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	685a      	ldr	r2, [r3, #4]
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	3308      	adds	r3, #8
 800b58e:	429a      	cmp	r2, r3
 800b590:	d104      	bne.n	800b59c <vTaskSwitchContext+0x8c>
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	685a      	ldr	r2, [r3, #4]
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	605a      	str	r2, [r3, #4]
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	68db      	ldr	r3, [r3, #12]
 800b5a2:	4a09      	ldr	r2, [pc, #36]	@ (800b5c8 <vTaskSwitchContext+0xb8>)
 800b5a4:	6013      	str	r3, [r2, #0]
 800b5a6:	4a06      	ldr	r2, [pc, #24]	@ (800b5c0 <vTaskSwitchContext+0xb0>)
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	6013      	str	r3, [r2, #0]
}
 800b5ac:	bf00      	nop
 800b5ae:	3714      	adds	r7, #20
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr
 800b5b8:	20001608 	.word	0x20001608
 800b5bc:	200015f4 	.word	0x200015f4
 800b5c0:	200015e8 	.word	0x200015e8
 800b5c4:	20001110 	.word	0x20001110
 800b5c8:	2000110c 	.word	0x2000110c

0800b5cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d10b      	bne.n	800b5f4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b5dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5e0:	f383 8811 	msr	BASEPRI, r3
 800b5e4:	f3bf 8f6f 	isb	sy
 800b5e8:	f3bf 8f4f 	dsb	sy
 800b5ec:	60fb      	str	r3, [r7, #12]
}
 800b5ee:	bf00      	nop
 800b5f0:	bf00      	nop
 800b5f2:	e7fd      	b.n	800b5f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b5f4:	4b07      	ldr	r3, [pc, #28]	@ (800b614 <vTaskPlaceOnEventList+0x48>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	3318      	adds	r3, #24
 800b5fa:	4619      	mov	r1, r3
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f7fe faba 	bl	8009b76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b602:	2101      	movs	r1, #1
 800b604:	6838      	ldr	r0, [r7, #0]
 800b606:	f000 fb91 	bl	800bd2c <prvAddCurrentTaskToDelayedList>
}
 800b60a:	bf00      	nop
 800b60c:	3710      	adds	r7, #16
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
 800b612:	bf00      	nop
 800b614:	2000110c 	.word	0x2000110c

0800b618 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b086      	sub	sp, #24
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	60b9      	str	r1, [r7, #8]
 800b622:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d10b      	bne.n	800b642 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b62a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b62e:	f383 8811 	msr	BASEPRI, r3
 800b632:	f3bf 8f6f 	isb	sy
 800b636:	f3bf 8f4f 	dsb	sy
 800b63a:	617b      	str	r3, [r7, #20]
}
 800b63c:	bf00      	nop
 800b63e:	bf00      	nop
 800b640:	e7fd      	b.n	800b63e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b642:	4b0a      	ldr	r3, [pc, #40]	@ (800b66c <vTaskPlaceOnEventListRestricted+0x54>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	3318      	adds	r3, #24
 800b648:	4619      	mov	r1, r3
 800b64a:	68f8      	ldr	r0, [r7, #12]
 800b64c:	f7fe fa6f 	bl	8009b2e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d002      	beq.n	800b65c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b656:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b65a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b65c:	6879      	ldr	r1, [r7, #4]
 800b65e:	68b8      	ldr	r0, [r7, #8]
 800b660:	f000 fb64 	bl	800bd2c <prvAddCurrentTaskToDelayedList>
	}
 800b664:	bf00      	nop
 800b666:	3718      	adds	r7, #24
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}
 800b66c:	2000110c 	.word	0x2000110c

0800b670 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b086      	sub	sp, #24
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	68db      	ldr	r3, [r3, #12]
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d10b      	bne.n	800b69e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b68a:	f383 8811 	msr	BASEPRI, r3
 800b68e:	f3bf 8f6f 	isb	sy
 800b692:	f3bf 8f4f 	dsb	sy
 800b696:	60fb      	str	r3, [r7, #12]
}
 800b698:	bf00      	nop
 800b69a:	bf00      	nop
 800b69c:	e7fd      	b.n	800b69a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	3318      	adds	r3, #24
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f7fe faa0 	bl	8009be8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6a8:	4b1d      	ldr	r3, [pc, #116]	@ (800b720 <xTaskRemoveFromEventList+0xb0>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d11d      	bne.n	800b6ec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	3304      	adds	r3, #4
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f7fe fa97 	bl	8009be8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6be:	4b19      	ldr	r3, [pc, #100]	@ (800b724 <xTaskRemoveFromEventList+0xb4>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d903      	bls.n	800b6ce <xTaskRemoveFromEventList+0x5e>
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6ca:	4a16      	ldr	r2, [pc, #88]	@ (800b724 <xTaskRemoveFromEventList+0xb4>)
 800b6cc:	6013      	str	r3, [r2, #0]
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6d2:	4613      	mov	r3, r2
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	4413      	add	r3, r2
 800b6d8:	009b      	lsls	r3, r3, #2
 800b6da:	4a13      	ldr	r2, [pc, #76]	@ (800b728 <xTaskRemoveFromEventList+0xb8>)
 800b6dc:	441a      	add	r2, r3
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	3304      	adds	r3, #4
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	4610      	mov	r0, r2
 800b6e6:	f7fe fa22 	bl	8009b2e <vListInsertEnd>
 800b6ea:	e005      	b.n	800b6f8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	3318      	adds	r3, #24
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	480e      	ldr	r0, [pc, #56]	@ (800b72c <xTaskRemoveFromEventList+0xbc>)
 800b6f4:	f7fe fa1b 	bl	8009b2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6fc:	4b0c      	ldr	r3, [pc, #48]	@ (800b730 <xTaskRemoveFromEventList+0xc0>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b702:	429a      	cmp	r2, r3
 800b704:	d905      	bls.n	800b712 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b706:	2301      	movs	r3, #1
 800b708:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b70a:	4b0a      	ldr	r3, [pc, #40]	@ (800b734 <xTaskRemoveFromEventList+0xc4>)
 800b70c:	2201      	movs	r2, #1
 800b70e:	601a      	str	r2, [r3, #0]
 800b710:	e001      	b.n	800b716 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b712:	2300      	movs	r3, #0
 800b714:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b716:	697b      	ldr	r3, [r7, #20]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3718      	adds	r7, #24
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	20001608 	.word	0x20001608
 800b724:	200015e8 	.word	0x200015e8
 800b728:	20001110 	.word	0x20001110
 800b72c:	200015a0 	.word	0x200015a0
 800b730:	2000110c 	.word	0x2000110c
 800b734:	200015f4 	.word	0x200015f4

0800b738 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b738:	b480      	push	{r7}
 800b73a:	b083      	sub	sp, #12
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b740:	4b06      	ldr	r3, [pc, #24]	@ (800b75c <vTaskInternalSetTimeOutState+0x24>)
 800b742:	681a      	ldr	r2, [r3, #0]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b748:	4b05      	ldr	r3, [pc, #20]	@ (800b760 <vTaskInternalSetTimeOutState+0x28>)
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	605a      	str	r2, [r3, #4]
}
 800b750:	bf00      	nop
 800b752:	370c      	adds	r7, #12
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr
 800b75c:	200015f8 	.word	0x200015f8
 800b760:	200015e4 	.word	0x200015e4

0800b764 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b088      	sub	sp, #32
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d10b      	bne.n	800b78c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b778:	f383 8811 	msr	BASEPRI, r3
 800b77c:	f3bf 8f6f 	isb	sy
 800b780:	f3bf 8f4f 	dsb	sy
 800b784:	613b      	str	r3, [r7, #16]
}
 800b786:	bf00      	nop
 800b788:	bf00      	nop
 800b78a:	e7fd      	b.n	800b788 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d10b      	bne.n	800b7aa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b796:	f383 8811 	msr	BASEPRI, r3
 800b79a:	f3bf 8f6f 	isb	sy
 800b79e:	f3bf 8f4f 	dsb	sy
 800b7a2:	60fb      	str	r3, [r7, #12]
}
 800b7a4:	bf00      	nop
 800b7a6:	bf00      	nop
 800b7a8:	e7fd      	b.n	800b7a6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b7aa:	f000 ff9d 	bl	800c6e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b7ae:	4b1d      	ldr	r3, [pc, #116]	@ (800b824 <xTaskCheckForTimeOut+0xc0>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	69ba      	ldr	r2, [r7, #24]
 800b7ba:	1ad3      	subs	r3, r2, r3
 800b7bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b7c6:	d102      	bne.n	800b7ce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	61fb      	str	r3, [r7, #28]
 800b7cc:	e023      	b.n	800b816 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681a      	ldr	r2, [r3, #0]
 800b7d2:	4b15      	ldr	r3, [pc, #84]	@ (800b828 <xTaskCheckForTimeOut+0xc4>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d007      	beq.n	800b7ea <xTaskCheckForTimeOut+0x86>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	69ba      	ldr	r2, [r7, #24]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d302      	bcc.n	800b7ea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	61fb      	str	r3, [r7, #28]
 800b7e8:	e015      	b.n	800b816 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	697a      	ldr	r2, [r7, #20]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d20b      	bcs.n	800b80c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	681a      	ldr	r2, [r3, #0]
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	1ad2      	subs	r2, r2, r3
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f7ff ff99 	bl	800b738 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b806:	2300      	movs	r3, #0
 800b808:	61fb      	str	r3, [r7, #28]
 800b80a:	e004      	b.n	800b816 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	2200      	movs	r2, #0
 800b810:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b812:	2301      	movs	r3, #1
 800b814:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b816:	f000 ff99 	bl	800c74c <vPortExitCritical>

	return xReturn;
 800b81a:	69fb      	ldr	r3, [r7, #28]
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3720      	adds	r7, #32
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}
 800b824:	200015e4 	.word	0x200015e4
 800b828:	200015f8 	.word	0x200015f8

0800b82c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b82c:	b480      	push	{r7}
 800b82e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b830:	4b03      	ldr	r3, [pc, #12]	@ (800b840 <vTaskMissedYield+0x14>)
 800b832:	2201      	movs	r2, #1
 800b834:	601a      	str	r2, [r3, #0]
}
 800b836:	bf00      	nop
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr
 800b840:	200015f4 	.word	0x200015f4

0800b844 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b84c:	f000 f852 	bl	800b8f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b850:	4b06      	ldr	r3, [pc, #24]	@ (800b86c <prvIdleTask+0x28>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2b01      	cmp	r3, #1
 800b856:	d9f9      	bls.n	800b84c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b858:	4b05      	ldr	r3, [pc, #20]	@ (800b870 <prvIdleTask+0x2c>)
 800b85a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b85e:	601a      	str	r2, [r3, #0]
 800b860:	f3bf 8f4f 	dsb	sy
 800b864:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b868:	e7f0      	b.n	800b84c <prvIdleTask+0x8>
 800b86a:	bf00      	nop
 800b86c:	20001110 	.word	0x20001110
 800b870:	e000ed04 	.word	0xe000ed04

0800b874 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b87a:	2300      	movs	r3, #0
 800b87c:	607b      	str	r3, [r7, #4]
 800b87e:	e00c      	b.n	800b89a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b880:	687a      	ldr	r2, [r7, #4]
 800b882:	4613      	mov	r3, r2
 800b884:	009b      	lsls	r3, r3, #2
 800b886:	4413      	add	r3, r2
 800b888:	009b      	lsls	r3, r3, #2
 800b88a:	4a12      	ldr	r2, [pc, #72]	@ (800b8d4 <prvInitialiseTaskLists+0x60>)
 800b88c:	4413      	add	r3, r2
 800b88e:	4618      	mov	r0, r3
 800b890:	f7fe f920 	bl	8009ad4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	3301      	adds	r3, #1
 800b898:	607b      	str	r3, [r7, #4]
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2b37      	cmp	r3, #55	@ 0x37
 800b89e:	d9ef      	bls.n	800b880 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b8a0:	480d      	ldr	r0, [pc, #52]	@ (800b8d8 <prvInitialiseTaskLists+0x64>)
 800b8a2:	f7fe f917 	bl	8009ad4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b8a6:	480d      	ldr	r0, [pc, #52]	@ (800b8dc <prvInitialiseTaskLists+0x68>)
 800b8a8:	f7fe f914 	bl	8009ad4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b8ac:	480c      	ldr	r0, [pc, #48]	@ (800b8e0 <prvInitialiseTaskLists+0x6c>)
 800b8ae:	f7fe f911 	bl	8009ad4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b8b2:	480c      	ldr	r0, [pc, #48]	@ (800b8e4 <prvInitialiseTaskLists+0x70>)
 800b8b4:	f7fe f90e 	bl	8009ad4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b8b8:	480b      	ldr	r0, [pc, #44]	@ (800b8e8 <prvInitialiseTaskLists+0x74>)
 800b8ba:	f7fe f90b 	bl	8009ad4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b8be:	4b0b      	ldr	r3, [pc, #44]	@ (800b8ec <prvInitialiseTaskLists+0x78>)
 800b8c0:	4a05      	ldr	r2, [pc, #20]	@ (800b8d8 <prvInitialiseTaskLists+0x64>)
 800b8c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b8c4:	4b0a      	ldr	r3, [pc, #40]	@ (800b8f0 <prvInitialiseTaskLists+0x7c>)
 800b8c6:	4a05      	ldr	r2, [pc, #20]	@ (800b8dc <prvInitialiseTaskLists+0x68>)
 800b8c8:	601a      	str	r2, [r3, #0]
}
 800b8ca:	bf00      	nop
 800b8cc:	3708      	adds	r7, #8
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	bf00      	nop
 800b8d4:	20001110 	.word	0x20001110
 800b8d8:	20001570 	.word	0x20001570
 800b8dc:	20001584 	.word	0x20001584
 800b8e0:	200015a0 	.word	0x200015a0
 800b8e4:	200015b4 	.word	0x200015b4
 800b8e8:	200015cc 	.word	0x200015cc
 800b8ec:	20001598 	.word	0x20001598
 800b8f0:	2000159c 	.word	0x2000159c

0800b8f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b8fa:	e019      	b.n	800b930 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b8fc:	f000 fef4 	bl	800c6e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b900:	4b10      	ldr	r3, [pc, #64]	@ (800b944 <prvCheckTasksWaitingTermination+0x50>)
 800b902:	68db      	ldr	r3, [r3, #12]
 800b904:	68db      	ldr	r3, [r3, #12]
 800b906:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	3304      	adds	r3, #4
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7fe f96b 	bl	8009be8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b912:	4b0d      	ldr	r3, [pc, #52]	@ (800b948 <prvCheckTasksWaitingTermination+0x54>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	3b01      	subs	r3, #1
 800b918:	4a0b      	ldr	r2, [pc, #44]	@ (800b948 <prvCheckTasksWaitingTermination+0x54>)
 800b91a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b91c:	4b0b      	ldr	r3, [pc, #44]	@ (800b94c <prvCheckTasksWaitingTermination+0x58>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	3b01      	subs	r3, #1
 800b922:	4a0a      	ldr	r2, [pc, #40]	@ (800b94c <prvCheckTasksWaitingTermination+0x58>)
 800b924:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b926:	f000 ff11 	bl	800c74c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 f810 	bl	800b950 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b930:	4b06      	ldr	r3, [pc, #24]	@ (800b94c <prvCheckTasksWaitingTermination+0x58>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d1e1      	bne.n	800b8fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b938:	bf00      	nop
 800b93a:	bf00      	nop
 800b93c:	3708      	adds	r7, #8
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
 800b942:	bf00      	nop
 800b944:	200015b4 	.word	0x200015b4
 800b948:	200015e0 	.word	0x200015e0
 800b94c:	200015c8 	.word	0x200015c8

0800b950 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d108      	bne.n	800b974 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b966:	4618      	mov	r0, r3
 800b968:	f001 f8ae 	bl	800cac8 <vPortFree>
				vPortFree( pxTCB );
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f001 f8ab 	bl	800cac8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b972:	e019      	b.n	800b9a8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b97a:	2b01      	cmp	r3, #1
 800b97c:	d103      	bne.n	800b986 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f001 f8a2 	bl	800cac8 <vPortFree>
	}
 800b984:	e010      	b.n	800b9a8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b98c:	2b02      	cmp	r3, #2
 800b98e:	d00b      	beq.n	800b9a8 <prvDeleteTCB+0x58>
	__asm volatile
 800b990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b994:	f383 8811 	msr	BASEPRI, r3
 800b998:	f3bf 8f6f 	isb	sy
 800b99c:	f3bf 8f4f 	dsb	sy
 800b9a0:	60fb      	str	r3, [r7, #12]
}
 800b9a2:	bf00      	nop
 800b9a4:	bf00      	nop
 800b9a6:	e7fd      	b.n	800b9a4 <prvDeleteTCB+0x54>
	}
 800b9a8:	bf00      	nop
 800b9aa:	3710      	adds	r7, #16
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}

0800b9b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9b6:	4b0c      	ldr	r3, [pc, #48]	@ (800b9e8 <prvResetNextTaskUnblockTime+0x38>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d104      	bne.n	800b9ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b9c0:	4b0a      	ldr	r3, [pc, #40]	@ (800b9ec <prvResetNextTaskUnblockTime+0x3c>)
 800b9c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b9c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b9c8:	e008      	b.n	800b9dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9ca:	4b07      	ldr	r3, [pc, #28]	@ (800b9e8 <prvResetNextTaskUnblockTime+0x38>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	68db      	ldr	r3, [r3, #12]
 800b9d0:	68db      	ldr	r3, [r3, #12]
 800b9d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	685b      	ldr	r3, [r3, #4]
 800b9d8:	4a04      	ldr	r2, [pc, #16]	@ (800b9ec <prvResetNextTaskUnblockTime+0x3c>)
 800b9da:	6013      	str	r3, [r2, #0]
}
 800b9dc:	bf00      	nop
 800b9de:	370c      	adds	r7, #12
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr
 800b9e8:	20001598 	.word	0x20001598
 800b9ec:	20001600 	.word	0x20001600

0800b9f0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b083      	sub	sp, #12
 800b9f4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b9f6:	4b05      	ldr	r3, [pc, #20]	@ (800ba0c <xTaskGetCurrentTaskHandle+0x1c>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b9fc:	687b      	ldr	r3, [r7, #4]
	}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	370c      	adds	r7, #12
 800ba02:	46bd      	mov	sp, r7
 800ba04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba08:	4770      	bx	lr
 800ba0a:	bf00      	nop
 800ba0c:	2000110c 	.word	0x2000110c

0800ba10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ba10:	b480      	push	{r7}
 800ba12:	b083      	sub	sp, #12
 800ba14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ba16:	4b0b      	ldr	r3, [pc, #44]	@ (800ba44 <xTaskGetSchedulerState+0x34>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d102      	bne.n	800ba24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ba1e:	2301      	movs	r3, #1
 800ba20:	607b      	str	r3, [r7, #4]
 800ba22:	e008      	b.n	800ba36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba24:	4b08      	ldr	r3, [pc, #32]	@ (800ba48 <xTaskGetSchedulerState+0x38>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d102      	bne.n	800ba32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ba2c:	2302      	movs	r3, #2
 800ba2e:	607b      	str	r3, [r7, #4]
 800ba30:	e001      	b.n	800ba36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ba32:	2300      	movs	r3, #0
 800ba34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ba36:	687b      	ldr	r3, [r7, #4]
	}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	370c      	adds	r7, #12
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba42:	4770      	bx	lr
 800ba44:	200015ec 	.word	0x200015ec
 800ba48:	20001608 	.word	0x20001608

0800ba4c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d051      	beq.n	800bb06 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba66:	4b2a      	ldr	r3, [pc, #168]	@ (800bb10 <xTaskPriorityInherit+0xc4>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d241      	bcs.n	800baf4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	699b      	ldr	r3, [r3, #24]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	db06      	blt.n	800ba86 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba78:	4b25      	ldr	r3, [pc, #148]	@ (800bb10 <xTaskPriorityInherit+0xc4>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba7e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	6959      	ldr	r1, [r3, #20]
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba8e:	4613      	mov	r3, r2
 800ba90:	009b      	lsls	r3, r3, #2
 800ba92:	4413      	add	r3, r2
 800ba94:	009b      	lsls	r3, r3, #2
 800ba96:	4a1f      	ldr	r2, [pc, #124]	@ (800bb14 <xTaskPriorityInherit+0xc8>)
 800ba98:	4413      	add	r3, r2
 800ba9a:	4299      	cmp	r1, r3
 800ba9c:	d122      	bne.n	800bae4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	3304      	adds	r3, #4
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7fe f8a0 	bl	8009be8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800baa8:	4b19      	ldr	r3, [pc, #100]	@ (800bb10 <xTaskPriorityInherit+0xc4>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bab6:	4b18      	ldr	r3, [pc, #96]	@ (800bb18 <xTaskPriorityInherit+0xcc>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	429a      	cmp	r2, r3
 800babc:	d903      	bls.n	800bac6 <xTaskPriorityInherit+0x7a>
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bac2:	4a15      	ldr	r2, [pc, #84]	@ (800bb18 <xTaskPriorityInherit+0xcc>)
 800bac4:	6013      	str	r3, [r2, #0]
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baca:	4613      	mov	r3, r2
 800bacc:	009b      	lsls	r3, r3, #2
 800bace:	4413      	add	r3, r2
 800bad0:	009b      	lsls	r3, r3, #2
 800bad2:	4a10      	ldr	r2, [pc, #64]	@ (800bb14 <xTaskPriorityInherit+0xc8>)
 800bad4:	441a      	add	r2, r3
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	3304      	adds	r3, #4
 800bada:	4619      	mov	r1, r3
 800badc:	4610      	mov	r0, r2
 800bade:	f7fe f826 	bl	8009b2e <vListInsertEnd>
 800bae2:	e004      	b.n	800baee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bae4:	4b0a      	ldr	r3, [pc, #40]	@ (800bb10 <xTaskPriorityInherit+0xc4>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800baee:	2301      	movs	r3, #1
 800baf0:	60fb      	str	r3, [r7, #12]
 800baf2:	e008      	b.n	800bb06 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800baf8:	4b05      	ldr	r3, [pc, #20]	@ (800bb10 <xTaskPriorityInherit+0xc4>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d201      	bcs.n	800bb06 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bb02:	2301      	movs	r3, #1
 800bb04:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bb06:	68fb      	ldr	r3, [r7, #12]
	}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3710      	adds	r7, #16
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	2000110c 	.word	0x2000110c
 800bb14:	20001110 	.word	0x20001110
 800bb18:	200015e8 	.word	0x200015e8

0800bb1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b086      	sub	sp, #24
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d058      	beq.n	800bbe4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bb32:	4b2f      	ldr	r3, [pc, #188]	@ (800bbf0 <xTaskPriorityDisinherit+0xd4>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	693a      	ldr	r2, [r7, #16]
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d00b      	beq.n	800bb54 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bb3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb40:	f383 8811 	msr	BASEPRI, r3
 800bb44:	f3bf 8f6f 	isb	sy
 800bb48:	f3bf 8f4f 	dsb	sy
 800bb4c:	60fb      	str	r3, [r7, #12]
}
 800bb4e:	bf00      	nop
 800bb50:	bf00      	nop
 800bb52:	e7fd      	b.n	800bb50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d10b      	bne.n	800bb74 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bb5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb60:	f383 8811 	msr	BASEPRI, r3
 800bb64:	f3bf 8f6f 	isb	sy
 800bb68:	f3bf 8f4f 	dsb	sy
 800bb6c:	60bb      	str	r3, [r7, #8]
}
 800bb6e:	bf00      	nop
 800bb70:	bf00      	nop
 800bb72:	e7fd      	b.n	800bb70 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb78:	1e5a      	subs	r2, r3, #1
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bb7e:	693b      	ldr	r3, [r7, #16]
 800bb80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d02c      	beq.n	800bbe4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d128      	bne.n	800bbe4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	3304      	adds	r3, #4
 800bb96:	4618      	mov	r0, r3
 800bb98:	f7fe f826 	bl	8009be8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bba8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbb4:	4b0f      	ldr	r3, [pc, #60]	@ (800bbf4 <xTaskPriorityDisinherit+0xd8>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d903      	bls.n	800bbc4 <xTaskPriorityDisinherit+0xa8>
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbc0:	4a0c      	ldr	r2, [pc, #48]	@ (800bbf4 <xTaskPriorityDisinherit+0xd8>)
 800bbc2:	6013      	str	r3, [r2, #0]
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbc8:	4613      	mov	r3, r2
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	4413      	add	r3, r2
 800bbce:	009b      	lsls	r3, r3, #2
 800bbd0:	4a09      	ldr	r2, [pc, #36]	@ (800bbf8 <xTaskPriorityDisinherit+0xdc>)
 800bbd2:	441a      	add	r2, r3
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	3304      	adds	r3, #4
 800bbd8:	4619      	mov	r1, r3
 800bbda:	4610      	mov	r0, r2
 800bbdc:	f7fd ffa7 	bl	8009b2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bbe4:	697b      	ldr	r3, [r7, #20]
	}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3718      	adds	r7, #24
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	2000110c 	.word	0x2000110c
 800bbf4:	200015e8 	.word	0x200015e8
 800bbf8:	20001110 	.word	0x20001110

0800bbfc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b088      	sub	sp, #32
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d06c      	beq.n	800bcee <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bc14:	69bb      	ldr	r3, [r7, #24]
 800bc16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d10b      	bne.n	800bc34 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800bc1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc20:	f383 8811 	msr	BASEPRI, r3
 800bc24:	f3bf 8f6f 	isb	sy
 800bc28:	f3bf 8f4f 	dsb	sy
 800bc2c:	60fb      	str	r3, [r7, #12]
}
 800bc2e:	bf00      	nop
 800bc30:	bf00      	nop
 800bc32:	e7fd      	b.n	800bc30 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bc34:	69bb      	ldr	r3, [r7, #24]
 800bc36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc38:	683a      	ldr	r2, [r7, #0]
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d902      	bls.n	800bc44 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	61fb      	str	r3, [r7, #28]
 800bc42:	e002      	b.n	800bc4a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bc44:	69bb      	ldr	r3, [r7, #24]
 800bc46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc48:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bc4a:	69bb      	ldr	r3, [r7, #24]
 800bc4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc4e:	69fa      	ldr	r2, [r7, #28]
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d04c      	beq.n	800bcee <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bc54:	69bb      	ldr	r3, [r7, #24]
 800bc56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc58:	697a      	ldr	r2, [r7, #20]
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	d147      	bne.n	800bcee <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bc5e:	4b26      	ldr	r3, [pc, #152]	@ (800bcf8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	69ba      	ldr	r2, [r7, #24]
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d10b      	bne.n	800bc80 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800bc68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc6c:	f383 8811 	msr	BASEPRI, r3
 800bc70:	f3bf 8f6f 	isb	sy
 800bc74:	f3bf 8f4f 	dsb	sy
 800bc78:	60bb      	str	r3, [r7, #8]
}
 800bc7a:	bf00      	nop
 800bc7c:	bf00      	nop
 800bc7e:	e7fd      	b.n	800bc7c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bc80:	69bb      	ldr	r3, [r7, #24]
 800bc82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc84:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bc86:	69bb      	ldr	r3, [r7, #24]
 800bc88:	69fa      	ldr	r2, [r7, #28]
 800bc8a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bc8c:	69bb      	ldr	r3, [r7, #24]
 800bc8e:	699b      	ldr	r3, [r3, #24]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	db04      	blt.n	800bc9e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc94:	69fb      	ldr	r3, [r7, #28]
 800bc96:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bc9a:	69bb      	ldr	r3, [r7, #24]
 800bc9c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bc9e:	69bb      	ldr	r3, [r7, #24]
 800bca0:	6959      	ldr	r1, [r3, #20]
 800bca2:	693a      	ldr	r2, [r7, #16]
 800bca4:	4613      	mov	r3, r2
 800bca6:	009b      	lsls	r3, r3, #2
 800bca8:	4413      	add	r3, r2
 800bcaa:	009b      	lsls	r3, r3, #2
 800bcac:	4a13      	ldr	r2, [pc, #76]	@ (800bcfc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bcae:	4413      	add	r3, r2
 800bcb0:	4299      	cmp	r1, r3
 800bcb2:	d11c      	bne.n	800bcee <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bcb4:	69bb      	ldr	r3, [r7, #24]
 800bcb6:	3304      	adds	r3, #4
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f7fd ff95 	bl	8009be8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bcbe:	69bb      	ldr	r3, [r7, #24]
 800bcc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcc2:	4b0f      	ldr	r3, [pc, #60]	@ (800bd00 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d903      	bls.n	800bcd2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800bcca:	69bb      	ldr	r3, [r7, #24]
 800bccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcce:	4a0c      	ldr	r2, [pc, #48]	@ (800bd00 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bcd0:	6013      	str	r3, [r2, #0]
 800bcd2:	69bb      	ldr	r3, [r7, #24]
 800bcd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcd6:	4613      	mov	r3, r2
 800bcd8:	009b      	lsls	r3, r3, #2
 800bcda:	4413      	add	r3, r2
 800bcdc:	009b      	lsls	r3, r3, #2
 800bcde:	4a07      	ldr	r2, [pc, #28]	@ (800bcfc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bce0:	441a      	add	r2, r3
 800bce2:	69bb      	ldr	r3, [r7, #24]
 800bce4:	3304      	adds	r3, #4
 800bce6:	4619      	mov	r1, r3
 800bce8:	4610      	mov	r0, r2
 800bcea:	f7fd ff20 	bl	8009b2e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bcee:	bf00      	nop
 800bcf0:	3720      	adds	r7, #32
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
 800bcf6:	bf00      	nop
 800bcf8:	2000110c 	.word	0x2000110c
 800bcfc:	20001110 	.word	0x20001110
 800bd00:	200015e8 	.word	0x200015e8

0800bd04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bd04:	b480      	push	{r7}
 800bd06:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bd08:	4b07      	ldr	r3, [pc, #28]	@ (800bd28 <pvTaskIncrementMutexHeldCount+0x24>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d004      	beq.n	800bd1a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bd10:	4b05      	ldr	r3, [pc, #20]	@ (800bd28 <pvTaskIncrementMutexHeldCount+0x24>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bd16:	3201      	adds	r2, #1
 800bd18:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800bd1a:	4b03      	ldr	r3, [pc, #12]	@ (800bd28 <pvTaskIncrementMutexHeldCount+0x24>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
	}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	46bd      	mov	sp, r7
 800bd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd26:	4770      	bx	lr
 800bd28:	2000110c 	.word	0x2000110c

0800bd2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b084      	sub	sp, #16
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bd36:	4b21      	ldr	r3, [pc, #132]	@ (800bdbc <prvAddCurrentTaskToDelayedList+0x90>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd3c:	4b20      	ldr	r3, [pc, #128]	@ (800bdc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	3304      	adds	r3, #4
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7fd ff50 	bl	8009be8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bd4e:	d10a      	bne.n	800bd66 <prvAddCurrentTaskToDelayedList+0x3a>
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d007      	beq.n	800bd66 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd56:	4b1a      	ldr	r3, [pc, #104]	@ (800bdc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	3304      	adds	r3, #4
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	4819      	ldr	r0, [pc, #100]	@ (800bdc4 <prvAddCurrentTaskToDelayedList+0x98>)
 800bd60:	f7fd fee5 	bl	8009b2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bd64:	e026      	b.n	800bdb4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bd66:	68fa      	ldr	r2, [r7, #12]
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	4413      	add	r3, r2
 800bd6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bd6e:	4b14      	ldr	r3, [pc, #80]	@ (800bdc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	68ba      	ldr	r2, [r7, #8]
 800bd74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bd76:	68ba      	ldr	r2, [r7, #8]
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d209      	bcs.n	800bd92 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd7e:	4b12      	ldr	r3, [pc, #72]	@ (800bdc8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bd80:	681a      	ldr	r2, [r3, #0]
 800bd82:	4b0f      	ldr	r3, [pc, #60]	@ (800bdc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	3304      	adds	r3, #4
 800bd88:	4619      	mov	r1, r3
 800bd8a:	4610      	mov	r0, r2
 800bd8c:	f7fd fef3 	bl	8009b76 <vListInsert>
}
 800bd90:	e010      	b.n	800bdb4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd92:	4b0e      	ldr	r3, [pc, #56]	@ (800bdcc <prvAddCurrentTaskToDelayedList+0xa0>)
 800bd94:	681a      	ldr	r2, [r3, #0]
 800bd96:	4b0a      	ldr	r3, [pc, #40]	@ (800bdc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	3304      	adds	r3, #4
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	4610      	mov	r0, r2
 800bda0:	f7fd fee9 	bl	8009b76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bda4:	4b0a      	ldr	r3, [pc, #40]	@ (800bdd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	68ba      	ldr	r2, [r7, #8]
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d202      	bcs.n	800bdb4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bdae:	4a08      	ldr	r2, [pc, #32]	@ (800bdd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	6013      	str	r3, [r2, #0]
}
 800bdb4:	bf00      	nop
 800bdb6:	3710      	adds	r7, #16
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}
 800bdbc:	200015e4 	.word	0x200015e4
 800bdc0:	2000110c 	.word	0x2000110c
 800bdc4:	200015cc 	.word	0x200015cc
 800bdc8:	2000159c 	.word	0x2000159c
 800bdcc:	20001598 	.word	0x20001598
 800bdd0:	20001600 	.word	0x20001600

0800bdd4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b08a      	sub	sp, #40	@ 0x28
 800bdd8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bdda:	2300      	movs	r3, #0
 800bddc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bdde:	f000 fb13 	bl	800c408 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bde2:	4b1d      	ldr	r3, [pc, #116]	@ (800be58 <xTimerCreateTimerTask+0x84>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d021      	beq.n	800be2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bdea:	2300      	movs	r3, #0
 800bdec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bdf2:	1d3a      	adds	r2, r7, #4
 800bdf4:	f107 0108 	add.w	r1, r7, #8
 800bdf8:	f107 030c 	add.w	r3, r7, #12
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f7fd fe4f 	bl	8009aa0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800be02:	6879      	ldr	r1, [r7, #4]
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	68fa      	ldr	r2, [r7, #12]
 800be08:	9202      	str	r2, [sp, #8]
 800be0a:	9301      	str	r3, [sp, #4]
 800be0c:	2302      	movs	r3, #2
 800be0e:	9300      	str	r3, [sp, #0]
 800be10:	2300      	movs	r3, #0
 800be12:	460a      	mov	r2, r1
 800be14:	4911      	ldr	r1, [pc, #68]	@ (800be5c <xTimerCreateTimerTask+0x88>)
 800be16:	4812      	ldr	r0, [pc, #72]	@ (800be60 <xTimerCreateTimerTask+0x8c>)
 800be18:	f7fe ff64 	bl	800ace4 <xTaskCreateStatic>
 800be1c:	4603      	mov	r3, r0
 800be1e:	4a11      	ldr	r2, [pc, #68]	@ (800be64 <xTimerCreateTimerTask+0x90>)
 800be20:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800be22:	4b10      	ldr	r3, [pc, #64]	@ (800be64 <xTimerCreateTimerTask+0x90>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d001      	beq.n	800be2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800be2a:	2301      	movs	r3, #1
 800be2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d10b      	bne.n	800be4c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800be34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be38:	f383 8811 	msr	BASEPRI, r3
 800be3c:	f3bf 8f6f 	isb	sy
 800be40:	f3bf 8f4f 	dsb	sy
 800be44:	613b      	str	r3, [r7, #16]
}
 800be46:	bf00      	nop
 800be48:	bf00      	nop
 800be4a:	e7fd      	b.n	800be48 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800be4c:	697b      	ldr	r3, [r7, #20]
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3718      	adds	r7, #24
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
 800be56:	bf00      	nop
 800be58:	2000163c 	.word	0x2000163c
 800be5c:	08011de4 	.word	0x08011de4
 800be60:	0800bfa1 	.word	0x0800bfa1
 800be64:	20001640 	.word	0x20001640

0800be68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b08a      	sub	sp, #40	@ 0x28
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	60f8      	str	r0, [r7, #12]
 800be70:	60b9      	str	r1, [r7, #8]
 800be72:	607a      	str	r2, [r7, #4]
 800be74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800be76:	2300      	movs	r3, #0
 800be78:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d10b      	bne.n	800be98 <xTimerGenericCommand+0x30>
	__asm volatile
 800be80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be84:	f383 8811 	msr	BASEPRI, r3
 800be88:	f3bf 8f6f 	isb	sy
 800be8c:	f3bf 8f4f 	dsb	sy
 800be90:	623b      	str	r3, [r7, #32]
}
 800be92:	bf00      	nop
 800be94:	bf00      	nop
 800be96:	e7fd      	b.n	800be94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800be98:	4b19      	ldr	r3, [pc, #100]	@ (800bf00 <xTimerGenericCommand+0x98>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d02a      	beq.n	800bef6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	2b05      	cmp	r3, #5
 800beb0:	dc18      	bgt.n	800bee4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800beb2:	f7ff fdad 	bl	800ba10 <xTaskGetSchedulerState>
 800beb6:	4603      	mov	r3, r0
 800beb8:	2b02      	cmp	r3, #2
 800beba:	d109      	bne.n	800bed0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bebc:	4b10      	ldr	r3, [pc, #64]	@ (800bf00 <xTimerGenericCommand+0x98>)
 800bebe:	6818      	ldr	r0, [r3, #0]
 800bec0:	f107 0110 	add.w	r1, r7, #16
 800bec4:	2300      	movs	r3, #0
 800bec6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bec8:	f7fe f924 	bl	800a114 <xQueueGenericSend>
 800becc:	6278      	str	r0, [r7, #36]	@ 0x24
 800bece:	e012      	b.n	800bef6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bed0:	4b0b      	ldr	r3, [pc, #44]	@ (800bf00 <xTimerGenericCommand+0x98>)
 800bed2:	6818      	ldr	r0, [r3, #0]
 800bed4:	f107 0110 	add.w	r1, r7, #16
 800bed8:	2300      	movs	r3, #0
 800beda:	2200      	movs	r2, #0
 800bedc:	f7fe f91a 	bl	800a114 <xQueueGenericSend>
 800bee0:	6278      	str	r0, [r7, #36]	@ 0x24
 800bee2:	e008      	b.n	800bef6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bee4:	4b06      	ldr	r3, [pc, #24]	@ (800bf00 <xTimerGenericCommand+0x98>)
 800bee6:	6818      	ldr	r0, [r3, #0]
 800bee8:	f107 0110 	add.w	r1, r7, #16
 800beec:	2300      	movs	r3, #0
 800beee:	683a      	ldr	r2, [r7, #0]
 800bef0:	f7fe fa12 	bl	800a318 <xQueueGenericSendFromISR>
 800bef4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3728      	adds	r7, #40	@ 0x28
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}
 800bf00:	2000163c 	.word	0x2000163c

0800bf04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b088      	sub	sp, #32
 800bf08:	af02      	add	r7, sp, #8
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf0e:	4b23      	ldr	r3, [pc, #140]	@ (800bf9c <prvProcessExpiredTimer+0x98>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	68db      	ldr	r3, [r3, #12]
 800bf14:	68db      	ldr	r3, [r3, #12]
 800bf16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	3304      	adds	r3, #4
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f7fd fe63 	bl	8009be8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf28:	f003 0304 	and.w	r3, r3, #4
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d023      	beq.n	800bf78 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	699a      	ldr	r2, [r3, #24]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	18d1      	adds	r1, r2, r3
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	683a      	ldr	r2, [r7, #0]
 800bf3c:	6978      	ldr	r0, [r7, #20]
 800bf3e:	f000 f8d5 	bl	800c0ec <prvInsertTimerInActiveList>
 800bf42:	4603      	mov	r3, r0
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d020      	beq.n	800bf8a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bf48:	2300      	movs	r3, #0
 800bf4a:	9300      	str	r3, [sp, #0]
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	687a      	ldr	r2, [r7, #4]
 800bf50:	2100      	movs	r1, #0
 800bf52:	6978      	ldr	r0, [r7, #20]
 800bf54:	f7ff ff88 	bl	800be68 <xTimerGenericCommand>
 800bf58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d114      	bne.n	800bf8a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bf60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf64:	f383 8811 	msr	BASEPRI, r3
 800bf68:	f3bf 8f6f 	isb	sy
 800bf6c:	f3bf 8f4f 	dsb	sy
 800bf70:	60fb      	str	r3, [r7, #12]
}
 800bf72:	bf00      	nop
 800bf74:	bf00      	nop
 800bf76:	e7fd      	b.n	800bf74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf7e:	f023 0301 	bic.w	r3, r3, #1
 800bf82:	b2da      	uxtb	r2, r3
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	6a1b      	ldr	r3, [r3, #32]
 800bf8e:	6978      	ldr	r0, [r7, #20]
 800bf90:	4798      	blx	r3
}
 800bf92:	bf00      	nop
 800bf94:	3718      	adds	r7, #24
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	20001634 	.word	0x20001634

0800bfa0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b084      	sub	sp, #16
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bfa8:	f107 0308 	add.w	r3, r7, #8
 800bfac:	4618      	mov	r0, r3
 800bfae:	f000 f859 	bl	800c064 <prvGetNextExpireTime>
 800bfb2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	4619      	mov	r1, r3
 800bfb8:	68f8      	ldr	r0, [r7, #12]
 800bfba:	f000 f805 	bl	800bfc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bfbe:	f000 f8d7 	bl	800c170 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bfc2:	bf00      	nop
 800bfc4:	e7f0      	b.n	800bfa8 <prvTimerTask+0x8>
	...

0800bfc8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b084      	sub	sp, #16
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bfd2:	f7ff f915 	bl	800b200 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bfd6:	f107 0308 	add.w	r3, r7, #8
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f000 f866 	bl	800c0ac <prvSampleTimeNow>
 800bfe0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d130      	bne.n	800c04a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d10a      	bne.n	800c004 <prvProcessTimerOrBlockTask+0x3c>
 800bfee:	687a      	ldr	r2, [r7, #4]
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d806      	bhi.n	800c004 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bff6:	f7ff f911 	bl	800b21c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bffa:	68f9      	ldr	r1, [r7, #12]
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f7ff ff81 	bl	800bf04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c002:	e024      	b.n	800c04e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d008      	beq.n	800c01c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c00a:	4b13      	ldr	r3, [pc, #76]	@ (800c058 <prvProcessTimerOrBlockTask+0x90>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d101      	bne.n	800c018 <prvProcessTimerOrBlockTask+0x50>
 800c014:	2301      	movs	r3, #1
 800c016:	e000      	b.n	800c01a <prvProcessTimerOrBlockTask+0x52>
 800c018:	2300      	movs	r3, #0
 800c01a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c01c:	4b0f      	ldr	r3, [pc, #60]	@ (800c05c <prvProcessTimerOrBlockTask+0x94>)
 800c01e:	6818      	ldr	r0, [r3, #0]
 800c020:	687a      	ldr	r2, [r7, #4]
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	1ad3      	subs	r3, r2, r3
 800c026:	683a      	ldr	r2, [r7, #0]
 800c028:	4619      	mov	r1, r3
 800c02a:	f7fe fe27 	bl	800ac7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c02e:	f7ff f8f5 	bl	800b21c <xTaskResumeAll>
 800c032:	4603      	mov	r3, r0
 800c034:	2b00      	cmp	r3, #0
 800c036:	d10a      	bne.n	800c04e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c038:	4b09      	ldr	r3, [pc, #36]	@ (800c060 <prvProcessTimerOrBlockTask+0x98>)
 800c03a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c03e:	601a      	str	r2, [r3, #0]
 800c040:	f3bf 8f4f 	dsb	sy
 800c044:	f3bf 8f6f 	isb	sy
}
 800c048:	e001      	b.n	800c04e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c04a:	f7ff f8e7 	bl	800b21c <xTaskResumeAll>
}
 800c04e:	bf00      	nop
 800c050:	3710      	adds	r7, #16
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}
 800c056:	bf00      	nop
 800c058:	20001638 	.word	0x20001638
 800c05c:	2000163c 	.word	0x2000163c
 800c060:	e000ed04 	.word	0xe000ed04

0800c064 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c064:	b480      	push	{r7}
 800c066:	b085      	sub	sp, #20
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c06c:	4b0e      	ldr	r3, [pc, #56]	@ (800c0a8 <prvGetNextExpireTime+0x44>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d101      	bne.n	800c07a <prvGetNextExpireTime+0x16>
 800c076:	2201      	movs	r2, #1
 800c078:	e000      	b.n	800c07c <prvGetNextExpireTime+0x18>
 800c07a:	2200      	movs	r2, #0
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d105      	bne.n	800c094 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c088:	4b07      	ldr	r3, [pc, #28]	@ (800c0a8 <prvGetNextExpireTime+0x44>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	68db      	ldr	r3, [r3, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	60fb      	str	r3, [r7, #12]
 800c092:	e001      	b.n	800c098 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c094:	2300      	movs	r3, #0
 800c096:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c098:	68fb      	ldr	r3, [r7, #12]
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3714      	adds	r7, #20
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a4:	4770      	bx	lr
 800c0a6:	bf00      	nop
 800c0a8:	20001634 	.word	0x20001634

0800c0ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b084      	sub	sp, #16
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c0b4:	f7ff f950 	bl	800b358 <xTaskGetTickCount>
 800c0b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c0ba:	4b0b      	ldr	r3, [pc, #44]	@ (800c0e8 <prvSampleTimeNow+0x3c>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	68fa      	ldr	r2, [r7, #12]
 800c0c0:	429a      	cmp	r2, r3
 800c0c2:	d205      	bcs.n	800c0d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c0c4:	f000 f93a 	bl	800c33c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	601a      	str	r2, [r3, #0]
 800c0ce:	e002      	b.n	800c0d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c0d6:	4a04      	ldr	r2, [pc, #16]	@ (800c0e8 <prvSampleTimeNow+0x3c>)
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3710      	adds	r7, #16
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	20001644 	.word	0x20001644

0800c0ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b086      	sub	sp, #24
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	60f8      	str	r0, [r7, #12]
 800c0f4:	60b9      	str	r1, [r7, #8]
 800c0f6:	607a      	str	r2, [r7, #4]
 800c0f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	68ba      	ldr	r2, [r7, #8]
 800c102:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	68fa      	ldr	r2, [r7, #12]
 800c108:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c10a:	68ba      	ldr	r2, [r7, #8]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	429a      	cmp	r2, r3
 800c110:	d812      	bhi.n	800c138 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	1ad2      	subs	r2, r2, r3
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	699b      	ldr	r3, [r3, #24]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d302      	bcc.n	800c126 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c120:	2301      	movs	r3, #1
 800c122:	617b      	str	r3, [r7, #20]
 800c124:	e01b      	b.n	800c15e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c126:	4b10      	ldr	r3, [pc, #64]	@ (800c168 <prvInsertTimerInActiveList+0x7c>)
 800c128:	681a      	ldr	r2, [r3, #0]
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	3304      	adds	r3, #4
 800c12e:	4619      	mov	r1, r3
 800c130:	4610      	mov	r0, r2
 800c132:	f7fd fd20 	bl	8009b76 <vListInsert>
 800c136:	e012      	b.n	800c15e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c138:	687a      	ldr	r2, [r7, #4]
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d206      	bcs.n	800c14e <prvInsertTimerInActiveList+0x62>
 800c140:	68ba      	ldr	r2, [r7, #8]
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	429a      	cmp	r2, r3
 800c146:	d302      	bcc.n	800c14e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c148:	2301      	movs	r3, #1
 800c14a:	617b      	str	r3, [r7, #20]
 800c14c:	e007      	b.n	800c15e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c14e:	4b07      	ldr	r3, [pc, #28]	@ (800c16c <prvInsertTimerInActiveList+0x80>)
 800c150:	681a      	ldr	r2, [r3, #0]
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	3304      	adds	r3, #4
 800c156:	4619      	mov	r1, r3
 800c158:	4610      	mov	r0, r2
 800c15a:	f7fd fd0c 	bl	8009b76 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c15e:	697b      	ldr	r3, [r7, #20]
}
 800c160:	4618      	mov	r0, r3
 800c162:	3718      	adds	r7, #24
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}
 800c168:	20001638 	.word	0x20001638
 800c16c:	20001634 	.word	0x20001634

0800c170 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b08e      	sub	sp, #56	@ 0x38
 800c174:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c176:	e0ce      	b.n	800c316 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	da19      	bge.n	800c1b2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c17e:	1d3b      	adds	r3, r7, #4
 800c180:	3304      	adds	r3, #4
 800c182:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c186:	2b00      	cmp	r3, #0
 800c188:	d10b      	bne.n	800c1a2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c18a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c18e:	f383 8811 	msr	BASEPRI, r3
 800c192:	f3bf 8f6f 	isb	sy
 800c196:	f3bf 8f4f 	dsb	sy
 800c19a:	61fb      	str	r3, [r7, #28]
}
 800c19c:	bf00      	nop
 800c19e:	bf00      	nop
 800c1a0:	e7fd      	b.n	800c19e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c1a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c1a8:	6850      	ldr	r0, [r2, #4]
 800c1aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c1ac:	6892      	ldr	r2, [r2, #8]
 800c1ae:	4611      	mov	r1, r2
 800c1b0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	f2c0 80ae 	blt.w	800c316 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1c0:	695b      	ldr	r3, [r3, #20]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d004      	beq.n	800c1d0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1c8:	3304      	adds	r3, #4
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f7fd fd0c 	bl	8009be8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c1d0:	463b      	mov	r3, r7
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7ff ff6a 	bl	800c0ac <prvSampleTimeNow>
 800c1d8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2b09      	cmp	r3, #9
 800c1de:	f200 8097 	bhi.w	800c310 <prvProcessReceivedCommands+0x1a0>
 800c1e2:	a201      	add	r2, pc, #4	@ (adr r2, 800c1e8 <prvProcessReceivedCommands+0x78>)
 800c1e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1e8:	0800c211 	.word	0x0800c211
 800c1ec:	0800c211 	.word	0x0800c211
 800c1f0:	0800c211 	.word	0x0800c211
 800c1f4:	0800c287 	.word	0x0800c287
 800c1f8:	0800c29b 	.word	0x0800c29b
 800c1fc:	0800c2e7 	.word	0x0800c2e7
 800c200:	0800c211 	.word	0x0800c211
 800c204:	0800c211 	.word	0x0800c211
 800c208:	0800c287 	.word	0x0800c287
 800c20c:	0800c29b 	.word	0x0800c29b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c212:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c216:	f043 0301 	orr.w	r3, r3, #1
 800c21a:	b2da      	uxtb	r2, r3
 800c21c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c21e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c222:	68ba      	ldr	r2, [r7, #8]
 800c224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c226:	699b      	ldr	r3, [r3, #24]
 800c228:	18d1      	adds	r1, r2, r3
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c22e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c230:	f7ff ff5c 	bl	800c0ec <prvInsertTimerInActiveList>
 800c234:	4603      	mov	r3, r0
 800c236:	2b00      	cmp	r3, #0
 800c238:	d06c      	beq.n	800c314 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c23a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c23c:	6a1b      	ldr	r3, [r3, #32]
 800c23e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c240:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c244:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c248:	f003 0304 	and.w	r3, r3, #4
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d061      	beq.n	800c314 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c250:	68ba      	ldr	r2, [r7, #8]
 800c252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c254:	699b      	ldr	r3, [r3, #24]
 800c256:	441a      	add	r2, r3
 800c258:	2300      	movs	r3, #0
 800c25a:	9300      	str	r3, [sp, #0]
 800c25c:	2300      	movs	r3, #0
 800c25e:	2100      	movs	r1, #0
 800c260:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c262:	f7ff fe01 	bl	800be68 <xTimerGenericCommand>
 800c266:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c268:	6a3b      	ldr	r3, [r7, #32]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d152      	bne.n	800c314 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c26e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c272:	f383 8811 	msr	BASEPRI, r3
 800c276:	f3bf 8f6f 	isb	sy
 800c27a:	f3bf 8f4f 	dsb	sy
 800c27e:	61bb      	str	r3, [r7, #24]
}
 800c280:	bf00      	nop
 800c282:	bf00      	nop
 800c284:	e7fd      	b.n	800c282 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c288:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c28c:	f023 0301 	bic.w	r3, r3, #1
 800c290:	b2da      	uxtb	r2, r3
 800c292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c294:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c298:	e03d      	b.n	800c316 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c29a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c29c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c2a0:	f043 0301 	orr.w	r3, r3, #1
 800c2a4:	b2da      	uxtb	r2, r3
 800c2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c2ac:	68ba      	ldr	r2, [r7, #8]
 800c2ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c2b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2b4:	699b      	ldr	r3, [r3, #24]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d10b      	bne.n	800c2d2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c2ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2be:	f383 8811 	msr	BASEPRI, r3
 800c2c2:	f3bf 8f6f 	isb	sy
 800c2c6:	f3bf 8f4f 	dsb	sy
 800c2ca:	617b      	str	r3, [r7, #20]
}
 800c2cc:	bf00      	nop
 800c2ce:	bf00      	nop
 800c2d0:	e7fd      	b.n	800c2ce <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c2d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2d4:	699a      	ldr	r2, [r3, #24]
 800c2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2d8:	18d1      	adds	r1, r2, r3
 800c2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c2e0:	f7ff ff04 	bl	800c0ec <prvInsertTimerInActiveList>
					break;
 800c2e4:	e017      	b.n	800c316 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c2e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c2ec:	f003 0302 	and.w	r3, r3, #2
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d103      	bne.n	800c2fc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c2f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c2f6:	f000 fbe7 	bl	800cac8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c2fa:	e00c      	b.n	800c316 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c2fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c302:	f023 0301 	bic.w	r3, r3, #1
 800c306:	b2da      	uxtb	r2, r3
 800c308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c30a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c30e:	e002      	b.n	800c316 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c310:	bf00      	nop
 800c312:	e000      	b.n	800c316 <prvProcessReceivedCommands+0x1a6>
					break;
 800c314:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c316:	4b08      	ldr	r3, [pc, #32]	@ (800c338 <prvProcessReceivedCommands+0x1c8>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	1d39      	adds	r1, r7, #4
 800c31c:	2200      	movs	r2, #0
 800c31e:	4618      	mov	r0, r3
 800c320:	f7fe f898 	bl	800a454 <xQueueReceive>
 800c324:	4603      	mov	r3, r0
 800c326:	2b00      	cmp	r3, #0
 800c328:	f47f af26 	bne.w	800c178 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c32c:	bf00      	nop
 800c32e:	bf00      	nop
 800c330:	3730      	adds	r7, #48	@ 0x30
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
 800c336:	bf00      	nop
 800c338:	2000163c 	.word	0x2000163c

0800c33c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b088      	sub	sp, #32
 800c340:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c342:	e049      	b.n	800c3d8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c344:	4b2e      	ldr	r3, [pc, #184]	@ (800c400 <prvSwitchTimerLists+0xc4>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	68db      	ldr	r3, [r3, #12]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c34e:	4b2c      	ldr	r3, [pc, #176]	@ (800c400 <prvSwitchTimerLists+0xc4>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	68db      	ldr	r3, [r3, #12]
 800c354:	68db      	ldr	r3, [r3, #12]
 800c356:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	3304      	adds	r3, #4
 800c35c:	4618      	mov	r0, r3
 800c35e:	f7fd fc43 	bl	8009be8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	6a1b      	ldr	r3, [r3, #32]
 800c366:	68f8      	ldr	r0, [r7, #12]
 800c368:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c370:	f003 0304 	and.w	r3, r3, #4
 800c374:	2b00      	cmp	r3, #0
 800c376:	d02f      	beq.n	800c3d8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	699b      	ldr	r3, [r3, #24]
 800c37c:	693a      	ldr	r2, [r7, #16]
 800c37e:	4413      	add	r3, r2
 800c380:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c382:	68ba      	ldr	r2, [r7, #8]
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	429a      	cmp	r2, r3
 800c388:	d90e      	bls.n	800c3a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	68ba      	ldr	r2, [r7, #8]
 800c38e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	68fa      	ldr	r2, [r7, #12]
 800c394:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c396:	4b1a      	ldr	r3, [pc, #104]	@ (800c400 <prvSwitchTimerLists+0xc4>)
 800c398:	681a      	ldr	r2, [r3, #0]
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	3304      	adds	r3, #4
 800c39e:	4619      	mov	r1, r3
 800c3a0:	4610      	mov	r0, r2
 800c3a2:	f7fd fbe8 	bl	8009b76 <vListInsert>
 800c3a6:	e017      	b.n	800c3d8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	9300      	str	r3, [sp, #0]
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	693a      	ldr	r2, [r7, #16]
 800c3b0:	2100      	movs	r1, #0
 800c3b2:	68f8      	ldr	r0, [r7, #12]
 800c3b4:	f7ff fd58 	bl	800be68 <xTimerGenericCommand>
 800c3b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d10b      	bne.n	800c3d8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c3c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3c4:	f383 8811 	msr	BASEPRI, r3
 800c3c8:	f3bf 8f6f 	isb	sy
 800c3cc:	f3bf 8f4f 	dsb	sy
 800c3d0:	603b      	str	r3, [r7, #0]
}
 800c3d2:	bf00      	nop
 800c3d4:	bf00      	nop
 800c3d6:	e7fd      	b.n	800c3d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c3d8:	4b09      	ldr	r3, [pc, #36]	@ (800c400 <prvSwitchTimerLists+0xc4>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d1b0      	bne.n	800c344 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c3e2:	4b07      	ldr	r3, [pc, #28]	@ (800c400 <prvSwitchTimerLists+0xc4>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c3e8:	4b06      	ldr	r3, [pc, #24]	@ (800c404 <prvSwitchTimerLists+0xc8>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4a04      	ldr	r2, [pc, #16]	@ (800c400 <prvSwitchTimerLists+0xc4>)
 800c3ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c3f0:	4a04      	ldr	r2, [pc, #16]	@ (800c404 <prvSwitchTimerLists+0xc8>)
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	6013      	str	r3, [r2, #0]
}
 800c3f6:	bf00      	nop
 800c3f8:	3718      	adds	r7, #24
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
 800c3fe:	bf00      	nop
 800c400:	20001634 	.word	0x20001634
 800c404:	20001638 	.word	0x20001638

0800c408 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c40e:	f000 f96b 	bl	800c6e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c412:	4b15      	ldr	r3, [pc, #84]	@ (800c468 <prvCheckForValidListAndQueue+0x60>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d120      	bne.n	800c45c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c41a:	4814      	ldr	r0, [pc, #80]	@ (800c46c <prvCheckForValidListAndQueue+0x64>)
 800c41c:	f7fd fb5a 	bl	8009ad4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c420:	4813      	ldr	r0, [pc, #76]	@ (800c470 <prvCheckForValidListAndQueue+0x68>)
 800c422:	f7fd fb57 	bl	8009ad4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c426:	4b13      	ldr	r3, [pc, #76]	@ (800c474 <prvCheckForValidListAndQueue+0x6c>)
 800c428:	4a10      	ldr	r2, [pc, #64]	@ (800c46c <prvCheckForValidListAndQueue+0x64>)
 800c42a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c42c:	4b12      	ldr	r3, [pc, #72]	@ (800c478 <prvCheckForValidListAndQueue+0x70>)
 800c42e:	4a10      	ldr	r2, [pc, #64]	@ (800c470 <prvCheckForValidListAndQueue+0x68>)
 800c430:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c432:	2300      	movs	r3, #0
 800c434:	9300      	str	r3, [sp, #0]
 800c436:	4b11      	ldr	r3, [pc, #68]	@ (800c47c <prvCheckForValidListAndQueue+0x74>)
 800c438:	4a11      	ldr	r2, [pc, #68]	@ (800c480 <prvCheckForValidListAndQueue+0x78>)
 800c43a:	2110      	movs	r1, #16
 800c43c:	200a      	movs	r0, #10
 800c43e:	f7fd fc67 	bl	8009d10 <xQueueGenericCreateStatic>
 800c442:	4603      	mov	r3, r0
 800c444:	4a08      	ldr	r2, [pc, #32]	@ (800c468 <prvCheckForValidListAndQueue+0x60>)
 800c446:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c448:	4b07      	ldr	r3, [pc, #28]	@ (800c468 <prvCheckForValidListAndQueue+0x60>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d005      	beq.n	800c45c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c450:	4b05      	ldr	r3, [pc, #20]	@ (800c468 <prvCheckForValidListAndQueue+0x60>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	490b      	ldr	r1, [pc, #44]	@ (800c484 <prvCheckForValidListAndQueue+0x7c>)
 800c456:	4618      	mov	r0, r3
 800c458:	f7fe fbbc 	bl	800abd4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c45c:	f000 f976 	bl	800c74c <vPortExitCritical>
}
 800c460:	bf00      	nop
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}
 800c466:	bf00      	nop
 800c468:	2000163c 	.word	0x2000163c
 800c46c:	2000160c 	.word	0x2000160c
 800c470:	20001620 	.word	0x20001620
 800c474:	20001634 	.word	0x20001634
 800c478:	20001638 	.word	0x20001638
 800c47c:	200016e8 	.word	0x200016e8
 800c480:	20001648 	.word	0x20001648
 800c484:	08011dec 	.word	0x08011dec

0800c488 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c488:	b480      	push	{r7}
 800c48a:	b085      	sub	sp, #20
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	60f8      	str	r0, [r7, #12]
 800c490:	60b9      	str	r1, [r7, #8]
 800c492:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	3b04      	subs	r3, #4
 800c498:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c4a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	3b04      	subs	r3, #4
 800c4a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	f023 0201 	bic.w	r2, r3, #1
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	3b04      	subs	r3, #4
 800c4b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c4b8:	4a0c      	ldr	r2, [pc, #48]	@ (800c4ec <pxPortInitialiseStack+0x64>)
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	3b14      	subs	r3, #20
 800c4c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	3b04      	subs	r3, #4
 800c4ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	f06f 0202 	mvn.w	r2, #2
 800c4d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	3b20      	subs	r3, #32
 800c4dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c4de:	68fb      	ldr	r3, [r7, #12]
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3714      	adds	r7, #20
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr
 800c4ec:	0800c4f1 	.word	0x0800c4f1

0800c4f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b085      	sub	sp, #20
 800c4f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c4fa:	4b13      	ldr	r3, [pc, #76]	@ (800c548 <prvTaskExitError+0x58>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c502:	d00b      	beq.n	800c51c <prvTaskExitError+0x2c>
	__asm volatile
 800c504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c508:	f383 8811 	msr	BASEPRI, r3
 800c50c:	f3bf 8f6f 	isb	sy
 800c510:	f3bf 8f4f 	dsb	sy
 800c514:	60fb      	str	r3, [r7, #12]
}
 800c516:	bf00      	nop
 800c518:	bf00      	nop
 800c51a:	e7fd      	b.n	800c518 <prvTaskExitError+0x28>
	__asm volatile
 800c51c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c520:	f383 8811 	msr	BASEPRI, r3
 800c524:	f3bf 8f6f 	isb	sy
 800c528:	f3bf 8f4f 	dsb	sy
 800c52c:	60bb      	str	r3, [r7, #8]
}
 800c52e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c530:	bf00      	nop
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d0fc      	beq.n	800c532 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c538:	bf00      	nop
 800c53a:	bf00      	nop
 800c53c:	3714      	adds	r7, #20
 800c53e:	46bd      	mov	sp, r7
 800c540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c544:	4770      	bx	lr
 800c546:	bf00      	nop
 800c548:	2000000c 	.word	0x2000000c
 800c54c:	00000000 	.word	0x00000000

0800c550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c550:	4b07      	ldr	r3, [pc, #28]	@ (800c570 <pxCurrentTCBConst2>)
 800c552:	6819      	ldr	r1, [r3, #0]
 800c554:	6808      	ldr	r0, [r1, #0]
 800c556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c55a:	f380 8809 	msr	PSP, r0
 800c55e:	f3bf 8f6f 	isb	sy
 800c562:	f04f 0000 	mov.w	r0, #0
 800c566:	f380 8811 	msr	BASEPRI, r0
 800c56a:	4770      	bx	lr
 800c56c:	f3af 8000 	nop.w

0800c570 <pxCurrentTCBConst2>:
 800c570:	2000110c 	.word	0x2000110c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c574:	bf00      	nop
 800c576:	bf00      	nop

0800c578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c578:	4808      	ldr	r0, [pc, #32]	@ (800c59c <prvPortStartFirstTask+0x24>)
 800c57a:	6800      	ldr	r0, [r0, #0]
 800c57c:	6800      	ldr	r0, [r0, #0]
 800c57e:	f380 8808 	msr	MSP, r0
 800c582:	f04f 0000 	mov.w	r0, #0
 800c586:	f380 8814 	msr	CONTROL, r0
 800c58a:	b662      	cpsie	i
 800c58c:	b661      	cpsie	f
 800c58e:	f3bf 8f4f 	dsb	sy
 800c592:	f3bf 8f6f 	isb	sy
 800c596:	df00      	svc	0
 800c598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c59a:	bf00      	nop
 800c59c:	e000ed08 	.word	0xe000ed08

0800c5a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b086      	sub	sp, #24
 800c5a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c5a6:	4b47      	ldr	r3, [pc, #284]	@ (800c6c4 <xPortStartScheduler+0x124>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4a47      	ldr	r2, [pc, #284]	@ (800c6c8 <xPortStartScheduler+0x128>)
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d10b      	bne.n	800c5c8 <xPortStartScheduler+0x28>
	__asm volatile
 800c5b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5b4:	f383 8811 	msr	BASEPRI, r3
 800c5b8:	f3bf 8f6f 	isb	sy
 800c5bc:	f3bf 8f4f 	dsb	sy
 800c5c0:	613b      	str	r3, [r7, #16]
}
 800c5c2:	bf00      	nop
 800c5c4:	bf00      	nop
 800c5c6:	e7fd      	b.n	800c5c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c5c8:	4b3e      	ldr	r3, [pc, #248]	@ (800c6c4 <xPortStartScheduler+0x124>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	4a3f      	ldr	r2, [pc, #252]	@ (800c6cc <xPortStartScheduler+0x12c>)
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d10b      	bne.n	800c5ea <xPortStartScheduler+0x4a>
	__asm volatile
 800c5d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5d6:	f383 8811 	msr	BASEPRI, r3
 800c5da:	f3bf 8f6f 	isb	sy
 800c5de:	f3bf 8f4f 	dsb	sy
 800c5e2:	60fb      	str	r3, [r7, #12]
}
 800c5e4:	bf00      	nop
 800c5e6:	bf00      	nop
 800c5e8:	e7fd      	b.n	800c5e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c5ea:	4b39      	ldr	r3, [pc, #228]	@ (800c6d0 <xPortStartScheduler+0x130>)
 800c5ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	b2db      	uxtb	r3, r3
 800c5f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	22ff      	movs	r2, #255	@ 0xff
 800c5fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	781b      	ldrb	r3, [r3, #0]
 800c600:	b2db      	uxtb	r3, r3
 800c602:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c604:	78fb      	ldrb	r3, [r7, #3]
 800c606:	b2db      	uxtb	r3, r3
 800c608:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c60c:	b2da      	uxtb	r2, r3
 800c60e:	4b31      	ldr	r3, [pc, #196]	@ (800c6d4 <xPortStartScheduler+0x134>)
 800c610:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c612:	4b31      	ldr	r3, [pc, #196]	@ (800c6d8 <xPortStartScheduler+0x138>)
 800c614:	2207      	movs	r2, #7
 800c616:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c618:	e009      	b.n	800c62e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c61a:	4b2f      	ldr	r3, [pc, #188]	@ (800c6d8 <xPortStartScheduler+0x138>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	3b01      	subs	r3, #1
 800c620:	4a2d      	ldr	r2, [pc, #180]	@ (800c6d8 <xPortStartScheduler+0x138>)
 800c622:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c624:	78fb      	ldrb	r3, [r7, #3]
 800c626:	b2db      	uxtb	r3, r3
 800c628:	005b      	lsls	r3, r3, #1
 800c62a:	b2db      	uxtb	r3, r3
 800c62c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c62e:	78fb      	ldrb	r3, [r7, #3]
 800c630:	b2db      	uxtb	r3, r3
 800c632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c636:	2b80      	cmp	r3, #128	@ 0x80
 800c638:	d0ef      	beq.n	800c61a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c63a:	4b27      	ldr	r3, [pc, #156]	@ (800c6d8 <xPortStartScheduler+0x138>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f1c3 0307 	rsb	r3, r3, #7
 800c642:	2b04      	cmp	r3, #4
 800c644:	d00b      	beq.n	800c65e <xPortStartScheduler+0xbe>
	__asm volatile
 800c646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c64a:	f383 8811 	msr	BASEPRI, r3
 800c64e:	f3bf 8f6f 	isb	sy
 800c652:	f3bf 8f4f 	dsb	sy
 800c656:	60bb      	str	r3, [r7, #8]
}
 800c658:	bf00      	nop
 800c65a:	bf00      	nop
 800c65c:	e7fd      	b.n	800c65a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c65e:	4b1e      	ldr	r3, [pc, #120]	@ (800c6d8 <xPortStartScheduler+0x138>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	021b      	lsls	r3, r3, #8
 800c664:	4a1c      	ldr	r2, [pc, #112]	@ (800c6d8 <xPortStartScheduler+0x138>)
 800c666:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c668:	4b1b      	ldr	r3, [pc, #108]	@ (800c6d8 <xPortStartScheduler+0x138>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c670:	4a19      	ldr	r2, [pc, #100]	@ (800c6d8 <xPortStartScheduler+0x138>)
 800c672:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	b2da      	uxtb	r2, r3
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c67c:	4b17      	ldr	r3, [pc, #92]	@ (800c6dc <xPortStartScheduler+0x13c>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	4a16      	ldr	r2, [pc, #88]	@ (800c6dc <xPortStartScheduler+0x13c>)
 800c682:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c686:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c688:	4b14      	ldr	r3, [pc, #80]	@ (800c6dc <xPortStartScheduler+0x13c>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4a13      	ldr	r2, [pc, #76]	@ (800c6dc <xPortStartScheduler+0x13c>)
 800c68e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c692:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c694:	f000 f8da 	bl	800c84c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c698:	4b11      	ldr	r3, [pc, #68]	@ (800c6e0 <xPortStartScheduler+0x140>)
 800c69a:	2200      	movs	r2, #0
 800c69c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c69e:	f000 f8f9 	bl	800c894 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c6a2:	4b10      	ldr	r3, [pc, #64]	@ (800c6e4 <xPortStartScheduler+0x144>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	4a0f      	ldr	r2, [pc, #60]	@ (800c6e4 <xPortStartScheduler+0x144>)
 800c6a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c6ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c6ae:	f7ff ff63 	bl	800c578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c6b2:	f7fe ff2d 	bl	800b510 <vTaskSwitchContext>
	prvTaskExitError();
 800c6b6:	f7ff ff1b 	bl	800c4f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c6ba:	2300      	movs	r3, #0
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3718      	adds	r7, #24
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}
 800c6c4:	e000ed00 	.word	0xe000ed00
 800c6c8:	410fc271 	.word	0x410fc271
 800c6cc:	410fc270 	.word	0x410fc270
 800c6d0:	e000e400 	.word	0xe000e400
 800c6d4:	20001738 	.word	0x20001738
 800c6d8:	2000173c 	.word	0x2000173c
 800c6dc:	e000ed20 	.word	0xe000ed20
 800c6e0:	2000000c 	.word	0x2000000c
 800c6e4:	e000ef34 	.word	0xe000ef34

0800c6e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b083      	sub	sp, #12
 800c6ec:	af00      	add	r7, sp, #0
	__asm volatile
 800c6ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6f2:	f383 8811 	msr	BASEPRI, r3
 800c6f6:	f3bf 8f6f 	isb	sy
 800c6fa:	f3bf 8f4f 	dsb	sy
 800c6fe:	607b      	str	r3, [r7, #4]
}
 800c700:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c702:	4b10      	ldr	r3, [pc, #64]	@ (800c744 <vPortEnterCritical+0x5c>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	3301      	adds	r3, #1
 800c708:	4a0e      	ldr	r2, [pc, #56]	@ (800c744 <vPortEnterCritical+0x5c>)
 800c70a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c70c:	4b0d      	ldr	r3, [pc, #52]	@ (800c744 <vPortEnterCritical+0x5c>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	2b01      	cmp	r3, #1
 800c712:	d110      	bne.n	800c736 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c714:	4b0c      	ldr	r3, [pc, #48]	@ (800c748 <vPortEnterCritical+0x60>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	b2db      	uxtb	r3, r3
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d00b      	beq.n	800c736 <vPortEnterCritical+0x4e>
	__asm volatile
 800c71e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c722:	f383 8811 	msr	BASEPRI, r3
 800c726:	f3bf 8f6f 	isb	sy
 800c72a:	f3bf 8f4f 	dsb	sy
 800c72e:	603b      	str	r3, [r7, #0]
}
 800c730:	bf00      	nop
 800c732:	bf00      	nop
 800c734:	e7fd      	b.n	800c732 <vPortEnterCritical+0x4a>
	}
}
 800c736:	bf00      	nop
 800c738:	370c      	adds	r7, #12
 800c73a:	46bd      	mov	sp, r7
 800c73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c740:	4770      	bx	lr
 800c742:	bf00      	nop
 800c744:	2000000c 	.word	0x2000000c
 800c748:	e000ed04 	.word	0xe000ed04

0800c74c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c74c:	b480      	push	{r7}
 800c74e:	b083      	sub	sp, #12
 800c750:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c752:	4b12      	ldr	r3, [pc, #72]	@ (800c79c <vPortExitCritical+0x50>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d10b      	bne.n	800c772 <vPortExitCritical+0x26>
	__asm volatile
 800c75a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c75e:	f383 8811 	msr	BASEPRI, r3
 800c762:	f3bf 8f6f 	isb	sy
 800c766:	f3bf 8f4f 	dsb	sy
 800c76a:	607b      	str	r3, [r7, #4]
}
 800c76c:	bf00      	nop
 800c76e:	bf00      	nop
 800c770:	e7fd      	b.n	800c76e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c772:	4b0a      	ldr	r3, [pc, #40]	@ (800c79c <vPortExitCritical+0x50>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	3b01      	subs	r3, #1
 800c778:	4a08      	ldr	r2, [pc, #32]	@ (800c79c <vPortExitCritical+0x50>)
 800c77a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c77c:	4b07      	ldr	r3, [pc, #28]	@ (800c79c <vPortExitCritical+0x50>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d105      	bne.n	800c790 <vPortExitCritical+0x44>
 800c784:	2300      	movs	r3, #0
 800c786:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	f383 8811 	msr	BASEPRI, r3
}
 800c78e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c790:	bf00      	nop
 800c792:	370c      	adds	r7, #12
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr
 800c79c:	2000000c 	.word	0x2000000c

0800c7a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c7a0:	f3ef 8009 	mrs	r0, PSP
 800c7a4:	f3bf 8f6f 	isb	sy
 800c7a8:	4b15      	ldr	r3, [pc, #84]	@ (800c800 <pxCurrentTCBConst>)
 800c7aa:	681a      	ldr	r2, [r3, #0]
 800c7ac:	f01e 0f10 	tst.w	lr, #16
 800c7b0:	bf08      	it	eq
 800c7b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c7b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ba:	6010      	str	r0, [r2, #0]
 800c7bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c7c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c7c4:	f380 8811 	msr	BASEPRI, r0
 800c7c8:	f3bf 8f4f 	dsb	sy
 800c7cc:	f3bf 8f6f 	isb	sy
 800c7d0:	f7fe fe9e 	bl	800b510 <vTaskSwitchContext>
 800c7d4:	f04f 0000 	mov.w	r0, #0
 800c7d8:	f380 8811 	msr	BASEPRI, r0
 800c7dc:	bc09      	pop	{r0, r3}
 800c7de:	6819      	ldr	r1, [r3, #0]
 800c7e0:	6808      	ldr	r0, [r1, #0]
 800c7e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7e6:	f01e 0f10 	tst.w	lr, #16
 800c7ea:	bf08      	it	eq
 800c7ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c7f0:	f380 8809 	msr	PSP, r0
 800c7f4:	f3bf 8f6f 	isb	sy
 800c7f8:	4770      	bx	lr
 800c7fa:	bf00      	nop
 800c7fc:	f3af 8000 	nop.w

0800c800 <pxCurrentTCBConst>:
 800c800:	2000110c 	.word	0x2000110c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c804:	bf00      	nop
 800c806:	bf00      	nop

0800c808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b082      	sub	sp, #8
 800c80c:	af00      	add	r7, sp, #0
	__asm volatile
 800c80e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c812:	f383 8811 	msr	BASEPRI, r3
 800c816:	f3bf 8f6f 	isb	sy
 800c81a:	f3bf 8f4f 	dsb	sy
 800c81e:	607b      	str	r3, [r7, #4]
}
 800c820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c822:	f7fe fdbb 	bl	800b39c <xTaskIncrementTick>
 800c826:	4603      	mov	r3, r0
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d003      	beq.n	800c834 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c82c:	4b06      	ldr	r3, [pc, #24]	@ (800c848 <xPortSysTickHandler+0x40>)
 800c82e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c832:	601a      	str	r2, [r3, #0]
 800c834:	2300      	movs	r3, #0
 800c836:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	f383 8811 	msr	BASEPRI, r3
}
 800c83e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c840:	bf00      	nop
 800c842:	3708      	adds	r7, #8
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}
 800c848:	e000ed04 	.word	0xe000ed04

0800c84c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c84c:	b480      	push	{r7}
 800c84e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c850:	4b0b      	ldr	r3, [pc, #44]	@ (800c880 <vPortSetupTimerInterrupt+0x34>)
 800c852:	2200      	movs	r2, #0
 800c854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c856:	4b0b      	ldr	r3, [pc, #44]	@ (800c884 <vPortSetupTimerInterrupt+0x38>)
 800c858:	2200      	movs	r2, #0
 800c85a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c85c:	4b0a      	ldr	r3, [pc, #40]	@ (800c888 <vPortSetupTimerInterrupt+0x3c>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	4a0a      	ldr	r2, [pc, #40]	@ (800c88c <vPortSetupTimerInterrupt+0x40>)
 800c862:	fba2 2303 	umull	r2, r3, r2, r3
 800c866:	099b      	lsrs	r3, r3, #6
 800c868:	4a09      	ldr	r2, [pc, #36]	@ (800c890 <vPortSetupTimerInterrupt+0x44>)
 800c86a:	3b01      	subs	r3, #1
 800c86c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c86e:	4b04      	ldr	r3, [pc, #16]	@ (800c880 <vPortSetupTimerInterrupt+0x34>)
 800c870:	2207      	movs	r2, #7
 800c872:	601a      	str	r2, [r3, #0]
}
 800c874:	bf00      	nop
 800c876:	46bd      	mov	sp, r7
 800c878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87c:	4770      	bx	lr
 800c87e:	bf00      	nop
 800c880:	e000e010 	.word	0xe000e010
 800c884:	e000e018 	.word	0xe000e018
 800c888:	20000000 	.word	0x20000000
 800c88c:	10624dd3 	.word	0x10624dd3
 800c890:	e000e014 	.word	0xe000e014

0800c894 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c894:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c8a4 <vPortEnableVFP+0x10>
 800c898:	6801      	ldr	r1, [r0, #0]
 800c89a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c89e:	6001      	str	r1, [r0, #0]
 800c8a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c8a2:	bf00      	nop
 800c8a4:	e000ed88 	.word	0xe000ed88

0800c8a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b085      	sub	sp, #20
 800c8ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c8ae:	f3ef 8305 	mrs	r3, IPSR
 800c8b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	2b0f      	cmp	r3, #15
 800c8b8:	d915      	bls.n	800c8e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c8ba:	4a18      	ldr	r2, [pc, #96]	@ (800c91c <vPortValidateInterruptPriority+0x74>)
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	4413      	add	r3, r2
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c8c4:	4b16      	ldr	r3, [pc, #88]	@ (800c920 <vPortValidateInterruptPriority+0x78>)
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	7afa      	ldrb	r2, [r7, #11]
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d20b      	bcs.n	800c8e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8d2:	f383 8811 	msr	BASEPRI, r3
 800c8d6:	f3bf 8f6f 	isb	sy
 800c8da:	f3bf 8f4f 	dsb	sy
 800c8de:	607b      	str	r3, [r7, #4]
}
 800c8e0:	bf00      	nop
 800c8e2:	bf00      	nop
 800c8e4:	e7fd      	b.n	800c8e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c8e6:	4b0f      	ldr	r3, [pc, #60]	@ (800c924 <vPortValidateInterruptPriority+0x7c>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c8ee:	4b0e      	ldr	r3, [pc, #56]	@ (800c928 <vPortValidateInterruptPriority+0x80>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d90b      	bls.n	800c90e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c8f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8fa:	f383 8811 	msr	BASEPRI, r3
 800c8fe:	f3bf 8f6f 	isb	sy
 800c902:	f3bf 8f4f 	dsb	sy
 800c906:	603b      	str	r3, [r7, #0]
}
 800c908:	bf00      	nop
 800c90a:	bf00      	nop
 800c90c:	e7fd      	b.n	800c90a <vPortValidateInterruptPriority+0x62>
	}
 800c90e:	bf00      	nop
 800c910:	3714      	adds	r7, #20
 800c912:	46bd      	mov	sp, r7
 800c914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c918:	4770      	bx	lr
 800c91a:	bf00      	nop
 800c91c:	e000e3f0 	.word	0xe000e3f0
 800c920:	20001738 	.word	0x20001738
 800c924:	e000ed0c 	.word	0xe000ed0c
 800c928:	2000173c 	.word	0x2000173c

0800c92c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b08a      	sub	sp, #40	@ 0x28
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c934:	2300      	movs	r3, #0
 800c936:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c938:	f7fe fc62 	bl	800b200 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c93c:	4b5c      	ldr	r3, [pc, #368]	@ (800cab0 <pvPortMalloc+0x184>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d101      	bne.n	800c948 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c944:	f000 f924 	bl	800cb90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c948:	4b5a      	ldr	r3, [pc, #360]	@ (800cab4 <pvPortMalloc+0x188>)
 800c94a:	681a      	ldr	r2, [r3, #0]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	4013      	ands	r3, r2
 800c950:	2b00      	cmp	r3, #0
 800c952:	f040 8095 	bne.w	800ca80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d01e      	beq.n	800c99a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c95c:	2208      	movs	r2, #8
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	4413      	add	r3, r2
 800c962:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f003 0307 	and.w	r3, r3, #7
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d015      	beq.n	800c99a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f023 0307 	bic.w	r3, r3, #7
 800c974:	3308      	adds	r3, #8
 800c976:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f003 0307 	and.w	r3, r3, #7
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d00b      	beq.n	800c99a <pvPortMalloc+0x6e>
	__asm volatile
 800c982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c986:	f383 8811 	msr	BASEPRI, r3
 800c98a:	f3bf 8f6f 	isb	sy
 800c98e:	f3bf 8f4f 	dsb	sy
 800c992:	617b      	str	r3, [r7, #20]
}
 800c994:	bf00      	nop
 800c996:	bf00      	nop
 800c998:	e7fd      	b.n	800c996 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d06f      	beq.n	800ca80 <pvPortMalloc+0x154>
 800c9a0:	4b45      	ldr	r3, [pc, #276]	@ (800cab8 <pvPortMalloc+0x18c>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	687a      	ldr	r2, [r7, #4]
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	d86a      	bhi.n	800ca80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c9aa:	4b44      	ldr	r3, [pc, #272]	@ (800cabc <pvPortMalloc+0x190>)
 800c9ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c9ae:	4b43      	ldr	r3, [pc, #268]	@ (800cabc <pvPortMalloc+0x190>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c9b4:	e004      	b.n	800c9c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c9c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9c2:	685b      	ldr	r3, [r3, #4]
 800c9c4:	687a      	ldr	r2, [r7, #4]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d903      	bls.n	800c9d2 <pvPortMalloc+0xa6>
 800c9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d1f1      	bne.n	800c9b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c9d2:	4b37      	ldr	r3, [pc, #220]	@ (800cab0 <pvPortMalloc+0x184>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	d051      	beq.n	800ca80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c9dc:	6a3b      	ldr	r3, [r7, #32]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	2208      	movs	r2, #8
 800c9e2:	4413      	add	r3, r2
 800c9e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9e8:	681a      	ldr	r2, [r3, #0]
 800c9ea:	6a3b      	ldr	r3, [r7, #32]
 800c9ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9f0:	685a      	ldr	r2, [r3, #4]
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	1ad2      	subs	r2, r2, r3
 800c9f6:	2308      	movs	r3, #8
 800c9f8:	005b      	lsls	r3, r3, #1
 800c9fa:	429a      	cmp	r2, r3
 800c9fc:	d920      	bls.n	800ca40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c9fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	4413      	add	r3, r2
 800ca04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca06:	69bb      	ldr	r3, [r7, #24]
 800ca08:	f003 0307 	and.w	r3, r3, #7
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d00b      	beq.n	800ca28 <pvPortMalloc+0xfc>
	__asm volatile
 800ca10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca14:	f383 8811 	msr	BASEPRI, r3
 800ca18:	f3bf 8f6f 	isb	sy
 800ca1c:	f3bf 8f4f 	dsb	sy
 800ca20:	613b      	str	r3, [r7, #16]
}
 800ca22:	bf00      	nop
 800ca24:	bf00      	nop
 800ca26:	e7fd      	b.n	800ca24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ca28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca2a:	685a      	ldr	r2, [r3, #4]
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	1ad2      	subs	r2, r2, r3
 800ca30:	69bb      	ldr	r3, [r7, #24]
 800ca32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ca34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca36:	687a      	ldr	r2, [r7, #4]
 800ca38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ca3a:	69b8      	ldr	r0, [r7, #24]
 800ca3c:	f000 f90a 	bl	800cc54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ca40:	4b1d      	ldr	r3, [pc, #116]	@ (800cab8 <pvPortMalloc+0x18c>)
 800ca42:	681a      	ldr	r2, [r3, #0]
 800ca44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca46:	685b      	ldr	r3, [r3, #4]
 800ca48:	1ad3      	subs	r3, r2, r3
 800ca4a:	4a1b      	ldr	r2, [pc, #108]	@ (800cab8 <pvPortMalloc+0x18c>)
 800ca4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ca4e:	4b1a      	ldr	r3, [pc, #104]	@ (800cab8 <pvPortMalloc+0x18c>)
 800ca50:	681a      	ldr	r2, [r3, #0]
 800ca52:	4b1b      	ldr	r3, [pc, #108]	@ (800cac0 <pvPortMalloc+0x194>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d203      	bcs.n	800ca62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ca5a:	4b17      	ldr	r3, [pc, #92]	@ (800cab8 <pvPortMalloc+0x18c>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	4a18      	ldr	r2, [pc, #96]	@ (800cac0 <pvPortMalloc+0x194>)
 800ca60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ca62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca64:	685a      	ldr	r2, [r3, #4]
 800ca66:	4b13      	ldr	r3, [pc, #76]	@ (800cab4 <pvPortMalloc+0x188>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	431a      	orrs	r2, r3
 800ca6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ca70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca72:	2200      	movs	r2, #0
 800ca74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ca76:	4b13      	ldr	r3, [pc, #76]	@ (800cac4 <pvPortMalloc+0x198>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	4a11      	ldr	r2, [pc, #68]	@ (800cac4 <pvPortMalloc+0x198>)
 800ca7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ca80:	f7fe fbcc 	bl	800b21c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca84:	69fb      	ldr	r3, [r7, #28]
 800ca86:	f003 0307 	and.w	r3, r3, #7
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d00b      	beq.n	800caa6 <pvPortMalloc+0x17a>
	__asm volatile
 800ca8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca92:	f383 8811 	msr	BASEPRI, r3
 800ca96:	f3bf 8f6f 	isb	sy
 800ca9a:	f3bf 8f4f 	dsb	sy
 800ca9e:	60fb      	str	r3, [r7, #12]
}
 800caa0:	bf00      	nop
 800caa2:	bf00      	nop
 800caa4:	e7fd      	b.n	800caa2 <pvPortMalloc+0x176>
	return pvReturn;
 800caa6:	69fb      	ldr	r3, [r7, #28]
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	3728      	adds	r7, #40	@ 0x28
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}
 800cab0:	2000b748 	.word	0x2000b748
 800cab4:	2000b75c 	.word	0x2000b75c
 800cab8:	2000b74c 	.word	0x2000b74c
 800cabc:	2000b740 	.word	0x2000b740
 800cac0:	2000b750 	.word	0x2000b750
 800cac4:	2000b754 	.word	0x2000b754

0800cac8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b086      	sub	sp, #24
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d04f      	beq.n	800cb7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cada:	2308      	movs	r3, #8
 800cadc:	425b      	negs	r3, r3
 800cade:	697a      	ldr	r2, [r7, #20]
 800cae0:	4413      	add	r3, r2
 800cae2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	685a      	ldr	r2, [r3, #4]
 800caec:	4b25      	ldr	r3, [pc, #148]	@ (800cb84 <vPortFree+0xbc>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	4013      	ands	r3, r2
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d10b      	bne.n	800cb0e <vPortFree+0x46>
	__asm volatile
 800caf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cafa:	f383 8811 	msr	BASEPRI, r3
 800cafe:	f3bf 8f6f 	isb	sy
 800cb02:	f3bf 8f4f 	dsb	sy
 800cb06:	60fb      	str	r3, [r7, #12]
}
 800cb08:	bf00      	nop
 800cb0a:	bf00      	nop
 800cb0c:	e7fd      	b.n	800cb0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cb0e:	693b      	ldr	r3, [r7, #16]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d00b      	beq.n	800cb2e <vPortFree+0x66>
	__asm volatile
 800cb16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb1a:	f383 8811 	msr	BASEPRI, r3
 800cb1e:	f3bf 8f6f 	isb	sy
 800cb22:	f3bf 8f4f 	dsb	sy
 800cb26:	60bb      	str	r3, [r7, #8]
}
 800cb28:	bf00      	nop
 800cb2a:	bf00      	nop
 800cb2c:	e7fd      	b.n	800cb2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cb2e:	693b      	ldr	r3, [r7, #16]
 800cb30:	685a      	ldr	r2, [r3, #4]
 800cb32:	4b14      	ldr	r3, [pc, #80]	@ (800cb84 <vPortFree+0xbc>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	4013      	ands	r3, r2
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d01e      	beq.n	800cb7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d11a      	bne.n	800cb7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cb44:	693b      	ldr	r3, [r7, #16]
 800cb46:	685a      	ldr	r2, [r3, #4]
 800cb48:	4b0e      	ldr	r3, [pc, #56]	@ (800cb84 <vPortFree+0xbc>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	43db      	mvns	r3, r3
 800cb4e:	401a      	ands	r2, r3
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cb54:	f7fe fb54 	bl	800b200 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	685a      	ldr	r2, [r3, #4]
 800cb5c:	4b0a      	ldr	r3, [pc, #40]	@ (800cb88 <vPortFree+0xc0>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	4413      	add	r3, r2
 800cb62:	4a09      	ldr	r2, [pc, #36]	@ (800cb88 <vPortFree+0xc0>)
 800cb64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cb66:	6938      	ldr	r0, [r7, #16]
 800cb68:	f000 f874 	bl	800cc54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cb6c:	4b07      	ldr	r3, [pc, #28]	@ (800cb8c <vPortFree+0xc4>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	3301      	adds	r3, #1
 800cb72:	4a06      	ldr	r2, [pc, #24]	@ (800cb8c <vPortFree+0xc4>)
 800cb74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cb76:	f7fe fb51 	bl	800b21c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cb7a:	bf00      	nop
 800cb7c:	3718      	adds	r7, #24
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}
 800cb82:	bf00      	nop
 800cb84:	2000b75c 	.word	0x2000b75c
 800cb88:	2000b74c 	.word	0x2000b74c
 800cb8c:	2000b758 	.word	0x2000b758

0800cb90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cb90:	b480      	push	{r7}
 800cb92:	b085      	sub	sp, #20
 800cb94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cb96:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 800cb9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cb9c:	4b27      	ldr	r3, [pc, #156]	@ (800cc3c <prvHeapInit+0xac>)
 800cb9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	f003 0307 	and.w	r3, r3, #7
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d00c      	beq.n	800cbc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	3307      	adds	r3, #7
 800cbae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	f023 0307 	bic.w	r3, r3, #7
 800cbb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cbb8:	68ba      	ldr	r2, [r7, #8]
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	1ad3      	subs	r3, r2, r3
 800cbbe:	4a1f      	ldr	r2, [pc, #124]	@ (800cc3c <prvHeapInit+0xac>)
 800cbc0:	4413      	add	r3, r2
 800cbc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cbc8:	4a1d      	ldr	r2, [pc, #116]	@ (800cc40 <prvHeapInit+0xb0>)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cbce:	4b1c      	ldr	r3, [pc, #112]	@ (800cc40 <prvHeapInit+0xb0>)
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	68ba      	ldr	r2, [r7, #8]
 800cbd8:	4413      	add	r3, r2
 800cbda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cbdc:	2208      	movs	r2, #8
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	1a9b      	subs	r3, r3, r2
 800cbe2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f023 0307 	bic.w	r3, r3, #7
 800cbea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	4a15      	ldr	r2, [pc, #84]	@ (800cc44 <prvHeapInit+0xb4>)
 800cbf0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cbf2:	4b14      	ldr	r3, [pc, #80]	@ (800cc44 <prvHeapInit+0xb4>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cbfa:	4b12      	ldr	r3, [pc, #72]	@ (800cc44 <prvHeapInit+0xb4>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	68fa      	ldr	r2, [r7, #12]
 800cc0a:	1ad2      	subs	r2, r2, r3
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cc10:	4b0c      	ldr	r3, [pc, #48]	@ (800cc44 <prvHeapInit+0xb4>)
 800cc12:	681a      	ldr	r2, [r3, #0]
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	685b      	ldr	r3, [r3, #4]
 800cc1c:	4a0a      	ldr	r2, [pc, #40]	@ (800cc48 <prvHeapInit+0xb8>)
 800cc1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	685b      	ldr	r3, [r3, #4]
 800cc24:	4a09      	ldr	r2, [pc, #36]	@ (800cc4c <prvHeapInit+0xbc>)
 800cc26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cc28:	4b09      	ldr	r3, [pc, #36]	@ (800cc50 <prvHeapInit+0xc0>)
 800cc2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cc2e:	601a      	str	r2, [r3, #0]
}
 800cc30:	bf00      	nop
 800cc32:	3714      	adds	r7, #20
 800cc34:	46bd      	mov	sp, r7
 800cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3a:	4770      	bx	lr
 800cc3c:	20001740 	.word	0x20001740
 800cc40:	2000b740 	.word	0x2000b740
 800cc44:	2000b748 	.word	0x2000b748
 800cc48:	2000b750 	.word	0x2000b750
 800cc4c:	2000b74c 	.word	0x2000b74c
 800cc50:	2000b75c 	.word	0x2000b75c

0800cc54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cc54:	b480      	push	{r7}
 800cc56:	b085      	sub	sp, #20
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cc5c:	4b28      	ldr	r3, [pc, #160]	@ (800cd00 <prvInsertBlockIntoFreeList+0xac>)
 800cc5e:	60fb      	str	r3, [r7, #12]
 800cc60:	e002      	b.n	800cc68 <prvInsertBlockIntoFreeList+0x14>
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	60fb      	str	r3, [r7, #12]
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	687a      	ldr	r2, [r7, #4]
 800cc6e:	429a      	cmp	r2, r3
 800cc70:	d8f7      	bhi.n	800cc62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	68ba      	ldr	r2, [r7, #8]
 800cc7c:	4413      	add	r3, r2
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	429a      	cmp	r2, r3
 800cc82:	d108      	bne.n	800cc96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	685a      	ldr	r2, [r3, #4]
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	441a      	add	r2, r3
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	685b      	ldr	r3, [r3, #4]
 800cc9e:	68ba      	ldr	r2, [r7, #8]
 800cca0:	441a      	add	r2, r3
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d118      	bne.n	800ccdc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	681a      	ldr	r2, [r3, #0]
 800ccae:	4b15      	ldr	r3, [pc, #84]	@ (800cd04 <prvInsertBlockIntoFreeList+0xb0>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d00d      	beq.n	800ccd2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	685a      	ldr	r2, [r3, #4]
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	685b      	ldr	r3, [r3, #4]
 800ccc0:	441a      	add	r2, r3
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	681a      	ldr	r2, [r3, #0]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	601a      	str	r2, [r3, #0]
 800ccd0:	e008      	b.n	800cce4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ccd2:	4b0c      	ldr	r3, [pc, #48]	@ (800cd04 <prvInsertBlockIntoFreeList+0xb0>)
 800ccd4:	681a      	ldr	r2, [r3, #0]
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	601a      	str	r2, [r3, #0]
 800ccda:	e003      	b.n	800cce4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	681a      	ldr	r2, [r3, #0]
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cce4:	68fa      	ldr	r2, [r7, #12]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d002      	beq.n	800ccf2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ccf2:	bf00      	nop
 800ccf4:	3714      	adds	r7, #20
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfc:	4770      	bx	lr
 800ccfe:	bf00      	nop
 800cd00:	2000b740 	.word	0x2000b740
 800cd04:	2000b748 	.word	0x2000b748

0800cd08 <_free_r>:
 800cd08:	b538      	push	{r3, r4, r5, lr}
 800cd0a:	4605      	mov	r5, r0
 800cd0c:	2900      	cmp	r1, #0
 800cd0e:	d041      	beq.n	800cd94 <_free_r+0x8c>
 800cd10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd14:	1f0c      	subs	r4, r1, #4
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	bfb8      	it	lt
 800cd1a:	18e4      	addlt	r4, r4, r3
 800cd1c:	f000 f8e0 	bl	800cee0 <__malloc_lock>
 800cd20:	4a1d      	ldr	r2, [pc, #116]	@ (800cd98 <_free_r+0x90>)
 800cd22:	6813      	ldr	r3, [r2, #0]
 800cd24:	b933      	cbnz	r3, 800cd34 <_free_r+0x2c>
 800cd26:	6063      	str	r3, [r4, #4]
 800cd28:	6014      	str	r4, [r2, #0]
 800cd2a:	4628      	mov	r0, r5
 800cd2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd30:	f000 b8dc 	b.w	800ceec <__malloc_unlock>
 800cd34:	42a3      	cmp	r3, r4
 800cd36:	d908      	bls.n	800cd4a <_free_r+0x42>
 800cd38:	6820      	ldr	r0, [r4, #0]
 800cd3a:	1821      	adds	r1, r4, r0
 800cd3c:	428b      	cmp	r3, r1
 800cd3e:	bf01      	itttt	eq
 800cd40:	6819      	ldreq	r1, [r3, #0]
 800cd42:	685b      	ldreq	r3, [r3, #4]
 800cd44:	1809      	addeq	r1, r1, r0
 800cd46:	6021      	streq	r1, [r4, #0]
 800cd48:	e7ed      	b.n	800cd26 <_free_r+0x1e>
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	685b      	ldr	r3, [r3, #4]
 800cd4e:	b10b      	cbz	r3, 800cd54 <_free_r+0x4c>
 800cd50:	42a3      	cmp	r3, r4
 800cd52:	d9fa      	bls.n	800cd4a <_free_r+0x42>
 800cd54:	6811      	ldr	r1, [r2, #0]
 800cd56:	1850      	adds	r0, r2, r1
 800cd58:	42a0      	cmp	r0, r4
 800cd5a:	d10b      	bne.n	800cd74 <_free_r+0x6c>
 800cd5c:	6820      	ldr	r0, [r4, #0]
 800cd5e:	4401      	add	r1, r0
 800cd60:	1850      	adds	r0, r2, r1
 800cd62:	4283      	cmp	r3, r0
 800cd64:	6011      	str	r1, [r2, #0]
 800cd66:	d1e0      	bne.n	800cd2a <_free_r+0x22>
 800cd68:	6818      	ldr	r0, [r3, #0]
 800cd6a:	685b      	ldr	r3, [r3, #4]
 800cd6c:	6053      	str	r3, [r2, #4]
 800cd6e:	4408      	add	r0, r1
 800cd70:	6010      	str	r0, [r2, #0]
 800cd72:	e7da      	b.n	800cd2a <_free_r+0x22>
 800cd74:	d902      	bls.n	800cd7c <_free_r+0x74>
 800cd76:	230c      	movs	r3, #12
 800cd78:	602b      	str	r3, [r5, #0]
 800cd7a:	e7d6      	b.n	800cd2a <_free_r+0x22>
 800cd7c:	6820      	ldr	r0, [r4, #0]
 800cd7e:	1821      	adds	r1, r4, r0
 800cd80:	428b      	cmp	r3, r1
 800cd82:	bf04      	itt	eq
 800cd84:	6819      	ldreq	r1, [r3, #0]
 800cd86:	685b      	ldreq	r3, [r3, #4]
 800cd88:	6063      	str	r3, [r4, #4]
 800cd8a:	bf04      	itt	eq
 800cd8c:	1809      	addeq	r1, r1, r0
 800cd8e:	6021      	streq	r1, [r4, #0]
 800cd90:	6054      	str	r4, [r2, #4]
 800cd92:	e7ca      	b.n	800cd2a <_free_r+0x22>
 800cd94:	bd38      	pop	{r3, r4, r5, pc}
 800cd96:	bf00      	nop
 800cd98:	2000b764 	.word	0x2000b764

0800cd9c <sbrk_aligned>:
 800cd9c:	b570      	push	{r4, r5, r6, lr}
 800cd9e:	4e0f      	ldr	r6, [pc, #60]	@ (800cddc <sbrk_aligned+0x40>)
 800cda0:	460c      	mov	r4, r1
 800cda2:	6831      	ldr	r1, [r6, #0]
 800cda4:	4605      	mov	r5, r0
 800cda6:	b911      	cbnz	r1, 800cdae <sbrk_aligned+0x12>
 800cda8:	f000 ff7c 	bl	800dca4 <_sbrk_r>
 800cdac:	6030      	str	r0, [r6, #0]
 800cdae:	4621      	mov	r1, r4
 800cdb0:	4628      	mov	r0, r5
 800cdb2:	f000 ff77 	bl	800dca4 <_sbrk_r>
 800cdb6:	1c43      	adds	r3, r0, #1
 800cdb8:	d103      	bne.n	800cdc2 <sbrk_aligned+0x26>
 800cdba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800cdbe:	4620      	mov	r0, r4
 800cdc0:	bd70      	pop	{r4, r5, r6, pc}
 800cdc2:	1cc4      	adds	r4, r0, #3
 800cdc4:	f024 0403 	bic.w	r4, r4, #3
 800cdc8:	42a0      	cmp	r0, r4
 800cdca:	d0f8      	beq.n	800cdbe <sbrk_aligned+0x22>
 800cdcc:	1a21      	subs	r1, r4, r0
 800cdce:	4628      	mov	r0, r5
 800cdd0:	f000 ff68 	bl	800dca4 <_sbrk_r>
 800cdd4:	3001      	adds	r0, #1
 800cdd6:	d1f2      	bne.n	800cdbe <sbrk_aligned+0x22>
 800cdd8:	e7ef      	b.n	800cdba <sbrk_aligned+0x1e>
 800cdda:	bf00      	nop
 800cddc:	2000b760 	.word	0x2000b760

0800cde0 <_malloc_r>:
 800cde0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cde4:	1ccd      	adds	r5, r1, #3
 800cde6:	f025 0503 	bic.w	r5, r5, #3
 800cdea:	3508      	adds	r5, #8
 800cdec:	2d0c      	cmp	r5, #12
 800cdee:	bf38      	it	cc
 800cdf0:	250c      	movcc	r5, #12
 800cdf2:	2d00      	cmp	r5, #0
 800cdf4:	4606      	mov	r6, r0
 800cdf6:	db01      	blt.n	800cdfc <_malloc_r+0x1c>
 800cdf8:	42a9      	cmp	r1, r5
 800cdfa:	d904      	bls.n	800ce06 <_malloc_r+0x26>
 800cdfc:	230c      	movs	r3, #12
 800cdfe:	6033      	str	r3, [r6, #0]
 800ce00:	2000      	movs	r0, #0
 800ce02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cedc <_malloc_r+0xfc>
 800ce0a:	f000 f869 	bl	800cee0 <__malloc_lock>
 800ce0e:	f8d8 3000 	ldr.w	r3, [r8]
 800ce12:	461c      	mov	r4, r3
 800ce14:	bb44      	cbnz	r4, 800ce68 <_malloc_r+0x88>
 800ce16:	4629      	mov	r1, r5
 800ce18:	4630      	mov	r0, r6
 800ce1a:	f7ff ffbf 	bl	800cd9c <sbrk_aligned>
 800ce1e:	1c43      	adds	r3, r0, #1
 800ce20:	4604      	mov	r4, r0
 800ce22:	d158      	bne.n	800ced6 <_malloc_r+0xf6>
 800ce24:	f8d8 4000 	ldr.w	r4, [r8]
 800ce28:	4627      	mov	r7, r4
 800ce2a:	2f00      	cmp	r7, #0
 800ce2c:	d143      	bne.n	800ceb6 <_malloc_r+0xd6>
 800ce2e:	2c00      	cmp	r4, #0
 800ce30:	d04b      	beq.n	800ceca <_malloc_r+0xea>
 800ce32:	6823      	ldr	r3, [r4, #0]
 800ce34:	4639      	mov	r1, r7
 800ce36:	4630      	mov	r0, r6
 800ce38:	eb04 0903 	add.w	r9, r4, r3
 800ce3c:	f000 ff32 	bl	800dca4 <_sbrk_r>
 800ce40:	4581      	cmp	r9, r0
 800ce42:	d142      	bne.n	800ceca <_malloc_r+0xea>
 800ce44:	6821      	ldr	r1, [r4, #0]
 800ce46:	1a6d      	subs	r5, r5, r1
 800ce48:	4629      	mov	r1, r5
 800ce4a:	4630      	mov	r0, r6
 800ce4c:	f7ff ffa6 	bl	800cd9c <sbrk_aligned>
 800ce50:	3001      	adds	r0, #1
 800ce52:	d03a      	beq.n	800ceca <_malloc_r+0xea>
 800ce54:	6823      	ldr	r3, [r4, #0]
 800ce56:	442b      	add	r3, r5
 800ce58:	6023      	str	r3, [r4, #0]
 800ce5a:	f8d8 3000 	ldr.w	r3, [r8]
 800ce5e:	685a      	ldr	r2, [r3, #4]
 800ce60:	bb62      	cbnz	r2, 800cebc <_malloc_r+0xdc>
 800ce62:	f8c8 7000 	str.w	r7, [r8]
 800ce66:	e00f      	b.n	800ce88 <_malloc_r+0xa8>
 800ce68:	6822      	ldr	r2, [r4, #0]
 800ce6a:	1b52      	subs	r2, r2, r5
 800ce6c:	d420      	bmi.n	800ceb0 <_malloc_r+0xd0>
 800ce6e:	2a0b      	cmp	r2, #11
 800ce70:	d917      	bls.n	800cea2 <_malloc_r+0xc2>
 800ce72:	1961      	adds	r1, r4, r5
 800ce74:	42a3      	cmp	r3, r4
 800ce76:	6025      	str	r5, [r4, #0]
 800ce78:	bf18      	it	ne
 800ce7a:	6059      	strne	r1, [r3, #4]
 800ce7c:	6863      	ldr	r3, [r4, #4]
 800ce7e:	bf08      	it	eq
 800ce80:	f8c8 1000 	streq.w	r1, [r8]
 800ce84:	5162      	str	r2, [r4, r5]
 800ce86:	604b      	str	r3, [r1, #4]
 800ce88:	4630      	mov	r0, r6
 800ce8a:	f000 f82f 	bl	800ceec <__malloc_unlock>
 800ce8e:	f104 000b 	add.w	r0, r4, #11
 800ce92:	1d23      	adds	r3, r4, #4
 800ce94:	f020 0007 	bic.w	r0, r0, #7
 800ce98:	1ac2      	subs	r2, r0, r3
 800ce9a:	bf1c      	itt	ne
 800ce9c:	1a1b      	subne	r3, r3, r0
 800ce9e:	50a3      	strne	r3, [r4, r2]
 800cea0:	e7af      	b.n	800ce02 <_malloc_r+0x22>
 800cea2:	6862      	ldr	r2, [r4, #4]
 800cea4:	42a3      	cmp	r3, r4
 800cea6:	bf0c      	ite	eq
 800cea8:	f8c8 2000 	streq.w	r2, [r8]
 800ceac:	605a      	strne	r2, [r3, #4]
 800ceae:	e7eb      	b.n	800ce88 <_malloc_r+0xa8>
 800ceb0:	4623      	mov	r3, r4
 800ceb2:	6864      	ldr	r4, [r4, #4]
 800ceb4:	e7ae      	b.n	800ce14 <_malloc_r+0x34>
 800ceb6:	463c      	mov	r4, r7
 800ceb8:	687f      	ldr	r7, [r7, #4]
 800ceba:	e7b6      	b.n	800ce2a <_malloc_r+0x4a>
 800cebc:	461a      	mov	r2, r3
 800cebe:	685b      	ldr	r3, [r3, #4]
 800cec0:	42a3      	cmp	r3, r4
 800cec2:	d1fb      	bne.n	800cebc <_malloc_r+0xdc>
 800cec4:	2300      	movs	r3, #0
 800cec6:	6053      	str	r3, [r2, #4]
 800cec8:	e7de      	b.n	800ce88 <_malloc_r+0xa8>
 800ceca:	230c      	movs	r3, #12
 800cecc:	6033      	str	r3, [r6, #0]
 800cece:	4630      	mov	r0, r6
 800ced0:	f000 f80c 	bl	800ceec <__malloc_unlock>
 800ced4:	e794      	b.n	800ce00 <_malloc_r+0x20>
 800ced6:	6005      	str	r5, [r0, #0]
 800ced8:	e7d6      	b.n	800ce88 <_malloc_r+0xa8>
 800ceda:	bf00      	nop
 800cedc:	2000b764 	.word	0x2000b764

0800cee0 <__malloc_lock>:
 800cee0:	4801      	ldr	r0, [pc, #4]	@ (800cee8 <__malloc_lock+0x8>)
 800cee2:	f000 bf2c 	b.w	800dd3e <__retarget_lock_acquire_recursive>
 800cee6:	bf00      	nop
 800cee8:	2000b8a8 	.word	0x2000b8a8

0800ceec <__malloc_unlock>:
 800ceec:	4801      	ldr	r0, [pc, #4]	@ (800cef4 <__malloc_unlock+0x8>)
 800ceee:	f000 bf27 	b.w	800dd40 <__retarget_lock_release_recursive>
 800cef2:	bf00      	nop
 800cef4:	2000b8a8 	.word	0x2000b8a8

0800cef8 <__cvt>:
 800cef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cefc:	ec57 6b10 	vmov	r6, r7, d0
 800cf00:	2f00      	cmp	r7, #0
 800cf02:	460c      	mov	r4, r1
 800cf04:	4619      	mov	r1, r3
 800cf06:	463b      	mov	r3, r7
 800cf08:	bfbb      	ittet	lt
 800cf0a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cf0e:	461f      	movlt	r7, r3
 800cf10:	2300      	movge	r3, #0
 800cf12:	232d      	movlt	r3, #45	@ 0x2d
 800cf14:	700b      	strb	r3, [r1, #0]
 800cf16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cf18:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cf1c:	4691      	mov	r9, r2
 800cf1e:	f023 0820 	bic.w	r8, r3, #32
 800cf22:	bfbc      	itt	lt
 800cf24:	4632      	movlt	r2, r6
 800cf26:	4616      	movlt	r6, r2
 800cf28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cf2c:	d005      	beq.n	800cf3a <__cvt+0x42>
 800cf2e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cf32:	d100      	bne.n	800cf36 <__cvt+0x3e>
 800cf34:	3401      	adds	r4, #1
 800cf36:	2102      	movs	r1, #2
 800cf38:	e000      	b.n	800cf3c <__cvt+0x44>
 800cf3a:	2103      	movs	r1, #3
 800cf3c:	ab03      	add	r3, sp, #12
 800cf3e:	9301      	str	r3, [sp, #4]
 800cf40:	ab02      	add	r3, sp, #8
 800cf42:	9300      	str	r3, [sp, #0]
 800cf44:	ec47 6b10 	vmov	d0, r6, r7
 800cf48:	4653      	mov	r3, sl
 800cf4a:	4622      	mov	r2, r4
 800cf4c:	f000 ff90 	bl	800de70 <_dtoa_r>
 800cf50:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cf54:	4605      	mov	r5, r0
 800cf56:	d119      	bne.n	800cf8c <__cvt+0x94>
 800cf58:	f019 0f01 	tst.w	r9, #1
 800cf5c:	d00e      	beq.n	800cf7c <__cvt+0x84>
 800cf5e:	eb00 0904 	add.w	r9, r0, r4
 800cf62:	2200      	movs	r2, #0
 800cf64:	2300      	movs	r3, #0
 800cf66:	4630      	mov	r0, r6
 800cf68:	4639      	mov	r1, r7
 800cf6a:	f7f3 fdcd 	bl	8000b08 <__aeabi_dcmpeq>
 800cf6e:	b108      	cbz	r0, 800cf74 <__cvt+0x7c>
 800cf70:	f8cd 900c 	str.w	r9, [sp, #12]
 800cf74:	2230      	movs	r2, #48	@ 0x30
 800cf76:	9b03      	ldr	r3, [sp, #12]
 800cf78:	454b      	cmp	r3, r9
 800cf7a:	d31e      	bcc.n	800cfba <__cvt+0xc2>
 800cf7c:	9b03      	ldr	r3, [sp, #12]
 800cf7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cf80:	1b5b      	subs	r3, r3, r5
 800cf82:	4628      	mov	r0, r5
 800cf84:	6013      	str	r3, [r2, #0]
 800cf86:	b004      	add	sp, #16
 800cf88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cf90:	eb00 0904 	add.w	r9, r0, r4
 800cf94:	d1e5      	bne.n	800cf62 <__cvt+0x6a>
 800cf96:	7803      	ldrb	r3, [r0, #0]
 800cf98:	2b30      	cmp	r3, #48	@ 0x30
 800cf9a:	d10a      	bne.n	800cfb2 <__cvt+0xba>
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	4630      	mov	r0, r6
 800cfa2:	4639      	mov	r1, r7
 800cfa4:	f7f3 fdb0 	bl	8000b08 <__aeabi_dcmpeq>
 800cfa8:	b918      	cbnz	r0, 800cfb2 <__cvt+0xba>
 800cfaa:	f1c4 0401 	rsb	r4, r4, #1
 800cfae:	f8ca 4000 	str.w	r4, [sl]
 800cfb2:	f8da 3000 	ldr.w	r3, [sl]
 800cfb6:	4499      	add	r9, r3
 800cfb8:	e7d3      	b.n	800cf62 <__cvt+0x6a>
 800cfba:	1c59      	adds	r1, r3, #1
 800cfbc:	9103      	str	r1, [sp, #12]
 800cfbe:	701a      	strb	r2, [r3, #0]
 800cfc0:	e7d9      	b.n	800cf76 <__cvt+0x7e>

0800cfc2 <__exponent>:
 800cfc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cfc4:	2900      	cmp	r1, #0
 800cfc6:	bfba      	itte	lt
 800cfc8:	4249      	neglt	r1, r1
 800cfca:	232d      	movlt	r3, #45	@ 0x2d
 800cfcc:	232b      	movge	r3, #43	@ 0x2b
 800cfce:	2909      	cmp	r1, #9
 800cfd0:	7002      	strb	r2, [r0, #0]
 800cfd2:	7043      	strb	r3, [r0, #1]
 800cfd4:	dd29      	ble.n	800d02a <__exponent+0x68>
 800cfd6:	f10d 0307 	add.w	r3, sp, #7
 800cfda:	461d      	mov	r5, r3
 800cfdc:	270a      	movs	r7, #10
 800cfde:	461a      	mov	r2, r3
 800cfe0:	fbb1 f6f7 	udiv	r6, r1, r7
 800cfe4:	fb07 1416 	mls	r4, r7, r6, r1
 800cfe8:	3430      	adds	r4, #48	@ 0x30
 800cfea:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cfee:	460c      	mov	r4, r1
 800cff0:	2c63      	cmp	r4, #99	@ 0x63
 800cff2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800cff6:	4631      	mov	r1, r6
 800cff8:	dcf1      	bgt.n	800cfde <__exponent+0x1c>
 800cffa:	3130      	adds	r1, #48	@ 0x30
 800cffc:	1e94      	subs	r4, r2, #2
 800cffe:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d002:	1c41      	adds	r1, r0, #1
 800d004:	4623      	mov	r3, r4
 800d006:	42ab      	cmp	r3, r5
 800d008:	d30a      	bcc.n	800d020 <__exponent+0x5e>
 800d00a:	f10d 0309 	add.w	r3, sp, #9
 800d00e:	1a9b      	subs	r3, r3, r2
 800d010:	42ac      	cmp	r4, r5
 800d012:	bf88      	it	hi
 800d014:	2300      	movhi	r3, #0
 800d016:	3302      	adds	r3, #2
 800d018:	4403      	add	r3, r0
 800d01a:	1a18      	subs	r0, r3, r0
 800d01c:	b003      	add	sp, #12
 800d01e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d020:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d024:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d028:	e7ed      	b.n	800d006 <__exponent+0x44>
 800d02a:	2330      	movs	r3, #48	@ 0x30
 800d02c:	3130      	adds	r1, #48	@ 0x30
 800d02e:	7083      	strb	r3, [r0, #2]
 800d030:	70c1      	strb	r1, [r0, #3]
 800d032:	1d03      	adds	r3, r0, #4
 800d034:	e7f1      	b.n	800d01a <__exponent+0x58>
	...

0800d038 <_printf_float>:
 800d038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d03c:	b08d      	sub	sp, #52	@ 0x34
 800d03e:	460c      	mov	r4, r1
 800d040:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d044:	4616      	mov	r6, r2
 800d046:	461f      	mov	r7, r3
 800d048:	4605      	mov	r5, r0
 800d04a:	f000 fdf3 	bl	800dc34 <_localeconv_r>
 800d04e:	6803      	ldr	r3, [r0, #0]
 800d050:	9304      	str	r3, [sp, #16]
 800d052:	4618      	mov	r0, r3
 800d054:	f7f3 f92c 	bl	80002b0 <strlen>
 800d058:	2300      	movs	r3, #0
 800d05a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d05c:	f8d8 3000 	ldr.w	r3, [r8]
 800d060:	9005      	str	r0, [sp, #20]
 800d062:	3307      	adds	r3, #7
 800d064:	f023 0307 	bic.w	r3, r3, #7
 800d068:	f103 0208 	add.w	r2, r3, #8
 800d06c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d070:	f8d4 b000 	ldr.w	fp, [r4]
 800d074:	f8c8 2000 	str.w	r2, [r8]
 800d078:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d07c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d080:	9307      	str	r3, [sp, #28]
 800d082:	f8cd 8018 	str.w	r8, [sp, #24]
 800d086:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d08a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d08e:	4b9c      	ldr	r3, [pc, #624]	@ (800d300 <_printf_float+0x2c8>)
 800d090:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d094:	f7f3 fd6a 	bl	8000b6c <__aeabi_dcmpun>
 800d098:	bb70      	cbnz	r0, 800d0f8 <_printf_float+0xc0>
 800d09a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d09e:	4b98      	ldr	r3, [pc, #608]	@ (800d300 <_printf_float+0x2c8>)
 800d0a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d0a4:	f7f3 fd44 	bl	8000b30 <__aeabi_dcmple>
 800d0a8:	bb30      	cbnz	r0, 800d0f8 <_printf_float+0xc0>
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	4640      	mov	r0, r8
 800d0b0:	4649      	mov	r1, r9
 800d0b2:	f7f3 fd33 	bl	8000b1c <__aeabi_dcmplt>
 800d0b6:	b110      	cbz	r0, 800d0be <_printf_float+0x86>
 800d0b8:	232d      	movs	r3, #45	@ 0x2d
 800d0ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d0be:	4a91      	ldr	r2, [pc, #580]	@ (800d304 <_printf_float+0x2cc>)
 800d0c0:	4b91      	ldr	r3, [pc, #580]	@ (800d308 <_printf_float+0x2d0>)
 800d0c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d0c6:	bf94      	ite	ls
 800d0c8:	4690      	movls	r8, r2
 800d0ca:	4698      	movhi	r8, r3
 800d0cc:	2303      	movs	r3, #3
 800d0ce:	6123      	str	r3, [r4, #16]
 800d0d0:	f02b 0304 	bic.w	r3, fp, #4
 800d0d4:	6023      	str	r3, [r4, #0]
 800d0d6:	f04f 0900 	mov.w	r9, #0
 800d0da:	9700      	str	r7, [sp, #0]
 800d0dc:	4633      	mov	r3, r6
 800d0de:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d0e0:	4621      	mov	r1, r4
 800d0e2:	4628      	mov	r0, r5
 800d0e4:	f000 f9d2 	bl	800d48c <_printf_common>
 800d0e8:	3001      	adds	r0, #1
 800d0ea:	f040 808d 	bne.w	800d208 <_printf_float+0x1d0>
 800d0ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d0f2:	b00d      	add	sp, #52	@ 0x34
 800d0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0f8:	4642      	mov	r2, r8
 800d0fa:	464b      	mov	r3, r9
 800d0fc:	4640      	mov	r0, r8
 800d0fe:	4649      	mov	r1, r9
 800d100:	f7f3 fd34 	bl	8000b6c <__aeabi_dcmpun>
 800d104:	b140      	cbz	r0, 800d118 <_printf_float+0xe0>
 800d106:	464b      	mov	r3, r9
 800d108:	2b00      	cmp	r3, #0
 800d10a:	bfbc      	itt	lt
 800d10c:	232d      	movlt	r3, #45	@ 0x2d
 800d10e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d112:	4a7e      	ldr	r2, [pc, #504]	@ (800d30c <_printf_float+0x2d4>)
 800d114:	4b7e      	ldr	r3, [pc, #504]	@ (800d310 <_printf_float+0x2d8>)
 800d116:	e7d4      	b.n	800d0c2 <_printf_float+0x8a>
 800d118:	6863      	ldr	r3, [r4, #4]
 800d11a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d11e:	9206      	str	r2, [sp, #24]
 800d120:	1c5a      	adds	r2, r3, #1
 800d122:	d13b      	bne.n	800d19c <_printf_float+0x164>
 800d124:	2306      	movs	r3, #6
 800d126:	6063      	str	r3, [r4, #4]
 800d128:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d12c:	2300      	movs	r3, #0
 800d12e:	6022      	str	r2, [r4, #0]
 800d130:	9303      	str	r3, [sp, #12]
 800d132:	ab0a      	add	r3, sp, #40	@ 0x28
 800d134:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d138:	ab09      	add	r3, sp, #36	@ 0x24
 800d13a:	9300      	str	r3, [sp, #0]
 800d13c:	6861      	ldr	r1, [r4, #4]
 800d13e:	ec49 8b10 	vmov	d0, r8, r9
 800d142:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d146:	4628      	mov	r0, r5
 800d148:	f7ff fed6 	bl	800cef8 <__cvt>
 800d14c:	9b06      	ldr	r3, [sp, #24]
 800d14e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d150:	2b47      	cmp	r3, #71	@ 0x47
 800d152:	4680      	mov	r8, r0
 800d154:	d129      	bne.n	800d1aa <_printf_float+0x172>
 800d156:	1cc8      	adds	r0, r1, #3
 800d158:	db02      	blt.n	800d160 <_printf_float+0x128>
 800d15a:	6863      	ldr	r3, [r4, #4]
 800d15c:	4299      	cmp	r1, r3
 800d15e:	dd41      	ble.n	800d1e4 <_printf_float+0x1ac>
 800d160:	f1aa 0a02 	sub.w	sl, sl, #2
 800d164:	fa5f fa8a 	uxtb.w	sl, sl
 800d168:	3901      	subs	r1, #1
 800d16a:	4652      	mov	r2, sl
 800d16c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d170:	9109      	str	r1, [sp, #36]	@ 0x24
 800d172:	f7ff ff26 	bl	800cfc2 <__exponent>
 800d176:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d178:	1813      	adds	r3, r2, r0
 800d17a:	2a01      	cmp	r2, #1
 800d17c:	4681      	mov	r9, r0
 800d17e:	6123      	str	r3, [r4, #16]
 800d180:	dc02      	bgt.n	800d188 <_printf_float+0x150>
 800d182:	6822      	ldr	r2, [r4, #0]
 800d184:	07d2      	lsls	r2, r2, #31
 800d186:	d501      	bpl.n	800d18c <_printf_float+0x154>
 800d188:	3301      	adds	r3, #1
 800d18a:	6123      	str	r3, [r4, #16]
 800d18c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d190:	2b00      	cmp	r3, #0
 800d192:	d0a2      	beq.n	800d0da <_printf_float+0xa2>
 800d194:	232d      	movs	r3, #45	@ 0x2d
 800d196:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d19a:	e79e      	b.n	800d0da <_printf_float+0xa2>
 800d19c:	9a06      	ldr	r2, [sp, #24]
 800d19e:	2a47      	cmp	r2, #71	@ 0x47
 800d1a0:	d1c2      	bne.n	800d128 <_printf_float+0xf0>
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d1c0      	bne.n	800d128 <_printf_float+0xf0>
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	e7bd      	b.n	800d126 <_printf_float+0xee>
 800d1aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d1ae:	d9db      	bls.n	800d168 <_printf_float+0x130>
 800d1b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d1b4:	d118      	bne.n	800d1e8 <_printf_float+0x1b0>
 800d1b6:	2900      	cmp	r1, #0
 800d1b8:	6863      	ldr	r3, [r4, #4]
 800d1ba:	dd0b      	ble.n	800d1d4 <_printf_float+0x19c>
 800d1bc:	6121      	str	r1, [r4, #16]
 800d1be:	b913      	cbnz	r3, 800d1c6 <_printf_float+0x18e>
 800d1c0:	6822      	ldr	r2, [r4, #0]
 800d1c2:	07d0      	lsls	r0, r2, #31
 800d1c4:	d502      	bpl.n	800d1cc <_printf_float+0x194>
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	440b      	add	r3, r1
 800d1ca:	6123      	str	r3, [r4, #16]
 800d1cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d1ce:	f04f 0900 	mov.w	r9, #0
 800d1d2:	e7db      	b.n	800d18c <_printf_float+0x154>
 800d1d4:	b913      	cbnz	r3, 800d1dc <_printf_float+0x1a4>
 800d1d6:	6822      	ldr	r2, [r4, #0]
 800d1d8:	07d2      	lsls	r2, r2, #31
 800d1da:	d501      	bpl.n	800d1e0 <_printf_float+0x1a8>
 800d1dc:	3302      	adds	r3, #2
 800d1de:	e7f4      	b.n	800d1ca <_printf_float+0x192>
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	e7f2      	b.n	800d1ca <_printf_float+0x192>
 800d1e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d1e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1ea:	4299      	cmp	r1, r3
 800d1ec:	db05      	blt.n	800d1fa <_printf_float+0x1c2>
 800d1ee:	6823      	ldr	r3, [r4, #0]
 800d1f0:	6121      	str	r1, [r4, #16]
 800d1f2:	07d8      	lsls	r0, r3, #31
 800d1f4:	d5ea      	bpl.n	800d1cc <_printf_float+0x194>
 800d1f6:	1c4b      	adds	r3, r1, #1
 800d1f8:	e7e7      	b.n	800d1ca <_printf_float+0x192>
 800d1fa:	2900      	cmp	r1, #0
 800d1fc:	bfd4      	ite	le
 800d1fe:	f1c1 0202 	rsble	r2, r1, #2
 800d202:	2201      	movgt	r2, #1
 800d204:	4413      	add	r3, r2
 800d206:	e7e0      	b.n	800d1ca <_printf_float+0x192>
 800d208:	6823      	ldr	r3, [r4, #0]
 800d20a:	055a      	lsls	r2, r3, #21
 800d20c:	d407      	bmi.n	800d21e <_printf_float+0x1e6>
 800d20e:	6923      	ldr	r3, [r4, #16]
 800d210:	4642      	mov	r2, r8
 800d212:	4631      	mov	r1, r6
 800d214:	4628      	mov	r0, r5
 800d216:	47b8      	blx	r7
 800d218:	3001      	adds	r0, #1
 800d21a:	d12b      	bne.n	800d274 <_printf_float+0x23c>
 800d21c:	e767      	b.n	800d0ee <_printf_float+0xb6>
 800d21e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d222:	f240 80dd 	bls.w	800d3e0 <_printf_float+0x3a8>
 800d226:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d22a:	2200      	movs	r2, #0
 800d22c:	2300      	movs	r3, #0
 800d22e:	f7f3 fc6b 	bl	8000b08 <__aeabi_dcmpeq>
 800d232:	2800      	cmp	r0, #0
 800d234:	d033      	beq.n	800d29e <_printf_float+0x266>
 800d236:	4a37      	ldr	r2, [pc, #220]	@ (800d314 <_printf_float+0x2dc>)
 800d238:	2301      	movs	r3, #1
 800d23a:	4631      	mov	r1, r6
 800d23c:	4628      	mov	r0, r5
 800d23e:	47b8      	blx	r7
 800d240:	3001      	adds	r0, #1
 800d242:	f43f af54 	beq.w	800d0ee <_printf_float+0xb6>
 800d246:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d24a:	4543      	cmp	r3, r8
 800d24c:	db02      	blt.n	800d254 <_printf_float+0x21c>
 800d24e:	6823      	ldr	r3, [r4, #0]
 800d250:	07d8      	lsls	r0, r3, #31
 800d252:	d50f      	bpl.n	800d274 <_printf_float+0x23c>
 800d254:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d258:	4631      	mov	r1, r6
 800d25a:	4628      	mov	r0, r5
 800d25c:	47b8      	blx	r7
 800d25e:	3001      	adds	r0, #1
 800d260:	f43f af45 	beq.w	800d0ee <_printf_float+0xb6>
 800d264:	f04f 0900 	mov.w	r9, #0
 800d268:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800d26c:	f104 0a1a 	add.w	sl, r4, #26
 800d270:	45c8      	cmp	r8, r9
 800d272:	dc09      	bgt.n	800d288 <_printf_float+0x250>
 800d274:	6823      	ldr	r3, [r4, #0]
 800d276:	079b      	lsls	r3, r3, #30
 800d278:	f100 8103 	bmi.w	800d482 <_printf_float+0x44a>
 800d27c:	68e0      	ldr	r0, [r4, #12]
 800d27e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d280:	4298      	cmp	r0, r3
 800d282:	bfb8      	it	lt
 800d284:	4618      	movlt	r0, r3
 800d286:	e734      	b.n	800d0f2 <_printf_float+0xba>
 800d288:	2301      	movs	r3, #1
 800d28a:	4652      	mov	r2, sl
 800d28c:	4631      	mov	r1, r6
 800d28e:	4628      	mov	r0, r5
 800d290:	47b8      	blx	r7
 800d292:	3001      	adds	r0, #1
 800d294:	f43f af2b 	beq.w	800d0ee <_printf_float+0xb6>
 800d298:	f109 0901 	add.w	r9, r9, #1
 800d29c:	e7e8      	b.n	800d270 <_printf_float+0x238>
 800d29e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	dc39      	bgt.n	800d318 <_printf_float+0x2e0>
 800d2a4:	4a1b      	ldr	r2, [pc, #108]	@ (800d314 <_printf_float+0x2dc>)
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	4631      	mov	r1, r6
 800d2aa:	4628      	mov	r0, r5
 800d2ac:	47b8      	blx	r7
 800d2ae:	3001      	adds	r0, #1
 800d2b0:	f43f af1d 	beq.w	800d0ee <_printf_float+0xb6>
 800d2b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d2b8:	ea59 0303 	orrs.w	r3, r9, r3
 800d2bc:	d102      	bne.n	800d2c4 <_printf_float+0x28c>
 800d2be:	6823      	ldr	r3, [r4, #0]
 800d2c0:	07d9      	lsls	r1, r3, #31
 800d2c2:	d5d7      	bpl.n	800d274 <_printf_float+0x23c>
 800d2c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d2c8:	4631      	mov	r1, r6
 800d2ca:	4628      	mov	r0, r5
 800d2cc:	47b8      	blx	r7
 800d2ce:	3001      	adds	r0, #1
 800d2d0:	f43f af0d 	beq.w	800d0ee <_printf_float+0xb6>
 800d2d4:	f04f 0a00 	mov.w	sl, #0
 800d2d8:	f104 0b1a 	add.w	fp, r4, #26
 800d2dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2de:	425b      	negs	r3, r3
 800d2e0:	4553      	cmp	r3, sl
 800d2e2:	dc01      	bgt.n	800d2e8 <_printf_float+0x2b0>
 800d2e4:	464b      	mov	r3, r9
 800d2e6:	e793      	b.n	800d210 <_printf_float+0x1d8>
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	465a      	mov	r2, fp
 800d2ec:	4631      	mov	r1, r6
 800d2ee:	4628      	mov	r0, r5
 800d2f0:	47b8      	blx	r7
 800d2f2:	3001      	adds	r0, #1
 800d2f4:	f43f aefb 	beq.w	800d0ee <_printf_float+0xb6>
 800d2f8:	f10a 0a01 	add.w	sl, sl, #1
 800d2fc:	e7ee      	b.n	800d2dc <_printf_float+0x2a4>
 800d2fe:	bf00      	nop
 800d300:	7fefffff 	.word	0x7fefffff
 800d304:	080120ac 	.word	0x080120ac
 800d308:	080120b0 	.word	0x080120b0
 800d30c:	080120b4 	.word	0x080120b4
 800d310:	080120b8 	.word	0x080120b8
 800d314:	080120bc 	.word	0x080120bc
 800d318:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d31a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d31e:	4553      	cmp	r3, sl
 800d320:	bfa8      	it	ge
 800d322:	4653      	movge	r3, sl
 800d324:	2b00      	cmp	r3, #0
 800d326:	4699      	mov	r9, r3
 800d328:	dc36      	bgt.n	800d398 <_printf_float+0x360>
 800d32a:	f04f 0b00 	mov.w	fp, #0
 800d32e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d332:	f104 021a 	add.w	r2, r4, #26
 800d336:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d338:	9306      	str	r3, [sp, #24]
 800d33a:	eba3 0309 	sub.w	r3, r3, r9
 800d33e:	455b      	cmp	r3, fp
 800d340:	dc31      	bgt.n	800d3a6 <_printf_float+0x36e>
 800d342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d344:	459a      	cmp	sl, r3
 800d346:	dc3a      	bgt.n	800d3be <_printf_float+0x386>
 800d348:	6823      	ldr	r3, [r4, #0]
 800d34a:	07da      	lsls	r2, r3, #31
 800d34c:	d437      	bmi.n	800d3be <_printf_float+0x386>
 800d34e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d350:	ebaa 0903 	sub.w	r9, sl, r3
 800d354:	9b06      	ldr	r3, [sp, #24]
 800d356:	ebaa 0303 	sub.w	r3, sl, r3
 800d35a:	4599      	cmp	r9, r3
 800d35c:	bfa8      	it	ge
 800d35e:	4699      	movge	r9, r3
 800d360:	f1b9 0f00 	cmp.w	r9, #0
 800d364:	dc33      	bgt.n	800d3ce <_printf_float+0x396>
 800d366:	f04f 0800 	mov.w	r8, #0
 800d36a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d36e:	f104 0b1a 	add.w	fp, r4, #26
 800d372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d374:	ebaa 0303 	sub.w	r3, sl, r3
 800d378:	eba3 0309 	sub.w	r3, r3, r9
 800d37c:	4543      	cmp	r3, r8
 800d37e:	f77f af79 	ble.w	800d274 <_printf_float+0x23c>
 800d382:	2301      	movs	r3, #1
 800d384:	465a      	mov	r2, fp
 800d386:	4631      	mov	r1, r6
 800d388:	4628      	mov	r0, r5
 800d38a:	47b8      	blx	r7
 800d38c:	3001      	adds	r0, #1
 800d38e:	f43f aeae 	beq.w	800d0ee <_printf_float+0xb6>
 800d392:	f108 0801 	add.w	r8, r8, #1
 800d396:	e7ec      	b.n	800d372 <_printf_float+0x33a>
 800d398:	4642      	mov	r2, r8
 800d39a:	4631      	mov	r1, r6
 800d39c:	4628      	mov	r0, r5
 800d39e:	47b8      	blx	r7
 800d3a0:	3001      	adds	r0, #1
 800d3a2:	d1c2      	bne.n	800d32a <_printf_float+0x2f2>
 800d3a4:	e6a3      	b.n	800d0ee <_printf_float+0xb6>
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	4631      	mov	r1, r6
 800d3aa:	4628      	mov	r0, r5
 800d3ac:	9206      	str	r2, [sp, #24]
 800d3ae:	47b8      	blx	r7
 800d3b0:	3001      	adds	r0, #1
 800d3b2:	f43f ae9c 	beq.w	800d0ee <_printf_float+0xb6>
 800d3b6:	9a06      	ldr	r2, [sp, #24]
 800d3b8:	f10b 0b01 	add.w	fp, fp, #1
 800d3bc:	e7bb      	b.n	800d336 <_printf_float+0x2fe>
 800d3be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3c2:	4631      	mov	r1, r6
 800d3c4:	4628      	mov	r0, r5
 800d3c6:	47b8      	blx	r7
 800d3c8:	3001      	adds	r0, #1
 800d3ca:	d1c0      	bne.n	800d34e <_printf_float+0x316>
 800d3cc:	e68f      	b.n	800d0ee <_printf_float+0xb6>
 800d3ce:	9a06      	ldr	r2, [sp, #24]
 800d3d0:	464b      	mov	r3, r9
 800d3d2:	4442      	add	r2, r8
 800d3d4:	4631      	mov	r1, r6
 800d3d6:	4628      	mov	r0, r5
 800d3d8:	47b8      	blx	r7
 800d3da:	3001      	adds	r0, #1
 800d3dc:	d1c3      	bne.n	800d366 <_printf_float+0x32e>
 800d3de:	e686      	b.n	800d0ee <_printf_float+0xb6>
 800d3e0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d3e4:	f1ba 0f01 	cmp.w	sl, #1
 800d3e8:	dc01      	bgt.n	800d3ee <_printf_float+0x3b6>
 800d3ea:	07db      	lsls	r3, r3, #31
 800d3ec:	d536      	bpl.n	800d45c <_printf_float+0x424>
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	4642      	mov	r2, r8
 800d3f2:	4631      	mov	r1, r6
 800d3f4:	4628      	mov	r0, r5
 800d3f6:	47b8      	blx	r7
 800d3f8:	3001      	adds	r0, #1
 800d3fa:	f43f ae78 	beq.w	800d0ee <_printf_float+0xb6>
 800d3fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d402:	4631      	mov	r1, r6
 800d404:	4628      	mov	r0, r5
 800d406:	47b8      	blx	r7
 800d408:	3001      	adds	r0, #1
 800d40a:	f43f ae70 	beq.w	800d0ee <_printf_float+0xb6>
 800d40e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d412:	2200      	movs	r2, #0
 800d414:	2300      	movs	r3, #0
 800d416:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800d41a:	f7f3 fb75 	bl	8000b08 <__aeabi_dcmpeq>
 800d41e:	b9c0      	cbnz	r0, 800d452 <_printf_float+0x41a>
 800d420:	4653      	mov	r3, sl
 800d422:	f108 0201 	add.w	r2, r8, #1
 800d426:	4631      	mov	r1, r6
 800d428:	4628      	mov	r0, r5
 800d42a:	47b8      	blx	r7
 800d42c:	3001      	adds	r0, #1
 800d42e:	d10c      	bne.n	800d44a <_printf_float+0x412>
 800d430:	e65d      	b.n	800d0ee <_printf_float+0xb6>
 800d432:	2301      	movs	r3, #1
 800d434:	465a      	mov	r2, fp
 800d436:	4631      	mov	r1, r6
 800d438:	4628      	mov	r0, r5
 800d43a:	47b8      	blx	r7
 800d43c:	3001      	adds	r0, #1
 800d43e:	f43f ae56 	beq.w	800d0ee <_printf_float+0xb6>
 800d442:	f108 0801 	add.w	r8, r8, #1
 800d446:	45d0      	cmp	r8, sl
 800d448:	dbf3      	blt.n	800d432 <_printf_float+0x3fa>
 800d44a:	464b      	mov	r3, r9
 800d44c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d450:	e6df      	b.n	800d212 <_printf_float+0x1da>
 800d452:	f04f 0800 	mov.w	r8, #0
 800d456:	f104 0b1a 	add.w	fp, r4, #26
 800d45a:	e7f4      	b.n	800d446 <_printf_float+0x40e>
 800d45c:	2301      	movs	r3, #1
 800d45e:	4642      	mov	r2, r8
 800d460:	e7e1      	b.n	800d426 <_printf_float+0x3ee>
 800d462:	2301      	movs	r3, #1
 800d464:	464a      	mov	r2, r9
 800d466:	4631      	mov	r1, r6
 800d468:	4628      	mov	r0, r5
 800d46a:	47b8      	blx	r7
 800d46c:	3001      	adds	r0, #1
 800d46e:	f43f ae3e 	beq.w	800d0ee <_printf_float+0xb6>
 800d472:	f108 0801 	add.w	r8, r8, #1
 800d476:	68e3      	ldr	r3, [r4, #12]
 800d478:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d47a:	1a5b      	subs	r3, r3, r1
 800d47c:	4543      	cmp	r3, r8
 800d47e:	dcf0      	bgt.n	800d462 <_printf_float+0x42a>
 800d480:	e6fc      	b.n	800d27c <_printf_float+0x244>
 800d482:	f04f 0800 	mov.w	r8, #0
 800d486:	f104 0919 	add.w	r9, r4, #25
 800d48a:	e7f4      	b.n	800d476 <_printf_float+0x43e>

0800d48c <_printf_common>:
 800d48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d490:	4616      	mov	r6, r2
 800d492:	4698      	mov	r8, r3
 800d494:	688a      	ldr	r2, [r1, #8]
 800d496:	690b      	ldr	r3, [r1, #16]
 800d498:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d49c:	4293      	cmp	r3, r2
 800d49e:	bfb8      	it	lt
 800d4a0:	4613      	movlt	r3, r2
 800d4a2:	6033      	str	r3, [r6, #0]
 800d4a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d4a8:	4607      	mov	r7, r0
 800d4aa:	460c      	mov	r4, r1
 800d4ac:	b10a      	cbz	r2, 800d4b2 <_printf_common+0x26>
 800d4ae:	3301      	adds	r3, #1
 800d4b0:	6033      	str	r3, [r6, #0]
 800d4b2:	6823      	ldr	r3, [r4, #0]
 800d4b4:	0699      	lsls	r1, r3, #26
 800d4b6:	bf42      	ittt	mi
 800d4b8:	6833      	ldrmi	r3, [r6, #0]
 800d4ba:	3302      	addmi	r3, #2
 800d4bc:	6033      	strmi	r3, [r6, #0]
 800d4be:	6825      	ldr	r5, [r4, #0]
 800d4c0:	f015 0506 	ands.w	r5, r5, #6
 800d4c4:	d106      	bne.n	800d4d4 <_printf_common+0x48>
 800d4c6:	f104 0a19 	add.w	sl, r4, #25
 800d4ca:	68e3      	ldr	r3, [r4, #12]
 800d4cc:	6832      	ldr	r2, [r6, #0]
 800d4ce:	1a9b      	subs	r3, r3, r2
 800d4d0:	42ab      	cmp	r3, r5
 800d4d2:	dc26      	bgt.n	800d522 <_printf_common+0x96>
 800d4d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d4d8:	6822      	ldr	r2, [r4, #0]
 800d4da:	3b00      	subs	r3, #0
 800d4dc:	bf18      	it	ne
 800d4de:	2301      	movne	r3, #1
 800d4e0:	0692      	lsls	r2, r2, #26
 800d4e2:	d42b      	bmi.n	800d53c <_printf_common+0xb0>
 800d4e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d4e8:	4641      	mov	r1, r8
 800d4ea:	4638      	mov	r0, r7
 800d4ec:	47c8      	blx	r9
 800d4ee:	3001      	adds	r0, #1
 800d4f0:	d01e      	beq.n	800d530 <_printf_common+0xa4>
 800d4f2:	6823      	ldr	r3, [r4, #0]
 800d4f4:	6922      	ldr	r2, [r4, #16]
 800d4f6:	f003 0306 	and.w	r3, r3, #6
 800d4fa:	2b04      	cmp	r3, #4
 800d4fc:	bf02      	ittt	eq
 800d4fe:	68e5      	ldreq	r5, [r4, #12]
 800d500:	6833      	ldreq	r3, [r6, #0]
 800d502:	1aed      	subeq	r5, r5, r3
 800d504:	68a3      	ldr	r3, [r4, #8]
 800d506:	bf0c      	ite	eq
 800d508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d50c:	2500      	movne	r5, #0
 800d50e:	4293      	cmp	r3, r2
 800d510:	bfc4      	itt	gt
 800d512:	1a9b      	subgt	r3, r3, r2
 800d514:	18ed      	addgt	r5, r5, r3
 800d516:	2600      	movs	r6, #0
 800d518:	341a      	adds	r4, #26
 800d51a:	42b5      	cmp	r5, r6
 800d51c:	d11a      	bne.n	800d554 <_printf_common+0xc8>
 800d51e:	2000      	movs	r0, #0
 800d520:	e008      	b.n	800d534 <_printf_common+0xa8>
 800d522:	2301      	movs	r3, #1
 800d524:	4652      	mov	r2, sl
 800d526:	4641      	mov	r1, r8
 800d528:	4638      	mov	r0, r7
 800d52a:	47c8      	blx	r9
 800d52c:	3001      	adds	r0, #1
 800d52e:	d103      	bne.n	800d538 <_printf_common+0xac>
 800d530:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d538:	3501      	adds	r5, #1
 800d53a:	e7c6      	b.n	800d4ca <_printf_common+0x3e>
 800d53c:	18e1      	adds	r1, r4, r3
 800d53e:	1c5a      	adds	r2, r3, #1
 800d540:	2030      	movs	r0, #48	@ 0x30
 800d542:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d546:	4422      	add	r2, r4
 800d548:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d54c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d550:	3302      	adds	r3, #2
 800d552:	e7c7      	b.n	800d4e4 <_printf_common+0x58>
 800d554:	2301      	movs	r3, #1
 800d556:	4622      	mov	r2, r4
 800d558:	4641      	mov	r1, r8
 800d55a:	4638      	mov	r0, r7
 800d55c:	47c8      	blx	r9
 800d55e:	3001      	adds	r0, #1
 800d560:	d0e6      	beq.n	800d530 <_printf_common+0xa4>
 800d562:	3601      	adds	r6, #1
 800d564:	e7d9      	b.n	800d51a <_printf_common+0x8e>
	...

0800d568 <_printf_i>:
 800d568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d56c:	7e0f      	ldrb	r7, [r1, #24]
 800d56e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d570:	2f78      	cmp	r7, #120	@ 0x78
 800d572:	4691      	mov	r9, r2
 800d574:	4680      	mov	r8, r0
 800d576:	460c      	mov	r4, r1
 800d578:	469a      	mov	sl, r3
 800d57a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d57e:	d807      	bhi.n	800d590 <_printf_i+0x28>
 800d580:	2f62      	cmp	r7, #98	@ 0x62
 800d582:	d80a      	bhi.n	800d59a <_printf_i+0x32>
 800d584:	2f00      	cmp	r7, #0
 800d586:	f000 80d2 	beq.w	800d72e <_printf_i+0x1c6>
 800d58a:	2f58      	cmp	r7, #88	@ 0x58
 800d58c:	f000 80b9 	beq.w	800d702 <_printf_i+0x19a>
 800d590:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d594:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d598:	e03a      	b.n	800d610 <_printf_i+0xa8>
 800d59a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d59e:	2b15      	cmp	r3, #21
 800d5a0:	d8f6      	bhi.n	800d590 <_printf_i+0x28>
 800d5a2:	a101      	add	r1, pc, #4	@ (adr r1, 800d5a8 <_printf_i+0x40>)
 800d5a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d5a8:	0800d601 	.word	0x0800d601
 800d5ac:	0800d615 	.word	0x0800d615
 800d5b0:	0800d591 	.word	0x0800d591
 800d5b4:	0800d591 	.word	0x0800d591
 800d5b8:	0800d591 	.word	0x0800d591
 800d5bc:	0800d591 	.word	0x0800d591
 800d5c0:	0800d615 	.word	0x0800d615
 800d5c4:	0800d591 	.word	0x0800d591
 800d5c8:	0800d591 	.word	0x0800d591
 800d5cc:	0800d591 	.word	0x0800d591
 800d5d0:	0800d591 	.word	0x0800d591
 800d5d4:	0800d715 	.word	0x0800d715
 800d5d8:	0800d63f 	.word	0x0800d63f
 800d5dc:	0800d6cf 	.word	0x0800d6cf
 800d5e0:	0800d591 	.word	0x0800d591
 800d5e4:	0800d591 	.word	0x0800d591
 800d5e8:	0800d737 	.word	0x0800d737
 800d5ec:	0800d591 	.word	0x0800d591
 800d5f0:	0800d63f 	.word	0x0800d63f
 800d5f4:	0800d591 	.word	0x0800d591
 800d5f8:	0800d591 	.word	0x0800d591
 800d5fc:	0800d6d7 	.word	0x0800d6d7
 800d600:	6833      	ldr	r3, [r6, #0]
 800d602:	1d1a      	adds	r2, r3, #4
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	6032      	str	r2, [r6, #0]
 800d608:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d60c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d610:	2301      	movs	r3, #1
 800d612:	e09d      	b.n	800d750 <_printf_i+0x1e8>
 800d614:	6833      	ldr	r3, [r6, #0]
 800d616:	6820      	ldr	r0, [r4, #0]
 800d618:	1d19      	adds	r1, r3, #4
 800d61a:	6031      	str	r1, [r6, #0]
 800d61c:	0606      	lsls	r6, r0, #24
 800d61e:	d501      	bpl.n	800d624 <_printf_i+0xbc>
 800d620:	681d      	ldr	r5, [r3, #0]
 800d622:	e003      	b.n	800d62c <_printf_i+0xc4>
 800d624:	0645      	lsls	r5, r0, #25
 800d626:	d5fb      	bpl.n	800d620 <_printf_i+0xb8>
 800d628:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d62c:	2d00      	cmp	r5, #0
 800d62e:	da03      	bge.n	800d638 <_printf_i+0xd0>
 800d630:	232d      	movs	r3, #45	@ 0x2d
 800d632:	426d      	negs	r5, r5
 800d634:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d638:	4859      	ldr	r0, [pc, #356]	@ (800d7a0 <_printf_i+0x238>)
 800d63a:	230a      	movs	r3, #10
 800d63c:	e011      	b.n	800d662 <_printf_i+0xfa>
 800d63e:	6821      	ldr	r1, [r4, #0]
 800d640:	6833      	ldr	r3, [r6, #0]
 800d642:	0608      	lsls	r0, r1, #24
 800d644:	f853 5b04 	ldr.w	r5, [r3], #4
 800d648:	d402      	bmi.n	800d650 <_printf_i+0xe8>
 800d64a:	0649      	lsls	r1, r1, #25
 800d64c:	bf48      	it	mi
 800d64e:	b2ad      	uxthmi	r5, r5
 800d650:	2f6f      	cmp	r7, #111	@ 0x6f
 800d652:	4853      	ldr	r0, [pc, #332]	@ (800d7a0 <_printf_i+0x238>)
 800d654:	6033      	str	r3, [r6, #0]
 800d656:	bf14      	ite	ne
 800d658:	230a      	movne	r3, #10
 800d65a:	2308      	moveq	r3, #8
 800d65c:	2100      	movs	r1, #0
 800d65e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d662:	6866      	ldr	r6, [r4, #4]
 800d664:	60a6      	str	r6, [r4, #8]
 800d666:	2e00      	cmp	r6, #0
 800d668:	bfa2      	ittt	ge
 800d66a:	6821      	ldrge	r1, [r4, #0]
 800d66c:	f021 0104 	bicge.w	r1, r1, #4
 800d670:	6021      	strge	r1, [r4, #0]
 800d672:	b90d      	cbnz	r5, 800d678 <_printf_i+0x110>
 800d674:	2e00      	cmp	r6, #0
 800d676:	d04b      	beq.n	800d710 <_printf_i+0x1a8>
 800d678:	4616      	mov	r6, r2
 800d67a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d67e:	fb03 5711 	mls	r7, r3, r1, r5
 800d682:	5dc7      	ldrb	r7, [r0, r7]
 800d684:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d688:	462f      	mov	r7, r5
 800d68a:	42bb      	cmp	r3, r7
 800d68c:	460d      	mov	r5, r1
 800d68e:	d9f4      	bls.n	800d67a <_printf_i+0x112>
 800d690:	2b08      	cmp	r3, #8
 800d692:	d10b      	bne.n	800d6ac <_printf_i+0x144>
 800d694:	6823      	ldr	r3, [r4, #0]
 800d696:	07df      	lsls	r7, r3, #31
 800d698:	d508      	bpl.n	800d6ac <_printf_i+0x144>
 800d69a:	6923      	ldr	r3, [r4, #16]
 800d69c:	6861      	ldr	r1, [r4, #4]
 800d69e:	4299      	cmp	r1, r3
 800d6a0:	bfde      	ittt	le
 800d6a2:	2330      	movle	r3, #48	@ 0x30
 800d6a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d6a8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d6ac:	1b92      	subs	r2, r2, r6
 800d6ae:	6122      	str	r2, [r4, #16]
 800d6b0:	f8cd a000 	str.w	sl, [sp]
 800d6b4:	464b      	mov	r3, r9
 800d6b6:	aa03      	add	r2, sp, #12
 800d6b8:	4621      	mov	r1, r4
 800d6ba:	4640      	mov	r0, r8
 800d6bc:	f7ff fee6 	bl	800d48c <_printf_common>
 800d6c0:	3001      	adds	r0, #1
 800d6c2:	d14a      	bne.n	800d75a <_printf_i+0x1f2>
 800d6c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d6c8:	b004      	add	sp, #16
 800d6ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6ce:	6823      	ldr	r3, [r4, #0]
 800d6d0:	f043 0320 	orr.w	r3, r3, #32
 800d6d4:	6023      	str	r3, [r4, #0]
 800d6d6:	4833      	ldr	r0, [pc, #204]	@ (800d7a4 <_printf_i+0x23c>)
 800d6d8:	2778      	movs	r7, #120	@ 0x78
 800d6da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d6de:	6823      	ldr	r3, [r4, #0]
 800d6e0:	6831      	ldr	r1, [r6, #0]
 800d6e2:	061f      	lsls	r7, r3, #24
 800d6e4:	f851 5b04 	ldr.w	r5, [r1], #4
 800d6e8:	d402      	bmi.n	800d6f0 <_printf_i+0x188>
 800d6ea:	065f      	lsls	r7, r3, #25
 800d6ec:	bf48      	it	mi
 800d6ee:	b2ad      	uxthmi	r5, r5
 800d6f0:	6031      	str	r1, [r6, #0]
 800d6f2:	07d9      	lsls	r1, r3, #31
 800d6f4:	bf44      	itt	mi
 800d6f6:	f043 0320 	orrmi.w	r3, r3, #32
 800d6fa:	6023      	strmi	r3, [r4, #0]
 800d6fc:	b11d      	cbz	r5, 800d706 <_printf_i+0x19e>
 800d6fe:	2310      	movs	r3, #16
 800d700:	e7ac      	b.n	800d65c <_printf_i+0xf4>
 800d702:	4827      	ldr	r0, [pc, #156]	@ (800d7a0 <_printf_i+0x238>)
 800d704:	e7e9      	b.n	800d6da <_printf_i+0x172>
 800d706:	6823      	ldr	r3, [r4, #0]
 800d708:	f023 0320 	bic.w	r3, r3, #32
 800d70c:	6023      	str	r3, [r4, #0]
 800d70e:	e7f6      	b.n	800d6fe <_printf_i+0x196>
 800d710:	4616      	mov	r6, r2
 800d712:	e7bd      	b.n	800d690 <_printf_i+0x128>
 800d714:	6833      	ldr	r3, [r6, #0]
 800d716:	6825      	ldr	r5, [r4, #0]
 800d718:	6961      	ldr	r1, [r4, #20]
 800d71a:	1d18      	adds	r0, r3, #4
 800d71c:	6030      	str	r0, [r6, #0]
 800d71e:	062e      	lsls	r6, r5, #24
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	d501      	bpl.n	800d728 <_printf_i+0x1c0>
 800d724:	6019      	str	r1, [r3, #0]
 800d726:	e002      	b.n	800d72e <_printf_i+0x1c6>
 800d728:	0668      	lsls	r0, r5, #25
 800d72a:	d5fb      	bpl.n	800d724 <_printf_i+0x1bc>
 800d72c:	8019      	strh	r1, [r3, #0]
 800d72e:	2300      	movs	r3, #0
 800d730:	6123      	str	r3, [r4, #16]
 800d732:	4616      	mov	r6, r2
 800d734:	e7bc      	b.n	800d6b0 <_printf_i+0x148>
 800d736:	6833      	ldr	r3, [r6, #0]
 800d738:	1d1a      	adds	r2, r3, #4
 800d73a:	6032      	str	r2, [r6, #0]
 800d73c:	681e      	ldr	r6, [r3, #0]
 800d73e:	6862      	ldr	r2, [r4, #4]
 800d740:	2100      	movs	r1, #0
 800d742:	4630      	mov	r0, r6
 800d744:	f7f2 fd64 	bl	8000210 <memchr>
 800d748:	b108      	cbz	r0, 800d74e <_printf_i+0x1e6>
 800d74a:	1b80      	subs	r0, r0, r6
 800d74c:	6060      	str	r0, [r4, #4]
 800d74e:	6863      	ldr	r3, [r4, #4]
 800d750:	6123      	str	r3, [r4, #16]
 800d752:	2300      	movs	r3, #0
 800d754:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d758:	e7aa      	b.n	800d6b0 <_printf_i+0x148>
 800d75a:	6923      	ldr	r3, [r4, #16]
 800d75c:	4632      	mov	r2, r6
 800d75e:	4649      	mov	r1, r9
 800d760:	4640      	mov	r0, r8
 800d762:	47d0      	blx	sl
 800d764:	3001      	adds	r0, #1
 800d766:	d0ad      	beq.n	800d6c4 <_printf_i+0x15c>
 800d768:	6823      	ldr	r3, [r4, #0]
 800d76a:	079b      	lsls	r3, r3, #30
 800d76c:	d413      	bmi.n	800d796 <_printf_i+0x22e>
 800d76e:	68e0      	ldr	r0, [r4, #12]
 800d770:	9b03      	ldr	r3, [sp, #12]
 800d772:	4298      	cmp	r0, r3
 800d774:	bfb8      	it	lt
 800d776:	4618      	movlt	r0, r3
 800d778:	e7a6      	b.n	800d6c8 <_printf_i+0x160>
 800d77a:	2301      	movs	r3, #1
 800d77c:	4632      	mov	r2, r6
 800d77e:	4649      	mov	r1, r9
 800d780:	4640      	mov	r0, r8
 800d782:	47d0      	blx	sl
 800d784:	3001      	adds	r0, #1
 800d786:	d09d      	beq.n	800d6c4 <_printf_i+0x15c>
 800d788:	3501      	adds	r5, #1
 800d78a:	68e3      	ldr	r3, [r4, #12]
 800d78c:	9903      	ldr	r1, [sp, #12]
 800d78e:	1a5b      	subs	r3, r3, r1
 800d790:	42ab      	cmp	r3, r5
 800d792:	dcf2      	bgt.n	800d77a <_printf_i+0x212>
 800d794:	e7eb      	b.n	800d76e <_printf_i+0x206>
 800d796:	2500      	movs	r5, #0
 800d798:	f104 0619 	add.w	r6, r4, #25
 800d79c:	e7f5      	b.n	800d78a <_printf_i+0x222>
 800d79e:	bf00      	nop
 800d7a0:	080120be 	.word	0x080120be
 800d7a4:	080120cf 	.word	0x080120cf

0800d7a8 <std>:
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	b510      	push	{r4, lr}
 800d7ac:	4604      	mov	r4, r0
 800d7ae:	e9c0 3300 	strd	r3, r3, [r0]
 800d7b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d7b6:	6083      	str	r3, [r0, #8]
 800d7b8:	8181      	strh	r1, [r0, #12]
 800d7ba:	6643      	str	r3, [r0, #100]	@ 0x64
 800d7bc:	81c2      	strh	r2, [r0, #14]
 800d7be:	6183      	str	r3, [r0, #24]
 800d7c0:	4619      	mov	r1, r3
 800d7c2:	2208      	movs	r2, #8
 800d7c4:	305c      	adds	r0, #92	@ 0x5c
 800d7c6:	f000 fa2d 	bl	800dc24 <memset>
 800d7ca:	4b0d      	ldr	r3, [pc, #52]	@ (800d800 <std+0x58>)
 800d7cc:	6263      	str	r3, [r4, #36]	@ 0x24
 800d7ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d804 <std+0x5c>)
 800d7d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d7d2:	4b0d      	ldr	r3, [pc, #52]	@ (800d808 <std+0x60>)
 800d7d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d7d6:	4b0d      	ldr	r3, [pc, #52]	@ (800d80c <std+0x64>)
 800d7d8:	6323      	str	r3, [r4, #48]	@ 0x30
 800d7da:	4b0d      	ldr	r3, [pc, #52]	@ (800d810 <std+0x68>)
 800d7dc:	6224      	str	r4, [r4, #32]
 800d7de:	429c      	cmp	r4, r3
 800d7e0:	d006      	beq.n	800d7f0 <std+0x48>
 800d7e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d7e6:	4294      	cmp	r4, r2
 800d7e8:	d002      	beq.n	800d7f0 <std+0x48>
 800d7ea:	33d0      	adds	r3, #208	@ 0xd0
 800d7ec:	429c      	cmp	r4, r3
 800d7ee:	d105      	bne.n	800d7fc <std+0x54>
 800d7f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d7f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7f8:	f000 baa0 	b.w	800dd3c <__retarget_lock_init_recursive>
 800d7fc:	bd10      	pop	{r4, pc}
 800d7fe:	bf00      	nop
 800d800:	0800da75 	.word	0x0800da75
 800d804:	0800da97 	.word	0x0800da97
 800d808:	0800dacf 	.word	0x0800dacf
 800d80c:	0800daf3 	.word	0x0800daf3
 800d810:	2000b768 	.word	0x2000b768

0800d814 <stdio_exit_handler>:
 800d814:	4a02      	ldr	r2, [pc, #8]	@ (800d820 <stdio_exit_handler+0xc>)
 800d816:	4903      	ldr	r1, [pc, #12]	@ (800d824 <stdio_exit_handler+0x10>)
 800d818:	4803      	ldr	r0, [pc, #12]	@ (800d828 <stdio_exit_handler+0x14>)
 800d81a:	f000 b869 	b.w	800d8f0 <_fwalk_sglue>
 800d81e:	bf00      	nop
 800d820:	20000010 	.word	0x20000010
 800d824:	0800f749 	.word	0x0800f749
 800d828:	20000020 	.word	0x20000020

0800d82c <cleanup_stdio>:
 800d82c:	6841      	ldr	r1, [r0, #4]
 800d82e:	4b0c      	ldr	r3, [pc, #48]	@ (800d860 <cleanup_stdio+0x34>)
 800d830:	4299      	cmp	r1, r3
 800d832:	b510      	push	{r4, lr}
 800d834:	4604      	mov	r4, r0
 800d836:	d001      	beq.n	800d83c <cleanup_stdio+0x10>
 800d838:	f001 ff86 	bl	800f748 <_fflush_r>
 800d83c:	68a1      	ldr	r1, [r4, #8]
 800d83e:	4b09      	ldr	r3, [pc, #36]	@ (800d864 <cleanup_stdio+0x38>)
 800d840:	4299      	cmp	r1, r3
 800d842:	d002      	beq.n	800d84a <cleanup_stdio+0x1e>
 800d844:	4620      	mov	r0, r4
 800d846:	f001 ff7f 	bl	800f748 <_fflush_r>
 800d84a:	68e1      	ldr	r1, [r4, #12]
 800d84c:	4b06      	ldr	r3, [pc, #24]	@ (800d868 <cleanup_stdio+0x3c>)
 800d84e:	4299      	cmp	r1, r3
 800d850:	d004      	beq.n	800d85c <cleanup_stdio+0x30>
 800d852:	4620      	mov	r0, r4
 800d854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d858:	f001 bf76 	b.w	800f748 <_fflush_r>
 800d85c:	bd10      	pop	{r4, pc}
 800d85e:	bf00      	nop
 800d860:	2000b768 	.word	0x2000b768
 800d864:	2000b7d0 	.word	0x2000b7d0
 800d868:	2000b838 	.word	0x2000b838

0800d86c <global_stdio_init.part.0>:
 800d86c:	b510      	push	{r4, lr}
 800d86e:	4b0b      	ldr	r3, [pc, #44]	@ (800d89c <global_stdio_init.part.0+0x30>)
 800d870:	4c0b      	ldr	r4, [pc, #44]	@ (800d8a0 <global_stdio_init.part.0+0x34>)
 800d872:	4a0c      	ldr	r2, [pc, #48]	@ (800d8a4 <global_stdio_init.part.0+0x38>)
 800d874:	601a      	str	r2, [r3, #0]
 800d876:	4620      	mov	r0, r4
 800d878:	2200      	movs	r2, #0
 800d87a:	2104      	movs	r1, #4
 800d87c:	f7ff ff94 	bl	800d7a8 <std>
 800d880:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d884:	2201      	movs	r2, #1
 800d886:	2109      	movs	r1, #9
 800d888:	f7ff ff8e 	bl	800d7a8 <std>
 800d88c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d890:	2202      	movs	r2, #2
 800d892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d896:	2112      	movs	r1, #18
 800d898:	f7ff bf86 	b.w	800d7a8 <std>
 800d89c:	2000b8a0 	.word	0x2000b8a0
 800d8a0:	2000b768 	.word	0x2000b768
 800d8a4:	0800d815 	.word	0x0800d815

0800d8a8 <__sfp_lock_acquire>:
 800d8a8:	4801      	ldr	r0, [pc, #4]	@ (800d8b0 <__sfp_lock_acquire+0x8>)
 800d8aa:	f000 ba48 	b.w	800dd3e <__retarget_lock_acquire_recursive>
 800d8ae:	bf00      	nop
 800d8b0:	2000b8a9 	.word	0x2000b8a9

0800d8b4 <__sfp_lock_release>:
 800d8b4:	4801      	ldr	r0, [pc, #4]	@ (800d8bc <__sfp_lock_release+0x8>)
 800d8b6:	f000 ba43 	b.w	800dd40 <__retarget_lock_release_recursive>
 800d8ba:	bf00      	nop
 800d8bc:	2000b8a9 	.word	0x2000b8a9

0800d8c0 <__sinit>:
 800d8c0:	b510      	push	{r4, lr}
 800d8c2:	4604      	mov	r4, r0
 800d8c4:	f7ff fff0 	bl	800d8a8 <__sfp_lock_acquire>
 800d8c8:	6a23      	ldr	r3, [r4, #32]
 800d8ca:	b11b      	cbz	r3, 800d8d4 <__sinit+0x14>
 800d8cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8d0:	f7ff bff0 	b.w	800d8b4 <__sfp_lock_release>
 800d8d4:	4b04      	ldr	r3, [pc, #16]	@ (800d8e8 <__sinit+0x28>)
 800d8d6:	6223      	str	r3, [r4, #32]
 800d8d8:	4b04      	ldr	r3, [pc, #16]	@ (800d8ec <__sinit+0x2c>)
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d1f5      	bne.n	800d8cc <__sinit+0xc>
 800d8e0:	f7ff ffc4 	bl	800d86c <global_stdio_init.part.0>
 800d8e4:	e7f2      	b.n	800d8cc <__sinit+0xc>
 800d8e6:	bf00      	nop
 800d8e8:	0800d82d 	.word	0x0800d82d
 800d8ec:	2000b8a0 	.word	0x2000b8a0

0800d8f0 <_fwalk_sglue>:
 800d8f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8f4:	4607      	mov	r7, r0
 800d8f6:	4688      	mov	r8, r1
 800d8f8:	4614      	mov	r4, r2
 800d8fa:	2600      	movs	r6, #0
 800d8fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d900:	f1b9 0901 	subs.w	r9, r9, #1
 800d904:	d505      	bpl.n	800d912 <_fwalk_sglue+0x22>
 800d906:	6824      	ldr	r4, [r4, #0]
 800d908:	2c00      	cmp	r4, #0
 800d90a:	d1f7      	bne.n	800d8fc <_fwalk_sglue+0xc>
 800d90c:	4630      	mov	r0, r6
 800d90e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d912:	89ab      	ldrh	r3, [r5, #12]
 800d914:	2b01      	cmp	r3, #1
 800d916:	d907      	bls.n	800d928 <_fwalk_sglue+0x38>
 800d918:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d91c:	3301      	adds	r3, #1
 800d91e:	d003      	beq.n	800d928 <_fwalk_sglue+0x38>
 800d920:	4629      	mov	r1, r5
 800d922:	4638      	mov	r0, r7
 800d924:	47c0      	blx	r8
 800d926:	4306      	orrs	r6, r0
 800d928:	3568      	adds	r5, #104	@ 0x68
 800d92a:	e7e9      	b.n	800d900 <_fwalk_sglue+0x10>

0800d92c <iprintf>:
 800d92c:	b40f      	push	{r0, r1, r2, r3}
 800d92e:	b507      	push	{r0, r1, r2, lr}
 800d930:	4906      	ldr	r1, [pc, #24]	@ (800d94c <iprintf+0x20>)
 800d932:	ab04      	add	r3, sp, #16
 800d934:	6808      	ldr	r0, [r1, #0]
 800d936:	f853 2b04 	ldr.w	r2, [r3], #4
 800d93a:	6881      	ldr	r1, [r0, #8]
 800d93c:	9301      	str	r3, [sp, #4]
 800d93e:	f001 fd67 	bl	800f410 <_vfiprintf_r>
 800d942:	b003      	add	sp, #12
 800d944:	f85d eb04 	ldr.w	lr, [sp], #4
 800d948:	b004      	add	sp, #16
 800d94a:	4770      	bx	lr
 800d94c:	2000001c 	.word	0x2000001c

0800d950 <_puts_r>:
 800d950:	6a03      	ldr	r3, [r0, #32]
 800d952:	b570      	push	{r4, r5, r6, lr}
 800d954:	6884      	ldr	r4, [r0, #8]
 800d956:	4605      	mov	r5, r0
 800d958:	460e      	mov	r6, r1
 800d95a:	b90b      	cbnz	r3, 800d960 <_puts_r+0x10>
 800d95c:	f7ff ffb0 	bl	800d8c0 <__sinit>
 800d960:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d962:	07db      	lsls	r3, r3, #31
 800d964:	d405      	bmi.n	800d972 <_puts_r+0x22>
 800d966:	89a3      	ldrh	r3, [r4, #12]
 800d968:	0598      	lsls	r0, r3, #22
 800d96a:	d402      	bmi.n	800d972 <_puts_r+0x22>
 800d96c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d96e:	f000 f9e6 	bl	800dd3e <__retarget_lock_acquire_recursive>
 800d972:	89a3      	ldrh	r3, [r4, #12]
 800d974:	0719      	lsls	r1, r3, #28
 800d976:	d502      	bpl.n	800d97e <_puts_r+0x2e>
 800d978:	6923      	ldr	r3, [r4, #16]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d135      	bne.n	800d9ea <_puts_r+0x9a>
 800d97e:	4621      	mov	r1, r4
 800d980:	4628      	mov	r0, r5
 800d982:	f000 f8f9 	bl	800db78 <__swsetup_r>
 800d986:	b380      	cbz	r0, 800d9ea <_puts_r+0x9a>
 800d988:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800d98c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d98e:	07da      	lsls	r2, r3, #31
 800d990:	d405      	bmi.n	800d99e <_puts_r+0x4e>
 800d992:	89a3      	ldrh	r3, [r4, #12]
 800d994:	059b      	lsls	r3, r3, #22
 800d996:	d402      	bmi.n	800d99e <_puts_r+0x4e>
 800d998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d99a:	f000 f9d1 	bl	800dd40 <__retarget_lock_release_recursive>
 800d99e:	4628      	mov	r0, r5
 800d9a0:	bd70      	pop	{r4, r5, r6, pc}
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	da04      	bge.n	800d9b0 <_puts_r+0x60>
 800d9a6:	69a2      	ldr	r2, [r4, #24]
 800d9a8:	429a      	cmp	r2, r3
 800d9aa:	dc17      	bgt.n	800d9dc <_puts_r+0x8c>
 800d9ac:	290a      	cmp	r1, #10
 800d9ae:	d015      	beq.n	800d9dc <_puts_r+0x8c>
 800d9b0:	6823      	ldr	r3, [r4, #0]
 800d9b2:	1c5a      	adds	r2, r3, #1
 800d9b4:	6022      	str	r2, [r4, #0]
 800d9b6:	7019      	strb	r1, [r3, #0]
 800d9b8:	68a3      	ldr	r3, [r4, #8]
 800d9ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d9be:	3b01      	subs	r3, #1
 800d9c0:	60a3      	str	r3, [r4, #8]
 800d9c2:	2900      	cmp	r1, #0
 800d9c4:	d1ed      	bne.n	800d9a2 <_puts_r+0x52>
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	da11      	bge.n	800d9ee <_puts_r+0x9e>
 800d9ca:	4622      	mov	r2, r4
 800d9cc:	210a      	movs	r1, #10
 800d9ce:	4628      	mov	r0, r5
 800d9d0:	f000 f893 	bl	800dafa <__swbuf_r>
 800d9d4:	3001      	adds	r0, #1
 800d9d6:	d0d7      	beq.n	800d988 <_puts_r+0x38>
 800d9d8:	250a      	movs	r5, #10
 800d9da:	e7d7      	b.n	800d98c <_puts_r+0x3c>
 800d9dc:	4622      	mov	r2, r4
 800d9de:	4628      	mov	r0, r5
 800d9e0:	f000 f88b 	bl	800dafa <__swbuf_r>
 800d9e4:	3001      	adds	r0, #1
 800d9e6:	d1e7      	bne.n	800d9b8 <_puts_r+0x68>
 800d9e8:	e7ce      	b.n	800d988 <_puts_r+0x38>
 800d9ea:	3e01      	subs	r6, #1
 800d9ec:	e7e4      	b.n	800d9b8 <_puts_r+0x68>
 800d9ee:	6823      	ldr	r3, [r4, #0]
 800d9f0:	1c5a      	adds	r2, r3, #1
 800d9f2:	6022      	str	r2, [r4, #0]
 800d9f4:	220a      	movs	r2, #10
 800d9f6:	701a      	strb	r2, [r3, #0]
 800d9f8:	e7ee      	b.n	800d9d8 <_puts_r+0x88>
	...

0800d9fc <puts>:
 800d9fc:	4b02      	ldr	r3, [pc, #8]	@ (800da08 <puts+0xc>)
 800d9fe:	4601      	mov	r1, r0
 800da00:	6818      	ldr	r0, [r3, #0]
 800da02:	f7ff bfa5 	b.w	800d950 <_puts_r>
 800da06:	bf00      	nop
 800da08:	2000001c 	.word	0x2000001c

0800da0c <sniprintf>:
 800da0c:	b40c      	push	{r2, r3}
 800da0e:	b530      	push	{r4, r5, lr}
 800da10:	4b17      	ldr	r3, [pc, #92]	@ (800da70 <sniprintf+0x64>)
 800da12:	1e0c      	subs	r4, r1, #0
 800da14:	681d      	ldr	r5, [r3, #0]
 800da16:	b09d      	sub	sp, #116	@ 0x74
 800da18:	da08      	bge.n	800da2c <sniprintf+0x20>
 800da1a:	238b      	movs	r3, #139	@ 0x8b
 800da1c:	602b      	str	r3, [r5, #0]
 800da1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800da22:	b01d      	add	sp, #116	@ 0x74
 800da24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da28:	b002      	add	sp, #8
 800da2a:	4770      	bx	lr
 800da2c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800da30:	f8ad 3014 	strh.w	r3, [sp, #20]
 800da34:	bf14      	ite	ne
 800da36:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800da3a:	4623      	moveq	r3, r4
 800da3c:	9304      	str	r3, [sp, #16]
 800da3e:	9307      	str	r3, [sp, #28]
 800da40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800da44:	9002      	str	r0, [sp, #8]
 800da46:	9006      	str	r0, [sp, #24]
 800da48:	f8ad 3016 	strh.w	r3, [sp, #22]
 800da4c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800da4e:	ab21      	add	r3, sp, #132	@ 0x84
 800da50:	a902      	add	r1, sp, #8
 800da52:	4628      	mov	r0, r5
 800da54:	9301      	str	r3, [sp, #4]
 800da56:	f001 fbb5 	bl	800f1c4 <_svfiprintf_r>
 800da5a:	1c43      	adds	r3, r0, #1
 800da5c:	bfbc      	itt	lt
 800da5e:	238b      	movlt	r3, #139	@ 0x8b
 800da60:	602b      	strlt	r3, [r5, #0]
 800da62:	2c00      	cmp	r4, #0
 800da64:	d0dd      	beq.n	800da22 <sniprintf+0x16>
 800da66:	9b02      	ldr	r3, [sp, #8]
 800da68:	2200      	movs	r2, #0
 800da6a:	701a      	strb	r2, [r3, #0]
 800da6c:	e7d9      	b.n	800da22 <sniprintf+0x16>
 800da6e:	bf00      	nop
 800da70:	2000001c 	.word	0x2000001c

0800da74 <__sread>:
 800da74:	b510      	push	{r4, lr}
 800da76:	460c      	mov	r4, r1
 800da78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da7c:	f000 f900 	bl	800dc80 <_read_r>
 800da80:	2800      	cmp	r0, #0
 800da82:	bfab      	itete	ge
 800da84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800da86:	89a3      	ldrhlt	r3, [r4, #12]
 800da88:	181b      	addge	r3, r3, r0
 800da8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800da8e:	bfac      	ite	ge
 800da90:	6563      	strge	r3, [r4, #84]	@ 0x54
 800da92:	81a3      	strhlt	r3, [r4, #12]
 800da94:	bd10      	pop	{r4, pc}

0800da96 <__swrite>:
 800da96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da9a:	461f      	mov	r7, r3
 800da9c:	898b      	ldrh	r3, [r1, #12]
 800da9e:	05db      	lsls	r3, r3, #23
 800daa0:	4605      	mov	r5, r0
 800daa2:	460c      	mov	r4, r1
 800daa4:	4616      	mov	r6, r2
 800daa6:	d505      	bpl.n	800dab4 <__swrite+0x1e>
 800daa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daac:	2302      	movs	r3, #2
 800daae:	2200      	movs	r2, #0
 800dab0:	f000 f8d4 	bl	800dc5c <_lseek_r>
 800dab4:	89a3      	ldrh	r3, [r4, #12]
 800dab6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800daba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dabe:	81a3      	strh	r3, [r4, #12]
 800dac0:	4632      	mov	r2, r6
 800dac2:	463b      	mov	r3, r7
 800dac4:	4628      	mov	r0, r5
 800dac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800daca:	f000 b8fb 	b.w	800dcc4 <_write_r>

0800dace <__sseek>:
 800dace:	b510      	push	{r4, lr}
 800dad0:	460c      	mov	r4, r1
 800dad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dad6:	f000 f8c1 	bl	800dc5c <_lseek_r>
 800dada:	1c43      	adds	r3, r0, #1
 800dadc:	89a3      	ldrh	r3, [r4, #12]
 800dade:	bf15      	itete	ne
 800dae0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dae2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dae6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800daea:	81a3      	strheq	r3, [r4, #12]
 800daec:	bf18      	it	ne
 800daee:	81a3      	strhne	r3, [r4, #12]
 800daf0:	bd10      	pop	{r4, pc}

0800daf2 <__sclose>:
 800daf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daf6:	f000 b8a1 	b.w	800dc3c <_close_r>

0800dafa <__swbuf_r>:
 800dafa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dafc:	460e      	mov	r6, r1
 800dafe:	4614      	mov	r4, r2
 800db00:	4605      	mov	r5, r0
 800db02:	b118      	cbz	r0, 800db0c <__swbuf_r+0x12>
 800db04:	6a03      	ldr	r3, [r0, #32]
 800db06:	b90b      	cbnz	r3, 800db0c <__swbuf_r+0x12>
 800db08:	f7ff feda 	bl	800d8c0 <__sinit>
 800db0c:	69a3      	ldr	r3, [r4, #24]
 800db0e:	60a3      	str	r3, [r4, #8]
 800db10:	89a3      	ldrh	r3, [r4, #12]
 800db12:	071a      	lsls	r2, r3, #28
 800db14:	d501      	bpl.n	800db1a <__swbuf_r+0x20>
 800db16:	6923      	ldr	r3, [r4, #16]
 800db18:	b943      	cbnz	r3, 800db2c <__swbuf_r+0x32>
 800db1a:	4621      	mov	r1, r4
 800db1c:	4628      	mov	r0, r5
 800db1e:	f000 f82b 	bl	800db78 <__swsetup_r>
 800db22:	b118      	cbz	r0, 800db2c <__swbuf_r+0x32>
 800db24:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800db28:	4638      	mov	r0, r7
 800db2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db2c:	6823      	ldr	r3, [r4, #0]
 800db2e:	6922      	ldr	r2, [r4, #16]
 800db30:	1a98      	subs	r0, r3, r2
 800db32:	6963      	ldr	r3, [r4, #20]
 800db34:	b2f6      	uxtb	r6, r6
 800db36:	4283      	cmp	r3, r0
 800db38:	4637      	mov	r7, r6
 800db3a:	dc05      	bgt.n	800db48 <__swbuf_r+0x4e>
 800db3c:	4621      	mov	r1, r4
 800db3e:	4628      	mov	r0, r5
 800db40:	f001 fe02 	bl	800f748 <_fflush_r>
 800db44:	2800      	cmp	r0, #0
 800db46:	d1ed      	bne.n	800db24 <__swbuf_r+0x2a>
 800db48:	68a3      	ldr	r3, [r4, #8]
 800db4a:	3b01      	subs	r3, #1
 800db4c:	60a3      	str	r3, [r4, #8]
 800db4e:	6823      	ldr	r3, [r4, #0]
 800db50:	1c5a      	adds	r2, r3, #1
 800db52:	6022      	str	r2, [r4, #0]
 800db54:	701e      	strb	r6, [r3, #0]
 800db56:	6962      	ldr	r2, [r4, #20]
 800db58:	1c43      	adds	r3, r0, #1
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d004      	beq.n	800db68 <__swbuf_r+0x6e>
 800db5e:	89a3      	ldrh	r3, [r4, #12]
 800db60:	07db      	lsls	r3, r3, #31
 800db62:	d5e1      	bpl.n	800db28 <__swbuf_r+0x2e>
 800db64:	2e0a      	cmp	r6, #10
 800db66:	d1df      	bne.n	800db28 <__swbuf_r+0x2e>
 800db68:	4621      	mov	r1, r4
 800db6a:	4628      	mov	r0, r5
 800db6c:	f001 fdec 	bl	800f748 <_fflush_r>
 800db70:	2800      	cmp	r0, #0
 800db72:	d0d9      	beq.n	800db28 <__swbuf_r+0x2e>
 800db74:	e7d6      	b.n	800db24 <__swbuf_r+0x2a>
	...

0800db78 <__swsetup_r>:
 800db78:	b538      	push	{r3, r4, r5, lr}
 800db7a:	4b29      	ldr	r3, [pc, #164]	@ (800dc20 <__swsetup_r+0xa8>)
 800db7c:	4605      	mov	r5, r0
 800db7e:	6818      	ldr	r0, [r3, #0]
 800db80:	460c      	mov	r4, r1
 800db82:	b118      	cbz	r0, 800db8c <__swsetup_r+0x14>
 800db84:	6a03      	ldr	r3, [r0, #32]
 800db86:	b90b      	cbnz	r3, 800db8c <__swsetup_r+0x14>
 800db88:	f7ff fe9a 	bl	800d8c0 <__sinit>
 800db8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db90:	0719      	lsls	r1, r3, #28
 800db92:	d422      	bmi.n	800dbda <__swsetup_r+0x62>
 800db94:	06da      	lsls	r2, r3, #27
 800db96:	d407      	bmi.n	800dba8 <__swsetup_r+0x30>
 800db98:	2209      	movs	r2, #9
 800db9a:	602a      	str	r2, [r5, #0]
 800db9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dba0:	81a3      	strh	r3, [r4, #12]
 800dba2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dba6:	e033      	b.n	800dc10 <__swsetup_r+0x98>
 800dba8:	0758      	lsls	r0, r3, #29
 800dbaa:	d512      	bpl.n	800dbd2 <__swsetup_r+0x5a>
 800dbac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dbae:	b141      	cbz	r1, 800dbc2 <__swsetup_r+0x4a>
 800dbb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dbb4:	4299      	cmp	r1, r3
 800dbb6:	d002      	beq.n	800dbbe <__swsetup_r+0x46>
 800dbb8:	4628      	mov	r0, r5
 800dbba:	f7ff f8a5 	bl	800cd08 <_free_r>
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	6363      	str	r3, [r4, #52]	@ 0x34
 800dbc2:	89a3      	ldrh	r3, [r4, #12]
 800dbc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dbc8:	81a3      	strh	r3, [r4, #12]
 800dbca:	2300      	movs	r3, #0
 800dbcc:	6063      	str	r3, [r4, #4]
 800dbce:	6923      	ldr	r3, [r4, #16]
 800dbd0:	6023      	str	r3, [r4, #0]
 800dbd2:	89a3      	ldrh	r3, [r4, #12]
 800dbd4:	f043 0308 	orr.w	r3, r3, #8
 800dbd8:	81a3      	strh	r3, [r4, #12]
 800dbda:	6923      	ldr	r3, [r4, #16]
 800dbdc:	b94b      	cbnz	r3, 800dbf2 <__swsetup_r+0x7a>
 800dbde:	89a3      	ldrh	r3, [r4, #12]
 800dbe0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dbe4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dbe8:	d003      	beq.n	800dbf2 <__swsetup_r+0x7a>
 800dbea:	4621      	mov	r1, r4
 800dbec:	4628      	mov	r0, r5
 800dbee:	f001 fdf9 	bl	800f7e4 <__smakebuf_r>
 800dbf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbf6:	f013 0201 	ands.w	r2, r3, #1
 800dbfa:	d00a      	beq.n	800dc12 <__swsetup_r+0x9a>
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	60a2      	str	r2, [r4, #8]
 800dc00:	6962      	ldr	r2, [r4, #20]
 800dc02:	4252      	negs	r2, r2
 800dc04:	61a2      	str	r2, [r4, #24]
 800dc06:	6922      	ldr	r2, [r4, #16]
 800dc08:	b942      	cbnz	r2, 800dc1c <__swsetup_r+0xa4>
 800dc0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dc0e:	d1c5      	bne.n	800db9c <__swsetup_r+0x24>
 800dc10:	bd38      	pop	{r3, r4, r5, pc}
 800dc12:	0799      	lsls	r1, r3, #30
 800dc14:	bf58      	it	pl
 800dc16:	6962      	ldrpl	r2, [r4, #20]
 800dc18:	60a2      	str	r2, [r4, #8]
 800dc1a:	e7f4      	b.n	800dc06 <__swsetup_r+0x8e>
 800dc1c:	2000      	movs	r0, #0
 800dc1e:	e7f7      	b.n	800dc10 <__swsetup_r+0x98>
 800dc20:	2000001c 	.word	0x2000001c

0800dc24 <memset>:
 800dc24:	4402      	add	r2, r0
 800dc26:	4603      	mov	r3, r0
 800dc28:	4293      	cmp	r3, r2
 800dc2a:	d100      	bne.n	800dc2e <memset+0xa>
 800dc2c:	4770      	bx	lr
 800dc2e:	f803 1b01 	strb.w	r1, [r3], #1
 800dc32:	e7f9      	b.n	800dc28 <memset+0x4>

0800dc34 <_localeconv_r>:
 800dc34:	4800      	ldr	r0, [pc, #0]	@ (800dc38 <_localeconv_r+0x4>)
 800dc36:	4770      	bx	lr
 800dc38:	2000015c 	.word	0x2000015c

0800dc3c <_close_r>:
 800dc3c:	b538      	push	{r3, r4, r5, lr}
 800dc3e:	4d06      	ldr	r5, [pc, #24]	@ (800dc58 <_close_r+0x1c>)
 800dc40:	2300      	movs	r3, #0
 800dc42:	4604      	mov	r4, r0
 800dc44:	4608      	mov	r0, r1
 800dc46:	602b      	str	r3, [r5, #0]
 800dc48:	f7f6 fa00 	bl	800404c <_close>
 800dc4c:	1c43      	adds	r3, r0, #1
 800dc4e:	d102      	bne.n	800dc56 <_close_r+0x1a>
 800dc50:	682b      	ldr	r3, [r5, #0]
 800dc52:	b103      	cbz	r3, 800dc56 <_close_r+0x1a>
 800dc54:	6023      	str	r3, [r4, #0]
 800dc56:	bd38      	pop	{r3, r4, r5, pc}
 800dc58:	2000b8a4 	.word	0x2000b8a4

0800dc5c <_lseek_r>:
 800dc5c:	b538      	push	{r3, r4, r5, lr}
 800dc5e:	4d07      	ldr	r5, [pc, #28]	@ (800dc7c <_lseek_r+0x20>)
 800dc60:	4604      	mov	r4, r0
 800dc62:	4608      	mov	r0, r1
 800dc64:	4611      	mov	r1, r2
 800dc66:	2200      	movs	r2, #0
 800dc68:	602a      	str	r2, [r5, #0]
 800dc6a:	461a      	mov	r2, r3
 800dc6c:	f7f6 fa15 	bl	800409a <_lseek>
 800dc70:	1c43      	adds	r3, r0, #1
 800dc72:	d102      	bne.n	800dc7a <_lseek_r+0x1e>
 800dc74:	682b      	ldr	r3, [r5, #0]
 800dc76:	b103      	cbz	r3, 800dc7a <_lseek_r+0x1e>
 800dc78:	6023      	str	r3, [r4, #0]
 800dc7a:	bd38      	pop	{r3, r4, r5, pc}
 800dc7c:	2000b8a4 	.word	0x2000b8a4

0800dc80 <_read_r>:
 800dc80:	b538      	push	{r3, r4, r5, lr}
 800dc82:	4d07      	ldr	r5, [pc, #28]	@ (800dca0 <_read_r+0x20>)
 800dc84:	4604      	mov	r4, r0
 800dc86:	4608      	mov	r0, r1
 800dc88:	4611      	mov	r1, r2
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	602a      	str	r2, [r5, #0]
 800dc8e:	461a      	mov	r2, r3
 800dc90:	f7f6 f9bf 	bl	8004012 <_read>
 800dc94:	1c43      	adds	r3, r0, #1
 800dc96:	d102      	bne.n	800dc9e <_read_r+0x1e>
 800dc98:	682b      	ldr	r3, [r5, #0]
 800dc9a:	b103      	cbz	r3, 800dc9e <_read_r+0x1e>
 800dc9c:	6023      	str	r3, [r4, #0]
 800dc9e:	bd38      	pop	{r3, r4, r5, pc}
 800dca0:	2000b8a4 	.word	0x2000b8a4

0800dca4 <_sbrk_r>:
 800dca4:	b538      	push	{r3, r4, r5, lr}
 800dca6:	4d06      	ldr	r5, [pc, #24]	@ (800dcc0 <_sbrk_r+0x1c>)
 800dca8:	2300      	movs	r3, #0
 800dcaa:	4604      	mov	r4, r0
 800dcac:	4608      	mov	r0, r1
 800dcae:	602b      	str	r3, [r5, #0]
 800dcb0:	f7f6 fa00 	bl	80040b4 <_sbrk>
 800dcb4:	1c43      	adds	r3, r0, #1
 800dcb6:	d102      	bne.n	800dcbe <_sbrk_r+0x1a>
 800dcb8:	682b      	ldr	r3, [r5, #0]
 800dcba:	b103      	cbz	r3, 800dcbe <_sbrk_r+0x1a>
 800dcbc:	6023      	str	r3, [r4, #0]
 800dcbe:	bd38      	pop	{r3, r4, r5, pc}
 800dcc0:	2000b8a4 	.word	0x2000b8a4

0800dcc4 <_write_r>:
 800dcc4:	b538      	push	{r3, r4, r5, lr}
 800dcc6:	4d07      	ldr	r5, [pc, #28]	@ (800dce4 <_write_r+0x20>)
 800dcc8:	4604      	mov	r4, r0
 800dcca:	4608      	mov	r0, r1
 800dccc:	4611      	mov	r1, r2
 800dcce:	2200      	movs	r2, #0
 800dcd0:	602a      	str	r2, [r5, #0]
 800dcd2:	461a      	mov	r2, r3
 800dcd4:	f7f6 fa36 	bl	8004144 <_write>
 800dcd8:	1c43      	adds	r3, r0, #1
 800dcda:	d102      	bne.n	800dce2 <_write_r+0x1e>
 800dcdc:	682b      	ldr	r3, [r5, #0]
 800dcde:	b103      	cbz	r3, 800dce2 <_write_r+0x1e>
 800dce0:	6023      	str	r3, [r4, #0]
 800dce2:	bd38      	pop	{r3, r4, r5, pc}
 800dce4:	2000b8a4 	.word	0x2000b8a4

0800dce8 <__errno>:
 800dce8:	4b01      	ldr	r3, [pc, #4]	@ (800dcf0 <__errno+0x8>)
 800dcea:	6818      	ldr	r0, [r3, #0]
 800dcec:	4770      	bx	lr
 800dcee:	bf00      	nop
 800dcf0:	2000001c 	.word	0x2000001c

0800dcf4 <__libc_init_array>:
 800dcf4:	b570      	push	{r4, r5, r6, lr}
 800dcf6:	4d0d      	ldr	r5, [pc, #52]	@ (800dd2c <__libc_init_array+0x38>)
 800dcf8:	4c0d      	ldr	r4, [pc, #52]	@ (800dd30 <__libc_init_array+0x3c>)
 800dcfa:	1b64      	subs	r4, r4, r5
 800dcfc:	10a4      	asrs	r4, r4, #2
 800dcfe:	2600      	movs	r6, #0
 800dd00:	42a6      	cmp	r6, r4
 800dd02:	d109      	bne.n	800dd18 <__libc_init_array+0x24>
 800dd04:	4d0b      	ldr	r5, [pc, #44]	@ (800dd34 <__libc_init_array+0x40>)
 800dd06:	4c0c      	ldr	r4, [pc, #48]	@ (800dd38 <__libc_init_array+0x44>)
 800dd08:	f003 fdf2 	bl	80118f0 <_init>
 800dd0c:	1b64      	subs	r4, r4, r5
 800dd0e:	10a4      	asrs	r4, r4, #2
 800dd10:	2600      	movs	r6, #0
 800dd12:	42a6      	cmp	r6, r4
 800dd14:	d105      	bne.n	800dd22 <__libc_init_array+0x2e>
 800dd16:	bd70      	pop	{r4, r5, r6, pc}
 800dd18:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd1c:	4798      	blx	r3
 800dd1e:	3601      	adds	r6, #1
 800dd20:	e7ee      	b.n	800dd00 <__libc_init_array+0xc>
 800dd22:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd26:	4798      	blx	r3
 800dd28:	3601      	adds	r6, #1
 800dd2a:	e7f2      	b.n	800dd12 <__libc_init_array+0x1e>
 800dd2c:	08012898 	.word	0x08012898
 800dd30:	08012898 	.word	0x08012898
 800dd34:	08012898 	.word	0x08012898
 800dd38:	0801289c 	.word	0x0801289c

0800dd3c <__retarget_lock_init_recursive>:
 800dd3c:	4770      	bx	lr

0800dd3e <__retarget_lock_acquire_recursive>:
 800dd3e:	4770      	bx	lr

0800dd40 <__retarget_lock_release_recursive>:
 800dd40:	4770      	bx	lr

0800dd42 <memcpy>:
 800dd42:	440a      	add	r2, r1
 800dd44:	4291      	cmp	r1, r2
 800dd46:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800dd4a:	d100      	bne.n	800dd4e <memcpy+0xc>
 800dd4c:	4770      	bx	lr
 800dd4e:	b510      	push	{r4, lr}
 800dd50:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd54:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd58:	4291      	cmp	r1, r2
 800dd5a:	d1f9      	bne.n	800dd50 <memcpy+0xe>
 800dd5c:	bd10      	pop	{r4, pc}

0800dd5e <quorem>:
 800dd5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd62:	6903      	ldr	r3, [r0, #16]
 800dd64:	690c      	ldr	r4, [r1, #16]
 800dd66:	42a3      	cmp	r3, r4
 800dd68:	4607      	mov	r7, r0
 800dd6a:	db7e      	blt.n	800de6a <quorem+0x10c>
 800dd6c:	3c01      	subs	r4, #1
 800dd6e:	f101 0814 	add.w	r8, r1, #20
 800dd72:	00a3      	lsls	r3, r4, #2
 800dd74:	f100 0514 	add.w	r5, r0, #20
 800dd78:	9300      	str	r3, [sp, #0]
 800dd7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd7e:	9301      	str	r3, [sp, #4]
 800dd80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dd84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd88:	3301      	adds	r3, #1
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dd90:	fbb2 f6f3 	udiv	r6, r2, r3
 800dd94:	d32e      	bcc.n	800ddf4 <quorem+0x96>
 800dd96:	f04f 0a00 	mov.w	sl, #0
 800dd9a:	46c4      	mov	ip, r8
 800dd9c:	46ae      	mov	lr, r5
 800dd9e:	46d3      	mov	fp, sl
 800dda0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dda4:	b298      	uxth	r0, r3
 800dda6:	fb06 a000 	mla	r0, r6, r0, sl
 800ddaa:	0c02      	lsrs	r2, r0, #16
 800ddac:	0c1b      	lsrs	r3, r3, #16
 800ddae:	fb06 2303 	mla	r3, r6, r3, r2
 800ddb2:	f8de 2000 	ldr.w	r2, [lr]
 800ddb6:	b280      	uxth	r0, r0
 800ddb8:	b292      	uxth	r2, r2
 800ddba:	1a12      	subs	r2, r2, r0
 800ddbc:	445a      	add	r2, fp
 800ddbe:	f8de 0000 	ldr.w	r0, [lr]
 800ddc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ddc6:	b29b      	uxth	r3, r3
 800ddc8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ddcc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ddd0:	b292      	uxth	r2, r2
 800ddd2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ddd6:	45e1      	cmp	r9, ip
 800ddd8:	f84e 2b04 	str.w	r2, [lr], #4
 800dddc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800dde0:	d2de      	bcs.n	800dda0 <quorem+0x42>
 800dde2:	9b00      	ldr	r3, [sp, #0]
 800dde4:	58eb      	ldr	r3, [r5, r3]
 800dde6:	b92b      	cbnz	r3, 800ddf4 <quorem+0x96>
 800dde8:	9b01      	ldr	r3, [sp, #4]
 800ddea:	3b04      	subs	r3, #4
 800ddec:	429d      	cmp	r5, r3
 800ddee:	461a      	mov	r2, r3
 800ddf0:	d32f      	bcc.n	800de52 <quorem+0xf4>
 800ddf2:	613c      	str	r4, [r7, #16]
 800ddf4:	4638      	mov	r0, r7
 800ddf6:	f001 f881 	bl	800eefc <__mcmp>
 800ddfa:	2800      	cmp	r0, #0
 800ddfc:	db25      	blt.n	800de4a <quorem+0xec>
 800ddfe:	4629      	mov	r1, r5
 800de00:	2000      	movs	r0, #0
 800de02:	f858 2b04 	ldr.w	r2, [r8], #4
 800de06:	f8d1 c000 	ldr.w	ip, [r1]
 800de0a:	fa1f fe82 	uxth.w	lr, r2
 800de0e:	fa1f f38c 	uxth.w	r3, ip
 800de12:	eba3 030e 	sub.w	r3, r3, lr
 800de16:	4403      	add	r3, r0
 800de18:	0c12      	lsrs	r2, r2, #16
 800de1a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800de1e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800de22:	b29b      	uxth	r3, r3
 800de24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de28:	45c1      	cmp	r9, r8
 800de2a:	f841 3b04 	str.w	r3, [r1], #4
 800de2e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800de32:	d2e6      	bcs.n	800de02 <quorem+0xa4>
 800de34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800de38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de3c:	b922      	cbnz	r2, 800de48 <quorem+0xea>
 800de3e:	3b04      	subs	r3, #4
 800de40:	429d      	cmp	r5, r3
 800de42:	461a      	mov	r2, r3
 800de44:	d30b      	bcc.n	800de5e <quorem+0x100>
 800de46:	613c      	str	r4, [r7, #16]
 800de48:	3601      	adds	r6, #1
 800de4a:	4630      	mov	r0, r6
 800de4c:	b003      	add	sp, #12
 800de4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de52:	6812      	ldr	r2, [r2, #0]
 800de54:	3b04      	subs	r3, #4
 800de56:	2a00      	cmp	r2, #0
 800de58:	d1cb      	bne.n	800ddf2 <quorem+0x94>
 800de5a:	3c01      	subs	r4, #1
 800de5c:	e7c6      	b.n	800ddec <quorem+0x8e>
 800de5e:	6812      	ldr	r2, [r2, #0]
 800de60:	3b04      	subs	r3, #4
 800de62:	2a00      	cmp	r2, #0
 800de64:	d1ef      	bne.n	800de46 <quorem+0xe8>
 800de66:	3c01      	subs	r4, #1
 800de68:	e7ea      	b.n	800de40 <quorem+0xe2>
 800de6a:	2000      	movs	r0, #0
 800de6c:	e7ee      	b.n	800de4c <quorem+0xee>
	...

0800de70 <_dtoa_r>:
 800de70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de74:	69c7      	ldr	r7, [r0, #28]
 800de76:	b099      	sub	sp, #100	@ 0x64
 800de78:	ed8d 0b02 	vstr	d0, [sp, #8]
 800de7c:	ec55 4b10 	vmov	r4, r5, d0
 800de80:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800de82:	9109      	str	r1, [sp, #36]	@ 0x24
 800de84:	4683      	mov	fp, r0
 800de86:	920e      	str	r2, [sp, #56]	@ 0x38
 800de88:	9313      	str	r3, [sp, #76]	@ 0x4c
 800de8a:	b97f      	cbnz	r7, 800deac <_dtoa_r+0x3c>
 800de8c:	2010      	movs	r0, #16
 800de8e:	f000 fdb3 	bl	800e9f8 <malloc>
 800de92:	4602      	mov	r2, r0
 800de94:	f8cb 001c 	str.w	r0, [fp, #28]
 800de98:	b920      	cbnz	r0, 800dea4 <_dtoa_r+0x34>
 800de9a:	4ba7      	ldr	r3, [pc, #668]	@ (800e138 <_dtoa_r+0x2c8>)
 800de9c:	21ef      	movs	r1, #239	@ 0xef
 800de9e:	48a7      	ldr	r0, [pc, #668]	@ (800e13c <_dtoa_r+0x2cc>)
 800dea0:	f001 fd18 	bl	800f8d4 <__assert_func>
 800dea4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dea8:	6007      	str	r7, [r0, #0]
 800deaa:	60c7      	str	r7, [r0, #12]
 800deac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800deb0:	6819      	ldr	r1, [r3, #0]
 800deb2:	b159      	cbz	r1, 800decc <_dtoa_r+0x5c>
 800deb4:	685a      	ldr	r2, [r3, #4]
 800deb6:	604a      	str	r2, [r1, #4]
 800deb8:	2301      	movs	r3, #1
 800deba:	4093      	lsls	r3, r2
 800debc:	608b      	str	r3, [r1, #8]
 800debe:	4658      	mov	r0, fp
 800dec0:	f000 fde2 	bl	800ea88 <_Bfree>
 800dec4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dec8:	2200      	movs	r2, #0
 800deca:	601a      	str	r2, [r3, #0]
 800decc:	1e2b      	subs	r3, r5, #0
 800dece:	bfb9      	ittee	lt
 800ded0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ded4:	9303      	strlt	r3, [sp, #12]
 800ded6:	2300      	movge	r3, #0
 800ded8:	6033      	strge	r3, [r6, #0]
 800deda:	9f03      	ldr	r7, [sp, #12]
 800dedc:	4b98      	ldr	r3, [pc, #608]	@ (800e140 <_dtoa_r+0x2d0>)
 800dede:	bfbc      	itt	lt
 800dee0:	2201      	movlt	r2, #1
 800dee2:	6032      	strlt	r2, [r6, #0]
 800dee4:	43bb      	bics	r3, r7
 800dee6:	d112      	bne.n	800df0e <_dtoa_r+0x9e>
 800dee8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800deea:	f242 730f 	movw	r3, #9999	@ 0x270f
 800deee:	6013      	str	r3, [r2, #0]
 800def0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800def4:	4323      	orrs	r3, r4
 800def6:	f000 854d 	beq.w	800e994 <_dtoa_r+0xb24>
 800defa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800defc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e154 <_dtoa_r+0x2e4>
 800df00:	2b00      	cmp	r3, #0
 800df02:	f000 854f 	beq.w	800e9a4 <_dtoa_r+0xb34>
 800df06:	f10a 0303 	add.w	r3, sl, #3
 800df0a:	f000 bd49 	b.w	800e9a0 <_dtoa_r+0xb30>
 800df0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800df12:	2200      	movs	r2, #0
 800df14:	ec51 0b17 	vmov	r0, r1, d7
 800df18:	2300      	movs	r3, #0
 800df1a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800df1e:	f7f2 fdf3 	bl	8000b08 <__aeabi_dcmpeq>
 800df22:	4680      	mov	r8, r0
 800df24:	b158      	cbz	r0, 800df3e <_dtoa_r+0xce>
 800df26:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800df28:	2301      	movs	r3, #1
 800df2a:	6013      	str	r3, [r2, #0]
 800df2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800df2e:	b113      	cbz	r3, 800df36 <_dtoa_r+0xc6>
 800df30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800df32:	4b84      	ldr	r3, [pc, #528]	@ (800e144 <_dtoa_r+0x2d4>)
 800df34:	6013      	str	r3, [r2, #0]
 800df36:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e158 <_dtoa_r+0x2e8>
 800df3a:	f000 bd33 	b.w	800e9a4 <_dtoa_r+0xb34>
 800df3e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800df42:	aa16      	add	r2, sp, #88	@ 0x58
 800df44:	a917      	add	r1, sp, #92	@ 0x5c
 800df46:	4658      	mov	r0, fp
 800df48:	f001 f888 	bl	800f05c <__d2b>
 800df4c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800df50:	4681      	mov	r9, r0
 800df52:	2e00      	cmp	r6, #0
 800df54:	d077      	beq.n	800e046 <_dtoa_r+0x1d6>
 800df56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800df58:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800df5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800df60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800df64:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800df68:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800df6c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800df70:	4619      	mov	r1, r3
 800df72:	2200      	movs	r2, #0
 800df74:	4b74      	ldr	r3, [pc, #464]	@ (800e148 <_dtoa_r+0x2d8>)
 800df76:	f7f2 f9a7 	bl	80002c8 <__aeabi_dsub>
 800df7a:	a369      	add	r3, pc, #420	@ (adr r3, 800e120 <_dtoa_r+0x2b0>)
 800df7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df80:	f7f2 fb5a 	bl	8000638 <__aeabi_dmul>
 800df84:	a368      	add	r3, pc, #416	@ (adr r3, 800e128 <_dtoa_r+0x2b8>)
 800df86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df8a:	f7f2 f99f 	bl	80002cc <__adddf3>
 800df8e:	4604      	mov	r4, r0
 800df90:	4630      	mov	r0, r6
 800df92:	460d      	mov	r5, r1
 800df94:	f7f2 fae6 	bl	8000564 <__aeabi_i2d>
 800df98:	a365      	add	r3, pc, #404	@ (adr r3, 800e130 <_dtoa_r+0x2c0>)
 800df9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df9e:	f7f2 fb4b 	bl	8000638 <__aeabi_dmul>
 800dfa2:	4602      	mov	r2, r0
 800dfa4:	460b      	mov	r3, r1
 800dfa6:	4620      	mov	r0, r4
 800dfa8:	4629      	mov	r1, r5
 800dfaa:	f7f2 f98f 	bl	80002cc <__adddf3>
 800dfae:	4604      	mov	r4, r0
 800dfb0:	460d      	mov	r5, r1
 800dfb2:	f7f2 fdf1 	bl	8000b98 <__aeabi_d2iz>
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	4607      	mov	r7, r0
 800dfba:	2300      	movs	r3, #0
 800dfbc:	4620      	mov	r0, r4
 800dfbe:	4629      	mov	r1, r5
 800dfc0:	f7f2 fdac 	bl	8000b1c <__aeabi_dcmplt>
 800dfc4:	b140      	cbz	r0, 800dfd8 <_dtoa_r+0x168>
 800dfc6:	4638      	mov	r0, r7
 800dfc8:	f7f2 facc 	bl	8000564 <__aeabi_i2d>
 800dfcc:	4622      	mov	r2, r4
 800dfce:	462b      	mov	r3, r5
 800dfd0:	f7f2 fd9a 	bl	8000b08 <__aeabi_dcmpeq>
 800dfd4:	b900      	cbnz	r0, 800dfd8 <_dtoa_r+0x168>
 800dfd6:	3f01      	subs	r7, #1
 800dfd8:	2f16      	cmp	r7, #22
 800dfda:	d851      	bhi.n	800e080 <_dtoa_r+0x210>
 800dfdc:	4b5b      	ldr	r3, [pc, #364]	@ (800e14c <_dtoa_r+0x2dc>)
 800dfde:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dfe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dfea:	f7f2 fd97 	bl	8000b1c <__aeabi_dcmplt>
 800dfee:	2800      	cmp	r0, #0
 800dff0:	d048      	beq.n	800e084 <_dtoa_r+0x214>
 800dff2:	3f01      	subs	r7, #1
 800dff4:	2300      	movs	r3, #0
 800dff6:	9312      	str	r3, [sp, #72]	@ 0x48
 800dff8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dffa:	1b9b      	subs	r3, r3, r6
 800dffc:	1e5a      	subs	r2, r3, #1
 800dffe:	bf44      	itt	mi
 800e000:	f1c3 0801 	rsbmi	r8, r3, #1
 800e004:	2300      	movmi	r3, #0
 800e006:	9208      	str	r2, [sp, #32]
 800e008:	bf54      	ite	pl
 800e00a:	f04f 0800 	movpl.w	r8, #0
 800e00e:	9308      	strmi	r3, [sp, #32]
 800e010:	2f00      	cmp	r7, #0
 800e012:	db39      	blt.n	800e088 <_dtoa_r+0x218>
 800e014:	9b08      	ldr	r3, [sp, #32]
 800e016:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e018:	443b      	add	r3, r7
 800e01a:	9308      	str	r3, [sp, #32]
 800e01c:	2300      	movs	r3, #0
 800e01e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e022:	2b09      	cmp	r3, #9
 800e024:	d864      	bhi.n	800e0f0 <_dtoa_r+0x280>
 800e026:	2b05      	cmp	r3, #5
 800e028:	bfc4      	itt	gt
 800e02a:	3b04      	subgt	r3, #4
 800e02c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e02e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e030:	f1a3 0302 	sub.w	r3, r3, #2
 800e034:	bfcc      	ite	gt
 800e036:	2400      	movgt	r4, #0
 800e038:	2401      	movle	r4, #1
 800e03a:	2b03      	cmp	r3, #3
 800e03c:	d863      	bhi.n	800e106 <_dtoa_r+0x296>
 800e03e:	e8df f003 	tbb	[pc, r3]
 800e042:	372a      	.short	0x372a
 800e044:	5535      	.short	0x5535
 800e046:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e04a:	441e      	add	r6, r3
 800e04c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e050:	2b20      	cmp	r3, #32
 800e052:	bfc1      	itttt	gt
 800e054:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e058:	409f      	lslgt	r7, r3
 800e05a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e05e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e062:	bfd6      	itet	le
 800e064:	f1c3 0320 	rsble	r3, r3, #32
 800e068:	ea47 0003 	orrgt.w	r0, r7, r3
 800e06c:	fa04 f003 	lslle.w	r0, r4, r3
 800e070:	f7f2 fa68 	bl	8000544 <__aeabi_ui2d>
 800e074:	2201      	movs	r2, #1
 800e076:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e07a:	3e01      	subs	r6, #1
 800e07c:	9214      	str	r2, [sp, #80]	@ 0x50
 800e07e:	e777      	b.n	800df70 <_dtoa_r+0x100>
 800e080:	2301      	movs	r3, #1
 800e082:	e7b8      	b.n	800dff6 <_dtoa_r+0x186>
 800e084:	9012      	str	r0, [sp, #72]	@ 0x48
 800e086:	e7b7      	b.n	800dff8 <_dtoa_r+0x188>
 800e088:	427b      	negs	r3, r7
 800e08a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e08c:	2300      	movs	r3, #0
 800e08e:	eba8 0807 	sub.w	r8, r8, r7
 800e092:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e094:	e7c4      	b.n	800e020 <_dtoa_r+0x1b0>
 800e096:	2300      	movs	r3, #0
 800e098:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e09a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	dc35      	bgt.n	800e10c <_dtoa_r+0x29c>
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	9300      	str	r3, [sp, #0]
 800e0a4:	9307      	str	r3, [sp, #28]
 800e0a6:	461a      	mov	r2, r3
 800e0a8:	920e      	str	r2, [sp, #56]	@ 0x38
 800e0aa:	e00b      	b.n	800e0c4 <_dtoa_r+0x254>
 800e0ac:	2301      	movs	r3, #1
 800e0ae:	e7f3      	b.n	800e098 <_dtoa_r+0x228>
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e0b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e0b6:	18fb      	adds	r3, r7, r3
 800e0b8:	9300      	str	r3, [sp, #0]
 800e0ba:	3301      	adds	r3, #1
 800e0bc:	2b01      	cmp	r3, #1
 800e0be:	9307      	str	r3, [sp, #28]
 800e0c0:	bfb8      	it	lt
 800e0c2:	2301      	movlt	r3, #1
 800e0c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e0c8:	2100      	movs	r1, #0
 800e0ca:	2204      	movs	r2, #4
 800e0cc:	f102 0514 	add.w	r5, r2, #20
 800e0d0:	429d      	cmp	r5, r3
 800e0d2:	d91f      	bls.n	800e114 <_dtoa_r+0x2a4>
 800e0d4:	6041      	str	r1, [r0, #4]
 800e0d6:	4658      	mov	r0, fp
 800e0d8:	f000 fc96 	bl	800ea08 <_Balloc>
 800e0dc:	4682      	mov	sl, r0
 800e0de:	2800      	cmp	r0, #0
 800e0e0:	d13c      	bne.n	800e15c <_dtoa_r+0x2ec>
 800e0e2:	4b1b      	ldr	r3, [pc, #108]	@ (800e150 <_dtoa_r+0x2e0>)
 800e0e4:	4602      	mov	r2, r0
 800e0e6:	f240 11af 	movw	r1, #431	@ 0x1af
 800e0ea:	e6d8      	b.n	800de9e <_dtoa_r+0x2e>
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	e7e0      	b.n	800e0b2 <_dtoa_r+0x242>
 800e0f0:	2401      	movs	r4, #1
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e0f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e0fc:	9300      	str	r3, [sp, #0]
 800e0fe:	9307      	str	r3, [sp, #28]
 800e100:	2200      	movs	r2, #0
 800e102:	2312      	movs	r3, #18
 800e104:	e7d0      	b.n	800e0a8 <_dtoa_r+0x238>
 800e106:	2301      	movs	r3, #1
 800e108:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e10a:	e7f5      	b.n	800e0f8 <_dtoa_r+0x288>
 800e10c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e10e:	9300      	str	r3, [sp, #0]
 800e110:	9307      	str	r3, [sp, #28]
 800e112:	e7d7      	b.n	800e0c4 <_dtoa_r+0x254>
 800e114:	3101      	adds	r1, #1
 800e116:	0052      	lsls	r2, r2, #1
 800e118:	e7d8      	b.n	800e0cc <_dtoa_r+0x25c>
 800e11a:	bf00      	nop
 800e11c:	f3af 8000 	nop.w
 800e120:	636f4361 	.word	0x636f4361
 800e124:	3fd287a7 	.word	0x3fd287a7
 800e128:	8b60c8b3 	.word	0x8b60c8b3
 800e12c:	3fc68a28 	.word	0x3fc68a28
 800e130:	509f79fb 	.word	0x509f79fb
 800e134:	3fd34413 	.word	0x3fd34413
 800e138:	080120ed 	.word	0x080120ed
 800e13c:	08012104 	.word	0x08012104
 800e140:	7ff00000 	.word	0x7ff00000
 800e144:	080120bd 	.word	0x080120bd
 800e148:	3ff80000 	.word	0x3ff80000
 800e14c:	08012200 	.word	0x08012200
 800e150:	0801215c 	.word	0x0801215c
 800e154:	080120e9 	.word	0x080120e9
 800e158:	080120bc 	.word	0x080120bc
 800e15c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e160:	6018      	str	r0, [r3, #0]
 800e162:	9b07      	ldr	r3, [sp, #28]
 800e164:	2b0e      	cmp	r3, #14
 800e166:	f200 80a4 	bhi.w	800e2b2 <_dtoa_r+0x442>
 800e16a:	2c00      	cmp	r4, #0
 800e16c:	f000 80a1 	beq.w	800e2b2 <_dtoa_r+0x442>
 800e170:	2f00      	cmp	r7, #0
 800e172:	dd33      	ble.n	800e1dc <_dtoa_r+0x36c>
 800e174:	4bad      	ldr	r3, [pc, #692]	@ (800e42c <_dtoa_r+0x5bc>)
 800e176:	f007 020f 	and.w	r2, r7, #15
 800e17a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e17e:	ed93 7b00 	vldr	d7, [r3]
 800e182:	05f8      	lsls	r0, r7, #23
 800e184:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e188:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e18c:	d516      	bpl.n	800e1bc <_dtoa_r+0x34c>
 800e18e:	4ba8      	ldr	r3, [pc, #672]	@ (800e430 <_dtoa_r+0x5c0>)
 800e190:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e194:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e198:	f7f2 fb78 	bl	800088c <__aeabi_ddiv>
 800e19c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1a0:	f004 040f 	and.w	r4, r4, #15
 800e1a4:	2603      	movs	r6, #3
 800e1a6:	4da2      	ldr	r5, [pc, #648]	@ (800e430 <_dtoa_r+0x5c0>)
 800e1a8:	b954      	cbnz	r4, 800e1c0 <_dtoa_r+0x350>
 800e1aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e1ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e1b2:	f7f2 fb6b 	bl	800088c <__aeabi_ddiv>
 800e1b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1ba:	e028      	b.n	800e20e <_dtoa_r+0x39e>
 800e1bc:	2602      	movs	r6, #2
 800e1be:	e7f2      	b.n	800e1a6 <_dtoa_r+0x336>
 800e1c0:	07e1      	lsls	r1, r4, #31
 800e1c2:	d508      	bpl.n	800e1d6 <_dtoa_r+0x366>
 800e1c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e1c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e1cc:	f7f2 fa34 	bl	8000638 <__aeabi_dmul>
 800e1d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e1d4:	3601      	adds	r6, #1
 800e1d6:	1064      	asrs	r4, r4, #1
 800e1d8:	3508      	adds	r5, #8
 800e1da:	e7e5      	b.n	800e1a8 <_dtoa_r+0x338>
 800e1dc:	f000 80d2 	beq.w	800e384 <_dtoa_r+0x514>
 800e1e0:	427c      	negs	r4, r7
 800e1e2:	4b92      	ldr	r3, [pc, #584]	@ (800e42c <_dtoa_r+0x5bc>)
 800e1e4:	4d92      	ldr	r5, [pc, #584]	@ (800e430 <_dtoa_r+0x5c0>)
 800e1e6:	f004 020f 	and.w	r2, r4, #15
 800e1ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e1f6:	f7f2 fa1f 	bl	8000638 <__aeabi_dmul>
 800e1fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1fe:	1124      	asrs	r4, r4, #4
 800e200:	2300      	movs	r3, #0
 800e202:	2602      	movs	r6, #2
 800e204:	2c00      	cmp	r4, #0
 800e206:	f040 80b2 	bne.w	800e36e <_dtoa_r+0x4fe>
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d1d3      	bne.n	800e1b6 <_dtoa_r+0x346>
 800e20e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e210:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e214:	2b00      	cmp	r3, #0
 800e216:	f000 80b7 	beq.w	800e388 <_dtoa_r+0x518>
 800e21a:	4b86      	ldr	r3, [pc, #536]	@ (800e434 <_dtoa_r+0x5c4>)
 800e21c:	2200      	movs	r2, #0
 800e21e:	4620      	mov	r0, r4
 800e220:	4629      	mov	r1, r5
 800e222:	f7f2 fc7b 	bl	8000b1c <__aeabi_dcmplt>
 800e226:	2800      	cmp	r0, #0
 800e228:	f000 80ae 	beq.w	800e388 <_dtoa_r+0x518>
 800e22c:	9b07      	ldr	r3, [sp, #28]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	f000 80aa 	beq.w	800e388 <_dtoa_r+0x518>
 800e234:	9b00      	ldr	r3, [sp, #0]
 800e236:	2b00      	cmp	r3, #0
 800e238:	dd37      	ble.n	800e2aa <_dtoa_r+0x43a>
 800e23a:	1e7b      	subs	r3, r7, #1
 800e23c:	9304      	str	r3, [sp, #16]
 800e23e:	4620      	mov	r0, r4
 800e240:	4b7d      	ldr	r3, [pc, #500]	@ (800e438 <_dtoa_r+0x5c8>)
 800e242:	2200      	movs	r2, #0
 800e244:	4629      	mov	r1, r5
 800e246:	f7f2 f9f7 	bl	8000638 <__aeabi_dmul>
 800e24a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e24e:	9c00      	ldr	r4, [sp, #0]
 800e250:	3601      	adds	r6, #1
 800e252:	4630      	mov	r0, r6
 800e254:	f7f2 f986 	bl	8000564 <__aeabi_i2d>
 800e258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e25c:	f7f2 f9ec 	bl	8000638 <__aeabi_dmul>
 800e260:	4b76      	ldr	r3, [pc, #472]	@ (800e43c <_dtoa_r+0x5cc>)
 800e262:	2200      	movs	r2, #0
 800e264:	f7f2 f832 	bl	80002cc <__adddf3>
 800e268:	4605      	mov	r5, r0
 800e26a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e26e:	2c00      	cmp	r4, #0
 800e270:	f040 808d 	bne.w	800e38e <_dtoa_r+0x51e>
 800e274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e278:	4b71      	ldr	r3, [pc, #452]	@ (800e440 <_dtoa_r+0x5d0>)
 800e27a:	2200      	movs	r2, #0
 800e27c:	f7f2 f824 	bl	80002c8 <__aeabi_dsub>
 800e280:	4602      	mov	r2, r0
 800e282:	460b      	mov	r3, r1
 800e284:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e288:	462a      	mov	r2, r5
 800e28a:	4633      	mov	r3, r6
 800e28c:	f7f2 fc64 	bl	8000b58 <__aeabi_dcmpgt>
 800e290:	2800      	cmp	r0, #0
 800e292:	f040 828b 	bne.w	800e7ac <_dtoa_r+0x93c>
 800e296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e29a:	462a      	mov	r2, r5
 800e29c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e2a0:	f7f2 fc3c 	bl	8000b1c <__aeabi_dcmplt>
 800e2a4:	2800      	cmp	r0, #0
 800e2a6:	f040 8128 	bne.w	800e4fa <_dtoa_r+0x68a>
 800e2aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e2ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e2b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	f2c0 815a 	blt.w	800e56e <_dtoa_r+0x6fe>
 800e2ba:	2f0e      	cmp	r7, #14
 800e2bc:	f300 8157 	bgt.w	800e56e <_dtoa_r+0x6fe>
 800e2c0:	4b5a      	ldr	r3, [pc, #360]	@ (800e42c <_dtoa_r+0x5bc>)
 800e2c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e2c6:	ed93 7b00 	vldr	d7, [r3]
 800e2ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	ed8d 7b00 	vstr	d7, [sp]
 800e2d2:	da03      	bge.n	800e2dc <_dtoa_r+0x46c>
 800e2d4:	9b07      	ldr	r3, [sp, #28]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	f340 8101 	ble.w	800e4de <_dtoa_r+0x66e>
 800e2dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e2e0:	4656      	mov	r6, sl
 800e2e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2e6:	4620      	mov	r0, r4
 800e2e8:	4629      	mov	r1, r5
 800e2ea:	f7f2 facf 	bl	800088c <__aeabi_ddiv>
 800e2ee:	f7f2 fc53 	bl	8000b98 <__aeabi_d2iz>
 800e2f2:	4680      	mov	r8, r0
 800e2f4:	f7f2 f936 	bl	8000564 <__aeabi_i2d>
 800e2f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2fc:	f7f2 f99c 	bl	8000638 <__aeabi_dmul>
 800e300:	4602      	mov	r2, r0
 800e302:	460b      	mov	r3, r1
 800e304:	4620      	mov	r0, r4
 800e306:	4629      	mov	r1, r5
 800e308:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e30c:	f7f1 ffdc 	bl	80002c8 <__aeabi_dsub>
 800e310:	f806 4b01 	strb.w	r4, [r6], #1
 800e314:	9d07      	ldr	r5, [sp, #28]
 800e316:	eba6 040a 	sub.w	r4, r6, sl
 800e31a:	42a5      	cmp	r5, r4
 800e31c:	4602      	mov	r2, r0
 800e31e:	460b      	mov	r3, r1
 800e320:	f040 8117 	bne.w	800e552 <_dtoa_r+0x6e2>
 800e324:	f7f1 ffd2 	bl	80002cc <__adddf3>
 800e328:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e32c:	4604      	mov	r4, r0
 800e32e:	460d      	mov	r5, r1
 800e330:	f7f2 fc12 	bl	8000b58 <__aeabi_dcmpgt>
 800e334:	2800      	cmp	r0, #0
 800e336:	f040 80f9 	bne.w	800e52c <_dtoa_r+0x6bc>
 800e33a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e33e:	4620      	mov	r0, r4
 800e340:	4629      	mov	r1, r5
 800e342:	f7f2 fbe1 	bl	8000b08 <__aeabi_dcmpeq>
 800e346:	b118      	cbz	r0, 800e350 <_dtoa_r+0x4e0>
 800e348:	f018 0f01 	tst.w	r8, #1
 800e34c:	f040 80ee 	bne.w	800e52c <_dtoa_r+0x6bc>
 800e350:	4649      	mov	r1, r9
 800e352:	4658      	mov	r0, fp
 800e354:	f000 fb98 	bl	800ea88 <_Bfree>
 800e358:	2300      	movs	r3, #0
 800e35a:	7033      	strb	r3, [r6, #0]
 800e35c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e35e:	3701      	adds	r7, #1
 800e360:	601f      	str	r7, [r3, #0]
 800e362:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e364:	2b00      	cmp	r3, #0
 800e366:	f000 831d 	beq.w	800e9a4 <_dtoa_r+0xb34>
 800e36a:	601e      	str	r6, [r3, #0]
 800e36c:	e31a      	b.n	800e9a4 <_dtoa_r+0xb34>
 800e36e:	07e2      	lsls	r2, r4, #31
 800e370:	d505      	bpl.n	800e37e <_dtoa_r+0x50e>
 800e372:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e376:	f7f2 f95f 	bl	8000638 <__aeabi_dmul>
 800e37a:	3601      	adds	r6, #1
 800e37c:	2301      	movs	r3, #1
 800e37e:	1064      	asrs	r4, r4, #1
 800e380:	3508      	adds	r5, #8
 800e382:	e73f      	b.n	800e204 <_dtoa_r+0x394>
 800e384:	2602      	movs	r6, #2
 800e386:	e742      	b.n	800e20e <_dtoa_r+0x39e>
 800e388:	9c07      	ldr	r4, [sp, #28]
 800e38a:	9704      	str	r7, [sp, #16]
 800e38c:	e761      	b.n	800e252 <_dtoa_r+0x3e2>
 800e38e:	4b27      	ldr	r3, [pc, #156]	@ (800e42c <_dtoa_r+0x5bc>)
 800e390:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e392:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e396:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e39a:	4454      	add	r4, sl
 800e39c:	2900      	cmp	r1, #0
 800e39e:	d053      	beq.n	800e448 <_dtoa_r+0x5d8>
 800e3a0:	4928      	ldr	r1, [pc, #160]	@ (800e444 <_dtoa_r+0x5d4>)
 800e3a2:	2000      	movs	r0, #0
 800e3a4:	f7f2 fa72 	bl	800088c <__aeabi_ddiv>
 800e3a8:	4633      	mov	r3, r6
 800e3aa:	462a      	mov	r2, r5
 800e3ac:	f7f1 ff8c 	bl	80002c8 <__aeabi_dsub>
 800e3b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e3b4:	4656      	mov	r6, sl
 800e3b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3ba:	f7f2 fbed 	bl	8000b98 <__aeabi_d2iz>
 800e3be:	4605      	mov	r5, r0
 800e3c0:	f7f2 f8d0 	bl	8000564 <__aeabi_i2d>
 800e3c4:	4602      	mov	r2, r0
 800e3c6:	460b      	mov	r3, r1
 800e3c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3cc:	f7f1 ff7c 	bl	80002c8 <__aeabi_dsub>
 800e3d0:	3530      	adds	r5, #48	@ 0x30
 800e3d2:	4602      	mov	r2, r0
 800e3d4:	460b      	mov	r3, r1
 800e3d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e3da:	f806 5b01 	strb.w	r5, [r6], #1
 800e3de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e3e2:	f7f2 fb9b 	bl	8000b1c <__aeabi_dcmplt>
 800e3e6:	2800      	cmp	r0, #0
 800e3e8:	d171      	bne.n	800e4ce <_dtoa_r+0x65e>
 800e3ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e3ee:	4911      	ldr	r1, [pc, #68]	@ (800e434 <_dtoa_r+0x5c4>)
 800e3f0:	2000      	movs	r0, #0
 800e3f2:	f7f1 ff69 	bl	80002c8 <__aeabi_dsub>
 800e3f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e3fa:	f7f2 fb8f 	bl	8000b1c <__aeabi_dcmplt>
 800e3fe:	2800      	cmp	r0, #0
 800e400:	f040 8095 	bne.w	800e52e <_dtoa_r+0x6be>
 800e404:	42a6      	cmp	r6, r4
 800e406:	f43f af50 	beq.w	800e2aa <_dtoa_r+0x43a>
 800e40a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e40e:	4b0a      	ldr	r3, [pc, #40]	@ (800e438 <_dtoa_r+0x5c8>)
 800e410:	2200      	movs	r2, #0
 800e412:	f7f2 f911 	bl	8000638 <__aeabi_dmul>
 800e416:	4b08      	ldr	r3, [pc, #32]	@ (800e438 <_dtoa_r+0x5c8>)
 800e418:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e41c:	2200      	movs	r2, #0
 800e41e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e422:	f7f2 f909 	bl	8000638 <__aeabi_dmul>
 800e426:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e42a:	e7c4      	b.n	800e3b6 <_dtoa_r+0x546>
 800e42c:	08012200 	.word	0x08012200
 800e430:	080121d8 	.word	0x080121d8
 800e434:	3ff00000 	.word	0x3ff00000
 800e438:	40240000 	.word	0x40240000
 800e43c:	401c0000 	.word	0x401c0000
 800e440:	40140000 	.word	0x40140000
 800e444:	3fe00000 	.word	0x3fe00000
 800e448:	4631      	mov	r1, r6
 800e44a:	4628      	mov	r0, r5
 800e44c:	f7f2 f8f4 	bl	8000638 <__aeabi_dmul>
 800e450:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e454:	9415      	str	r4, [sp, #84]	@ 0x54
 800e456:	4656      	mov	r6, sl
 800e458:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e45c:	f7f2 fb9c 	bl	8000b98 <__aeabi_d2iz>
 800e460:	4605      	mov	r5, r0
 800e462:	f7f2 f87f 	bl	8000564 <__aeabi_i2d>
 800e466:	4602      	mov	r2, r0
 800e468:	460b      	mov	r3, r1
 800e46a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e46e:	f7f1 ff2b 	bl	80002c8 <__aeabi_dsub>
 800e472:	3530      	adds	r5, #48	@ 0x30
 800e474:	f806 5b01 	strb.w	r5, [r6], #1
 800e478:	4602      	mov	r2, r0
 800e47a:	460b      	mov	r3, r1
 800e47c:	42a6      	cmp	r6, r4
 800e47e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e482:	f04f 0200 	mov.w	r2, #0
 800e486:	d124      	bne.n	800e4d2 <_dtoa_r+0x662>
 800e488:	4bac      	ldr	r3, [pc, #688]	@ (800e73c <_dtoa_r+0x8cc>)
 800e48a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e48e:	f7f1 ff1d 	bl	80002cc <__adddf3>
 800e492:	4602      	mov	r2, r0
 800e494:	460b      	mov	r3, r1
 800e496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e49a:	f7f2 fb5d 	bl	8000b58 <__aeabi_dcmpgt>
 800e49e:	2800      	cmp	r0, #0
 800e4a0:	d145      	bne.n	800e52e <_dtoa_r+0x6be>
 800e4a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e4a6:	49a5      	ldr	r1, [pc, #660]	@ (800e73c <_dtoa_r+0x8cc>)
 800e4a8:	2000      	movs	r0, #0
 800e4aa:	f7f1 ff0d 	bl	80002c8 <__aeabi_dsub>
 800e4ae:	4602      	mov	r2, r0
 800e4b0:	460b      	mov	r3, r1
 800e4b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4b6:	f7f2 fb31 	bl	8000b1c <__aeabi_dcmplt>
 800e4ba:	2800      	cmp	r0, #0
 800e4bc:	f43f aef5 	beq.w	800e2aa <_dtoa_r+0x43a>
 800e4c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e4c2:	1e73      	subs	r3, r6, #1
 800e4c4:	9315      	str	r3, [sp, #84]	@ 0x54
 800e4c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e4ca:	2b30      	cmp	r3, #48	@ 0x30
 800e4cc:	d0f8      	beq.n	800e4c0 <_dtoa_r+0x650>
 800e4ce:	9f04      	ldr	r7, [sp, #16]
 800e4d0:	e73e      	b.n	800e350 <_dtoa_r+0x4e0>
 800e4d2:	4b9b      	ldr	r3, [pc, #620]	@ (800e740 <_dtoa_r+0x8d0>)
 800e4d4:	f7f2 f8b0 	bl	8000638 <__aeabi_dmul>
 800e4d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4dc:	e7bc      	b.n	800e458 <_dtoa_r+0x5e8>
 800e4de:	d10c      	bne.n	800e4fa <_dtoa_r+0x68a>
 800e4e0:	4b98      	ldr	r3, [pc, #608]	@ (800e744 <_dtoa_r+0x8d4>)
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e4e8:	f7f2 f8a6 	bl	8000638 <__aeabi_dmul>
 800e4ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e4f0:	f7f2 fb28 	bl	8000b44 <__aeabi_dcmpge>
 800e4f4:	2800      	cmp	r0, #0
 800e4f6:	f000 8157 	beq.w	800e7a8 <_dtoa_r+0x938>
 800e4fa:	2400      	movs	r4, #0
 800e4fc:	4625      	mov	r5, r4
 800e4fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e500:	43db      	mvns	r3, r3
 800e502:	9304      	str	r3, [sp, #16]
 800e504:	4656      	mov	r6, sl
 800e506:	2700      	movs	r7, #0
 800e508:	4621      	mov	r1, r4
 800e50a:	4658      	mov	r0, fp
 800e50c:	f000 fabc 	bl	800ea88 <_Bfree>
 800e510:	2d00      	cmp	r5, #0
 800e512:	d0dc      	beq.n	800e4ce <_dtoa_r+0x65e>
 800e514:	b12f      	cbz	r7, 800e522 <_dtoa_r+0x6b2>
 800e516:	42af      	cmp	r7, r5
 800e518:	d003      	beq.n	800e522 <_dtoa_r+0x6b2>
 800e51a:	4639      	mov	r1, r7
 800e51c:	4658      	mov	r0, fp
 800e51e:	f000 fab3 	bl	800ea88 <_Bfree>
 800e522:	4629      	mov	r1, r5
 800e524:	4658      	mov	r0, fp
 800e526:	f000 faaf 	bl	800ea88 <_Bfree>
 800e52a:	e7d0      	b.n	800e4ce <_dtoa_r+0x65e>
 800e52c:	9704      	str	r7, [sp, #16]
 800e52e:	4633      	mov	r3, r6
 800e530:	461e      	mov	r6, r3
 800e532:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e536:	2a39      	cmp	r2, #57	@ 0x39
 800e538:	d107      	bne.n	800e54a <_dtoa_r+0x6da>
 800e53a:	459a      	cmp	sl, r3
 800e53c:	d1f8      	bne.n	800e530 <_dtoa_r+0x6c0>
 800e53e:	9a04      	ldr	r2, [sp, #16]
 800e540:	3201      	adds	r2, #1
 800e542:	9204      	str	r2, [sp, #16]
 800e544:	2230      	movs	r2, #48	@ 0x30
 800e546:	f88a 2000 	strb.w	r2, [sl]
 800e54a:	781a      	ldrb	r2, [r3, #0]
 800e54c:	3201      	adds	r2, #1
 800e54e:	701a      	strb	r2, [r3, #0]
 800e550:	e7bd      	b.n	800e4ce <_dtoa_r+0x65e>
 800e552:	4b7b      	ldr	r3, [pc, #492]	@ (800e740 <_dtoa_r+0x8d0>)
 800e554:	2200      	movs	r2, #0
 800e556:	f7f2 f86f 	bl	8000638 <__aeabi_dmul>
 800e55a:	2200      	movs	r2, #0
 800e55c:	2300      	movs	r3, #0
 800e55e:	4604      	mov	r4, r0
 800e560:	460d      	mov	r5, r1
 800e562:	f7f2 fad1 	bl	8000b08 <__aeabi_dcmpeq>
 800e566:	2800      	cmp	r0, #0
 800e568:	f43f aebb 	beq.w	800e2e2 <_dtoa_r+0x472>
 800e56c:	e6f0      	b.n	800e350 <_dtoa_r+0x4e0>
 800e56e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e570:	2a00      	cmp	r2, #0
 800e572:	f000 80db 	beq.w	800e72c <_dtoa_r+0x8bc>
 800e576:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e578:	2a01      	cmp	r2, #1
 800e57a:	f300 80bf 	bgt.w	800e6fc <_dtoa_r+0x88c>
 800e57e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e580:	2a00      	cmp	r2, #0
 800e582:	f000 80b7 	beq.w	800e6f4 <_dtoa_r+0x884>
 800e586:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e58a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e58c:	4646      	mov	r6, r8
 800e58e:	9a08      	ldr	r2, [sp, #32]
 800e590:	2101      	movs	r1, #1
 800e592:	441a      	add	r2, r3
 800e594:	4658      	mov	r0, fp
 800e596:	4498      	add	r8, r3
 800e598:	9208      	str	r2, [sp, #32]
 800e59a:	f000 fb29 	bl	800ebf0 <__i2b>
 800e59e:	4605      	mov	r5, r0
 800e5a0:	b15e      	cbz	r6, 800e5ba <_dtoa_r+0x74a>
 800e5a2:	9b08      	ldr	r3, [sp, #32]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	dd08      	ble.n	800e5ba <_dtoa_r+0x74a>
 800e5a8:	42b3      	cmp	r3, r6
 800e5aa:	9a08      	ldr	r2, [sp, #32]
 800e5ac:	bfa8      	it	ge
 800e5ae:	4633      	movge	r3, r6
 800e5b0:	eba8 0803 	sub.w	r8, r8, r3
 800e5b4:	1af6      	subs	r6, r6, r3
 800e5b6:	1ad3      	subs	r3, r2, r3
 800e5b8:	9308      	str	r3, [sp, #32]
 800e5ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5bc:	b1f3      	cbz	r3, 800e5fc <_dtoa_r+0x78c>
 800e5be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	f000 80b7 	beq.w	800e734 <_dtoa_r+0x8c4>
 800e5c6:	b18c      	cbz	r4, 800e5ec <_dtoa_r+0x77c>
 800e5c8:	4629      	mov	r1, r5
 800e5ca:	4622      	mov	r2, r4
 800e5cc:	4658      	mov	r0, fp
 800e5ce:	f000 fbcf 	bl	800ed70 <__pow5mult>
 800e5d2:	464a      	mov	r2, r9
 800e5d4:	4601      	mov	r1, r0
 800e5d6:	4605      	mov	r5, r0
 800e5d8:	4658      	mov	r0, fp
 800e5da:	f000 fb1f 	bl	800ec1c <__multiply>
 800e5de:	4649      	mov	r1, r9
 800e5e0:	9004      	str	r0, [sp, #16]
 800e5e2:	4658      	mov	r0, fp
 800e5e4:	f000 fa50 	bl	800ea88 <_Bfree>
 800e5e8:	9b04      	ldr	r3, [sp, #16]
 800e5ea:	4699      	mov	r9, r3
 800e5ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5ee:	1b1a      	subs	r2, r3, r4
 800e5f0:	d004      	beq.n	800e5fc <_dtoa_r+0x78c>
 800e5f2:	4649      	mov	r1, r9
 800e5f4:	4658      	mov	r0, fp
 800e5f6:	f000 fbbb 	bl	800ed70 <__pow5mult>
 800e5fa:	4681      	mov	r9, r0
 800e5fc:	2101      	movs	r1, #1
 800e5fe:	4658      	mov	r0, fp
 800e600:	f000 faf6 	bl	800ebf0 <__i2b>
 800e604:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e606:	4604      	mov	r4, r0
 800e608:	2b00      	cmp	r3, #0
 800e60a:	f000 81cf 	beq.w	800e9ac <_dtoa_r+0xb3c>
 800e60e:	461a      	mov	r2, r3
 800e610:	4601      	mov	r1, r0
 800e612:	4658      	mov	r0, fp
 800e614:	f000 fbac 	bl	800ed70 <__pow5mult>
 800e618:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e61a:	2b01      	cmp	r3, #1
 800e61c:	4604      	mov	r4, r0
 800e61e:	f300 8095 	bgt.w	800e74c <_dtoa_r+0x8dc>
 800e622:	9b02      	ldr	r3, [sp, #8]
 800e624:	2b00      	cmp	r3, #0
 800e626:	f040 8087 	bne.w	800e738 <_dtoa_r+0x8c8>
 800e62a:	9b03      	ldr	r3, [sp, #12]
 800e62c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e630:	2b00      	cmp	r3, #0
 800e632:	f040 8089 	bne.w	800e748 <_dtoa_r+0x8d8>
 800e636:	9b03      	ldr	r3, [sp, #12]
 800e638:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e63c:	0d1b      	lsrs	r3, r3, #20
 800e63e:	051b      	lsls	r3, r3, #20
 800e640:	b12b      	cbz	r3, 800e64e <_dtoa_r+0x7de>
 800e642:	9b08      	ldr	r3, [sp, #32]
 800e644:	3301      	adds	r3, #1
 800e646:	9308      	str	r3, [sp, #32]
 800e648:	f108 0801 	add.w	r8, r8, #1
 800e64c:	2301      	movs	r3, #1
 800e64e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e650:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e652:	2b00      	cmp	r3, #0
 800e654:	f000 81b0 	beq.w	800e9b8 <_dtoa_r+0xb48>
 800e658:	6923      	ldr	r3, [r4, #16]
 800e65a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e65e:	6918      	ldr	r0, [r3, #16]
 800e660:	f000 fa7a 	bl	800eb58 <__hi0bits>
 800e664:	f1c0 0020 	rsb	r0, r0, #32
 800e668:	9b08      	ldr	r3, [sp, #32]
 800e66a:	4418      	add	r0, r3
 800e66c:	f010 001f 	ands.w	r0, r0, #31
 800e670:	d077      	beq.n	800e762 <_dtoa_r+0x8f2>
 800e672:	f1c0 0320 	rsb	r3, r0, #32
 800e676:	2b04      	cmp	r3, #4
 800e678:	dd6b      	ble.n	800e752 <_dtoa_r+0x8e2>
 800e67a:	9b08      	ldr	r3, [sp, #32]
 800e67c:	f1c0 001c 	rsb	r0, r0, #28
 800e680:	4403      	add	r3, r0
 800e682:	4480      	add	r8, r0
 800e684:	4406      	add	r6, r0
 800e686:	9308      	str	r3, [sp, #32]
 800e688:	f1b8 0f00 	cmp.w	r8, #0
 800e68c:	dd05      	ble.n	800e69a <_dtoa_r+0x82a>
 800e68e:	4649      	mov	r1, r9
 800e690:	4642      	mov	r2, r8
 800e692:	4658      	mov	r0, fp
 800e694:	f000 fbc6 	bl	800ee24 <__lshift>
 800e698:	4681      	mov	r9, r0
 800e69a:	9b08      	ldr	r3, [sp, #32]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	dd05      	ble.n	800e6ac <_dtoa_r+0x83c>
 800e6a0:	4621      	mov	r1, r4
 800e6a2:	461a      	mov	r2, r3
 800e6a4:	4658      	mov	r0, fp
 800e6a6:	f000 fbbd 	bl	800ee24 <__lshift>
 800e6aa:	4604      	mov	r4, r0
 800e6ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d059      	beq.n	800e766 <_dtoa_r+0x8f6>
 800e6b2:	4621      	mov	r1, r4
 800e6b4:	4648      	mov	r0, r9
 800e6b6:	f000 fc21 	bl	800eefc <__mcmp>
 800e6ba:	2800      	cmp	r0, #0
 800e6bc:	da53      	bge.n	800e766 <_dtoa_r+0x8f6>
 800e6be:	1e7b      	subs	r3, r7, #1
 800e6c0:	9304      	str	r3, [sp, #16]
 800e6c2:	4649      	mov	r1, r9
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	220a      	movs	r2, #10
 800e6c8:	4658      	mov	r0, fp
 800e6ca:	f000 f9ff 	bl	800eacc <__multadd>
 800e6ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e6d0:	4681      	mov	r9, r0
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	f000 8172 	beq.w	800e9bc <_dtoa_r+0xb4c>
 800e6d8:	2300      	movs	r3, #0
 800e6da:	4629      	mov	r1, r5
 800e6dc:	220a      	movs	r2, #10
 800e6de:	4658      	mov	r0, fp
 800e6e0:	f000 f9f4 	bl	800eacc <__multadd>
 800e6e4:	9b00      	ldr	r3, [sp, #0]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	4605      	mov	r5, r0
 800e6ea:	dc67      	bgt.n	800e7bc <_dtoa_r+0x94c>
 800e6ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6ee:	2b02      	cmp	r3, #2
 800e6f0:	dc41      	bgt.n	800e776 <_dtoa_r+0x906>
 800e6f2:	e063      	b.n	800e7bc <_dtoa_r+0x94c>
 800e6f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e6f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e6fa:	e746      	b.n	800e58a <_dtoa_r+0x71a>
 800e6fc:	9b07      	ldr	r3, [sp, #28]
 800e6fe:	1e5c      	subs	r4, r3, #1
 800e700:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e702:	42a3      	cmp	r3, r4
 800e704:	bfbf      	itttt	lt
 800e706:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e708:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e70a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e70c:	1ae3      	sublt	r3, r4, r3
 800e70e:	bfb4      	ite	lt
 800e710:	18d2      	addlt	r2, r2, r3
 800e712:	1b1c      	subge	r4, r3, r4
 800e714:	9b07      	ldr	r3, [sp, #28]
 800e716:	bfbc      	itt	lt
 800e718:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e71a:	2400      	movlt	r4, #0
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	bfb5      	itete	lt
 800e720:	eba8 0603 	sublt.w	r6, r8, r3
 800e724:	9b07      	ldrge	r3, [sp, #28]
 800e726:	2300      	movlt	r3, #0
 800e728:	4646      	movge	r6, r8
 800e72a:	e730      	b.n	800e58e <_dtoa_r+0x71e>
 800e72c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e72e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e730:	4646      	mov	r6, r8
 800e732:	e735      	b.n	800e5a0 <_dtoa_r+0x730>
 800e734:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e736:	e75c      	b.n	800e5f2 <_dtoa_r+0x782>
 800e738:	2300      	movs	r3, #0
 800e73a:	e788      	b.n	800e64e <_dtoa_r+0x7de>
 800e73c:	3fe00000 	.word	0x3fe00000
 800e740:	40240000 	.word	0x40240000
 800e744:	40140000 	.word	0x40140000
 800e748:	9b02      	ldr	r3, [sp, #8]
 800e74a:	e780      	b.n	800e64e <_dtoa_r+0x7de>
 800e74c:	2300      	movs	r3, #0
 800e74e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e750:	e782      	b.n	800e658 <_dtoa_r+0x7e8>
 800e752:	d099      	beq.n	800e688 <_dtoa_r+0x818>
 800e754:	9a08      	ldr	r2, [sp, #32]
 800e756:	331c      	adds	r3, #28
 800e758:	441a      	add	r2, r3
 800e75a:	4498      	add	r8, r3
 800e75c:	441e      	add	r6, r3
 800e75e:	9208      	str	r2, [sp, #32]
 800e760:	e792      	b.n	800e688 <_dtoa_r+0x818>
 800e762:	4603      	mov	r3, r0
 800e764:	e7f6      	b.n	800e754 <_dtoa_r+0x8e4>
 800e766:	9b07      	ldr	r3, [sp, #28]
 800e768:	9704      	str	r7, [sp, #16]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	dc20      	bgt.n	800e7b0 <_dtoa_r+0x940>
 800e76e:	9300      	str	r3, [sp, #0]
 800e770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e772:	2b02      	cmp	r3, #2
 800e774:	dd1e      	ble.n	800e7b4 <_dtoa_r+0x944>
 800e776:	9b00      	ldr	r3, [sp, #0]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	f47f aec0 	bne.w	800e4fe <_dtoa_r+0x68e>
 800e77e:	4621      	mov	r1, r4
 800e780:	2205      	movs	r2, #5
 800e782:	4658      	mov	r0, fp
 800e784:	f000 f9a2 	bl	800eacc <__multadd>
 800e788:	4601      	mov	r1, r0
 800e78a:	4604      	mov	r4, r0
 800e78c:	4648      	mov	r0, r9
 800e78e:	f000 fbb5 	bl	800eefc <__mcmp>
 800e792:	2800      	cmp	r0, #0
 800e794:	f77f aeb3 	ble.w	800e4fe <_dtoa_r+0x68e>
 800e798:	4656      	mov	r6, sl
 800e79a:	2331      	movs	r3, #49	@ 0x31
 800e79c:	f806 3b01 	strb.w	r3, [r6], #1
 800e7a0:	9b04      	ldr	r3, [sp, #16]
 800e7a2:	3301      	adds	r3, #1
 800e7a4:	9304      	str	r3, [sp, #16]
 800e7a6:	e6ae      	b.n	800e506 <_dtoa_r+0x696>
 800e7a8:	9c07      	ldr	r4, [sp, #28]
 800e7aa:	9704      	str	r7, [sp, #16]
 800e7ac:	4625      	mov	r5, r4
 800e7ae:	e7f3      	b.n	800e798 <_dtoa_r+0x928>
 800e7b0:	9b07      	ldr	r3, [sp, #28]
 800e7b2:	9300      	str	r3, [sp, #0]
 800e7b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	f000 8104 	beq.w	800e9c4 <_dtoa_r+0xb54>
 800e7bc:	2e00      	cmp	r6, #0
 800e7be:	dd05      	ble.n	800e7cc <_dtoa_r+0x95c>
 800e7c0:	4629      	mov	r1, r5
 800e7c2:	4632      	mov	r2, r6
 800e7c4:	4658      	mov	r0, fp
 800e7c6:	f000 fb2d 	bl	800ee24 <__lshift>
 800e7ca:	4605      	mov	r5, r0
 800e7cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d05a      	beq.n	800e888 <_dtoa_r+0xa18>
 800e7d2:	6869      	ldr	r1, [r5, #4]
 800e7d4:	4658      	mov	r0, fp
 800e7d6:	f000 f917 	bl	800ea08 <_Balloc>
 800e7da:	4606      	mov	r6, r0
 800e7dc:	b928      	cbnz	r0, 800e7ea <_dtoa_r+0x97a>
 800e7de:	4b84      	ldr	r3, [pc, #528]	@ (800e9f0 <_dtoa_r+0xb80>)
 800e7e0:	4602      	mov	r2, r0
 800e7e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e7e6:	f7ff bb5a 	b.w	800de9e <_dtoa_r+0x2e>
 800e7ea:	692a      	ldr	r2, [r5, #16]
 800e7ec:	3202      	adds	r2, #2
 800e7ee:	0092      	lsls	r2, r2, #2
 800e7f0:	f105 010c 	add.w	r1, r5, #12
 800e7f4:	300c      	adds	r0, #12
 800e7f6:	f7ff faa4 	bl	800dd42 <memcpy>
 800e7fa:	2201      	movs	r2, #1
 800e7fc:	4631      	mov	r1, r6
 800e7fe:	4658      	mov	r0, fp
 800e800:	f000 fb10 	bl	800ee24 <__lshift>
 800e804:	f10a 0301 	add.w	r3, sl, #1
 800e808:	9307      	str	r3, [sp, #28]
 800e80a:	9b00      	ldr	r3, [sp, #0]
 800e80c:	4453      	add	r3, sl
 800e80e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e810:	9b02      	ldr	r3, [sp, #8]
 800e812:	f003 0301 	and.w	r3, r3, #1
 800e816:	462f      	mov	r7, r5
 800e818:	930a      	str	r3, [sp, #40]	@ 0x28
 800e81a:	4605      	mov	r5, r0
 800e81c:	9b07      	ldr	r3, [sp, #28]
 800e81e:	4621      	mov	r1, r4
 800e820:	3b01      	subs	r3, #1
 800e822:	4648      	mov	r0, r9
 800e824:	9300      	str	r3, [sp, #0]
 800e826:	f7ff fa9a 	bl	800dd5e <quorem>
 800e82a:	4639      	mov	r1, r7
 800e82c:	9002      	str	r0, [sp, #8]
 800e82e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e832:	4648      	mov	r0, r9
 800e834:	f000 fb62 	bl	800eefc <__mcmp>
 800e838:	462a      	mov	r2, r5
 800e83a:	9008      	str	r0, [sp, #32]
 800e83c:	4621      	mov	r1, r4
 800e83e:	4658      	mov	r0, fp
 800e840:	f000 fb78 	bl	800ef34 <__mdiff>
 800e844:	68c2      	ldr	r2, [r0, #12]
 800e846:	4606      	mov	r6, r0
 800e848:	bb02      	cbnz	r2, 800e88c <_dtoa_r+0xa1c>
 800e84a:	4601      	mov	r1, r0
 800e84c:	4648      	mov	r0, r9
 800e84e:	f000 fb55 	bl	800eefc <__mcmp>
 800e852:	4602      	mov	r2, r0
 800e854:	4631      	mov	r1, r6
 800e856:	4658      	mov	r0, fp
 800e858:	920e      	str	r2, [sp, #56]	@ 0x38
 800e85a:	f000 f915 	bl	800ea88 <_Bfree>
 800e85e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e860:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e862:	9e07      	ldr	r6, [sp, #28]
 800e864:	ea43 0102 	orr.w	r1, r3, r2
 800e868:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e86a:	4319      	orrs	r1, r3
 800e86c:	d110      	bne.n	800e890 <_dtoa_r+0xa20>
 800e86e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e872:	d029      	beq.n	800e8c8 <_dtoa_r+0xa58>
 800e874:	9b08      	ldr	r3, [sp, #32]
 800e876:	2b00      	cmp	r3, #0
 800e878:	dd02      	ble.n	800e880 <_dtoa_r+0xa10>
 800e87a:	9b02      	ldr	r3, [sp, #8]
 800e87c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e880:	9b00      	ldr	r3, [sp, #0]
 800e882:	f883 8000 	strb.w	r8, [r3]
 800e886:	e63f      	b.n	800e508 <_dtoa_r+0x698>
 800e888:	4628      	mov	r0, r5
 800e88a:	e7bb      	b.n	800e804 <_dtoa_r+0x994>
 800e88c:	2201      	movs	r2, #1
 800e88e:	e7e1      	b.n	800e854 <_dtoa_r+0x9e4>
 800e890:	9b08      	ldr	r3, [sp, #32]
 800e892:	2b00      	cmp	r3, #0
 800e894:	db04      	blt.n	800e8a0 <_dtoa_r+0xa30>
 800e896:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e898:	430b      	orrs	r3, r1
 800e89a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e89c:	430b      	orrs	r3, r1
 800e89e:	d120      	bne.n	800e8e2 <_dtoa_r+0xa72>
 800e8a0:	2a00      	cmp	r2, #0
 800e8a2:	dded      	ble.n	800e880 <_dtoa_r+0xa10>
 800e8a4:	4649      	mov	r1, r9
 800e8a6:	2201      	movs	r2, #1
 800e8a8:	4658      	mov	r0, fp
 800e8aa:	f000 fabb 	bl	800ee24 <__lshift>
 800e8ae:	4621      	mov	r1, r4
 800e8b0:	4681      	mov	r9, r0
 800e8b2:	f000 fb23 	bl	800eefc <__mcmp>
 800e8b6:	2800      	cmp	r0, #0
 800e8b8:	dc03      	bgt.n	800e8c2 <_dtoa_r+0xa52>
 800e8ba:	d1e1      	bne.n	800e880 <_dtoa_r+0xa10>
 800e8bc:	f018 0f01 	tst.w	r8, #1
 800e8c0:	d0de      	beq.n	800e880 <_dtoa_r+0xa10>
 800e8c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e8c6:	d1d8      	bne.n	800e87a <_dtoa_r+0xa0a>
 800e8c8:	9a00      	ldr	r2, [sp, #0]
 800e8ca:	2339      	movs	r3, #57	@ 0x39
 800e8cc:	7013      	strb	r3, [r2, #0]
 800e8ce:	4633      	mov	r3, r6
 800e8d0:	461e      	mov	r6, r3
 800e8d2:	3b01      	subs	r3, #1
 800e8d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e8d8:	2a39      	cmp	r2, #57	@ 0x39
 800e8da:	d052      	beq.n	800e982 <_dtoa_r+0xb12>
 800e8dc:	3201      	adds	r2, #1
 800e8de:	701a      	strb	r2, [r3, #0]
 800e8e0:	e612      	b.n	800e508 <_dtoa_r+0x698>
 800e8e2:	2a00      	cmp	r2, #0
 800e8e4:	dd07      	ble.n	800e8f6 <_dtoa_r+0xa86>
 800e8e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e8ea:	d0ed      	beq.n	800e8c8 <_dtoa_r+0xa58>
 800e8ec:	9a00      	ldr	r2, [sp, #0]
 800e8ee:	f108 0301 	add.w	r3, r8, #1
 800e8f2:	7013      	strb	r3, [r2, #0]
 800e8f4:	e608      	b.n	800e508 <_dtoa_r+0x698>
 800e8f6:	9b07      	ldr	r3, [sp, #28]
 800e8f8:	9a07      	ldr	r2, [sp, #28]
 800e8fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e8fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e900:	4293      	cmp	r3, r2
 800e902:	d028      	beq.n	800e956 <_dtoa_r+0xae6>
 800e904:	4649      	mov	r1, r9
 800e906:	2300      	movs	r3, #0
 800e908:	220a      	movs	r2, #10
 800e90a:	4658      	mov	r0, fp
 800e90c:	f000 f8de 	bl	800eacc <__multadd>
 800e910:	42af      	cmp	r7, r5
 800e912:	4681      	mov	r9, r0
 800e914:	f04f 0300 	mov.w	r3, #0
 800e918:	f04f 020a 	mov.w	r2, #10
 800e91c:	4639      	mov	r1, r7
 800e91e:	4658      	mov	r0, fp
 800e920:	d107      	bne.n	800e932 <_dtoa_r+0xac2>
 800e922:	f000 f8d3 	bl	800eacc <__multadd>
 800e926:	4607      	mov	r7, r0
 800e928:	4605      	mov	r5, r0
 800e92a:	9b07      	ldr	r3, [sp, #28]
 800e92c:	3301      	adds	r3, #1
 800e92e:	9307      	str	r3, [sp, #28]
 800e930:	e774      	b.n	800e81c <_dtoa_r+0x9ac>
 800e932:	f000 f8cb 	bl	800eacc <__multadd>
 800e936:	4629      	mov	r1, r5
 800e938:	4607      	mov	r7, r0
 800e93a:	2300      	movs	r3, #0
 800e93c:	220a      	movs	r2, #10
 800e93e:	4658      	mov	r0, fp
 800e940:	f000 f8c4 	bl	800eacc <__multadd>
 800e944:	4605      	mov	r5, r0
 800e946:	e7f0      	b.n	800e92a <_dtoa_r+0xaba>
 800e948:	9b00      	ldr	r3, [sp, #0]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	bfcc      	ite	gt
 800e94e:	461e      	movgt	r6, r3
 800e950:	2601      	movle	r6, #1
 800e952:	4456      	add	r6, sl
 800e954:	2700      	movs	r7, #0
 800e956:	4649      	mov	r1, r9
 800e958:	2201      	movs	r2, #1
 800e95a:	4658      	mov	r0, fp
 800e95c:	f000 fa62 	bl	800ee24 <__lshift>
 800e960:	4621      	mov	r1, r4
 800e962:	4681      	mov	r9, r0
 800e964:	f000 faca 	bl	800eefc <__mcmp>
 800e968:	2800      	cmp	r0, #0
 800e96a:	dcb0      	bgt.n	800e8ce <_dtoa_r+0xa5e>
 800e96c:	d102      	bne.n	800e974 <_dtoa_r+0xb04>
 800e96e:	f018 0f01 	tst.w	r8, #1
 800e972:	d1ac      	bne.n	800e8ce <_dtoa_r+0xa5e>
 800e974:	4633      	mov	r3, r6
 800e976:	461e      	mov	r6, r3
 800e978:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e97c:	2a30      	cmp	r2, #48	@ 0x30
 800e97e:	d0fa      	beq.n	800e976 <_dtoa_r+0xb06>
 800e980:	e5c2      	b.n	800e508 <_dtoa_r+0x698>
 800e982:	459a      	cmp	sl, r3
 800e984:	d1a4      	bne.n	800e8d0 <_dtoa_r+0xa60>
 800e986:	9b04      	ldr	r3, [sp, #16]
 800e988:	3301      	adds	r3, #1
 800e98a:	9304      	str	r3, [sp, #16]
 800e98c:	2331      	movs	r3, #49	@ 0x31
 800e98e:	f88a 3000 	strb.w	r3, [sl]
 800e992:	e5b9      	b.n	800e508 <_dtoa_r+0x698>
 800e994:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e996:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e9f4 <_dtoa_r+0xb84>
 800e99a:	b11b      	cbz	r3, 800e9a4 <_dtoa_r+0xb34>
 800e99c:	f10a 0308 	add.w	r3, sl, #8
 800e9a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e9a2:	6013      	str	r3, [r2, #0]
 800e9a4:	4650      	mov	r0, sl
 800e9a6:	b019      	add	sp, #100	@ 0x64
 800e9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9ae:	2b01      	cmp	r3, #1
 800e9b0:	f77f ae37 	ble.w	800e622 <_dtoa_r+0x7b2>
 800e9b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e9b8:	2001      	movs	r0, #1
 800e9ba:	e655      	b.n	800e668 <_dtoa_r+0x7f8>
 800e9bc:	9b00      	ldr	r3, [sp, #0]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	f77f aed6 	ble.w	800e770 <_dtoa_r+0x900>
 800e9c4:	4656      	mov	r6, sl
 800e9c6:	4621      	mov	r1, r4
 800e9c8:	4648      	mov	r0, r9
 800e9ca:	f7ff f9c8 	bl	800dd5e <quorem>
 800e9ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e9d2:	f806 8b01 	strb.w	r8, [r6], #1
 800e9d6:	9b00      	ldr	r3, [sp, #0]
 800e9d8:	eba6 020a 	sub.w	r2, r6, sl
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	ddb3      	ble.n	800e948 <_dtoa_r+0xad8>
 800e9e0:	4649      	mov	r1, r9
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	220a      	movs	r2, #10
 800e9e6:	4658      	mov	r0, fp
 800e9e8:	f000 f870 	bl	800eacc <__multadd>
 800e9ec:	4681      	mov	r9, r0
 800e9ee:	e7ea      	b.n	800e9c6 <_dtoa_r+0xb56>
 800e9f0:	0801215c 	.word	0x0801215c
 800e9f4:	080120e0 	.word	0x080120e0

0800e9f8 <malloc>:
 800e9f8:	4b02      	ldr	r3, [pc, #8]	@ (800ea04 <malloc+0xc>)
 800e9fa:	4601      	mov	r1, r0
 800e9fc:	6818      	ldr	r0, [r3, #0]
 800e9fe:	f7fe b9ef 	b.w	800cde0 <_malloc_r>
 800ea02:	bf00      	nop
 800ea04:	2000001c 	.word	0x2000001c

0800ea08 <_Balloc>:
 800ea08:	b570      	push	{r4, r5, r6, lr}
 800ea0a:	69c6      	ldr	r6, [r0, #28]
 800ea0c:	4604      	mov	r4, r0
 800ea0e:	460d      	mov	r5, r1
 800ea10:	b976      	cbnz	r6, 800ea30 <_Balloc+0x28>
 800ea12:	2010      	movs	r0, #16
 800ea14:	f7ff fff0 	bl	800e9f8 <malloc>
 800ea18:	4602      	mov	r2, r0
 800ea1a:	61e0      	str	r0, [r4, #28]
 800ea1c:	b920      	cbnz	r0, 800ea28 <_Balloc+0x20>
 800ea1e:	4b18      	ldr	r3, [pc, #96]	@ (800ea80 <_Balloc+0x78>)
 800ea20:	4818      	ldr	r0, [pc, #96]	@ (800ea84 <_Balloc+0x7c>)
 800ea22:	216b      	movs	r1, #107	@ 0x6b
 800ea24:	f000 ff56 	bl	800f8d4 <__assert_func>
 800ea28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ea2c:	6006      	str	r6, [r0, #0]
 800ea2e:	60c6      	str	r6, [r0, #12]
 800ea30:	69e6      	ldr	r6, [r4, #28]
 800ea32:	68f3      	ldr	r3, [r6, #12]
 800ea34:	b183      	cbz	r3, 800ea58 <_Balloc+0x50>
 800ea36:	69e3      	ldr	r3, [r4, #28]
 800ea38:	68db      	ldr	r3, [r3, #12]
 800ea3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ea3e:	b9b8      	cbnz	r0, 800ea70 <_Balloc+0x68>
 800ea40:	2101      	movs	r1, #1
 800ea42:	fa01 f605 	lsl.w	r6, r1, r5
 800ea46:	1d72      	adds	r2, r6, #5
 800ea48:	0092      	lsls	r2, r2, #2
 800ea4a:	4620      	mov	r0, r4
 800ea4c:	f000 ff60 	bl	800f910 <_calloc_r>
 800ea50:	b160      	cbz	r0, 800ea6c <_Balloc+0x64>
 800ea52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ea56:	e00e      	b.n	800ea76 <_Balloc+0x6e>
 800ea58:	2221      	movs	r2, #33	@ 0x21
 800ea5a:	2104      	movs	r1, #4
 800ea5c:	4620      	mov	r0, r4
 800ea5e:	f000 ff57 	bl	800f910 <_calloc_r>
 800ea62:	69e3      	ldr	r3, [r4, #28]
 800ea64:	60f0      	str	r0, [r6, #12]
 800ea66:	68db      	ldr	r3, [r3, #12]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d1e4      	bne.n	800ea36 <_Balloc+0x2e>
 800ea6c:	2000      	movs	r0, #0
 800ea6e:	bd70      	pop	{r4, r5, r6, pc}
 800ea70:	6802      	ldr	r2, [r0, #0]
 800ea72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ea76:	2300      	movs	r3, #0
 800ea78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ea7c:	e7f7      	b.n	800ea6e <_Balloc+0x66>
 800ea7e:	bf00      	nop
 800ea80:	080120ed 	.word	0x080120ed
 800ea84:	0801216d 	.word	0x0801216d

0800ea88 <_Bfree>:
 800ea88:	b570      	push	{r4, r5, r6, lr}
 800ea8a:	69c6      	ldr	r6, [r0, #28]
 800ea8c:	4605      	mov	r5, r0
 800ea8e:	460c      	mov	r4, r1
 800ea90:	b976      	cbnz	r6, 800eab0 <_Bfree+0x28>
 800ea92:	2010      	movs	r0, #16
 800ea94:	f7ff ffb0 	bl	800e9f8 <malloc>
 800ea98:	4602      	mov	r2, r0
 800ea9a:	61e8      	str	r0, [r5, #28]
 800ea9c:	b920      	cbnz	r0, 800eaa8 <_Bfree+0x20>
 800ea9e:	4b09      	ldr	r3, [pc, #36]	@ (800eac4 <_Bfree+0x3c>)
 800eaa0:	4809      	ldr	r0, [pc, #36]	@ (800eac8 <_Bfree+0x40>)
 800eaa2:	218f      	movs	r1, #143	@ 0x8f
 800eaa4:	f000 ff16 	bl	800f8d4 <__assert_func>
 800eaa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eaac:	6006      	str	r6, [r0, #0]
 800eaae:	60c6      	str	r6, [r0, #12]
 800eab0:	b13c      	cbz	r4, 800eac2 <_Bfree+0x3a>
 800eab2:	69eb      	ldr	r3, [r5, #28]
 800eab4:	6862      	ldr	r2, [r4, #4]
 800eab6:	68db      	ldr	r3, [r3, #12]
 800eab8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eabc:	6021      	str	r1, [r4, #0]
 800eabe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eac2:	bd70      	pop	{r4, r5, r6, pc}
 800eac4:	080120ed 	.word	0x080120ed
 800eac8:	0801216d 	.word	0x0801216d

0800eacc <__multadd>:
 800eacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ead0:	690d      	ldr	r5, [r1, #16]
 800ead2:	4607      	mov	r7, r0
 800ead4:	460c      	mov	r4, r1
 800ead6:	461e      	mov	r6, r3
 800ead8:	f101 0c14 	add.w	ip, r1, #20
 800eadc:	2000      	movs	r0, #0
 800eade:	f8dc 3000 	ldr.w	r3, [ip]
 800eae2:	b299      	uxth	r1, r3
 800eae4:	fb02 6101 	mla	r1, r2, r1, r6
 800eae8:	0c1e      	lsrs	r6, r3, #16
 800eaea:	0c0b      	lsrs	r3, r1, #16
 800eaec:	fb02 3306 	mla	r3, r2, r6, r3
 800eaf0:	b289      	uxth	r1, r1
 800eaf2:	3001      	adds	r0, #1
 800eaf4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800eaf8:	4285      	cmp	r5, r0
 800eafa:	f84c 1b04 	str.w	r1, [ip], #4
 800eafe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800eb02:	dcec      	bgt.n	800eade <__multadd+0x12>
 800eb04:	b30e      	cbz	r6, 800eb4a <__multadd+0x7e>
 800eb06:	68a3      	ldr	r3, [r4, #8]
 800eb08:	42ab      	cmp	r3, r5
 800eb0a:	dc19      	bgt.n	800eb40 <__multadd+0x74>
 800eb0c:	6861      	ldr	r1, [r4, #4]
 800eb0e:	4638      	mov	r0, r7
 800eb10:	3101      	adds	r1, #1
 800eb12:	f7ff ff79 	bl	800ea08 <_Balloc>
 800eb16:	4680      	mov	r8, r0
 800eb18:	b928      	cbnz	r0, 800eb26 <__multadd+0x5a>
 800eb1a:	4602      	mov	r2, r0
 800eb1c:	4b0c      	ldr	r3, [pc, #48]	@ (800eb50 <__multadd+0x84>)
 800eb1e:	480d      	ldr	r0, [pc, #52]	@ (800eb54 <__multadd+0x88>)
 800eb20:	21ba      	movs	r1, #186	@ 0xba
 800eb22:	f000 fed7 	bl	800f8d4 <__assert_func>
 800eb26:	6922      	ldr	r2, [r4, #16]
 800eb28:	3202      	adds	r2, #2
 800eb2a:	f104 010c 	add.w	r1, r4, #12
 800eb2e:	0092      	lsls	r2, r2, #2
 800eb30:	300c      	adds	r0, #12
 800eb32:	f7ff f906 	bl	800dd42 <memcpy>
 800eb36:	4621      	mov	r1, r4
 800eb38:	4638      	mov	r0, r7
 800eb3a:	f7ff ffa5 	bl	800ea88 <_Bfree>
 800eb3e:	4644      	mov	r4, r8
 800eb40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eb44:	3501      	adds	r5, #1
 800eb46:	615e      	str	r6, [r3, #20]
 800eb48:	6125      	str	r5, [r4, #16]
 800eb4a:	4620      	mov	r0, r4
 800eb4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb50:	0801215c 	.word	0x0801215c
 800eb54:	0801216d 	.word	0x0801216d

0800eb58 <__hi0bits>:
 800eb58:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	bf36      	itet	cc
 800eb60:	0403      	lslcc	r3, r0, #16
 800eb62:	2000      	movcs	r0, #0
 800eb64:	2010      	movcc	r0, #16
 800eb66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800eb6a:	bf3c      	itt	cc
 800eb6c:	021b      	lslcc	r3, r3, #8
 800eb6e:	3008      	addcc	r0, #8
 800eb70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eb74:	bf3c      	itt	cc
 800eb76:	011b      	lslcc	r3, r3, #4
 800eb78:	3004      	addcc	r0, #4
 800eb7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb7e:	bf3c      	itt	cc
 800eb80:	009b      	lslcc	r3, r3, #2
 800eb82:	3002      	addcc	r0, #2
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	db05      	blt.n	800eb94 <__hi0bits+0x3c>
 800eb88:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800eb8c:	f100 0001 	add.w	r0, r0, #1
 800eb90:	bf08      	it	eq
 800eb92:	2020      	moveq	r0, #32
 800eb94:	4770      	bx	lr

0800eb96 <__lo0bits>:
 800eb96:	6803      	ldr	r3, [r0, #0]
 800eb98:	4602      	mov	r2, r0
 800eb9a:	f013 0007 	ands.w	r0, r3, #7
 800eb9e:	d00b      	beq.n	800ebb8 <__lo0bits+0x22>
 800eba0:	07d9      	lsls	r1, r3, #31
 800eba2:	d421      	bmi.n	800ebe8 <__lo0bits+0x52>
 800eba4:	0798      	lsls	r0, r3, #30
 800eba6:	bf49      	itett	mi
 800eba8:	085b      	lsrmi	r3, r3, #1
 800ebaa:	089b      	lsrpl	r3, r3, #2
 800ebac:	2001      	movmi	r0, #1
 800ebae:	6013      	strmi	r3, [r2, #0]
 800ebb0:	bf5c      	itt	pl
 800ebb2:	6013      	strpl	r3, [r2, #0]
 800ebb4:	2002      	movpl	r0, #2
 800ebb6:	4770      	bx	lr
 800ebb8:	b299      	uxth	r1, r3
 800ebba:	b909      	cbnz	r1, 800ebc0 <__lo0bits+0x2a>
 800ebbc:	0c1b      	lsrs	r3, r3, #16
 800ebbe:	2010      	movs	r0, #16
 800ebc0:	b2d9      	uxtb	r1, r3
 800ebc2:	b909      	cbnz	r1, 800ebc8 <__lo0bits+0x32>
 800ebc4:	3008      	adds	r0, #8
 800ebc6:	0a1b      	lsrs	r3, r3, #8
 800ebc8:	0719      	lsls	r1, r3, #28
 800ebca:	bf04      	itt	eq
 800ebcc:	091b      	lsreq	r3, r3, #4
 800ebce:	3004      	addeq	r0, #4
 800ebd0:	0799      	lsls	r1, r3, #30
 800ebd2:	bf04      	itt	eq
 800ebd4:	089b      	lsreq	r3, r3, #2
 800ebd6:	3002      	addeq	r0, #2
 800ebd8:	07d9      	lsls	r1, r3, #31
 800ebda:	d403      	bmi.n	800ebe4 <__lo0bits+0x4e>
 800ebdc:	085b      	lsrs	r3, r3, #1
 800ebde:	f100 0001 	add.w	r0, r0, #1
 800ebe2:	d003      	beq.n	800ebec <__lo0bits+0x56>
 800ebe4:	6013      	str	r3, [r2, #0]
 800ebe6:	4770      	bx	lr
 800ebe8:	2000      	movs	r0, #0
 800ebea:	4770      	bx	lr
 800ebec:	2020      	movs	r0, #32
 800ebee:	4770      	bx	lr

0800ebf0 <__i2b>:
 800ebf0:	b510      	push	{r4, lr}
 800ebf2:	460c      	mov	r4, r1
 800ebf4:	2101      	movs	r1, #1
 800ebf6:	f7ff ff07 	bl	800ea08 <_Balloc>
 800ebfa:	4602      	mov	r2, r0
 800ebfc:	b928      	cbnz	r0, 800ec0a <__i2b+0x1a>
 800ebfe:	4b05      	ldr	r3, [pc, #20]	@ (800ec14 <__i2b+0x24>)
 800ec00:	4805      	ldr	r0, [pc, #20]	@ (800ec18 <__i2b+0x28>)
 800ec02:	f240 1145 	movw	r1, #325	@ 0x145
 800ec06:	f000 fe65 	bl	800f8d4 <__assert_func>
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	6144      	str	r4, [r0, #20]
 800ec0e:	6103      	str	r3, [r0, #16]
 800ec10:	bd10      	pop	{r4, pc}
 800ec12:	bf00      	nop
 800ec14:	0801215c 	.word	0x0801215c
 800ec18:	0801216d 	.word	0x0801216d

0800ec1c <__multiply>:
 800ec1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec20:	4614      	mov	r4, r2
 800ec22:	690a      	ldr	r2, [r1, #16]
 800ec24:	6923      	ldr	r3, [r4, #16]
 800ec26:	429a      	cmp	r2, r3
 800ec28:	bfa8      	it	ge
 800ec2a:	4623      	movge	r3, r4
 800ec2c:	460f      	mov	r7, r1
 800ec2e:	bfa4      	itt	ge
 800ec30:	460c      	movge	r4, r1
 800ec32:	461f      	movge	r7, r3
 800ec34:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ec38:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ec3c:	68a3      	ldr	r3, [r4, #8]
 800ec3e:	6861      	ldr	r1, [r4, #4]
 800ec40:	eb0a 0609 	add.w	r6, sl, r9
 800ec44:	42b3      	cmp	r3, r6
 800ec46:	b085      	sub	sp, #20
 800ec48:	bfb8      	it	lt
 800ec4a:	3101      	addlt	r1, #1
 800ec4c:	f7ff fedc 	bl	800ea08 <_Balloc>
 800ec50:	b930      	cbnz	r0, 800ec60 <__multiply+0x44>
 800ec52:	4602      	mov	r2, r0
 800ec54:	4b44      	ldr	r3, [pc, #272]	@ (800ed68 <__multiply+0x14c>)
 800ec56:	4845      	ldr	r0, [pc, #276]	@ (800ed6c <__multiply+0x150>)
 800ec58:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ec5c:	f000 fe3a 	bl	800f8d4 <__assert_func>
 800ec60:	f100 0514 	add.w	r5, r0, #20
 800ec64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ec68:	462b      	mov	r3, r5
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	4543      	cmp	r3, r8
 800ec6e:	d321      	bcc.n	800ecb4 <__multiply+0x98>
 800ec70:	f107 0114 	add.w	r1, r7, #20
 800ec74:	f104 0214 	add.w	r2, r4, #20
 800ec78:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ec7c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ec80:	9302      	str	r3, [sp, #8]
 800ec82:	1b13      	subs	r3, r2, r4
 800ec84:	3b15      	subs	r3, #21
 800ec86:	f023 0303 	bic.w	r3, r3, #3
 800ec8a:	3304      	adds	r3, #4
 800ec8c:	f104 0715 	add.w	r7, r4, #21
 800ec90:	42ba      	cmp	r2, r7
 800ec92:	bf38      	it	cc
 800ec94:	2304      	movcc	r3, #4
 800ec96:	9301      	str	r3, [sp, #4]
 800ec98:	9b02      	ldr	r3, [sp, #8]
 800ec9a:	9103      	str	r1, [sp, #12]
 800ec9c:	428b      	cmp	r3, r1
 800ec9e:	d80c      	bhi.n	800ecba <__multiply+0x9e>
 800eca0:	2e00      	cmp	r6, #0
 800eca2:	dd03      	ble.n	800ecac <__multiply+0x90>
 800eca4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d05b      	beq.n	800ed64 <__multiply+0x148>
 800ecac:	6106      	str	r6, [r0, #16]
 800ecae:	b005      	add	sp, #20
 800ecb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecb4:	f843 2b04 	str.w	r2, [r3], #4
 800ecb8:	e7d8      	b.n	800ec6c <__multiply+0x50>
 800ecba:	f8b1 a000 	ldrh.w	sl, [r1]
 800ecbe:	f1ba 0f00 	cmp.w	sl, #0
 800ecc2:	d024      	beq.n	800ed0e <__multiply+0xf2>
 800ecc4:	f104 0e14 	add.w	lr, r4, #20
 800ecc8:	46a9      	mov	r9, r5
 800ecca:	f04f 0c00 	mov.w	ip, #0
 800ecce:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ecd2:	f8d9 3000 	ldr.w	r3, [r9]
 800ecd6:	fa1f fb87 	uxth.w	fp, r7
 800ecda:	b29b      	uxth	r3, r3
 800ecdc:	fb0a 330b 	mla	r3, sl, fp, r3
 800ece0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ece4:	f8d9 7000 	ldr.w	r7, [r9]
 800ece8:	4463      	add	r3, ip
 800ecea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ecee:	fb0a c70b 	mla	r7, sl, fp, ip
 800ecf2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ecf6:	b29b      	uxth	r3, r3
 800ecf8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ecfc:	4572      	cmp	r2, lr
 800ecfe:	f849 3b04 	str.w	r3, [r9], #4
 800ed02:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ed06:	d8e2      	bhi.n	800ecce <__multiply+0xb2>
 800ed08:	9b01      	ldr	r3, [sp, #4]
 800ed0a:	f845 c003 	str.w	ip, [r5, r3]
 800ed0e:	9b03      	ldr	r3, [sp, #12]
 800ed10:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ed14:	3104      	adds	r1, #4
 800ed16:	f1b9 0f00 	cmp.w	r9, #0
 800ed1a:	d021      	beq.n	800ed60 <__multiply+0x144>
 800ed1c:	682b      	ldr	r3, [r5, #0]
 800ed1e:	f104 0c14 	add.w	ip, r4, #20
 800ed22:	46ae      	mov	lr, r5
 800ed24:	f04f 0a00 	mov.w	sl, #0
 800ed28:	f8bc b000 	ldrh.w	fp, [ip]
 800ed2c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ed30:	fb09 770b 	mla	r7, r9, fp, r7
 800ed34:	4457      	add	r7, sl
 800ed36:	b29b      	uxth	r3, r3
 800ed38:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ed3c:	f84e 3b04 	str.w	r3, [lr], #4
 800ed40:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ed44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ed48:	f8be 3000 	ldrh.w	r3, [lr]
 800ed4c:	fb09 330a 	mla	r3, r9, sl, r3
 800ed50:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ed54:	4562      	cmp	r2, ip
 800ed56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ed5a:	d8e5      	bhi.n	800ed28 <__multiply+0x10c>
 800ed5c:	9f01      	ldr	r7, [sp, #4]
 800ed5e:	51eb      	str	r3, [r5, r7]
 800ed60:	3504      	adds	r5, #4
 800ed62:	e799      	b.n	800ec98 <__multiply+0x7c>
 800ed64:	3e01      	subs	r6, #1
 800ed66:	e79b      	b.n	800eca0 <__multiply+0x84>
 800ed68:	0801215c 	.word	0x0801215c
 800ed6c:	0801216d 	.word	0x0801216d

0800ed70 <__pow5mult>:
 800ed70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed74:	4615      	mov	r5, r2
 800ed76:	f012 0203 	ands.w	r2, r2, #3
 800ed7a:	4607      	mov	r7, r0
 800ed7c:	460e      	mov	r6, r1
 800ed7e:	d007      	beq.n	800ed90 <__pow5mult+0x20>
 800ed80:	4c25      	ldr	r4, [pc, #148]	@ (800ee18 <__pow5mult+0xa8>)
 800ed82:	3a01      	subs	r2, #1
 800ed84:	2300      	movs	r3, #0
 800ed86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ed8a:	f7ff fe9f 	bl	800eacc <__multadd>
 800ed8e:	4606      	mov	r6, r0
 800ed90:	10ad      	asrs	r5, r5, #2
 800ed92:	d03d      	beq.n	800ee10 <__pow5mult+0xa0>
 800ed94:	69fc      	ldr	r4, [r7, #28]
 800ed96:	b97c      	cbnz	r4, 800edb8 <__pow5mult+0x48>
 800ed98:	2010      	movs	r0, #16
 800ed9a:	f7ff fe2d 	bl	800e9f8 <malloc>
 800ed9e:	4602      	mov	r2, r0
 800eda0:	61f8      	str	r0, [r7, #28]
 800eda2:	b928      	cbnz	r0, 800edb0 <__pow5mult+0x40>
 800eda4:	4b1d      	ldr	r3, [pc, #116]	@ (800ee1c <__pow5mult+0xac>)
 800eda6:	481e      	ldr	r0, [pc, #120]	@ (800ee20 <__pow5mult+0xb0>)
 800eda8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800edac:	f000 fd92 	bl	800f8d4 <__assert_func>
 800edb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800edb4:	6004      	str	r4, [r0, #0]
 800edb6:	60c4      	str	r4, [r0, #12]
 800edb8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800edbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800edc0:	b94c      	cbnz	r4, 800edd6 <__pow5mult+0x66>
 800edc2:	f240 2171 	movw	r1, #625	@ 0x271
 800edc6:	4638      	mov	r0, r7
 800edc8:	f7ff ff12 	bl	800ebf0 <__i2b>
 800edcc:	2300      	movs	r3, #0
 800edce:	f8c8 0008 	str.w	r0, [r8, #8]
 800edd2:	4604      	mov	r4, r0
 800edd4:	6003      	str	r3, [r0, #0]
 800edd6:	f04f 0900 	mov.w	r9, #0
 800edda:	07eb      	lsls	r3, r5, #31
 800eddc:	d50a      	bpl.n	800edf4 <__pow5mult+0x84>
 800edde:	4631      	mov	r1, r6
 800ede0:	4622      	mov	r2, r4
 800ede2:	4638      	mov	r0, r7
 800ede4:	f7ff ff1a 	bl	800ec1c <__multiply>
 800ede8:	4631      	mov	r1, r6
 800edea:	4680      	mov	r8, r0
 800edec:	4638      	mov	r0, r7
 800edee:	f7ff fe4b 	bl	800ea88 <_Bfree>
 800edf2:	4646      	mov	r6, r8
 800edf4:	106d      	asrs	r5, r5, #1
 800edf6:	d00b      	beq.n	800ee10 <__pow5mult+0xa0>
 800edf8:	6820      	ldr	r0, [r4, #0]
 800edfa:	b938      	cbnz	r0, 800ee0c <__pow5mult+0x9c>
 800edfc:	4622      	mov	r2, r4
 800edfe:	4621      	mov	r1, r4
 800ee00:	4638      	mov	r0, r7
 800ee02:	f7ff ff0b 	bl	800ec1c <__multiply>
 800ee06:	6020      	str	r0, [r4, #0]
 800ee08:	f8c0 9000 	str.w	r9, [r0]
 800ee0c:	4604      	mov	r4, r0
 800ee0e:	e7e4      	b.n	800edda <__pow5mult+0x6a>
 800ee10:	4630      	mov	r0, r6
 800ee12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee16:	bf00      	nop
 800ee18:	080121c8 	.word	0x080121c8
 800ee1c:	080120ed 	.word	0x080120ed
 800ee20:	0801216d 	.word	0x0801216d

0800ee24 <__lshift>:
 800ee24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee28:	460c      	mov	r4, r1
 800ee2a:	6849      	ldr	r1, [r1, #4]
 800ee2c:	6923      	ldr	r3, [r4, #16]
 800ee2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ee32:	68a3      	ldr	r3, [r4, #8]
 800ee34:	4607      	mov	r7, r0
 800ee36:	4691      	mov	r9, r2
 800ee38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ee3c:	f108 0601 	add.w	r6, r8, #1
 800ee40:	42b3      	cmp	r3, r6
 800ee42:	db0b      	blt.n	800ee5c <__lshift+0x38>
 800ee44:	4638      	mov	r0, r7
 800ee46:	f7ff fddf 	bl	800ea08 <_Balloc>
 800ee4a:	4605      	mov	r5, r0
 800ee4c:	b948      	cbnz	r0, 800ee62 <__lshift+0x3e>
 800ee4e:	4602      	mov	r2, r0
 800ee50:	4b28      	ldr	r3, [pc, #160]	@ (800eef4 <__lshift+0xd0>)
 800ee52:	4829      	ldr	r0, [pc, #164]	@ (800eef8 <__lshift+0xd4>)
 800ee54:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ee58:	f000 fd3c 	bl	800f8d4 <__assert_func>
 800ee5c:	3101      	adds	r1, #1
 800ee5e:	005b      	lsls	r3, r3, #1
 800ee60:	e7ee      	b.n	800ee40 <__lshift+0x1c>
 800ee62:	2300      	movs	r3, #0
 800ee64:	f100 0114 	add.w	r1, r0, #20
 800ee68:	f100 0210 	add.w	r2, r0, #16
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	4553      	cmp	r3, sl
 800ee70:	db33      	blt.n	800eeda <__lshift+0xb6>
 800ee72:	6920      	ldr	r0, [r4, #16]
 800ee74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ee78:	f104 0314 	add.w	r3, r4, #20
 800ee7c:	f019 091f 	ands.w	r9, r9, #31
 800ee80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ee84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ee88:	d02b      	beq.n	800eee2 <__lshift+0xbe>
 800ee8a:	f1c9 0e20 	rsb	lr, r9, #32
 800ee8e:	468a      	mov	sl, r1
 800ee90:	2200      	movs	r2, #0
 800ee92:	6818      	ldr	r0, [r3, #0]
 800ee94:	fa00 f009 	lsl.w	r0, r0, r9
 800ee98:	4310      	orrs	r0, r2
 800ee9a:	f84a 0b04 	str.w	r0, [sl], #4
 800ee9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800eea2:	459c      	cmp	ip, r3
 800eea4:	fa22 f20e 	lsr.w	r2, r2, lr
 800eea8:	d8f3      	bhi.n	800ee92 <__lshift+0x6e>
 800eeaa:	ebac 0304 	sub.w	r3, ip, r4
 800eeae:	3b15      	subs	r3, #21
 800eeb0:	f023 0303 	bic.w	r3, r3, #3
 800eeb4:	3304      	adds	r3, #4
 800eeb6:	f104 0015 	add.w	r0, r4, #21
 800eeba:	4584      	cmp	ip, r0
 800eebc:	bf38      	it	cc
 800eebe:	2304      	movcc	r3, #4
 800eec0:	50ca      	str	r2, [r1, r3]
 800eec2:	b10a      	cbz	r2, 800eec8 <__lshift+0xa4>
 800eec4:	f108 0602 	add.w	r6, r8, #2
 800eec8:	3e01      	subs	r6, #1
 800eeca:	4638      	mov	r0, r7
 800eecc:	612e      	str	r6, [r5, #16]
 800eece:	4621      	mov	r1, r4
 800eed0:	f7ff fdda 	bl	800ea88 <_Bfree>
 800eed4:	4628      	mov	r0, r5
 800eed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeda:	f842 0f04 	str.w	r0, [r2, #4]!
 800eede:	3301      	adds	r3, #1
 800eee0:	e7c5      	b.n	800ee6e <__lshift+0x4a>
 800eee2:	3904      	subs	r1, #4
 800eee4:	f853 2b04 	ldr.w	r2, [r3], #4
 800eee8:	f841 2f04 	str.w	r2, [r1, #4]!
 800eeec:	459c      	cmp	ip, r3
 800eeee:	d8f9      	bhi.n	800eee4 <__lshift+0xc0>
 800eef0:	e7ea      	b.n	800eec8 <__lshift+0xa4>
 800eef2:	bf00      	nop
 800eef4:	0801215c 	.word	0x0801215c
 800eef8:	0801216d 	.word	0x0801216d

0800eefc <__mcmp>:
 800eefc:	690a      	ldr	r2, [r1, #16]
 800eefe:	4603      	mov	r3, r0
 800ef00:	6900      	ldr	r0, [r0, #16]
 800ef02:	1a80      	subs	r0, r0, r2
 800ef04:	b530      	push	{r4, r5, lr}
 800ef06:	d10e      	bne.n	800ef26 <__mcmp+0x2a>
 800ef08:	3314      	adds	r3, #20
 800ef0a:	3114      	adds	r1, #20
 800ef0c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ef10:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ef14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ef18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ef1c:	4295      	cmp	r5, r2
 800ef1e:	d003      	beq.n	800ef28 <__mcmp+0x2c>
 800ef20:	d205      	bcs.n	800ef2e <__mcmp+0x32>
 800ef22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ef26:	bd30      	pop	{r4, r5, pc}
 800ef28:	42a3      	cmp	r3, r4
 800ef2a:	d3f3      	bcc.n	800ef14 <__mcmp+0x18>
 800ef2c:	e7fb      	b.n	800ef26 <__mcmp+0x2a>
 800ef2e:	2001      	movs	r0, #1
 800ef30:	e7f9      	b.n	800ef26 <__mcmp+0x2a>
	...

0800ef34 <__mdiff>:
 800ef34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef38:	4689      	mov	r9, r1
 800ef3a:	4606      	mov	r6, r0
 800ef3c:	4611      	mov	r1, r2
 800ef3e:	4648      	mov	r0, r9
 800ef40:	4614      	mov	r4, r2
 800ef42:	f7ff ffdb 	bl	800eefc <__mcmp>
 800ef46:	1e05      	subs	r5, r0, #0
 800ef48:	d112      	bne.n	800ef70 <__mdiff+0x3c>
 800ef4a:	4629      	mov	r1, r5
 800ef4c:	4630      	mov	r0, r6
 800ef4e:	f7ff fd5b 	bl	800ea08 <_Balloc>
 800ef52:	4602      	mov	r2, r0
 800ef54:	b928      	cbnz	r0, 800ef62 <__mdiff+0x2e>
 800ef56:	4b3f      	ldr	r3, [pc, #252]	@ (800f054 <__mdiff+0x120>)
 800ef58:	f240 2137 	movw	r1, #567	@ 0x237
 800ef5c:	483e      	ldr	r0, [pc, #248]	@ (800f058 <__mdiff+0x124>)
 800ef5e:	f000 fcb9 	bl	800f8d4 <__assert_func>
 800ef62:	2301      	movs	r3, #1
 800ef64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ef68:	4610      	mov	r0, r2
 800ef6a:	b003      	add	sp, #12
 800ef6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef70:	bfbc      	itt	lt
 800ef72:	464b      	movlt	r3, r9
 800ef74:	46a1      	movlt	r9, r4
 800ef76:	4630      	mov	r0, r6
 800ef78:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ef7c:	bfba      	itte	lt
 800ef7e:	461c      	movlt	r4, r3
 800ef80:	2501      	movlt	r5, #1
 800ef82:	2500      	movge	r5, #0
 800ef84:	f7ff fd40 	bl	800ea08 <_Balloc>
 800ef88:	4602      	mov	r2, r0
 800ef8a:	b918      	cbnz	r0, 800ef94 <__mdiff+0x60>
 800ef8c:	4b31      	ldr	r3, [pc, #196]	@ (800f054 <__mdiff+0x120>)
 800ef8e:	f240 2145 	movw	r1, #581	@ 0x245
 800ef92:	e7e3      	b.n	800ef5c <__mdiff+0x28>
 800ef94:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ef98:	6926      	ldr	r6, [r4, #16]
 800ef9a:	60c5      	str	r5, [r0, #12]
 800ef9c:	f109 0310 	add.w	r3, r9, #16
 800efa0:	f109 0514 	add.w	r5, r9, #20
 800efa4:	f104 0e14 	add.w	lr, r4, #20
 800efa8:	f100 0b14 	add.w	fp, r0, #20
 800efac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800efb0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800efb4:	9301      	str	r3, [sp, #4]
 800efb6:	46d9      	mov	r9, fp
 800efb8:	f04f 0c00 	mov.w	ip, #0
 800efbc:	9b01      	ldr	r3, [sp, #4]
 800efbe:	f85e 0b04 	ldr.w	r0, [lr], #4
 800efc2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800efc6:	9301      	str	r3, [sp, #4]
 800efc8:	fa1f f38a 	uxth.w	r3, sl
 800efcc:	4619      	mov	r1, r3
 800efce:	b283      	uxth	r3, r0
 800efd0:	1acb      	subs	r3, r1, r3
 800efd2:	0c00      	lsrs	r0, r0, #16
 800efd4:	4463      	add	r3, ip
 800efd6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800efda:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800efde:	b29b      	uxth	r3, r3
 800efe0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800efe4:	4576      	cmp	r6, lr
 800efe6:	f849 3b04 	str.w	r3, [r9], #4
 800efea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800efee:	d8e5      	bhi.n	800efbc <__mdiff+0x88>
 800eff0:	1b33      	subs	r3, r6, r4
 800eff2:	3b15      	subs	r3, #21
 800eff4:	f023 0303 	bic.w	r3, r3, #3
 800eff8:	3415      	adds	r4, #21
 800effa:	3304      	adds	r3, #4
 800effc:	42a6      	cmp	r6, r4
 800effe:	bf38      	it	cc
 800f000:	2304      	movcc	r3, #4
 800f002:	441d      	add	r5, r3
 800f004:	445b      	add	r3, fp
 800f006:	461e      	mov	r6, r3
 800f008:	462c      	mov	r4, r5
 800f00a:	4544      	cmp	r4, r8
 800f00c:	d30e      	bcc.n	800f02c <__mdiff+0xf8>
 800f00e:	f108 0103 	add.w	r1, r8, #3
 800f012:	1b49      	subs	r1, r1, r5
 800f014:	f021 0103 	bic.w	r1, r1, #3
 800f018:	3d03      	subs	r5, #3
 800f01a:	45a8      	cmp	r8, r5
 800f01c:	bf38      	it	cc
 800f01e:	2100      	movcc	r1, #0
 800f020:	440b      	add	r3, r1
 800f022:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f026:	b191      	cbz	r1, 800f04e <__mdiff+0x11a>
 800f028:	6117      	str	r7, [r2, #16]
 800f02a:	e79d      	b.n	800ef68 <__mdiff+0x34>
 800f02c:	f854 1b04 	ldr.w	r1, [r4], #4
 800f030:	46e6      	mov	lr, ip
 800f032:	0c08      	lsrs	r0, r1, #16
 800f034:	fa1c fc81 	uxtah	ip, ip, r1
 800f038:	4471      	add	r1, lr
 800f03a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f03e:	b289      	uxth	r1, r1
 800f040:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f044:	f846 1b04 	str.w	r1, [r6], #4
 800f048:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f04c:	e7dd      	b.n	800f00a <__mdiff+0xd6>
 800f04e:	3f01      	subs	r7, #1
 800f050:	e7e7      	b.n	800f022 <__mdiff+0xee>
 800f052:	bf00      	nop
 800f054:	0801215c 	.word	0x0801215c
 800f058:	0801216d 	.word	0x0801216d

0800f05c <__d2b>:
 800f05c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f060:	460f      	mov	r7, r1
 800f062:	2101      	movs	r1, #1
 800f064:	ec59 8b10 	vmov	r8, r9, d0
 800f068:	4616      	mov	r6, r2
 800f06a:	f7ff fccd 	bl	800ea08 <_Balloc>
 800f06e:	4604      	mov	r4, r0
 800f070:	b930      	cbnz	r0, 800f080 <__d2b+0x24>
 800f072:	4602      	mov	r2, r0
 800f074:	4b23      	ldr	r3, [pc, #140]	@ (800f104 <__d2b+0xa8>)
 800f076:	4824      	ldr	r0, [pc, #144]	@ (800f108 <__d2b+0xac>)
 800f078:	f240 310f 	movw	r1, #783	@ 0x30f
 800f07c:	f000 fc2a 	bl	800f8d4 <__assert_func>
 800f080:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f084:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f088:	b10d      	cbz	r5, 800f08e <__d2b+0x32>
 800f08a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f08e:	9301      	str	r3, [sp, #4]
 800f090:	f1b8 0300 	subs.w	r3, r8, #0
 800f094:	d023      	beq.n	800f0de <__d2b+0x82>
 800f096:	4668      	mov	r0, sp
 800f098:	9300      	str	r3, [sp, #0]
 800f09a:	f7ff fd7c 	bl	800eb96 <__lo0bits>
 800f09e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f0a2:	b1d0      	cbz	r0, 800f0da <__d2b+0x7e>
 800f0a4:	f1c0 0320 	rsb	r3, r0, #32
 800f0a8:	fa02 f303 	lsl.w	r3, r2, r3
 800f0ac:	430b      	orrs	r3, r1
 800f0ae:	40c2      	lsrs	r2, r0
 800f0b0:	6163      	str	r3, [r4, #20]
 800f0b2:	9201      	str	r2, [sp, #4]
 800f0b4:	9b01      	ldr	r3, [sp, #4]
 800f0b6:	61a3      	str	r3, [r4, #24]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	bf0c      	ite	eq
 800f0bc:	2201      	moveq	r2, #1
 800f0be:	2202      	movne	r2, #2
 800f0c0:	6122      	str	r2, [r4, #16]
 800f0c2:	b1a5      	cbz	r5, 800f0ee <__d2b+0x92>
 800f0c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f0c8:	4405      	add	r5, r0
 800f0ca:	603d      	str	r5, [r7, #0]
 800f0cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f0d0:	6030      	str	r0, [r6, #0]
 800f0d2:	4620      	mov	r0, r4
 800f0d4:	b003      	add	sp, #12
 800f0d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f0da:	6161      	str	r1, [r4, #20]
 800f0dc:	e7ea      	b.n	800f0b4 <__d2b+0x58>
 800f0de:	a801      	add	r0, sp, #4
 800f0e0:	f7ff fd59 	bl	800eb96 <__lo0bits>
 800f0e4:	9b01      	ldr	r3, [sp, #4]
 800f0e6:	6163      	str	r3, [r4, #20]
 800f0e8:	3020      	adds	r0, #32
 800f0ea:	2201      	movs	r2, #1
 800f0ec:	e7e8      	b.n	800f0c0 <__d2b+0x64>
 800f0ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f0f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f0f6:	6038      	str	r0, [r7, #0]
 800f0f8:	6918      	ldr	r0, [r3, #16]
 800f0fa:	f7ff fd2d 	bl	800eb58 <__hi0bits>
 800f0fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f102:	e7e5      	b.n	800f0d0 <__d2b+0x74>
 800f104:	0801215c 	.word	0x0801215c
 800f108:	0801216d 	.word	0x0801216d

0800f10c <__ssputs_r>:
 800f10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f110:	688e      	ldr	r6, [r1, #8]
 800f112:	461f      	mov	r7, r3
 800f114:	42be      	cmp	r6, r7
 800f116:	680b      	ldr	r3, [r1, #0]
 800f118:	4682      	mov	sl, r0
 800f11a:	460c      	mov	r4, r1
 800f11c:	4690      	mov	r8, r2
 800f11e:	d82d      	bhi.n	800f17c <__ssputs_r+0x70>
 800f120:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f124:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f128:	d026      	beq.n	800f178 <__ssputs_r+0x6c>
 800f12a:	6965      	ldr	r5, [r4, #20]
 800f12c:	6909      	ldr	r1, [r1, #16]
 800f12e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f132:	eba3 0901 	sub.w	r9, r3, r1
 800f136:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f13a:	1c7b      	adds	r3, r7, #1
 800f13c:	444b      	add	r3, r9
 800f13e:	106d      	asrs	r5, r5, #1
 800f140:	429d      	cmp	r5, r3
 800f142:	bf38      	it	cc
 800f144:	461d      	movcc	r5, r3
 800f146:	0553      	lsls	r3, r2, #21
 800f148:	d527      	bpl.n	800f19a <__ssputs_r+0x8e>
 800f14a:	4629      	mov	r1, r5
 800f14c:	f7fd fe48 	bl	800cde0 <_malloc_r>
 800f150:	4606      	mov	r6, r0
 800f152:	b360      	cbz	r0, 800f1ae <__ssputs_r+0xa2>
 800f154:	6921      	ldr	r1, [r4, #16]
 800f156:	464a      	mov	r2, r9
 800f158:	f7fe fdf3 	bl	800dd42 <memcpy>
 800f15c:	89a3      	ldrh	r3, [r4, #12]
 800f15e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f166:	81a3      	strh	r3, [r4, #12]
 800f168:	6126      	str	r6, [r4, #16]
 800f16a:	6165      	str	r5, [r4, #20]
 800f16c:	444e      	add	r6, r9
 800f16e:	eba5 0509 	sub.w	r5, r5, r9
 800f172:	6026      	str	r6, [r4, #0]
 800f174:	60a5      	str	r5, [r4, #8]
 800f176:	463e      	mov	r6, r7
 800f178:	42be      	cmp	r6, r7
 800f17a:	d900      	bls.n	800f17e <__ssputs_r+0x72>
 800f17c:	463e      	mov	r6, r7
 800f17e:	6820      	ldr	r0, [r4, #0]
 800f180:	4632      	mov	r2, r6
 800f182:	4641      	mov	r1, r8
 800f184:	f000 fb6a 	bl	800f85c <memmove>
 800f188:	68a3      	ldr	r3, [r4, #8]
 800f18a:	1b9b      	subs	r3, r3, r6
 800f18c:	60a3      	str	r3, [r4, #8]
 800f18e:	6823      	ldr	r3, [r4, #0]
 800f190:	4433      	add	r3, r6
 800f192:	6023      	str	r3, [r4, #0]
 800f194:	2000      	movs	r0, #0
 800f196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f19a:	462a      	mov	r2, r5
 800f19c:	f000 fbde 	bl	800f95c <_realloc_r>
 800f1a0:	4606      	mov	r6, r0
 800f1a2:	2800      	cmp	r0, #0
 800f1a4:	d1e0      	bne.n	800f168 <__ssputs_r+0x5c>
 800f1a6:	6921      	ldr	r1, [r4, #16]
 800f1a8:	4650      	mov	r0, sl
 800f1aa:	f7fd fdad 	bl	800cd08 <_free_r>
 800f1ae:	230c      	movs	r3, #12
 800f1b0:	f8ca 3000 	str.w	r3, [sl]
 800f1b4:	89a3      	ldrh	r3, [r4, #12]
 800f1b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f1ba:	81a3      	strh	r3, [r4, #12]
 800f1bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f1c0:	e7e9      	b.n	800f196 <__ssputs_r+0x8a>
	...

0800f1c4 <_svfiprintf_r>:
 800f1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1c8:	4698      	mov	r8, r3
 800f1ca:	898b      	ldrh	r3, [r1, #12]
 800f1cc:	061b      	lsls	r3, r3, #24
 800f1ce:	b09d      	sub	sp, #116	@ 0x74
 800f1d0:	4607      	mov	r7, r0
 800f1d2:	460d      	mov	r5, r1
 800f1d4:	4614      	mov	r4, r2
 800f1d6:	d510      	bpl.n	800f1fa <_svfiprintf_r+0x36>
 800f1d8:	690b      	ldr	r3, [r1, #16]
 800f1da:	b973      	cbnz	r3, 800f1fa <_svfiprintf_r+0x36>
 800f1dc:	2140      	movs	r1, #64	@ 0x40
 800f1de:	f7fd fdff 	bl	800cde0 <_malloc_r>
 800f1e2:	6028      	str	r0, [r5, #0]
 800f1e4:	6128      	str	r0, [r5, #16]
 800f1e6:	b930      	cbnz	r0, 800f1f6 <_svfiprintf_r+0x32>
 800f1e8:	230c      	movs	r3, #12
 800f1ea:	603b      	str	r3, [r7, #0]
 800f1ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f1f0:	b01d      	add	sp, #116	@ 0x74
 800f1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1f6:	2340      	movs	r3, #64	@ 0x40
 800f1f8:	616b      	str	r3, [r5, #20]
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f1fe:	2320      	movs	r3, #32
 800f200:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f204:	f8cd 800c 	str.w	r8, [sp, #12]
 800f208:	2330      	movs	r3, #48	@ 0x30
 800f20a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f3a8 <_svfiprintf_r+0x1e4>
 800f20e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f212:	f04f 0901 	mov.w	r9, #1
 800f216:	4623      	mov	r3, r4
 800f218:	469a      	mov	sl, r3
 800f21a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f21e:	b10a      	cbz	r2, 800f224 <_svfiprintf_r+0x60>
 800f220:	2a25      	cmp	r2, #37	@ 0x25
 800f222:	d1f9      	bne.n	800f218 <_svfiprintf_r+0x54>
 800f224:	ebba 0b04 	subs.w	fp, sl, r4
 800f228:	d00b      	beq.n	800f242 <_svfiprintf_r+0x7e>
 800f22a:	465b      	mov	r3, fp
 800f22c:	4622      	mov	r2, r4
 800f22e:	4629      	mov	r1, r5
 800f230:	4638      	mov	r0, r7
 800f232:	f7ff ff6b 	bl	800f10c <__ssputs_r>
 800f236:	3001      	adds	r0, #1
 800f238:	f000 80a7 	beq.w	800f38a <_svfiprintf_r+0x1c6>
 800f23c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f23e:	445a      	add	r2, fp
 800f240:	9209      	str	r2, [sp, #36]	@ 0x24
 800f242:	f89a 3000 	ldrb.w	r3, [sl]
 800f246:	2b00      	cmp	r3, #0
 800f248:	f000 809f 	beq.w	800f38a <_svfiprintf_r+0x1c6>
 800f24c:	2300      	movs	r3, #0
 800f24e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f252:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f256:	f10a 0a01 	add.w	sl, sl, #1
 800f25a:	9304      	str	r3, [sp, #16]
 800f25c:	9307      	str	r3, [sp, #28]
 800f25e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f262:	931a      	str	r3, [sp, #104]	@ 0x68
 800f264:	4654      	mov	r4, sl
 800f266:	2205      	movs	r2, #5
 800f268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f26c:	484e      	ldr	r0, [pc, #312]	@ (800f3a8 <_svfiprintf_r+0x1e4>)
 800f26e:	f7f0 ffcf 	bl	8000210 <memchr>
 800f272:	9a04      	ldr	r2, [sp, #16]
 800f274:	b9d8      	cbnz	r0, 800f2ae <_svfiprintf_r+0xea>
 800f276:	06d0      	lsls	r0, r2, #27
 800f278:	bf44      	itt	mi
 800f27a:	2320      	movmi	r3, #32
 800f27c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f280:	0711      	lsls	r1, r2, #28
 800f282:	bf44      	itt	mi
 800f284:	232b      	movmi	r3, #43	@ 0x2b
 800f286:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f28a:	f89a 3000 	ldrb.w	r3, [sl]
 800f28e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f290:	d015      	beq.n	800f2be <_svfiprintf_r+0xfa>
 800f292:	9a07      	ldr	r2, [sp, #28]
 800f294:	4654      	mov	r4, sl
 800f296:	2000      	movs	r0, #0
 800f298:	f04f 0c0a 	mov.w	ip, #10
 800f29c:	4621      	mov	r1, r4
 800f29e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2a2:	3b30      	subs	r3, #48	@ 0x30
 800f2a4:	2b09      	cmp	r3, #9
 800f2a6:	d94b      	bls.n	800f340 <_svfiprintf_r+0x17c>
 800f2a8:	b1b0      	cbz	r0, 800f2d8 <_svfiprintf_r+0x114>
 800f2aa:	9207      	str	r2, [sp, #28]
 800f2ac:	e014      	b.n	800f2d8 <_svfiprintf_r+0x114>
 800f2ae:	eba0 0308 	sub.w	r3, r0, r8
 800f2b2:	fa09 f303 	lsl.w	r3, r9, r3
 800f2b6:	4313      	orrs	r3, r2
 800f2b8:	9304      	str	r3, [sp, #16]
 800f2ba:	46a2      	mov	sl, r4
 800f2bc:	e7d2      	b.n	800f264 <_svfiprintf_r+0xa0>
 800f2be:	9b03      	ldr	r3, [sp, #12]
 800f2c0:	1d19      	adds	r1, r3, #4
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	9103      	str	r1, [sp, #12]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	bfbb      	ittet	lt
 800f2ca:	425b      	neglt	r3, r3
 800f2cc:	f042 0202 	orrlt.w	r2, r2, #2
 800f2d0:	9307      	strge	r3, [sp, #28]
 800f2d2:	9307      	strlt	r3, [sp, #28]
 800f2d4:	bfb8      	it	lt
 800f2d6:	9204      	strlt	r2, [sp, #16]
 800f2d8:	7823      	ldrb	r3, [r4, #0]
 800f2da:	2b2e      	cmp	r3, #46	@ 0x2e
 800f2dc:	d10a      	bne.n	800f2f4 <_svfiprintf_r+0x130>
 800f2de:	7863      	ldrb	r3, [r4, #1]
 800f2e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2e2:	d132      	bne.n	800f34a <_svfiprintf_r+0x186>
 800f2e4:	9b03      	ldr	r3, [sp, #12]
 800f2e6:	1d1a      	adds	r2, r3, #4
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	9203      	str	r2, [sp, #12]
 800f2ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f2f0:	3402      	adds	r4, #2
 800f2f2:	9305      	str	r3, [sp, #20]
 800f2f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f3b8 <_svfiprintf_r+0x1f4>
 800f2f8:	7821      	ldrb	r1, [r4, #0]
 800f2fa:	2203      	movs	r2, #3
 800f2fc:	4650      	mov	r0, sl
 800f2fe:	f7f0 ff87 	bl	8000210 <memchr>
 800f302:	b138      	cbz	r0, 800f314 <_svfiprintf_r+0x150>
 800f304:	9b04      	ldr	r3, [sp, #16]
 800f306:	eba0 000a 	sub.w	r0, r0, sl
 800f30a:	2240      	movs	r2, #64	@ 0x40
 800f30c:	4082      	lsls	r2, r0
 800f30e:	4313      	orrs	r3, r2
 800f310:	3401      	adds	r4, #1
 800f312:	9304      	str	r3, [sp, #16]
 800f314:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f318:	4824      	ldr	r0, [pc, #144]	@ (800f3ac <_svfiprintf_r+0x1e8>)
 800f31a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f31e:	2206      	movs	r2, #6
 800f320:	f7f0 ff76 	bl	8000210 <memchr>
 800f324:	2800      	cmp	r0, #0
 800f326:	d036      	beq.n	800f396 <_svfiprintf_r+0x1d2>
 800f328:	4b21      	ldr	r3, [pc, #132]	@ (800f3b0 <_svfiprintf_r+0x1ec>)
 800f32a:	bb1b      	cbnz	r3, 800f374 <_svfiprintf_r+0x1b0>
 800f32c:	9b03      	ldr	r3, [sp, #12]
 800f32e:	3307      	adds	r3, #7
 800f330:	f023 0307 	bic.w	r3, r3, #7
 800f334:	3308      	adds	r3, #8
 800f336:	9303      	str	r3, [sp, #12]
 800f338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f33a:	4433      	add	r3, r6
 800f33c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f33e:	e76a      	b.n	800f216 <_svfiprintf_r+0x52>
 800f340:	fb0c 3202 	mla	r2, ip, r2, r3
 800f344:	460c      	mov	r4, r1
 800f346:	2001      	movs	r0, #1
 800f348:	e7a8      	b.n	800f29c <_svfiprintf_r+0xd8>
 800f34a:	2300      	movs	r3, #0
 800f34c:	3401      	adds	r4, #1
 800f34e:	9305      	str	r3, [sp, #20]
 800f350:	4619      	mov	r1, r3
 800f352:	f04f 0c0a 	mov.w	ip, #10
 800f356:	4620      	mov	r0, r4
 800f358:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f35c:	3a30      	subs	r2, #48	@ 0x30
 800f35e:	2a09      	cmp	r2, #9
 800f360:	d903      	bls.n	800f36a <_svfiprintf_r+0x1a6>
 800f362:	2b00      	cmp	r3, #0
 800f364:	d0c6      	beq.n	800f2f4 <_svfiprintf_r+0x130>
 800f366:	9105      	str	r1, [sp, #20]
 800f368:	e7c4      	b.n	800f2f4 <_svfiprintf_r+0x130>
 800f36a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f36e:	4604      	mov	r4, r0
 800f370:	2301      	movs	r3, #1
 800f372:	e7f0      	b.n	800f356 <_svfiprintf_r+0x192>
 800f374:	ab03      	add	r3, sp, #12
 800f376:	9300      	str	r3, [sp, #0]
 800f378:	462a      	mov	r2, r5
 800f37a:	4b0e      	ldr	r3, [pc, #56]	@ (800f3b4 <_svfiprintf_r+0x1f0>)
 800f37c:	a904      	add	r1, sp, #16
 800f37e:	4638      	mov	r0, r7
 800f380:	f7fd fe5a 	bl	800d038 <_printf_float>
 800f384:	1c42      	adds	r2, r0, #1
 800f386:	4606      	mov	r6, r0
 800f388:	d1d6      	bne.n	800f338 <_svfiprintf_r+0x174>
 800f38a:	89ab      	ldrh	r3, [r5, #12]
 800f38c:	065b      	lsls	r3, r3, #25
 800f38e:	f53f af2d 	bmi.w	800f1ec <_svfiprintf_r+0x28>
 800f392:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f394:	e72c      	b.n	800f1f0 <_svfiprintf_r+0x2c>
 800f396:	ab03      	add	r3, sp, #12
 800f398:	9300      	str	r3, [sp, #0]
 800f39a:	462a      	mov	r2, r5
 800f39c:	4b05      	ldr	r3, [pc, #20]	@ (800f3b4 <_svfiprintf_r+0x1f0>)
 800f39e:	a904      	add	r1, sp, #16
 800f3a0:	4638      	mov	r0, r7
 800f3a2:	f7fe f8e1 	bl	800d568 <_printf_i>
 800f3a6:	e7ed      	b.n	800f384 <_svfiprintf_r+0x1c0>
 800f3a8:	080122c8 	.word	0x080122c8
 800f3ac:	080122d2 	.word	0x080122d2
 800f3b0:	0800d039 	.word	0x0800d039
 800f3b4:	0800f10d 	.word	0x0800f10d
 800f3b8:	080122ce 	.word	0x080122ce

0800f3bc <__sfputc_r>:
 800f3bc:	6893      	ldr	r3, [r2, #8]
 800f3be:	3b01      	subs	r3, #1
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	b410      	push	{r4}
 800f3c4:	6093      	str	r3, [r2, #8]
 800f3c6:	da08      	bge.n	800f3da <__sfputc_r+0x1e>
 800f3c8:	6994      	ldr	r4, [r2, #24]
 800f3ca:	42a3      	cmp	r3, r4
 800f3cc:	db01      	blt.n	800f3d2 <__sfputc_r+0x16>
 800f3ce:	290a      	cmp	r1, #10
 800f3d0:	d103      	bne.n	800f3da <__sfputc_r+0x1e>
 800f3d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3d6:	f7fe bb90 	b.w	800dafa <__swbuf_r>
 800f3da:	6813      	ldr	r3, [r2, #0]
 800f3dc:	1c58      	adds	r0, r3, #1
 800f3de:	6010      	str	r0, [r2, #0]
 800f3e0:	7019      	strb	r1, [r3, #0]
 800f3e2:	4608      	mov	r0, r1
 800f3e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3e8:	4770      	bx	lr

0800f3ea <__sfputs_r>:
 800f3ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ec:	4606      	mov	r6, r0
 800f3ee:	460f      	mov	r7, r1
 800f3f0:	4614      	mov	r4, r2
 800f3f2:	18d5      	adds	r5, r2, r3
 800f3f4:	42ac      	cmp	r4, r5
 800f3f6:	d101      	bne.n	800f3fc <__sfputs_r+0x12>
 800f3f8:	2000      	movs	r0, #0
 800f3fa:	e007      	b.n	800f40c <__sfputs_r+0x22>
 800f3fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f400:	463a      	mov	r2, r7
 800f402:	4630      	mov	r0, r6
 800f404:	f7ff ffda 	bl	800f3bc <__sfputc_r>
 800f408:	1c43      	adds	r3, r0, #1
 800f40a:	d1f3      	bne.n	800f3f4 <__sfputs_r+0xa>
 800f40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f410 <_vfiprintf_r>:
 800f410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f414:	460d      	mov	r5, r1
 800f416:	b09d      	sub	sp, #116	@ 0x74
 800f418:	4614      	mov	r4, r2
 800f41a:	4698      	mov	r8, r3
 800f41c:	4606      	mov	r6, r0
 800f41e:	b118      	cbz	r0, 800f428 <_vfiprintf_r+0x18>
 800f420:	6a03      	ldr	r3, [r0, #32]
 800f422:	b90b      	cbnz	r3, 800f428 <_vfiprintf_r+0x18>
 800f424:	f7fe fa4c 	bl	800d8c0 <__sinit>
 800f428:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f42a:	07d9      	lsls	r1, r3, #31
 800f42c:	d405      	bmi.n	800f43a <_vfiprintf_r+0x2a>
 800f42e:	89ab      	ldrh	r3, [r5, #12]
 800f430:	059a      	lsls	r2, r3, #22
 800f432:	d402      	bmi.n	800f43a <_vfiprintf_r+0x2a>
 800f434:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f436:	f7fe fc82 	bl	800dd3e <__retarget_lock_acquire_recursive>
 800f43a:	89ab      	ldrh	r3, [r5, #12]
 800f43c:	071b      	lsls	r3, r3, #28
 800f43e:	d501      	bpl.n	800f444 <_vfiprintf_r+0x34>
 800f440:	692b      	ldr	r3, [r5, #16]
 800f442:	b99b      	cbnz	r3, 800f46c <_vfiprintf_r+0x5c>
 800f444:	4629      	mov	r1, r5
 800f446:	4630      	mov	r0, r6
 800f448:	f7fe fb96 	bl	800db78 <__swsetup_r>
 800f44c:	b170      	cbz	r0, 800f46c <_vfiprintf_r+0x5c>
 800f44e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f450:	07dc      	lsls	r4, r3, #31
 800f452:	d504      	bpl.n	800f45e <_vfiprintf_r+0x4e>
 800f454:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f458:	b01d      	add	sp, #116	@ 0x74
 800f45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f45e:	89ab      	ldrh	r3, [r5, #12]
 800f460:	0598      	lsls	r0, r3, #22
 800f462:	d4f7      	bmi.n	800f454 <_vfiprintf_r+0x44>
 800f464:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f466:	f7fe fc6b 	bl	800dd40 <__retarget_lock_release_recursive>
 800f46a:	e7f3      	b.n	800f454 <_vfiprintf_r+0x44>
 800f46c:	2300      	movs	r3, #0
 800f46e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f470:	2320      	movs	r3, #32
 800f472:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f476:	f8cd 800c 	str.w	r8, [sp, #12]
 800f47a:	2330      	movs	r3, #48	@ 0x30
 800f47c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f62c <_vfiprintf_r+0x21c>
 800f480:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f484:	f04f 0901 	mov.w	r9, #1
 800f488:	4623      	mov	r3, r4
 800f48a:	469a      	mov	sl, r3
 800f48c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f490:	b10a      	cbz	r2, 800f496 <_vfiprintf_r+0x86>
 800f492:	2a25      	cmp	r2, #37	@ 0x25
 800f494:	d1f9      	bne.n	800f48a <_vfiprintf_r+0x7a>
 800f496:	ebba 0b04 	subs.w	fp, sl, r4
 800f49a:	d00b      	beq.n	800f4b4 <_vfiprintf_r+0xa4>
 800f49c:	465b      	mov	r3, fp
 800f49e:	4622      	mov	r2, r4
 800f4a0:	4629      	mov	r1, r5
 800f4a2:	4630      	mov	r0, r6
 800f4a4:	f7ff ffa1 	bl	800f3ea <__sfputs_r>
 800f4a8:	3001      	adds	r0, #1
 800f4aa:	f000 80a7 	beq.w	800f5fc <_vfiprintf_r+0x1ec>
 800f4ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f4b0:	445a      	add	r2, fp
 800f4b2:	9209      	str	r2, [sp, #36]	@ 0x24
 800f4b4:	f89a 3000 	ldrb.w	r3, [sl]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	f000 809f 	beq.w	800f5fc <_vfiprintf_r+0x1ec>
 800f4be:	2300      	movs	r3, #0
 800f4c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f4c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4c8:	f10a 0a01 	add.w	sl, sl, #1
 800f4cc:	9304      	str	r3, [sp, #16]
 800f4ce:	9307      	str	r3, [sp, #28]
 800f4d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f4d4:	931a      	str	r3, [sp, #104]	@ 0x68
 800f4d6:	4654      	mov	r4, sl
 800f4d8:	2205      	movs	r2, #5
 800f4da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4de:	4853      	ldr	r0, [pc, #332]	@ (800f62c <_vfiprintf_r+0x21c>)
 800f4e0:	f7f0 fe96 	bl	8000210 <memchr>
 800f4e4:	9a04      	ldr	r2, [sp, #16]
 800f4e6:	b9d8      	cbnz	r0, 800f520 <_vfiprintf_r+0x110>
 800f4e8:	06d1      	lsls	r1, r2, #27
 800f4ea:	bf44      	itt	mi
 800f4ec:	2320      	movmi	r3, #32
 800f4ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f4f2:	0713      	lsls	r3, r2, #28
 800f4f4:	bf44      	itt	mi
 800f4f6:	232b      	movmi	r3, #43	@ 0x2b
 800f4f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f4fc:	f89a 3000 	ldrb.w	r3, [sl]
 800f500:	2b2a      	cmp	r3, #42	@ 0x2a
 800f502:	d015      	beq.n	800f530 <_vfiprintf_r+0x120>
 800f504:	9a07      	ldr	r2, [sp, #28]
 800f506:	4654      	mov	r4, sl
 800f508:	2000      	movs	r0, #0
 800f50a:	f04f 0c0a 	mov.w	ip, #10
 800f50e:	4621      	mov	r1, r4
 800f510:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f514:	3b30      	subs	r3, #48	@ 0x30
 800f516:	2b09      	cmp	r3, #9
 800f518:	d94b      	bls.n	800f5b2 <_vfiprintf_r+0x1a2>
 800f51a:	b1b0      	cbz	r0, 800f54a <_vfiprintf_r+0x13a>
 800f51c:	9207      	str	r2, [sp, #28]
 800f51e:	e014      	b.n	800f54a <_vfiprintf_r+0x13a>
 800f520:	eba0 0308 	sub.w	r3, r0, r8
 800f524:	fa09 f303 	lsl.w	r3, r9, r3
 800f528:	4313      	orrs	r3, r2
 800f52a:	9304      	str	r3, [sp, #16]
 800f52c:	46a2      	mov	sl, r4
 800f52e:	e7d2      	b.n	800f4d6 <_vfiprintf_r+0xc6>
 800f530:	9b03      	ldr	r3, [sp, #12]
 800f532:	1d19      	adds	r1, r3, #4
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	9103      	str	r1, [sp, #12]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	bfbb      	ittet	lt
 800f53c:	425b      	neglt	r3, r3
 800f53e:	f042 0202 	orrlt.w	r2, r2, #2
 800f542:	9307      	strge	r3, [sp, #28]
 800f544:	9307      	strlt	r3, [sp, #28]
 800f546:	bfb8      	it	lt
 800f548:	9204      	strlt	r2, [sp, #16]
 800f54a:	7823      	ldrb	r3, [r4, #0]
 800f54c:	2b2e      	cmp	r3, #46	@ 0x2e
 800f54e:	d10a      	bne.n	800f566 <_vfiprintf_r+0x156>
 800f550:	7863      	ldrb	r3, [r4, #1]
 800f552:	2b2a      	cmp	r3, #42	@ 0x2a
 800f554:	d132      	bne.n	800f5bc <_vfiprintf_r+0x1ac>
 800f556:	9b03      	ldr	r3, [sp, #12]
 800f558:	1d1a      	adds	r2, r3, #4
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	9203      	str	r2, [sp, #12]
 800f55e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f562:	3402      	adds	r4, #2
 800f564:	9305      	str	r3, [sp, #20]
 800f566:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f63c <_vfiprintf_r+0x22c>
 800f56a:	7821      	ldrb	r1, [r4, #0]
 800f56c:	2203      	movs	r2, #3
 800f56e:	4650      	mov	r0, sl
 800f570:	f7f0 fe4e 	bl	8000210 <memchr>
 800f574:	b138      	cbz	r0, 800f586 <_vfiprintf_r+0x176>
 800f576:	9b04      	ldr	r3, [sp, #16]
 800f578:	eba0 000a 	sub.w	r0, r0, sl
 800f57c:	2240      	movs	r2, #64	@ 0x40
 800f57e:	4082      	lsls	r2, r0
 800f580:	4313      	orrs	r3, r2
 800f582:	3401      	adds	r4, #1
 800f584:	9304      	str	r3, [sp, #16]
 800f586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f58a:	4829      	ldr	r0, [pc, #164]	@ (800f630 <_vfiprintf_r+0x220>)
 800f58c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f590:	2206      	movs	r2, #6
 800f592:	f7f0 fe3d 	bl	8000210 <memchr>
 800f596:	2800      	cmp	r0, #0
 800f598:	d03f      	beq.n	800f61a <_vfiprintf_r+0x20a>
 800f59a:	4b26      	ldr	r3, [pc, #152]	@ (800f634 <_vfiprintf_r+0x224>)
 800f59c:	bb1b      	cbnz	r3, 800f5e6 <_vfiprintf_r+0x1d6>
 800f59e:	9b03      	ldr	r3, [sp, #12]
 800f5a0:	3307      	adds	r3, #7
 800f5a2:	f023 0307 	bic.w	r3, r3, #7
 800f5a6:	3308      	adds	r3, #8
 800f5a8:	9303      	str	r3, [sp, #12]
 800f5aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5ac:	443b      	add	r3, r7
 800f5ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5b0:	e76a      	b.n	800f488 <_vfiprintf_r+0x78>
 800f5b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f5b6:	460c      	mov	r4, r1
 800f5b8:	2001      	movs	r0, #1
 800f5ba:	e7a8      	b.n	800f50e <_vfiprintf_r+0xfe>
 800f5bc:	2300      	movs	r3, #0
 800f5be:	3401      	adds	r4, #1
 800f5c0:	9305      	str	r3, [sp, #20]
 800f5c2:	4619      	mov	r1, r3
 800f5c4:	f04f 0c0a 	mov.w	ip, #10
 800f5c8:	4620      	mov	r0, r4
 800f5ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5ce:	3a30      	subs	r2, #48	@ 0x30
 800f5d0:	2a09      	cmp	r2, #9
 800f5d2:	d903      	bls.n	800f5dc <_vfiprintf_r+0x1cc>
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d0c6      	beq.n	800f566 <_vfiprintf_r+0x156>
 800f5d8:	9105      	str	r1, [sp, #20]
 800f5da:	e7c4      	b.n	800f566 <_vfiprintf_r+0x156>
 800f5dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800f5e0:	4604      	mov	r4, r0
 800f5e2:	2301      	movs	r3, #1
 800f5e4:	e7f0      	b.n	800f5c8 <_vfiprintf_r+0x1b8>
 800f5e6:	ab03      	add	r3, sp, #12
 800f5e8:	9300      	str	r3, [sp, #0]
 800f5ea:	462a      	mov	r2, r5
 800f5ec:	4b12      	ldr	r3, [pc, #72]	@ (800f638 <_vfiprintf_r+0x228>)
 800f5ee:	a904      	add	r1, sp, #16
 800f5f0:	4630      	mov	r0, r6
 800f5f2:	f7fd fd21 	bl	800d038 <_printf_float>
 800f5f6:	4607      	mov	r7, r0
 800f5f8:	1c78      	adds	r0, r7, #1
 800f5fa:	d1d6      	bne.n	800f5aa <_vfiprintf_r+0x19a>
 800f5fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f5fe:	07d9      	lsls	r1, r3, #31
 800f600:	d405      	bmi.n	800f60e <_vfiprintf_r+0x1fe>
 800f602:	89ab      	ldrh	r3, [r5, #12]
 800f604:	059a      	lsls	r2, r3, #22
 800f606:	d402      	bmi.n	800f60e <_vfiprintf_r+0x1fe>
 800f608:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f60a:	f7fe fb99 	bl	800dd40 <__retarget_lock_release_recursive>
 800f60e:	89ab      	ldrh	r3, [r5, #12]
 800f610:	065b      	lsls	r3, r3, #25
 800f612:	f53f af1f 	bmi.w	800f454 <_vfiprintf_r+0x44>
 800f616:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f618:	e71e      	b.n	800f458 <_vfiprintf_r+0x48>
 800f61a:	ab03      	add	r3, sp, #12
 800f61c:	9300      	str	r3, [sp, #0]
 800f61e:	462a      	mov	r2, r5
 800f620:	4b05      	ldr	r3, [pc, #20]	@ (800f638 <_vfiprintf_r+0x228>)
 800f622:	a904      	add	r1, sp, #16
 800f624:	4630      	mov	r0, r6
 800f626:	f7fd ff9f 	bl	800d568 <_printf_i>
 800f62a:	e7e4      	b.n	800f5f6 <_vfiprintf_r+0x1e6>
 800f62c:	080122c8 	.word	0x080122c8
 800f630:	080122d2 	.word	0x080122d2
 800f634:	0800d039 	.word	0x0800d039
 800f638:	0800f3eb 	.word	0x0800f3eb
 800f63c:	080122ce 	.word	0x080122ce

0800f640 <__sflush_r>:
 800f640:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f648:	0716      	lsls	r6, r2, #28
 800f64a:	4605      	mov	r5, r0
 800f64c:	460c      	mov	r4, r1
 800f64e:	d454      	bmi.n	800f6fa <__sflush_r+0xba>
 800f650:	684b      	ldr	r3, [r1, #4]
 800f652:	2b00      	cmp	r3, #0
 800f654:	dc02      	bgt.n	800f65c <__sflush_r+0x1c>
 800f656:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f658:	2b00      	cmp	r3, #0
 800f65a:	dd48      	ble.n	800f6ee <__sflush_r+0xae>
 800f65c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f65e:	2e00      	cmp	r6, #0
 800f660:	d045      	beq.n	800f6ee <__sflush_r+0xae>
 800f662:	2300      	movs	r3, #0
 800f664:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f668:	682f      	ldr	r7, [r5, #0]
 800f66a:	6a21      	ldr	r1, [r4, #32]
 800f66c:	602b      	str	r3, [r5, #0]
 800f66e:	d030      	beq.n	800f6d2 <__sflush_r+0x92>
 800f670:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f672:	89a3      	ldrh	r3, [r4, #12]
 800f674:	0759      	lsls	r1, r3, #29
 800f676:	d505      	bpl.n	800f684 <__sflush_r+0x44>
 800f678:	6863      	ldr	r3, [r4, #4]
 800f67a:	1ad2      	subs	r2, r2, r3
 800f67c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f67e:	b10b      	cbz	r3, 800f684 <__sflush_r+0x44>
 800f680:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f682:	1ad2      	subs	r2, r2, r3
 800f684:	2300      	movs	r3, #0
 800f686:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f688:	6a21      	ldr	r1, [r4, #32]
 800f68a:	4628      	mov	r0, r5
 800f68c:	47b0      	blx	r6
 800f68e:	1c43      	adds	r3, r0, #1
 800f690:	89a3      	ldrh	r3, [r4, #12]
 800f692:	d106      	bne.n	800f6a2 <__sflush_r+0x62>
 800f694:	6829      	ldr	r1, [r5, #0]
 800f696:	291d      	cmp	r1, #29
 800f698:	d82b      	bhi.n	800f6f2 <__sflush_r+0xb2>
 800f69a:	4a2a      	ldr	r2, [pc, #168]	@ (800f744 <__sflush_r+0x104>)
 800f69c:	410a      	asrs	r2, r1
 800f69e:	07d6      	lsls	r6, r2, #31
 800f6a0:	d427      	bmi.n	800f6f2 <__sflush_r+0xb2>
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	6062      	str	r2, [r4, #4]
 800f6a6:	04d9      	lsls	r1, r3, #19
 800f6a8:	6922      	ldr	r2, [r4, #16]
 800f6aa:	6022      	str	r2, [r4, #0]
 800f6ac:	d504      	bpl.n	800f6b8 <__sflush_r+0x78>
 800f6ae:	1c42      	adds	r2, r0, #1
 800f6b0:	d101      	bne.n	800f6b6 <__sflush_r+0x76>
 800f6b2:	682b      	ldr	r3, [r5, #0]
 800f6b4:	b903      	cbnz	r3, 800f6b8 <__sflush_r+0x78>
 800f6b6:	6560      	str	r0, [r4, #84]	@ 0x54
 800f6b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f6ba:	602f      	str	r7, [r5, #0]
 800f6bc:	b1b9      	cbz	r1, 800f6ee <__sflush_r+0xae>
 800f6be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f6c2:	4299      	cmp	r1, r3
 800f6c4:	d002      	beq.n	800f6cc <__sflush_r+0x8c>
 800f6c6:	4628      	mov	r0, r5
 800f6c8:	f7fd fb1e 	bl	800cd08 <_free_r>
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	6363      	str	r3, [r4, #52]	@ 0x34
 800f6d0:	e00d      	b.n	800f6ee <__sflush_r+0xae>
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	4628      	mov	r0, r5
 800f6d6:	47b0      	blx	r6
 800f6d8:	4602      	mov	r2, r0
 800f6da:	1c50      	adds	r0, r2, #1
 800f6dc:	d1c9      	bne.n	800f672 <__sflush_r+0x32>
 800f6de:	682b      	ldr	r3, [r5, #0]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d0c6      	beq.n	800f672 <__sflush_r+0x32>
 800f6e4:	2b1d      	cmp	r3, #29
 800f6e6:	d001      	beq.n	800f6ec <__sflush_r+0xac>
 800f6e8:	2b16      	cmp	r3, #22
 800f6ea:	d11e      	bne.n	800f72a <__sflush_r+0xea>
 800f6ec:	602f      	str	r7, [r5, #0]
 800f6ee:	2000      	movs	r0, #0
 800f6f0:	e022      	b.n	800f738 <__sflush_r+0xf8>
 800f6f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f6f6:	b21b      	sxth	r3, r3
 800f6f8:	e01b      	b.n	800f732 <__sflush_r+0xf2>
 800f6fa:	690f      	ldr	r7, [r1, #16]
 800f6fc:	2f00      	cmp	r7, #0
 800f6fe:	d0f6      	beq.n	800f6ee <__sflush_r+0xae>
 800f700:	0793      	lsls	r3, r2, #30
 800f702:	680e      	ldr	r6, [r1, #0]
 800f704:	bf08      	it	eq
 800f706:	694b      	ldreq	r3, [r1, #20]
 800f708:	600f      	str	r7, [r1, #0]
 800f70a:	bf18      	it	ne
 800f70c:	2300      	movne	r3, #0
 800f70e:	eba6 0807 	sub.w	r8, r6, r7
 800f712:	608b      	str	r3, [r1, #8]
 800f714:	f1b8 0f00 	cmp.w	r8, #0
 800f718:	dde9      	ble.n	800f6ee <__sflush_r+0xae>
 800f71a:	6a21      	ldr	r1, [r4, #32]
 800f71c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f71e:	4643      	mov	r3, r8
 800f720:	463a      	mov	r2, r7
 800f722:	4628      	mov	r0, r5
 800f724:	47b0      	blx	r6
 800f726:	2800      	cmp	r0, #0
 800f728:	dc08      	bgt.n	800f73c <__sflush_r+0xfc>
 800f72a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f72e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f732:	81a3      	strh	r3, [r4, #12]
 800f734:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f73c:	4407      	add	r7, r0
 800f73e:	eba8 0800 	sub.w	r8, r8, r0
 800f742:	e7e7      	b.n	800f714 <__sflush_r+0xd4>
 800f744:	dfbffffe 	.word	0xdfbffffe

0800f748 <_fflush_r>:
 800f748:	b538      	push	{r3, r4, r5, lr}
 800f74a:	690b      	ldr	r3, [r1, #16]
 800f74c:	4605      	mov	r5, r0
 800f74e:	460c      	mov	r4, r1
 800f750:	b913      	cbnz	r3, 800f758 <_fflush_r+0x10>
 800f752:	2500      	movs	r5, #0
 800f754:	4628      	mov	r0, r5
 800f756:	bd38      	pop	{r3, r4, r5, pc}
 800f758:	b118      	cbz	r0, 800f762 <_fflush_r+0x1a>
 800f75a:	6a03      	ldr	r3, [r0, #32]
 800f75c:	b90b      	cbnz	r3, 800f762 <_fflush_r+0x1a>
 800f75e:	f7fe f8af 	bl	800d8c0 <__sinit>
 800f762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d0f3      	beq.n	800f752 <_fflush_r+0xa>
 800f76a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f76c:	07d0      	lsls	r0, r2, #31
 800f76e:	d404      	bmi.n	800f77a <_fflush_r+0x32>
 800f770:	0599      	lsls	r1, r3, #22
 800f772:	d402      	bmi.n	800f77a <_fflush_r+0x32>
 800f774:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f776:	f7fe fae2 	bl	800dd3e <__retarget_lock_acquire_recursive>
 800f77a:	4628      	mov	r0, r5
 800f77c:	4621      	mov	r1, r4
 800f77e:	f7ff ff5f 	bl	800f640 <__sflush_r>
 800f782:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f784:	07da      	lsls	r2, r3, #31
 800f786:	4605      	mov	r5, r0
 800f788:	d4e4      	bmi.n	800f754 <_fflush_r+0xc>
 800f78a:	89a3      	ldrh	r3, [r4, #12]
 800f78c:	059b      	lsls	r3, r3, #22
 800f78e:	d4e1      	bmi.n	800f754 <_fflush_r+0xc>
 800f790:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f792:	f7fe fad5 	bl	800dd40 <__retarget_lock_release_recursive>
 800f796:	e7dd      	b.n	800f754 <_fflush_r+0xc>

0800f798 <__swhatbuf_r>:
 800f798:	b570      	push	{r4, r5, r6, lr}
 800f79a:	460c      	mov	r4, r1
 800f79c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7a0:	2900      	cmp	r1, #0
 800f7a2:	b096      	sub	sp, #88	@ 0x58
 800f7a4:	4615      	mov	r5, r2
 800f7a6:	461e      	mov	r6, r3
 800f7a8:	da0d      	bge.n	800f7c6 <__swhatbuf_r+0x2e>
 800f7aa:	89a3      	ldrh	r3, [r4, #12]
 800f7ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f7b0:	f04f 0100 	mov.w	r1, #0
 800f7b4:	bf14      	ite	ne
 800f7b6:	2340      	movne	r3, #64	@ 0x40
 800f7b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f7bc:	2000      	movs	r0, #0
 800f7be:	6031      	str	r1, [r6, #0]
 800f7c0:	602b      	str	r3, [r5, #0]
 800f7c2:	b016      	add	sp, #88	@ 0x58
 800f7c4:	bd70      	pop	{r4, r5, r6, pc}
 800f7c6:	466a      	mov	r2, sp
 800f7c8:	f000 f862 	bl	800f890 <_fstat_r>
 800f7cc:	2800      	cmp	r0, #0
 800f7ce:	dbec      	blt.n	800f7aa <__swhatbuf_r+0x12>
 800f7d0:	9901      	ldr	r1, [sp, #4]
 800f7d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f7d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f7da:	4259      	negs	r1, r3
 800f7dc:	4159      	adcs	r1, r3
 800f7de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f7e2:	e7eb      	b.n	800f7bc <__swhatbuf_r+0x24>

0800f7e4 <__smakebuf_r>:
 800f7e4:	898b      	ldrh	r3, [r1, #12]
 800f7e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f7e8:	079d      	lsls	r5, r3, #30
 800f7ea:	4606      	mov	r6, r0
 800f7ec:	460c      	mov	r4, r1
 800f7ee:	d507      	bpl.n	800f800 <__smakebuf_r+0x1c>
 800f7f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f7f4:	6023      	str	r3, [r4, #0]
 800f7f6:	6123      	str	r3, [r4, #16]
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	6163      	str	r3, [r4, #20]
 800f7fc:	b003      	add	sp, #12
 800f7fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f800:	ab01      	add	r3, sp, #4
 800f802:	466a      	mov	r2, sp
 800f804:	f7ff ffc8 	bl	800f798 <__swhatbuf_r>
 800f808:	9f00      	ldr	r7, [sp, #0]
 800f80a:	4605      	mov	r5, r0
 800f80c:	4639      	mov	r1, r7
 800f80e:	4630      	mov	r0, r6
 800f810:	f7fd fae6 	bl	800cde0 <_malloc_r>
 800f814:	b948      	cbnz	r0, 800f82a <__smakebuf_r+0x46>
 800f816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f81a:	059a      	lsls	r2, r3, #22
 800f81c:	d4ee      	bmi.n	800f7fc <__smakebuf_r+0x18>
 800f81e:	f023 0303 	bic.w	r3, r3, #3
 800f822:	f043 0302 	orr.w	r3, r3, #2
 800f826:	81a3      	strh	r3, [r4, #12]
 800f828:	e7e2      	b.n	800f7f0 <__smakebuf_r+0xc>
 800f82a:	89a3      	ldrh	r3, [r4, #12]
 800f82c:	6020      	str	r0, [r4, #0]
 800f82e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f832:	81a3      	strh	r3, [r4, #12]
 800f834:	9b01      	ldr	r3, [sp, #4]
 800f836:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f83a:	b15b      	cbz	r3, 800f854 <__smakebuf_r+0x70>
 800f83c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f840:	4630      	mov	r0, r6
 800f842:	f000 f837 	bl	800f8b4 <_isatty_r>
 800f846:	b128      	cbz	r0, 800f854 <__smakebuf_r+0x70>
 800f848:	89a3      	ldrh	r3, [r4, #12]
 800f84a:	f023 0303 	bic.w	r3, r3, #3
 800f84e:	f043 0301 	orr.w	r3, r3, #1
 800f852:	81a3      	strh	r3, [r4, #12]
 800f854:	89a3      	ldrh	r3, [r4, #12]
 800f856:	431d      	orrs	r5, r3
 800f858:	81a5      	strh	r5, [r4, #12]
 800f85a:	e7cf      	b.n	800f7fc <__smakebuf_r+0x18>

0800f85c <memmove>:
 800f85c:	4288      	cmp	r0, r1
 800f85e:	b510      	push	{r4, lr}
 800f860:	eb01 0402 	add.w	r4, r1, r2
 800f864:	d902      	bls.n	800f86c <memmove+0x10>
 800f866:	4284      	cmp	r4, r0
 800f868:	4623      	mov	r3, r4
 800f86a:	d807      	bhi.n	800f87c <memmove+0x20>
 800f86c:	1e43      	subs	r3, r0, #1
 800f86e:	42a1      	cmp	r1, r4
 800f870:	d008      	beq.n	800f884 <memmove+0x28>
 800f872:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f876:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f87a:	e7f8      	b.n	800f86e <memmove+0x12>
 800f87c:	4402      	add	r2, r0
 800f87e:	4601      	mov	r1, r0
 800f880:	428a      	cmp	r2, r1
 800f882:	d100      	bne.n	800f886 <memmove+0x2a>
 800f884:	bd10      	pop	{r4, pc}
 800f886:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f88a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f88e:	e7f7      	b.n	800f880 <memmove+0x24>

0800f890 <_fstat_r>:
 800f890:	b538      	push	{r3, r4, r5, lr}
 800f892:	4d07      	ldr	r5, [pc, #28]	@ (800f8b0 <_fstat_r+0x20>)
 800f894:	2300      	movs	r3, #0
 800f896:	4604      	mov	r4, r0
 800f898:	4608      	mov	r0, r1
 800f89a:	4611      	mov	r1, r2
 800f89c:	602b      	str	r3, [r5, #0]
 800f89e:	f7f4 fbe1 	bl	8004064 <_fstat>
 800f8a2:	1c43      	adds	r3, r0, #1
 800f8a4:	d102      	bne.n	800f8ac <_fstat_r+0x1c>
 800f8a6:	682b      	ldr	r3, [r5, #0]
 800f8a8:	b103      	cbz	r3, 800f8ac <_fstat_r+0x1c>
 800f8aa:	6023      	str	r3, [r4, #0]
 800f8ac:	bd38      	pop	{r3, r4, r5, pc}
 800f8ae:	bf00      	nop
 800f8b0:	2000b8a4 	.word	0x2000b8a4

0800f8b4 <_isatty_r>:
 800f8b4:	b538      	push	{r3, r4, r5, lr}
 800f8b6:	4d06      	ldr	r5, [pc, #24]	@ (800f8d0 <_isatty_r+0x1c>)
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	4604      	mov	r4, r0
 800f8bc:	4608      	mov	r0, r1
 800f8be:	602b      	str	r3, [r5, #0]
 800f8c0:	f7f4 fbe0 	bl	8004084 <_isatty>
 800f8c4:	1c43      	adds	r3, r0, #1
 800f8c6:	d102      	bne.n	800f8ce <_isatty_r+0x1a>
 800f8c8:	682b      	ldr	r3, [r5, #0]
 800f8ca:	b103      	cbz	r3, 800f8ce <_isatty_r+0x1a>
 800f8cc:	6023      	str	r3, [r4, #0]
 800f8ce:	bd38      	pop	{r3, r4, r5, pc}
 800f8d0:	2000b8a4 	.word	0x2000b8a4

0800f8d4 <__assert_func>:
 800f8d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f8d6:	4614      	mov	r4, r2
 800f8d8:	461a      	mov	r2, r3
 800f8da:	4b09      	ldr	r3, [pc, #36]	@ (800f900 <__assert_func+0x2c>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	4605      	mov	r5, r0
 800f8e0:	68d8      	ldr	r0, [r3, #12]
 800f8e2:	b954      	cbnz	r4, 800f8fa <__assert_func+0x26>
 800f8e4:	4b07      	ldr	r3, [pc, #28]	@ (800f904 <__assert_func+0x30>)
 800f8e6:	461c      	mov	r4, r3
 800f8e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f8ec:	9100      	str	r1, [sp, #0]
 800f8ee:	462b      	mov	r3, r5
 800f8f0:	4905      	ldr	r1, [pc, #20]	@ (800f908 <__assert_func+0x34>)
 800f8f2:	f000 f86f 	bl	800f9d4 <fiprintf>
 800f8f6:	f000 f87f 	bl	800f9f8 <abort>
 800f8fa:	4b04      	ldr	r3, [pc, #16]	@ (800f90c <__assert_func+0x38>)
 800f8fc:	e7f4      	b.n	800f8e8 <__assert_func+0x14>
 800f8fe:	bf00      	nop
 800f900:	2000001c 	.word	0x2000001c
 800f904:	0801231e 	.word	0x0801231e
 800f908:	080122f0 	.word	0x080122f0
 800f90c:	080122e3 	.word	0x080122e3

0800f910 <_calloc_r>:
 800f910:	b570      	push	{r4, r5, r6, lr}
 800f912:	fba1 5402 	umull	r5, r4, r1, r2
 800f916:	b93c      	cbnz	r4, 800f928 <_calloc_r+0x18>
 800f918:	4629      	mov	r1, r5
 800f91a:	f7fd fa61 	bl	800cde0 <_malloc_r>
 800f91e:	4606      	mov	r6, r0
 800f920:	b928      	cbnz	r0, 800f92e <_calloc_r+0x1e>
 800f922:	2600      	movs	r6, #0
 800f924:	4630      	mov	r0, r6
 800f926:	bd70      	pop	{r4, r5, r6, pc}
 800f928:	220c      	movs	r2, #12
 800f92a:	6002      	str	r2, [r0, #0]
 800f92c:	e7f9      	b.n	800f922 <_calloc_r+0x12>
 800f92e:	462a      	mov	r2, r5
 800f930:	4621      	mov	r1, r4
 800f932:	f7fe f977 	bl	800dc24 <memset>
 800f936:	e7f5      	b.n	800f924 <_calloc_r+0x14>

0800f938 <__ascii_mbtowc>:
 800f938:	b082      	sub	sp, #8
 800f93a:	b901      	cbnz	r1, 800f93e <__ascii_mbtowc+0x6>
 800f93c:	a901      	add	r1, sp, #4
 800f93e:	b142      	cbz	r2, 800f952 <__ascii_mbtowc+0x1a>
 800f940:	b14b      	cbz	r3, 800f956 <__ascii_mbtowc+0x1e>
 800f942:	7813      	ldrb	r3, [r2, #0]
 800f944:	600b      	str	r3, [r1, #0]
 800f946:	7812      	ldrb	r2, [r2, #0]
 800f948:	1e10      	subs	r0, r2, #0
 800f94a:	bf18      	it	ne
 800f94c:	2001      	movne	r0, #1
 800f94e:	b002      	add	sp, #8
 800f950:	4770      	bx	lr
 800f952:	4610      	mov	r0, r2
 800f954:	e7fb      	b.n	800f94e <__ascii_mbtowc+0x16>
 800f956:	f06f 0001 	mvn.w	r0, #1
 800f95a:	e7f8      	b.n	800f94e <__ascii_mbtowc+0x16>

0800f95c <_realloc_r>:
 800f95c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f960:	4680      	mov	r8, r0
 800f962:	4615      	mov	r5, r2
 800f964:	460c      	mov	r4, r1
 800f966:	b921      	cbnz	r1, 800f972 <_realloc_r+0x16>
 800f968:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f96c:	4611      	mov	r1, r2
 800f96e:	f7fd ba37 	b.w	800cde0 <_malloc_r>
 800f972:	b92a      	cbnz	r2, 800f980 <_realloc_r+0x24>
 800f974:	f7fd f9c8 	bl	800cd08 <_free_r>
 800f978:	2400      	movs	r4, #0
 800f97a:	4620      	mov	r0, r4
 800f97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f980:	f000 f841 	bl	800fa06 <_malloc_usable_size_r>
 800f984:	4285      	cmp	r5, r0
 800f986:	4606      	mov	r6, r0
 800f988:	d802      	bhi.n	800f990 <_realloc_r+0x34>
 800f98a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f98e:	d8f4      	bhi.n	800f97a <_realloc_r+0x1e>
 800f990:	4629      	mov	r1, r5
 800f992:	4640      	mov	r0, r8
 800f994:	f7fd fa24 	bl	800cde0 <_malloc_r>
 800f998:	4607      	mov	r7, r0
 800f99a:	2800      	cmp	r0, #0
 800f99c:	d0ec      	beq.n	800f978 <_realloc_r+0x1c>
 800f99e:	42b5      	cmp	r5, r6
 800f9a0:	462a      	mov	r2, r5
 800f9a2:	4621      	mov	r1, r4
 800f9a4:	bf28      	it	cs
 800f9a6:	4632      	movcs	r2, r6
 800f9a8:	f7fe f9cb 	bl	800dd42 <memcpy>
 800f9ac:	4621      	mov	r1, r4
 800f9ae:	4640      	mov	r0, r8
 800f9b0:	f7fd f9aa 	bl	800cd08 <_free_r>
 800f9b4:	463c      	mov	r4, r7
 800f9b6:	e7e0      	b.n	800f97a <_realloc_r+0x1e>

0800f9b8 <__ascii_wctomb>:
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	4608      	mov	r0, r1
 800f9bc:	b141      	cbz	r1, 800f9d0 <__ascii_wctomb+0x18>
 800f9be:	2aff      	cmp	r2, #255	@ 0xff
 800f9c0:	d904      	bls.n	800f9cc <__ascii_wctomb+0x14>
 800f9c2:	228a      	movs	r2, #138	@ 0x8a
 800f9c4:	601a      	str	r2, [r3, #0]
 800f9c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f9ca:	4770      	bx	lr
 800f9cc:	700a      	strb	r2, [r1, #0]
 800f9ce:	2001      	movs	r0, #1
 800f9d0:	4770      	bx	lr
	...

0800f9d4 <fiprintf>:
 800f9d4:	b40e      	push	{r1, r2, r3}
 800f9d6:	b503      	push	{r0, r1, lr}
 800f9d8:	4601      	mov	r1, r0
 800f9da:	ab03      	add	r3, sp, #12
 800f9dc:	4805      	ldr	r0, [pc, #20]	@ (800f9f4 <fiprintf+0x20>)
 800f9de:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9e2:	6800      	ldr	r0, [r0, #0]
 800f9e4:	9301      	str	r3, [sp, #4]
 800f9e6:	f7ff fd13 	bl	800f410 <_vfiprintf_r>
 800f9ea:	b002      	add	sp, #8
 800f9ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800f9f0:	b003      	add	sp, #12
 800f9f2:	4770      	bx	lr
 800f9f4:	2000001c 	.word	0x2000001c

0800f9f8 <abort>:
 800f9f8:	b508      	push	{r3, lr}
 800f9fa:	2006      	movs	r0, #6
 800f9fc:	f000 f834 	bl	800fa68 <raise>
 800fa00:	2001      	movs	r0, #1
 800fa02:	f7f4 fafb 	bl	8003ffc <_exit>

0800fa06 <_malloc_usable_size_r>:
 800fa06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa0a:	1f18      	subs	r0, r3, #4
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	bfbc      	itt	lt
 800fa10:	580b      	ldrlt	r3, [r1, r0]
 800fa12:	18c0      	addlt	r0, r0, r3
 800fa14:	4770      	bx	lr

0800fa16 <_raise_r>:
 800fa16:	291f      	cmp	r1, #31
 800fa18:	b538      	push	{r3, r4, r5, lr}
 800fa1a:	4605      	mov	r5, r0
 800fa1c:	460c      	mov	r4, r1
 800fa1e:	d904      	bls.n	800fa2a <_raise_r+0x14>
 800fa20:	2316      	movs	r3, #22
 800fa22:	6003      	str	r3, [r0, #0]
 800fa24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fa28:	bd38      	pop	{r3, r4, r5, pc}
 800fa2a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fa2c:	b112      	cbz	r2, 800fa34 <_raise_r+0x1e>
 800fa2e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fa32:	b94b      	cbnz	r3, 800fa48 <_raise_r+0x32>
 800fa34:	4628      	mov	r0, r5
 800fa36:	f000 f831 	bl	800fa9c <_getpid_r>
 800fa3a:	4622      	mov	r2, r4
 800fa3c:	4601      	mov	r1, r0
 800fa3e:	4628      	mov	r0, r5
 800fa40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa44:	f000 b818 	b.w	800fa78 <_kill_r>
 800fa48:	2b01      	cmp	r3, #1
 800fa4a:	d00a      	beq.n	800fa62 <_raise_r+0x4c>
 800fa4c:	1c59      	adds	r1, r3, #1
 800fa4e:	d103      	bne.n	800fa58 <_raise_r+0x42>
 800fa50:	2316      	movs	r3, #22
 800fa52:	6003      	str	r3, [r0, #0]
 800fa54:	2001      	movs	r0, #1
 800fa56:	e7e7      	b.n	800fa28 <_raise_r+0x12>
 800fa58:	2100      	movs	r1, #0
 800fa5a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fa5e:	4620      	mov	r0, r4
 800fa60:	4798      	blx	r3
 800fa62:	2000      	movs	r0, #0
 800fa64:	e7e0      	b.n	800fa28 <_raise_r+0x12>
	...

0800fa68 <raise>:
 800fa68:	4b02      	ldr	r3, [pc, #8]	@ (800fa74 <raise+0xc>)
 800fa6a:	4601      	mov	r1, r0
 800fa6c:	6818      	ldr	r0, [r3, #0]
 800fa6e:	f7ff bfd2 	b.w	800fa16 <_raise_r>
 800fa72:	bf00      	nop
 800fa74:	2000001c 	.word	0x2000001c

0800fa78 <_kill_r>:
 800fa78:	b538      	push	{r3, r4, r5, lr}
 800fa7a:	4d07      	ldr	r5, [pc, #28]	@ (800fa98 <_kill_r+0x20>)
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	4604      	mov	r4, r0
 800fa80:	4608      	mov	r0, r1
 800fa82:	4611      	mov	r1, r2
 800fa84:	602b      	str	r3, [r5, #0]
 800fa86:	f7f4 faa9 	bl	8003fdc <_kill>
 800fa8a:	1c43      	adds	r3, r0, #1
 800fa8c:	d102      	bne.n	800fa94 <_kill_r+0x1c>
 800fa8e:	682b      	ldr	r3, [r5, #0]
 800fa90:	b103      	cbz	r3, 800fa94 <_kill_r+0x1c>
 800fa92:	6023      	str	r3, [r4, #0]
 800fa94:	bd38      	pop	{r3, r4, r5, pc}
 800fa96:	bf00      	nop
 800fa98:	2000b8a4 	.word	0x2000b8a4

0800fa9c <_getpid_r>:
 800fa9c:	f7f4 ba96 	b.w	8003fcc <_getpid>

0800faa0 <atan2>:
 800faa0:	f000 b9ca 	b.w	800fe38 <__ieee754_atan2>

0800faa4 <pow>:
 800faa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faa6:	ed2d 8b02 	vpush	{d8}
 800faaa:	eeb0 8a40 	vmov.f32	s16, s0
 800faae:	eef0 8a60 	vmov.f32	s17, s1
 800fab2:	ec55 4b11 	vmov	r4, r5, d1
 800fab6:	f000 fa87 	bl	800ffc8 <__ieee754_pow>
 800faba:	4622      	mov	r2, r4
 800fabc:	462b      	mov	r3, r5
 800fabe:	4620      	mov	r0, r4
 800fac0:	4629      	mov	r1, r5
 800fac2:	ec57 6b10 	vmov	r6, r7, d0
 800fac6:	f7f1 f851 	bl	8000b6c <__aeabi_dcmpun>
 800faca:	2800      	cmp	r0, #0
 800facc:	d13b      	bne.n	800fb46 <pow+0xa2>
 800face:	ec51 0b18 	vmov	r0, r1, d8
 800fad2:	2200      	movs	r2, #0
 800fad4:	2300      	movs	r3, #0
 800fad6:	f7f1 f817 	bl	8000b08 <__aeabi_dcmpeq>
 800fada:	b1b8      	cbz	r0, 800fb0c <pow+0x68>
 800fadc:	2200      	movs	r2, #0
 800fade:	2300      	movs	r3, #0
 800fae0:	4620      	mov	r0, r4
 800fae2:	4629      	mov	r1, r5
 800fae4:	f7f1 f810 	bl	8000b08 <__aeabi_dcmpeq>
 800fae8:	2800      	cmp	r0, #0
 800faea:	d146      	bne.n	800fb7a <pow+0xd6>
 800faec:	ec45 4b10 	vmov	d0, r4, r5
 800faf0:	f000 f8ba 	bl	800fc68 <finite>
 800faf4:	b338      	cbz	r0, 800fb46 <pow+0xa2>
 800faf6:	2200      	movs	r2, #0
 800faf8:	2300      	movs	r3, #0
 800fafa:	4620      	mov	r0, r4
 800fafc:	4629      	mov	r1, r5
 800fafe:	f7f1 f80d 	bl	8000b1c <__aeabi_dcmplt>
 800fb02:	b300      	cbz	r0, 800fb46 <pow+0xa2>
 800fb04:	f7fe f8f0 	bl	800dce8 <__errno>
 800fb08:	2322      	movs	r3, #34	@ 0x22
 800fb0a:	e01b      	b.n	800fb44 <pow+0xa0>
 800fb0c:	ec47 6b10 	vmov	d0, r6, r7
 800fb10:	f000 f8aa 	bl	800fc68 <finite>
 800fb14:	b9e0      	cbnz	r0, 800fb50 <pow+0xac>
 800fb16:	eeb0 0a48 	vmov.f32	s0, s16
 800fb1a:	eef0 0a68 	vmov.f32	s1, s17
 800fb1e:	f000 f8a3 	bl	800fc68 <finite>
 800fb22:	b1a8      	cbz	r0, 800fb50 <pow+0xac>
 800fb24:	ec45 4b10 	vmov	d0, r4, r5
 800fb28:	f000 f89e 	bl	800fc68 <finite>
 800fb2c:	b180      	cbz	r0, 800fb50 <pow+0xac>
 800fb2e:	4632      	mov	r2, r6
 800fb30:	463b      	mov	r3, r7
 800fb32:	4630      	mov	r0, r6
 800fb34:	4639      	mov	r1, r7
 800fb36:	f7f1 f819 	bl	8000b6c <__aeabi_dcmpun>
 800fb3a:	2800      	cmp	r0, #0
 800fb3c:	d0e2      	beq.n	800fb04 <pow+0x60>
 800fb3e:	f7fe f8d3 	bl	800dce8 <__errno>
 800fb42:	2321      	movs	r3, #33	@ 0x21
 800fb44:	6003      	str	r3, [r0, #0]
 800fb46:	ecbd 8b02 	vpop	{d8}
 800fb4a:	ec47 6b10 	vmov	d0, r6, r7
 800fb4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb50:	2200      	movs	r2, #0
 800fb52:	2300      	movs	r3, #0
 800fb54:	4630      	mov	r0, r6
 800fb56:	4639      	mov	r1, r7
 800fb58:	f7f0 ffd6 	bl	8000b08 <__aeabi_dcmpeq>
 800fb5c:	2800      	cmp	r0, #0
 800fb5e:	d0f2      	beq.n	800fb46 <pow+0xa2>
 800fb60:	eeb0 0a48 	vmov.f32	s0, s16
 800fb64:	eef0 0a68 	vmov.f32	s1, s17
 800fb68:	f000 f87e 	bl	800fc68 <finite>
 800fb6c:	2800      	cmp	r0, #0
 800fb6e:	d0ea      	beq.n	800fb46 <pow+0xa2>
 800fb70:	ec45 4b10 	vmov	d0, r4, r5
 800fb74:	f000 f878 	bl	800fc68 <finite>
 800fb78:	e7c3      	b.n	800fb02 <pow+0x5e>
 800fb7a:	4f01      	ldr	r7, [pc, #4]	@ (800fb80 <pow+0xdc>)
 800fb7c:	2600      	movs	r6, #0
 800fb7e:	e7e2      	b.n	800fb46 <pow+0xa2>
 800fb80:	3ff00000 	.word	0x3ff00000

0800fb84 <sqrt>:
 800fb84:	b538      	push	{r3, r4, r5, lr}
 800fb86:	ed2d 8b02 	vpush	{d8}
 800fb8a:	ec55 4b10 	vmov	r4, r5, d0
 800fb8e:	f000 f877 	bl	800fc80 <__ieee754_sqrt>
 800fb92:	4622      	mov	r2, r4
 800fb94:	462b      	mov	r3, r5
 800fb96:	4620      	mov	r0, r4
 800fb98:	4629      	mov	r1, r5
 800fb9a:	eeb0 8a40 	vmov.f32	s16, s0
 800fb9e:	eef0 8a60 	vmov.f32	s17, s1
 800fba2:	f7f0 ffe3 	bl	8000b6c <__aeabi_dcmpun>
 800fba6:	b990      	cbnz	r0, 800fbce <sqrt+0x4a>
 800fba8:	2200      	movs	r2, #0
 800fbaa:	2300      	movs	r3, #0
 800fbac:	4620      	mov	r0, r4
 800fbae:	4629      	mov	r1, r5
 800fbb0:	f7f0 ffb4 	bl	8000b1c <__aeabi_dcmplt>
 800fbb4:	b158      	cbz	r0, 800fbce <sqrt+0x4a>
 800fbb6:	f7fe f897 	bl	800dce8 <__errno>
 800fbba:	2321      	movs	r3, #33	@ 0x21
 800fbbc:	6003      	str	r3, [r0, #0]
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	4610      	mov	r0, r2
 800fbc4:	4619      	mov	r1, r3
 800fbc6:	f7f0 fe61 	bl	800088c <__aeabi_ddiv>
 800fbca:	ec41 0b18 	vmov	d8, r0, r1
 800fbce:	eeb0 0a48 	vmov.f32	s0, s16
 800fbd2:	eef0 0a68 	vmov.f32	s1, s17
 800fbd6:	ecbd 8b02 	vpop	{d8}
 800fbda:	bd38      	pop	{r3, r4, r5, pc}

0800fbdc <sinf>:
 800fbdc:	ee10 3a10 	vmov	r3, s0
 800fbe0:	b507      	push	{r0, r1, r2, lr}
 800fbe2:	4a1f      	ldr	r2, [pc, #124]	@ (800fc60 <sinf+0x84>)
 800fbe4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fbe8:	4293      	cmp	r3, r2
 800fbea:	d807      	bhi.n	800fbfc <sinf+0x20>
 800fbec:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800fc64 <sinf+0x88>
 800fbf0:	2000      	movs	r0, #0
 800fbf2:	b003      	add	sp, #12
 800fbf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fbf8:	f001 b922 	b.w	8010e40 <__kernel_sinf>
 800fbfc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800fc00:	d304      	bcc.n	800fc0c <sinf+0x30>
 800fc02:	ee30 0a40 	vsub.f32	s0, s0, s0
 800fc06:	b003      	add	sp, #12
 800fc08:	f85d fb04 	ldr.w	pc, [sp], #4
 800fc0c:	4668      	mov	r0, sp
 800fc0e:	f001 f95f 	bl	8010ed0 <__ieee754_rem_pio2f>
 800fc12:	f000 0003 	and.w	r0, r0, #3
 800fc16:	2801      	cmp	r0, #1
 800fc18:	d00a      	beq.n	800fc30 <sinf+0x54>
 800fc1a:	2802      	cmp	r0, #2
 800fc1c:	d00f      	beq.n	800fc3e <sinf+0x62>
 800fc1e:	b9c0      	cbnz	r0, 800fc52 <sinf+0x76>
 800fc20:	eddd 0a01 	vldr	s1, [sp, #4]
 800fc24:	ed9d 0a00 	vldr	s0, [sp]
 800fc28:	2001      	movs	r0, #1
 800fc2a:	f001 f909 	bl	8010e40 <__kernel_sinf>
 800fc2e:	e7ea      	b.n	800fc06 <sinf+0x2a>
 800fc30:	eddd 0a01 	vldr	s1, [sp, #4]
 800fc34:	ed9d 0a00 	vldr	s0, [sp]
 800fc38:	f001 f8aa 	bl	8010d90 <__kernel_cosf>
 800fc3c:	e7e3      	b.n	800fc06 <sinf+0x2a>
 800fc3e:	eddd 0a01 	vldr	s1, [sp, #4]
 800fc42:	ed9d 0a00 	vldr	s0, [sp]
 800fc46:	2001      	movs	r0, #1
 800fc48:	f001 f8fa 	bl	8010e40 <__kernel_sinf>
 800fc4c:	eeb1 0a40 	vneg.f32	s0, s0
 800fc50:	e7d9      	b.n	800fc06 <sinf+0x2a>
 800fc52:	eddd 0a01 	vldr	s1, [sp, #4]
 800fc56:	ed9d 0a00 	vldr	s0, [sp]
 800fc5a:	f001 f899 	bl	8010d90 <__kernel_cosf>
 800fc5e:	e7f5      	b.n	800fc4c <sinf+0x70>
 800fc60:	3f490fd8 	.word	0x3f490fd8
 800fc64:	00000000 	.word	0x00000000

0800fc68 <finite>:
 800fc68:	b082      	sub	sp, #8
 800fc6a:	ed8d 0b00 	vstr	d0, [sp]
 800fc6e:	9801      	ldr	r0, [sp, #4]
 800fc70:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800fc74:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800fc78:	0fc0      	lsrs	r0, r0, #31
 800fc7a:	b002      	add	sp, #8
 800fc7c:	4770      	bx	lr
	...

0800fc80 <__ieee754_sqrt>:
 800fc80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc84:	4a68      	ldr	r2, [pc, #416]	@ (800fe28 <__ieee754_sqrt+0x1a8>)
 800fc86:	ec55 4b10 	vmov	r4, r5, d0
 800fc8a:	43aa      	bics	r2, r5
 800fc8c:	462b      	mov	r3, r5
 800fc8e:	4621      	mov	r1, r4
 800fc90:	d110      	bne.n	800fcb4 <__ieee754_sqrt+0x34>
 800fc92:	4622      	mov	r2, r4
 800fc94:	4620      	mov	r0, r4
 800fc96:	4629      	mov	r1, r5
 800fc98:	f7f0 fcce 	bl	8000638 <__aeabi_dmul>
 800fc9c:	4602      	mov	r2, r0
 800fc9e:	460b      	mov	r3, r1
 800fca0:	4620      	mov	r0, r4
 800fca2:	4629      	mov	r1, r5
 800fca4:	f7f0 fb12 	bl	80002cc <__adddf3>
 800fca8:	4604      	mov	r4, r0
 800fcaa:	460d      	mov	r5, r1
 800fcac:	ec45 4b10 	vmov	d0, r4, r5
 800fcb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcb4:	2d00      	cmp	r5, #0
 800fcb6:	dc0e      	bgt.n	800fcd6 <__ieee754_sqrt+0x56>
 800fcb8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800fcbc:	4322      	orrs	r2, r4
 800fcbe:	d0f5      	beq.n	800fcac <__ieee754_sqrt+0x2c>
 800fcc0:	b19d      	cbz	r5, 800fcea <__ieee754_sqrt+0x6a>
 800fcc2:	4622      	mov	r2, r4
 800fcc4:	4620      	mov	r0, r4
 800fcc6:	4629      	mov	r1, r5
 800fcc8:	f7f0 fafe 	bl	80002c8 <__aeabi_dsub>
 800fccc:	4602      	mov	r2, r0
 800fcce:	460b      	mov	r3, r1
 800fcd0:	f7f0 fddc 	bl	800088c <__aeabi_ddiv>
 800fcd4:	e7e8      	b.n	800fca8 <__ieee754_sqrt+0x28>
 800fcd6:	152a      	asrs	r2, r5, #20
 800fcd8:	d115      	bne.n	800fd06 <__ieee754_sqrt+0x86>
 800fcda:	2000      	movs	r0, #0
 800fcdc:	e009      	b.n	800fcf2 <__ieee754_sqrt+0x72>
 800fcde:	0acb      	lsrs	r3, r1, #11
 800fce0:	3a15      	subs	r2, #21
 800fce2:	0549      	lsls	r1, r1, #21
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d0fa      	beq.n	800fcde <__ieee754_sqrt+0x5e>
 800fce8:	e7f7      	b.n	800fcda <__ieee754_sqrt+0x5a>
 800fcea:	462a      	mov	r2, r5
 800fcec:	e7fa      	b.n	800fce4 <__ieee754_sqrt+0x64>
 800fcee:	005b      	lsls	r3, r3, #1
 800fcf0:	3001      	adds	r0, #1
 800fcf2:	02dc      	lsls	r4, r3, #11
 800fcf4:	d5fb      	bpl.n	800fcee <__ieee754_sqrt+0x6e>
 800fcf6:	1e44      	subs	r4, r0, #1
 800fcf8:	1b12      	subs	r2, r2, r4
 800fcfa:	f1c0 0420 	rsb	r4, r0, #32
 800fcfe:	fa21 f404 	lsr.w	r4, r1, r4
 800fd02:	4323      	orrs	r3, r4
 800fd04:	4081      	lsls	r1, r0
 800fd06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fd0a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800fd0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fd12:	07d2      	lsls	r2, r2, #31
 800fd14:	bf5c      	itt	pl
 800fd16:	005b      	lslpl	r3, r3, #1
 800fd18:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800fd1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fd20:	bf58      	it	pl
 800fd22:	0049      	lslpl	r1, r1, #1
 800fd24:	2600      	movs	r6, #0
 800fd26:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800fd2a:	106d      	asrs	r5, r5, #1
 800fd2c:	0049      	lsls	r1, r1, #1
 800fd2e:	2016      	movs	r0, #22
 800fd30:	4632      	mov	r2, r6
 800fd32:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800fd36:	1917      	adds	r7, r2, r4
 800fd38:	429f      	cmp	r7, r3
 800fd3a:	bfde      	ittt	le
 800fd3c:	193a      	addle	r2, r7, r4
 800fd3e:	1bdb      	suble	r3, r3, r7
 800fd40:	1936      	addle	r6, r6, r4
 800fd42:	0fcf      	lsrs	r7, r1, #31
 800fd44:	3801      	subs	r0, #1
 800fd46:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800fd4a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800fd4e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800fd52:	d1f0      	bne.n	800fd36 <__ieee754_sqrt+0xb6>
 800fd54:	4604      	mov	r4, r0
 800fd56:	2720      	movs	r7, #32
 800fd58:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800fd5c:	429a      	cmp	r2, r3
 800fd5e:	eb00 0e0c 	add.w	lr, r0, ip
 800fd62:	db02      	blt.n	800fd6a <__ieee754_sqrt+0xea>
 800fd64:	d113      	bne.n	800fd8e <__ieee754_sqrt+0x10e>
 800fd66:	458e      	cmp	lr, r1
 800fd68:	d811      	bhi.n	800fd8e <__ieee754_sqrt+0x10e>
 800fd6a:	f1be 0f00 	cmp.w	lr, #0
 800fd6e:	eb0e 000c 	add.w	r0, lr, ip
 800fd72:	da42      	bge.n	800fdfa <__ieee754_sqrt+0x17a>
 800fd74:	2800      	cmp	r0, #0
 800fd76:	db40      	blt.n	800fdfa <__ieee754_sqrt+0x17a>
 800fd78:	f102 0801 	add.w	r8, r2, #1
 800fd7c:	1a9b      	subs	r3, r3, r2
 800fd7e:	458e      	cmp	lr, r1
 800fd80:	bf88      	it	hi
 800fd82:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800fd86:	eba1 010e 	sub.w	r1, r1, lr
 800fd8a:	4464      	add	r4, ip
 800fd8c:	4642      	mov	r2, r8
 800fd8e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800fd92:	3f01      	subs	r7, #1
 800fd94:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800fd98:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800fd9c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800fda0:	d1dc      	bne.n	800fd5c <__ieee754_sqrt+0xdc>
 800fda2:	4319      	orrs	r1, r3
 800fda4:	d01b      	beq.n	800fdde <__ieee754_sqrt+0x15e>
 800fda6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800fe2c <__ieee754_sqrt+0x1ac>
 800fdaa:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800fe30 <__ieee754_sqrt+0x1b0>
 800fdae:	e9da 0100 	ldrd	r0, r1, [sl]
 800fdb2:	e9db 2300 	ldrd	r2, r3, [fp]
 800fdb6:	f7f0 fa87 	bl	80002c8 <__aeabi_dsub>
 800fdba:	e9da 8900 	ldrd	r8, r9, [sl]
 800fdbe:	4602      	mov	r2, r0
 800fdc0:	460b      	mov	r3, r1
 800fdc2:	4640      	mov	r0, r8
 800fdc4:	4649      	mov	r1, r9
 800fdc6:	f7f0 feb3 	bl	8000b30 <__aeabi_dcmple>
 800fdca:	b140      	cbz	r0, 800fdde <__ieee754_sqrt+0x15e>
 800fdcc:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800fdd0:	e9da 0100 	ldrd	r0, r1, [sl]
 800fdd4:	e9db 2300 	ldrd	r2, r3, [fp]
 800fdd8:	d111      	bne.n	800fdfe <__ieee754_sqrt+0x17e>
 800fdda:	3601      	adds	r6, #1
 800fddc:	463c      	mov	r4, r7
 800fdde:	1072      	asrs	r2, r6, #1
 800fde0:	0863      	lsrs	r3, r4, #1
 800fde2:	07f1      	lsls	r1, r6, #31
 800fde4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800fde8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800fdec:	bf48      	it	mi
 800fdee:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800fdf2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	e756      	b.n	800fca8 <__ieee754_sqrt+0x28>
 800fdfa:	4690      	mov	r8, r2
 800fdfc:	e7be      	b.n	800fd7c <__ieee754_sqrt+0xfc>
 800fdfe:	f7f0 fa65 	bl	80002cc <__adddf3>
 800fe02:	e9da 8900 	ldrd	r8, r9, [sl]
 800fe06:	4602      	mov	r2, r0
 800fe08:	460b      	mov	r3, r1
 800fe0a:	4640      	mov	r0, r8
 800fe0c:	4649      	mov	r1, r9
 800fe0e:	f7f0 fe85 	bl	8000b1c <__aeabi_dcmplt>
 800fe12:	b120      	cbz	r0, 800fe1e <__ieee754_sqrt+0x19e>
 800fe14:	1ca0      	adds	r0, r4, #2
 800fe16:	bf08      	it	eq
 800fe18:	3601      	addeq	r6, #1
 800fe1a:	3402      	adds	r4, #2
 800fe1c:	e7df      	b.n	800fdde <__ieee754_sqrt+0x15e>
 800fe1e:	1c63      	adds	r3, r4, #1
 800fe20:	f023 0401 	bic.w	r4, r3, #1
 800fe24:	e7db      	b.n	800fdde <__ieee754_sqrt+0x15e>
 800fe26:	bf00      	nop
 800fe28:	7ff00000 	.word	0x7ff00000
 800fe2c:	200001e0 	.word	0x200001e0
 800fe30:	200001d8 	.word	0x200001d8
 800fe34:	00000000 	.word	0x00000000

0800fe38 <__ieee754_atan2>:
 800fe38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe3c:	ec57 6b11 	vmov	r6, r7, d1
 800fe40:	4273      	negs	r3, r6
 800fe42:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800ffc0 <__ieee754_atan2+0x188>
 800fe46:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800fe4a:	4333      	orrs	r3, r6
 800fe4c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800fe50:	4543      	cmp	r3, r8
 800fe52:	ec51 0b10 	vmov	r0, r1, d0
 800fe56:	4635      	mov	r5, r6
 800fe58:	d809      	bhi.n	800fe6e <__ieee754_atan2+0x36>
 800fe5a:	4244      	negs	r4, r0
 800fe5c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fe60:	4304      	orrs	r4, r0
 800fe62:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800fe66:	4544      	cmp	r4, r8
 800fe68:	468e      	mov	lr, r1
 800fe6a:	4681      	mov	r9, r0
 800fe6c:	d907      	bls.n	800fe7e <__ieee754_atan2+0x46>
 800fe6e:	4632      	mov	r2, r6
 800fe70:	463b      	mov	r3, r7
 800fe72:	f7f0 fa2b 	bl	80002cc <__adddf3>
 800fe76:	ec41 0b10 	vmov	d0, r0, r1
 800fe7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe7e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800fe82:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800fe86:	4334      	orrs	r4, r6
 800fe88:	d103      	bne.n	800fe92 <__ieee754_atan2+0x5a>
 800fe8a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe8e:	f000 bddf 	b.w	8010a50 <atan>
 800fe92:	17bc      	asrs	r4, r7, #30
 800fe94:	f004 0402 	and.w	r4, r4, #2
 800fe98:	ea53 0909 	orrs.w	r9, r3, r9
 800fe9c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800fea0:	d107      	bne.n	800feb2 <__ieee754_atan2+0x7a>
 800fea2:	2c02      	cmp	r4, #2
 800fea4:	d05f      	beq.n	800ff66 <__ieee754_atan2+0x12e>
 800fea6:	2c03      	cmp	r4, #3
 800fea8:	d1e5      	bne.n	800fe76 <__ieee754_atan2+0x3e>
 800feaa:	a141      	add	r1, pc, #260	@ (adr r1, 800ffb0 <__ieee754_atan2+0x178>)
 800feac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800feb0:	e7e1      	b.n	800fe76 <__ieee754_atan2+0x3e>
 800feb2:	4315      	orrs	r5, r2
 800feb4:	d106      	bne.n	800fec4 <__ieee754_atan2+0x8c>
 800feb6:	f1be 0f00 	cmp.w	lr, #0
 800feba:	da5f      	bge.n	800ff7c <__ieee754_atan2+0x144>
 800febc:	a13e      	add	r1, pc, #248	@ (adr r1, 800ffb8 <__ieee754_atan2+0x180>)
 800febe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fec2:	e7d8      	b.n	800fe76 <__ieee754_atan2+0x3e>
 800fec4:	4542      	cmp	r2, r8
 800fec6:	d10f      	bne.n	800fee8 <__ieee754_atan2+0xb0>
 800fec8:	4293      	cmp	r3, r2
 800feca:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800fece:	d107      	bne.n	800fee0 <__ieee754_atan2+0xa8>
 800fed0:	2c02      	cmp	r4, #2
 800fed2:	d84c      	bhi.n	800ff6e <__ieee754_atan2+0x136>
 800fed4:	4b34      	ldr	r3, [pc, #208]	@ (800ffa8 <__ieee754_atan2+0x170>)
 800fed6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800feda:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fede:	e7ca      	b.n	800fe76 <__ieee754_atan2+0x3e>
 800fee0:	2c02      	cmp	r4, #2
 800fee2:	d848      	bhi.n	800ff76 <__ieee754_atan2+0x13e>
 800fee4:	4b31      	ldr	r3, [pc, #196]	@ (800ffac <__ieee754_atan2+0x174>)
 800fee6:	e7f6      	b.n	800fed6 <__ieee754_atan2+0x9e>
 800fee8:	4543      	cmp	r3, r8
 800feea:	d0e4      	beq.n	800feb6 <__ieee754_atan2+0x7e>
 800feec:	1a9b      	subs	r3, r3, r2
 800feee:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800fef2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fef6:	da1e      	bge.n	800ff36 <__ieee754_atan2+0xfe>
 800fef8:	2f00      	cmp	r7, #0
 800fefa:	da01      	bge.n	800ff00 <__ieee754_atan2+0xc8>
 800fefc:	323c      	adds	r2, #60	@ 0x3c
 800fefe:	db1e      	blt.n	800ff3e <__ieee754_atan2+0x106>
 800ff00:	4632      	mov	r2, r6
 800ff02:	463b      	mov	r3, r7
 800ff04:	f7f0 fcc2 	bl	800088c <__aeabi_ddiv>
 800ff08:	ec41 0b10 	vmov	d0, r0, r1
 800ff0c:	f000 ff38 	bl	8010d80 <fabs>
 800ff10:	f000 fd9e 	bl	8010a50 <atan>
 800ff14:	ec51 0b10 	vmov	r0, r1, d0
 800ff18:	2c01      	cmp	r4, #1
 800ff1a:	d013      	beq.n	800ff44 <__ieee754_atan2+0x10c>
 800ff1c:	2c02      	cmp	r4, #2
 800ff1e:	d015      	beq.n	800ff4c <__ieee754_atan2+0x114>
 800ff20:	2c00      	cmp	r4, #0
 800ff22:	d0a8      	beq.n	800fe76 <__ieee754_atan2+0x3e>
 800ff24:	a318      	add	r3, pc, #96	@ (adr r3, 800ff88 <__ieee754_atan2+0x150>)
 800ff26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff2a:	f7f0 f9cd 	bl	80002c8 <__aeabi_dsub>
 800ff2e:	a318      	add	r3, pc, #96	@ (adr r3, 800ff90 <__ieee754_atan2+0x158>)
 800ff30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff34:	e014      	b.n	800ff60 <__ieee754_atan2+0x128>
 800ff36:	a118      	add	r1, pc, #96	@ (adr r1, 800ff98 <__ieee754_atan2+0x160>)
 800ff38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff3c:	e7ec      	b.n	800ff18 <__ieee754_atan2+0xe0>
 800ff3e:	2000      	movs	r0, #0
 800ff40:	2100      	movs	r1, #0
 800ff42:	e7e9      	b.n	800ff18 <__ieee754_atan2+0xe0>
 800ff44:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ff48:	4619      	mov	r1, r3
 800ff4a:	e794      	b.n	800fe76 <__ieee754_atan2+0x3e>
 800ff4c:	a30e      	add	r3, pc, #56	@ (adr r3, 800ff88 <__ieee754_atan2+0x150>)
 800ff4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff52:	f7f0 f9b9 	bl	80002c8 <__aeabi_dsub>
 800ff56:	4602      	mov	r2, r0
 800ff58:	460b      	mov	r3, r1
 800ff5a:	a10d      	add	r1, pc, #52	@ (adr r1, 800ff90 <__ieee754_atan2+0x158>)
 800ff5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff60:	f7f0 f9b2 	bl	80002c8 <__aeabi_dsub>
 800ff64:	e787      	b.n	800fe76 <__ieee754_atan2+0x3e>
 800ff66:	a10a      	add	r1, pc, #40	@ (adr r1, 800ff90 <__ieee754_atan2+0x158>)
 800ff68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff6c:	e783      	b.n	800fe76 <__ieee754_atan2+0x3e>
 800ff6e:	a10c      	add	r1, pc, #48	@ (adr r1, 800ffa0 <__ieee754_atan2+0x168>)
 800ff70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff74:	e77f      	b.n	800fe76 <__ieee754_atan2+0x3e>
 800ff76:	2000      	movs	r0, #0
 800ff78:	2100      	movs	r1, #0
 800ff7a:	e77c      	b.n	800fe76 <__ieee754_atan2+0x3e>
 800ff7c:	a106      	add	r1, pc, #24	@ (adr r1, 800ff98 <__ieee754_atan2+0x160>)
 800ff7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff82:	e778      	b.n	800fe76 <__ieee754_atan2+0x3e>
 800ff84:	f3af 8000 	nop.w
 800ff88:	33145c07 	.word	0x33145c07
 800ff8c:	3ca1a626 	.word	0x3ca1a626
 800ff90:	54442d18 	.word	0x54442d18
 800ff94:	400921fb 	.word	0x400921fb
 800ff98:	54442d18 	.word	0x54442d18
 800ff9c:	3ff921fb 	.word	0x3ff921fb
 800ffa0:	54442d18 	.word	0x54442d18
 800ffa4:	3fe921fb 	.word	0x3fe921fb
 800ffa8:	08012438 	.word	0x08012438
 800ffac:	08012420 	.word	0x08012420
 800ffb0:	54442d18 	.word	0x54442d18
 800ffb4:	c00921fb 	.word	0xc00921fb
 800ffb8:	54442d18 	.word	0x54442d18
 800ffbc:	bff921fb 	.word	0xbff921fb
 800ffc0:	7ff00000 	.word	0x7ff00000
 800ffc4:	00000000 	.word	0x00000000

0800ffc8 <__ieee754_pow>:
 800ffc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffcc:	b091      	sub	sp, #68	@ 0x44
 800ffce:	ed8d 1b00 	vstr	d1, [sp]
 800ffd2:	e9dd 1900 	ldrd	r1, r9, [sp]
 800ffd6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800ffda:	ea5a 0001 	orrs.w	r0, sl, r1
 800ffde:	ec57 6b10 	vmov	r6, r7, d0
 800ffe2:	d113      	bne.n	801000c <__ieee754_pow+0x44>
 800ffe4:	19b3      	adds	r3, r6, r6
 800ffe6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800ffea:	4152      	adcs	r2, r2
 800ffec:	4298      	cmp	r0, r3
 800ffee:	4b98      	ldr	r3, [pc, #608]	@ (8010250 <__ieee754_pow+0x288>)
 800fff0:	4193      	sbcs	r3, r2
 800fff2:	f080 84ea 	bcs.w	80109ca <__ieee754_pow+0xa02>
 800fff6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fffa:	4630      	mov	r0, r6
 800fffc:	4639      	mov	r1, r7
 800fffe:	f7f0 f965 	bl	80002cc <__adddf3>
 8010002:	ec41 0b10 	vmov	d0, r0, r1
 8010006:	b011      	add	sp, #68	@ 0x44
 8010008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801000c:	4a91      	ldr	r2, [pc, #580]	@ (8010254 <__ieee754_pow+0x28c>)
 801000e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8010012:	4590      	cmp	r8, r2
 8010014:	463d      	mov	r5, r7
 8010016:	4633      	mov	r3, r6
 8010018:	d806      	bhi.n	8010028 <__ieee754_pow+0x60>
 801001a:	d101      	bne.n	8010020 <__ieee754_pow+0x58>
 801001c:	2e00      	cmp	r6, #0
 801001e:	d1ea      	bne.n	800fff6 <__ieee754_pow+0x2e>
 8010020:	4592      	cmp	sl, r2
 8010022:	d801      	bhi.n	8010028 <__ieee754_pow+0x60>
 8010024:	d10e      	bne.n	8010044 <__ieee754_pow+0x7c>
 8010026:	b169      	cbz	r1, 8010044 <__ieee754_pow+0x7c>
 8010028:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 801002c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8010030:	431d      	orrs	r5, r3
 8010032:	d1e0      	bne.n	800fff6 <__ieee754_pow+0x2e>
 8010034:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010038:	18db      	adds	r3, r3, r3
 801003a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 801003e:	4152      	adcs	r2, r2
 8010040:	429d      	cmp	r5, r3
 8010042:	e7d4      	b.n	800ffee <__ieee754_pow+0x26>
 8010044:	2d00      	cmp	r5, #0
 8010046:	46c3      	mov	fp, r8
 8010048:	da3a      	bge.n	80100c0 <__ieee754_pow+0xf8>
 801004a:	4a83      	ldr	r2, [pc, #524]	@ (8010258 <__ieee754_pow+0x290>)
 801004c:	4592      	cmp	sl, r2
 801004e:	d84d      	bhi.n	80100ec <__ieee754_pow+0x124>
 8010050:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8010054:	4592      	cmp	sl, r2
 8010056:	f240 84c7 	bls.w	80109e8 <__ieee754_pow+0xa20>
 801005a:	ea4f 522a 	mov.w	r2, sl, asr #20
 801005e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8010062:	2a14      	cmp	r2, #20
 8010064:	dd0f      	ble.n	8010086 <__ieee754_pow+0xbe>
 8010066:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801006a:	fa21 f402 	lsr.w	r4, r1, r2
 801006e:	fa04 f202 	lsl.w	r2, r4, r2
 8010072:	428a      	cmp	r2, r1
 8010074:	f040 84b8 	bne.w	80109e8 <__ieee754_pow+0xa20>
 8010078:	f004 0401 	and.w	r4, r4, #1
 801007c:	f1c4 0402 	rsb	r4, r4, #2
 8010080:	2900      	cmp	r1, #0
 8010082:	d158      	bne.n	8010136 <__ieee754_pow+0x16e>
 8010084:	e00e      	b.n	80100a4 <__ieee754_pow+0xdc>
 8010086:	2900      	cmp	r1, #0
 8010088:	d154      	bne.n	8010134 <__ieee754_pow+0x16c>
 801008a:	f1c2 0214 	rsb	r2, r2, #20
 801008e:	fa4a f402 	asr.w	r4, sl, r2
 8010092:	fa04 f202 	lsl.w	r2, r4, r2
 8010096:	4552      	cmp	r2, sl
 8010098:	f040 84a3 	bne.w	80109e2 <__ieee754_pow+0xa1a>
 801009c:	f004 0401 	and.w	r4, r4, #1
 80100a0:	f1c4 0402 	rsb	r4, r4, #2
 80100a4:	4a6d      	ldr	r2, [pc, #436]	@ (801025c <__ieee754_pow+0x294>)
 80100a6:	4592      	cmp	sl, r2
 80100a8:	d12e      	bne.n	8010108 <__ieee754_pow+0x140>
 80100aa:	f1b9 0f00 	cmp.w	r9, #0
 80100ae:	f280 8494 	bge.w	80109da <__ieee754_pow+0xa12>
 80100b2:	496a      	ldr	r1, [pc, #424]	@ (801025c <__ieee754_pow+0x294>)
 80100b4:	4632      	mov	r2, r6
 80100b6:	463b      	mov	r3, r7
 80100b8:	2000      	movs	r0, #0
 80100ba:	f7f0 fbe7 	bl	800088c <__aeabi_ddiv>
 80100be:	e7a0      	b.n	8010002 <__ieee754_pow+0x3a>
 80100c0:	2400      	movs	r4, #0
 80100c2:	bbc1      	cbnz	r1, 8010136 <__ieee754_pow+0x16e>
 80100c4:	4a63      	ldr	r2, [pc, #396]	@ (8010254 <__ieee754_pow+0x28c>)
 80100c6:	4592      	cmp	sl, r2
 80100c8:	d1ec      	bne.n	80100a4 <__ieee754_pow+0xdc>
 80100ca:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80100ce:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80100d2:	431a      	orrs	r2, r3
 80100d4:	f000 8479 	beq.w	80109ca <__ieee754_pow+0xa02>
 80100d8:	4b61      	ldr	r3, [pc, #388]	@ (8010260 <__ieee754_pow+0x298>)
 80100da:	4598      	cmp	r8, r3
 80100dc:	d908      	bls.n	80100f0 <__ieee754_pow+0x128>
 80100de:	f1b9 0f00 	cmp.w	r9, #0
 80100e2:	f2c0 8476 	blt.w	80109d2 <__ieee754_pow+0xa0a>
 80100e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80100ea:	e78a      	b.n	8010002 <__ieee754_pow+0x3a>
 80100ec:	2402      	movs	r4, #2
 80100ee:	e7e8      	b.n	80100c2 <__ieee754_pow+0xfa>
 80100f0:	f1b9 0f00 	cmp.w	r9, #0
 80100f4:	f04f 0000 	mov.w	r0, #0
 80100f8:	f04f 0100 	mov.w	r1, #0
 80100fc:	da81      	bge.n	8010002 <__ieee754_pow+0x3a>
 80100fe:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010102:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8010106:	e77c      	b.n	8010002 <__ieee754_pow+0x3a>
 8010108:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 801010c:	d106      	bne.n	801011c <__ieee754_pow+0x154>
 801010e:	4632      	mov	r2, r6
 8010110:	463b      	mov	r3, r7
 8010112:	4630      	mov	r0, r6
 8010114:	4639      	mov	r1, r7
 8010116:	f7f0 fa8f 	bl	8000638 <__aeabi_dmul>
 801011a:	e772      	b.n	8010002 <__ieee754_pow+0x3a>
 801011c:	4a51      	ldr	r2, [pc, #324]	@ (8010264 <__ieee754_pow+0x29c>)
 801011e:	4591      	cmp	r9, r2
 8010120:	d109      	bne.n	8010136 <__ieee754_pow+0x16e>
 8010122:	2d00      	cmp	r5, #0
 8010124:	db07      	blt.n	8010136 <__ieee754_pow+0x16e>
 8010126:	ec47 6b10 	vmov	d0, r6, r7
 801012a:	b011      	add	sp, #68	@ 0x44
 801012c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010130:	f7ff bda6 	b.w	800fc80 <__ieee754_sqrt>
 8010134:	2400      	movs	r4, #0
 8010136:	ec47 6b10 	vmov	d0, r6, r7
 801013a:	9302      	str	r3, [sp, #8]
 801013c:	f000 fe20 	bl	8010d80 <fabs>
 8010140:	9b02      	ldr	r3, [sp, #8]
 8010142:	ec51 0b10 	vmov	r0, r1, d0
 8010146:	bb53      	cbnz	r3, 801019e <__ieee754_pow+0x1d6>
 8010148:	4b44      	ldr	r3, [pc, #272]	@ (801025c <__ieee754_pow+0x294>)
 801014a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 801014e:	429a      	cmp	r2, r3
 8010150:	d002      	beq.n	8010158 <__ieee754_pow+0x190>
 8010152:	f1b8 0f00 	cmp.w	r8, #0
 8010156:	d122      	bne.n	801019e <__ieee754_pow+0x1d6>
 8010158:	f1b9 0f00 	cmp.w	r9, #0
 801015c:	da05      	bge.n	801016a <__ieee754_pow+0x1a2>
 801015e:	4602      	mov	r2, r0
 8010160:	460b      	mov	r3, r1
 8010162:	2000      	movs	r0, #0
 8010164:	493d      	ldr	r1, [pc, #244]	@ (801025c <__ieee754_pow+0x294>)
 8010166:	f7f0 fb91 	bl	800088c <__aeabi_ddiv>
 801016a:	2d00      	cmp	r5, #0
 801016c:	f6bf af49 	bge.w	8010002 <__ieee754_pow+0x3a>
 8010170:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8010174:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8010178:	ea58 0804 	orrs.w	r8, r8, r4
 801017c:	d108      	bne.n	8010190 <__ieee754_pow+0x1c8>
 801017e:	4602      	mov	r2, r0
 8010180:	460b      	mov	r3, r1
 8010182:	4610      	mov	r0, r2
 8010184:	4619      	mov	r1, r3
 8010186:	f7f0 f89f 	bl	80002c8 <__aeabi_dsub>
 801018a:	4602      	mov	r2, r0
 801018c:	460b      	mov	r3, r1
 801018e:	e794      	b.n	80100ba <__ieee754_pow+0xf2>
 8010190:	2c01      	cmp	r4, #1
 8010192:	f47f af36 	bne.w	8010002 <__ieee754_pow+0x3a>
 8010196:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801019a:	4619      	mov	r1, r3
 801019c:	e731      	b.n	8010002 <__ieee754_pow+0x3a>
 801019e:	0feb      	lsrs	r3, r5, #31
 80101a0:	3b01      	subs	r3, #1
 80101a2:	ea53 0204 	orrs.w	r2, r3, r4
 80101a6:	d102      	bne.n	80101ae <__ieee754_pow+0x1e6>
 80101a8:	4632      	mov	r2, r6
 80101aa:	463b      	mov	r3, r7
 80101ac:	e7e9      	b.n	8010182 <__ieee754_pow+0x1ba>
 80101ae:	3c01      	subs	r4, #1
 80101b0:	431c      	orrs	r4, r3
 80101b2:	d016      	beq.n	80101e2 <__ieee754_pow+0x21a>
 80101b4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8010240 <__ieee754_pow+0x278>
 80101b8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80101bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80101c0:	f240 8112 	bls.w	80103e8 <__ieee754_pow+0x420>
 80101c4:	4b28      	ldr	r3, [pc, #160]	@ (8010268 <__ieee754_pow+0x2a0>)
 80101c6:	459a      	cmp	sl, r3
 80101c8:	4b25      	ldr	r3, [pc, #148]	@ (8010260 <__ieee754_pow+0x298>)
 80101ca:	d916      	bls.n	80101fa <__ieee754_pow+0x232>
 80101cc:	4598      	cmp	r8, r3
 80101ce:	d80b      	bhi.n	80101e8 <__ieee754_pow+0x220>
 80101d0:	f1b9 0f00 	cmp.w	r9, #0
 80101d4:	da0b      	bge.n	80101ee <__ieee754_pow+0x226>
 80101d6:	2000      	movs	r0, #0
 80101d8:	b011      	add	sp, #68	@ 0x44
 80101da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101de:	f001 b863 	b.w	80112a8 <__math_oflow>
 80101e2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8010248 <__ieee754_pow+0x280>
 80101e6:	e7e7      	b.n	80101b8 <__ieee754_pow+0x1f0>
 80101e8:	f1b9 0f00 	cmp.w	r9, #0
 80101ec:	dcf3      	bgt.n	80101d6 <__ieee754_pow+0x20e>
 80101ee:	2000      	movs	r0, #0
 80101f0:	b011      	add	sp, #68	@ 0x44
 80101f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101f6:	f001 b84f 	b.w	8011298 <__math_uflow>
 80101fa:	4598      	cmp	r8, r3
 80101fc:	d20c      	bcs.n	8010218 <__ieee754_pow+0x250>
 80101fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010202:	2200      	movs	r2, #0
 8010204:	2300      	movs	r3, #0
 8010206:	f7f0 fc89 	bl	8000b1c <__aeabi_dcmplt>
 801020a:	3800      	subs	r0, #0
 801020c:	bf18      	it	ne
 801020e:	2001      	movne	r0, #1
 8010210:	f1b9 0f00 	cmp.w	r9, #0
 8010214:	daec      	bge.n	80101f0 <__ieee754_pow+0x228>
 8010216:	e7df      	b.n	80101d8 <__ieee754_pow+0x210>
 8010218:	4b10      	ldr	r3, [pc, #64]	@ (801025c <__ieee754_pow+0x294>)
 801021a:	4598      	cmp	r8, r3
 801021c:	f04f 0200 	mov.w	r2, #0
 8010220:	d924      	bls.n	801026c <__ieee754_pow+0x2a4>
 8010222:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010226:	2300      	movs	r3, #0
 8010228:	f7f0 fc78 	bl	8000b1c <__aeabi_dcmplt>
 801022c:	3800      	subs	r0, #0
 801022e:	bf18      	it	ne
 8010230:	2001      	movne	r0, #1
 8010232:	f1b9 0f00 	cmp.w	r9, #0
 8010236:	dccf      	bgt.n	80101d8 <__ieee754_pow+0x210>
 8010238:	e7da      	b.n	80101f0 <__ieee754_pow+0x228>
 801023a:	bf00      	nop
 801023c:	f3af 8000 	nop.w
 8010240:	00000000 	.word	0x00000000
 8010244:	3ff00000 	.word	0x3ff00000
 8010248:	00000000 	.word	0x00000000
 801024c:	bff00000 	.word	0xbff00000
 8010250:	fff00000 	.word	0xfff00000
 8010254:	7ff00000 	.word	0x7ff00000
 8010258:	433fffff 	.word	0x433fffff
 801025c:	3ff00000 	.word	0x3ff00000
 8010260:	3fefffff 	.word	0x3fefffff
 8010264:	3fe00000 	.word	0x3fe00000
 8010268:	43f00000 	.word	0x43f00000
 801026c:	4b5a      	ldr	r3, [pc, #360]	@ (80103d8 <__ieee754_pow+0x410>)
 801026e:	f7f0 f82b 	bl	80002c8 <__aeabi_dsub>
 8010272:	a351      	add	r3, pc, #324	@ (adr r3, 80103b8 <__ieee754_pow+0x3f0>)
 8010274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010278:	4604      	mov	r4, r0
 801027a:	460d      	mov	r5, r1
 801027c:	f7f0 f9dc 	bl	8000638 <__aeabi_dmul>
 8010280:	a34f      	add	r3, pc, #316	@ (adr r3, 80103c0 <__ieee754_pow+0x3f8>)
 8010282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010286:	4606      	mov	r6, r0
 8010288:	460f      	mov	r7, r1
 801028a:	4620      	mov	r0, r4
 801028c:	4629      	mov	r1, r5
 801028e:	f7f0 f9d3 	bl	8000638 <__aeabi_dmul>
 8010292:	4b52      	ldr	r3, [pc, #328]	@ (80103dc <__ieee754_pow+0x414>)
 8010294:	4682      	mov	sl, r0
 8010296:	468b      	mov	fp, r1
 8010298:	2200      	movs	r2, #0
 801029a:	4620      	mov	r0, r4
 801029c:	4629      	mov	r1, r5
 801029e:	f7f0 f9cb 	bl	8000638 <__aeabi_dmul>
 80102a2:	4602      	mov	r2, r0
 80102a4:	460b      	mov	r3, r1
 80102a6:	a148      	add	r1, pc, #288	@ (adr r1, 80103c8 <__ieee754_pow+0x400>)
 80102a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102ac:	f7f0 f80c 	bl	80002c8 <__aeabi_dsub>
 80102b0:	4622      	mov	r2, r4
 80102b2:	462b      	mov	r3, r5
 80102b4:	f7f0 f9c0 	bl	8000638 <__aeabi_dmul>
 80102b8:	4602      	mov	r2, r0
 80102ba:	460b      	mov	r3, r1
 80102bc:	2000      	movs	r0, #0
 80102be:	4948      	ldr	r1, [pc, #288]	@ (80103e0 <__ieee754_pow+0x418>)
 80102c0:	f7f0 f802 	bl	80002c8 <__aeabi_dsub>
 80102c4:	4622      	mov	r2, r4
 80102c6:	4680      	mov	r8, r0
 80102c8:	4689      	mov	r9, r1
 80102ca:	462b      	mov	r3, r5
 80102cc:	4620      	mov	r0, r4
 80102ce:	4629      	mov	r1, r5
 80102d0:	f7f0 f9b2 	bl	8000638 <__aeabi_dmul>
 80102d4:	4602      	mov	r2, r0
 80102d6:	460b      	mov	r3, r1
 80102d8:	4640      	mov	r0, r8
 80102da:	4649      	mov	r1, r9
 80102dc:	f7f0 f9ac 	bl	8000638 <__aeabi_dmul>
 80102e0:	a33b      	add	r3, pc, #236	@ (adr r3, 80103d0 <__ieee754_pow+0x408>)
 80102e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102e6:	f7f0 f9a7 	bl	8000638 <__aeabi_dmul>
 80102ea:	4602      	mov	r2, r0
 80102ec:	460b      	mov	r3, r1
 80102ee:	4650      	mov	r0, sl
 80102f0:	4659      	mov	r1, fp
 80102f2:	f7ef ffe9 	bl	80002c8 <__aeabi_dsub>
 80102f6:	4602      	mov	r2, r0
 80102f8:	460b      	mov	r3, r1
 80102fa:	4680      	mov	r8, r0
 80102fc:	4689      	mov	r9, r1
 80102fe:	4630      	mov	r0, r6
 8010300:	4639      	mov	r1, r7
 8010302:	f7ef ffe3 	bl	80002cc <__adddf3>
 8010306:	2400      	movs	r4, #0
 8010308:	4632      	mov	r2, r6
 801030a:	463b      	mov	r3, r7
 801030c:	4620      	mov	r0, r4
 801030e:	460d      	mov	r5, r1
 8010310:	f7ef ffda 	bl	80002c8 <__aeabi_dsub>
 8010314:	4602      	mov	r2, r0
 8010316:	460b      	mov	r3, r1
 8010318:	4640      	mov	r0, r8
 801031a:	4649      	mov	r1, r9
 801031c:	f7ef ffd4 	bl	80002c8 <__aeabi_dsub>
 8010320:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010324:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010328:	2300      	movs	r3, #0
 801032a:	9304      	str	r3, [sp, #16]
 801032c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8010330:	4606      	mov	r6, r0
 8010332:	460f      	mov	r7, r1
 8010334:	4652      	mov	r2, sl
 8010336:	465b      	mov	r3, fp
 8010338:	e9dd 0100 	ldrd	r0, r1, [sp]
 801033c:	f7ef ffc4 	bl	80002c8 <__aeabi_dsub>
 8010340:	4622      	mov	r2, r4
 8010342:	462b      	mov	r3, r5
 8010344:	f7f0 f978 	bl	8000638 <__aeabi_dmul>
 8010348:	e9dd 2300 	ldrd	r2, r3, [sp]
 801034c:	4680      	mov	r8, r0
 801034e:	4689      	mov	r9, r1
 8010350:	4630      	mov	r0, r6
 8010352:	4639      	mov	r1, r7
 8010354:	f7f0 f970 	bl	8000638 <__aeabi_dmul>
 8010358:	4602      	mov	r2, r0
 801035a:	460b      	mov	r3, r1
 801035c:	4640      	mov	r0, r8
 801035e:	4649      	mov	r1, r9
 8010360:	f7ef ffb4 	bl	80002cc <__adddf3>
 8010364:	4652      	mov	r2, sl
 8010366:	465b      	mov	r3, fp
 8010368:	4606      	mov	r6, r0
 801036a:	460f      	mov	r7, r1
 801036c:	4620      	mov	r0, r4
 801036e:	4629      	mov	r1, r5
 8010370:	f7f0 f962 	bl	8000638 <__aeabi_dmul>
 8010374:	460b      	mov	r3, r1
 8010376:	4602      	mov	r2, r0
 8010378:	4680      	mov	r8, r0
 801037a:	4689      	mov	r9, r1
 801037c:	4630      	mov	r0, r6
 801037e:	4639      	mov	r1, r7
 8010380:	f7ef ffa4 	bl	80002cc <__adddf3>
 8010384:	4b17      	ldr	r3, [pc, #92]	@ (80103e4 <__ieee754_pow+0x41c>)
 8010386:	4299      	cmp	r1, r3
 8010388:	4604      	mov	r4, r0
 801038a:	460d      	mov	r5, r1
 801038c:	468a      	mov	sl, r1
 801038e:	468b      	mov	fp, r1
 8010390:	f340 82ef 	ble.w	8010972 <__ieee754_pow+0x9aa>
 8010394:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8010398:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801039c:	4303      	orrs	r3, r0
 801039e:	f000 81e8 	beq.w	8010772 <__ieee754_pow+0x7aa>
 80103a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80103a6:	2200      	movs	r2, #0
 80103a8:	2300      	movs	r3, #0
 80103aa:	f7f0 fbb7 	bl	8000b1c <__aeabi_dcmplt>
 80103ae:	3800      	subs	r0, #0
 80103b0:	bf18      	it	ne
 80103b2:	2001      	movne	r0, #1
 80103b4:	e710      	b.n	80101d8 <__ieee754_pow+0x210>
 80103b6:	bf00      	nop
 80103b8:	60000000 	.word	0x60000000
 80103bc:	3ff71547 	.word	0x3ff71547
 80103c0:	f85ddf44 	.word	0xf85ddf44
 80103c4:	3e54ae0b 	.word	0x3e54ae0b
 80103c8:	55555555 	.word	0x55555555
 80103cc:	3fd55555 	.word	0x3fd55555
 80103d0:	652b82fe 	.word	0x652b82fe
 80103d4:	3ff71547 	.word	0x3ff71547
 80103d8:	3ff00000 	.word	0x3ff00000
 80103dc:	3fd00000 	.word	0x3fd00000
 80103e0:	3fe00000 	.word	0x3fe00000
 80103e4:	408fffff 	.word	0x408fffff
 80103e8:	4bd5      	ldr	r3, [pc, #852]	@ (8010740 <__ieee754_pow+0x778>)
 80103ea:	402b      	ands	r3, r5
 80103ec:	2200      	movs	r2, #0
 80103ee:	b92b      	cbnz	r3, 80103fc <__ieee754_pow+0x434>
 80103f0:	4bd4      	ldr	r3, [pc, #848]	@ (8010744 <__ieee754_pow+0x77c>)
 80103f2:	f7f0 f921 	bl	8000638 <__aeabi_dmul>
 80103f6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80103fa:	468b      	mov	fp, r1
 80103fc:	ea4f 532b 	mov.w	r3, fp, asr #20
 8010400:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8010404:	4413      	add	r3, r2
 8010406:	930a      	str	r3, [sp, #40]	@ 0x28
 8010408:	4bcf      	ldr	r3, [pc, #828]	@ (8010748 <__ieee754_pow+0x780>)
 801040a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 801040e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8010412:	459b      	cmp	fp, r3
 8010414:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010418:	dd08      	ble.n	801042c <__ieee754_pow+0x464>
 801041a:	4bcc      	ldr	r3, [pc, #816]	@ (801074c <__ieee754_pow+0x784>)
 801041c:	459b      	cmp	fp, r3
 801041e:	f340 81a5 	ble.w	801076c <__ieee754_pow+0x7a4>
 8010422:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010424:	3301      	adds	r3, #1
 8010426:	930a      	str	r3, [sp, #40]	@ 0x28
 8010428:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801042c:	f04f 0a00 	mov.w	sl, #0
 8010430:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8010434:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010436:	4bc6      	ldr	r3, [pc, #792]	@ (8010750 <__ieee754_pow+0x788>)
 8010438:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801043c:	ed93 7b00 	vldr	d7, [r3]
 8010440:	4629      	mov	r1, r5
 8010442:	ec53 2b17 	vmov	r2, r3, d7
 8010446:	ed8d 7b06 	vstr	d7, [sp, #24]
 801044a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801044e:	f7ef ff3b 	bl	80002c8 <__aeabi_dsub>
 8010452:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010456:	4606      	mov	r6, r0
 8010458:	460f      	mov	r7, r1
 801045a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801045e:	f7ef ff35 	bl	80002cc <__adddf3>
 8010462:	4602      	mov	r2, r0
 8010464:	460b      	mov	r3, r1
 8010466:	2000      	movs	r0, #0
 8010468:	49ba      	ldr	r1, [pc, #744]	@ (8010754 <__ieee754_pow+0x78c>)
 801046a:	f7f0 fa0f 	bl	800088c <__aeabi_ddiv>
 801046e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8010472:	4602      	mov	r2, r0
 8010474:	460b      	mov	r3, r1
 8010476:	4630      	mov	r0, r6
 8010478:	4639      	mov	r1, r7
 801047a:	f7f0 f8dd 	bl	8000638 <__aeabi_dmul>
 801047e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010482:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8010486:	106d      	asrs	r5, r5, #1
 8010488:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801048c:	f04f 0b00 	mov.w	fp, #0
 8010490:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8010494:	4661      	mov	r1, ip
 8010496:	2200      	movs	r2, #0
 8010498:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801049c:	4658      	mov	r0, fp
 801049e:	46e1      	mov	r9, ip
 80104a0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80104a4:	4614      	mov	r4, r2
 80104a6:	461d      	mov	r5, r3
 80104a8:	f7f0 f8c6 	bl	8000638 <__aeabi_dmul>
 80104ac:	4602      	mov	r2, r0
 80104ae:	460b      	mov	r3, r1
 80104b0:	4630      	mov	r0, r6
 80104b2:	4639      	mov	r1, r7
 80104b4:	f7ef ff08 	bl	80002c8 <__aeabi_dsub>
 80104b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80104bc:	4606      	mov	r6, r0
 80104be:	460f      	mov	r7, r1
 80104c0:	4620      	mov	r0, r4
 80104c2:	4629      	mov	r1, r5
 80104c4:	f7ef ff00 	bl	80002c8 <__aeabi_dsub>
 80104c8:	4602      	mov	r2, r0
 80104ca:	460b      	mov	r3, r1
 80104cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80104d0:	f7ef fefa 	bl	80002c8 <__aeabi_dsub>
 80104d4:	465a      	mov	r2, fp
 80104d6:	464b      	mov	r3, r9
 80104d8:	f7f0 f8ae 	bl	8000638 <__aeabi_dmul>
 80104dc:	4602      	mov	r2, r0
 80104de:	460b      	mov	r3, r1
 80104e0:	4630      	mov	r0, r6
 80104e2:	4639      	mov	r1, r7
 80104e4:	f7ef fef0 	bl	80002c8 <__aeabi_dsub>
 80104e8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80104ec:	f7f0 f8a4 	bl	8000638 <__aeabi_dmul>
 80104f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80104f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80104f8:	4610      	mov	r0, r2
 80104fa:	4619      	mov	r1, r3
 80104fc:	f7f0 f89c 	bl	8000638 <__aeabi_dmul>
 8010500:	a37d      	add	r3, pc, #500	@ (adr r3, 80106f8 <__ieee754_pow+0x730>)
 8010502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010506:	4604      	mov	r4, r0
 8010508:	460d      	mov	r5, r1
 801050a:	f7f0 f895 	bl	8000638 <__aeabi_dmul>
 801050e:	a37c      	add	r3, pc, #496	@ (adr r3, 8010700 <__ieee754_pow+0x738>)
 8010510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010514:	f7ef feda 	bl	80002cc <__adddf3>
 8010518:	4622      	mov	r2, r4
 801051a:	462b      	mov	r3, r5
 801051c:	f7f0 f88c 	bl	8000638 <__aeabi_dmul>
 8010520:	a379      	add	r3, pc, #484	@ (adr r3, 8010708 <__ieee754_pow+0x740>)
 8010522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010526:	f7ef fed1 	bl	80002cc <__adddf3>
 801052a:	4622      	mov	r2, r4
 801052c:	462b      	mov	r3, r5
 801052e:	f7f0 f883 	bl	8000638 <__aeabi_dmul>
 8010532:	a377      	add	r3, pc, #476	@ (adr r3, 8010710 <__ieee754_pow+0x748>)
 8010534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010538:	f7ef fec8 	bl	80002cc <__adddf3>
 801053c:	4622      	mov	r2, r4
 801053e:	462b      	mov	r3, r5
 8010540:	f7f0 f87a 	bl	8000638 <__aeabi_dmul>
 8010544:	a374      	add	r3, pc, #464	@ (adr r3, 8010718 <__ieee754_pow+0x750>)
 8010546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801054a:	f7ef febf 	bl	80002cc <__adddf3>
 801054e:	4622      	mov	r2, r4
 8010550:	462b      	mov	r3, r5
 8010552:	f7f0 f871 	bl	8000638 <__aeabi_dmul>
 8010556:	a372      	add	r3, pc, #456	@ (adr r3, 8010720 <__ieee754_pow+0x758>)
 8010558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801055c:	f7ef feb6 	bl	80002cc <__adddf3>
 8010560:	4622      	mov	r2, r4
 8010562:	4606      	mov	r6, r0
 8010564:	460f      	mov	r7, r1
 8010566:	462b      	mov	r3, r5
 8010568:	4620      	mov	r0, r4
 801056a:	4629      	mov	r1, r5
 801056c:	f7f0 f864 	bl	8000638 <__aeabi_dmul>
 8010570:	4602      	mov	r2, r0
 8010572:	460b      	mov	r3, r1
 8010574:	4630      	mov	r0, r6
 8010576:	4639      	mov	r1, r7
 8010578:	f7f0 f85e 	bl	8000638 <__aeabi_dmul>
 801057c:	465a      	mov	r2, fp
 801057e:	4604      	mov	r4, r0
 8010580:	460d      	mov	r5, r1
 8010582:	464b      	mov	r3, r9
 8010584:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010588:	f7ef fea0 	bl	80002cc <__adddf3>
 801058c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010590:	f7f0 f852 	bl	8000638 <__aeabi_dmul>
 8010594:	4622      	mov	r2, r4
 8010596:	462b      	mov	r3, r5
 8010598:	f7ef fe98 	bl	80002cc <__adddf3>
 801059c:	465a      	mov	r2, fp
 801059e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80105a2:	464b      	mov	r3, r9
 80105a4:	4658      	mov	r0, fp
 80105a6:	4649      	mov	r1, r9
 80105a8:	f7f0 f846 	bl	8000638 <__aeabi_dmul>
 80105ac:	4b6a      	ldr	r3, [pc, #424]	@ (8010758 <__ieee754_pow+0x790>)
 80105ae:	2200      	movs	r2, #0
 80105b0:	4606      	mov	r6, r0
 80105b2:	460f      	mov	r7, r1
 80105b4:	f7ef fe8a 	bl	80002cc <__adddf3>
 80105b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80105bc:	f7ef fe86 	bl	80002cc <__adddf3>
 80105c0:	46d8      	mov	r8, fp
 80105c2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80105c6:	460d      	mov	r5, r1
 80105c8:	465a      	mov	r2, fp
 80105ca:	460b      	mov	r3, r1
 80105cc:	4640      	mov	r0, r8
 80105ce:	4649      	mov	r1, r9
 80105d0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80105d4:	f7f0 f830 	bl	8000638 <__aeabi_dmul>
 80105d8:	465c      	mov	r4, fp
 80105da:	4680      	mov	r8, r0
 80105dc:	4689      	mov	r9, r1
 80105de:	4b5e      	ldr	r3, [pc, #376]	@ (8010758 <__ieee754_pow+0x790>)
 80105e0:	2200      	movs	r2, #0
 80105e2:	4620      	mov	r0, r4
 80105e4:	4629      	mov	r1, r5
 80105e6:	f7ef fe6f 	bl	80002c8 <__aeabi_dsub>
 80105ea:	4632      	mov	r2, r6
 80105ec:	463b      	mov	r3, r7
 80105ee:	f7ef fe6b 	bl	80002c8 <__aeabi_dsub>
 80105f2:	4602      	mov	r2, r0
 80105f4:	460b      	mov	r3, r1
 80105f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80105fa:	f7ef fe65 	bl	80002c8 <__aeabi_dsub>
 80105fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010602:	f7f0 f819 	bl	8000638 <__aeabi_dmul>
 8010606:	4622      	mov	r2, r4
 8010608:	4606      	mov	r6, r0
 801060a:	460f      	mov	r7, r1
 801060c:	462b      	mov	r3, r5
 801060e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010612:	f7f0 f811 	bl	8000638 <__aeabi_dmul>
 8010616:	4602      	mov	r2, r0
 8010618:	460b      	mov	r3, r1
 801061a:	4630      	mov	r0, r6
 801061c:	4639      	mov	r1, r7
 801061e:	f7ef fe55 	bl	80002cc <__adddf3>
 8010622:	4606      	mov	r6, r0
 8010624:	460f      	mov	r7, r1
 8010626:	4602      	mov	r2, r0
 8010628:	460b      	mov	r3, r1
 801062a:	4640      	mov	r0, r8
 801062c:	4649      	mov	r1, r9
 801062e:	f7ef fe4d 	bl	80002cc <__adddf3>
 8010632:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8010636:	a33c      	add	r3, pc, #240	@ (adr r3, 8010728 <__ieee754_pow+0x760>)
 8010638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801063c:	4658      	mov	r0, fp
 801063e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8010642:	460d      	mov	r5, r1
 8010644:	f7ef fff8 	bl	8000638 <__aeabi_dmul>
 8010648:	465c      	mov	r4, fp
 801064a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801064e:	4642      	mov	r2, r8
 8010650:	464b      	mov	r3, r9
 8010652:	4620      	mov	r0, r4
 8010654:	4629      	mov	r1, r5
 8010656:	f7ef fe37 	bl	80002c8 <__aeabi_dsub>
 801065a:	4602      	mov	r2, r0
 801065c:	460b      	mov	r3, r1
 801065e:	4630      	mov	r0, r6
 8010660:	4639      	mov	r1, r7
 8010662:	f7ef fe31 	bl	80002c8 <__aeabi_dsub>
 8010666:	a332      	add	r3, pc, #200	@ (adr r3, 8010730 <__ieee754_pow+0x768>)
 8010668:	e9d3 2300 	ldrd	r2, r3, [r3]
 801066c:	f7ef ffe4 	bl	8000638 <__aeabi_dmul>
 8010670:	a331      	add	r3, pc, #196	@ (adr r3, 8010738 <__ieee754_pow+0x770>)
 8010672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010676:	4606      	mov	r6, r0
 8010678:	460f      	mov	r7, r1
 801067a:	4620      	mov	r0, r4
 801067c:	4629      	mov	r1, r5
 801067e:	f7ef ffdb 	bl	8000638 <__aeabi_dmul>
 8010682:	4602      	mov	r2, r0
 8010684:	460b      	mov	r3, r1
 8010686:	4630      	mov	r0, r6
 8010688:	4639      	mov	r1, r7
 801068a:	f7ef fe1f 	bl	80002cc <__adddf3>
 801068e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010690:	4b32      	ldr	r3, [pc, #200]	@ (801075c <__ieee754_pow+0x794>)
 8010692:	4413      	add	r3, r2
 8010694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010698:	f7ef fe18 	bl	80002cc <__adddf3>
 801069c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80106a0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80106a2:	f7ef ff5f 	bl	8000564 <__aeabi_i2d>
 80106a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80106a8:	4b2d      	ldr	r3, [pc, #180]	@ (8010760 <__ieee754_pow+0x798>)
 80106aa:	4413      	add	r3, r2
 80106ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80106b0:	4606      	mov	r6, r0
 80106b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80106b6:	460f      	mov	r7, r1
 80106b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80106bc:	f7ef fe06 	bl	80002cc <__adddf3>
 80106c0:	4642      	mov	r2, r8
 80106c2:	464b      	mov	r3, r9
 80106c4:	f7ef fe02 	bl	80002cc <__adddf3>
 80106c8:	4632      	mov	r2, r6
 80106ca:	463b      	mov	r3, r7
 80106cc:	f7ef fdfe 	bl	80002cc <__adddf3>
 80106d0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80106d4:	4632      	mov	r2, r6
 80106d6:	463b      	mov	r3, r7
 80106d8:	4658      	mov	r0, fp
 80106da:	460d      	mov	r5, r1
 80106dc:	f7ef fdf4 	bl	80002c8 <__aeabi_dsub>
 80106e0:	4642      	mov	r2, r8
 80106e2:	464b      	mov	r3, r9
 80106e4:	f7ef fdf0 	bl	80002c8 <__aeabi_dsub>
 80106e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80106ec:	f7ef fdec 	bl	80002c8 <__aeabi_dsub>
 80106f0:	465c      	mov	r4, fp
 80106f2:	4602      	mov	r2, r0
 80106f4:	e036      	b.n	8010764 <__ieee754_pow+0x79c>
 80106f6:	bf00      	nop
 80106f8:	4a454eef 	.word	0x4a454eef
 80106fc:	3fca7e28 	.word	0x3fca7e28
 8010700:	93c9db65 	.word	0x93c9db65
 8010704:	3fcd864a 	.word	0x3fcd864a
 8010708:	a91d4101 	.word	0xa91d4101
 801070c:	3fd17460 	.word	0x3fd17460
 8010710:	518f264d 	.word	0x518f264d
 8010714:	3fd55555 	.word	0x3fd55555
 8010718:	db6fabff 	.word	0xdb6fabff
 801071c:	3fdb6db6 	.word	0x3fdb6db6
 8010720:	33333303 	.word	0x33333303
 8010724:	3fe33333 	.word	0x3fe33333
 8010728:	e0000000 	.word	0xe0000000
 801072c:	3feec709 	.word	0x3feec709
 8010730:	dc3a03fd 	.word	0xdc3a03fd
 8010734:	3feec709 	.word	0x3feec709
 8010738:	145b01f5 	.word	0x145b01f5
 801073c:	be3e2fe0 	.word	0xbe3e2fe0
 8010740:	7ff00000 	.word	0x7ff00000
 8010744:	43400000 	.word	0x43400000
 8010748:	0003988e 	.word	0x0003988e
 801074c:	000bb679 	.word	0x000bb679
 8010750:	08012470 	.word	0x08012470
 8010754:	3ff00000 	.word	0x3ff00000
 8010758:	40080000 	.word	0x40080000
 801075c:	08012450 	.word	0x08012450
 8010760:	08012460 	.word	0x08012460
 8010764:	460b      	mov	r3, r1
 8010766:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801076a:	e5d7      	b.n	801031c <__ieee754_pow+0x354>
 801076c:	f04f 0a01 	mov.w	sl, #1
 8010770:	e65e      	b.n	8010430 <__ieee754_pow+0x468>
 8010772:	a3b4      	add	r3, pc, #720	@ (adr r3, 8010a44 <__ieee754_pow+0xa7c>)
 8010774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010778:	4630      	mov	r0, r6
 801077a:	4639      	mov	r1, r7
 801077c:	f7ef fda6 	bl	80002cc <__adddf3>
 8010780:	4642      	mov	r2, r8
 8010782:	e9cd 0100 	strd	r0, r1, [sp]
 8010786:	464b      	mov	r3, r9
 8010788:	4620      	mov	r0, r4
 801078a:	4629      	mov	r1, r5
 801078c:	f7ef fd9c 	bl	80002c8 <__aeabi_dsub>
 8010790:	4602      	mov	r2, r0
 8010792:	460b      	mov	r3, r1
 8010794:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010798:	f7f0 f9de 	bl	8000b58 <__aeabi_dcmpgt>
 801079c:	2800      	cmp	r0, #0
 801079e:	f47f ae00 	bne.w	80103a2 <__ieee754_pow+0x3da>
 80107a2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80107a6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80107aa:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80107ae:	fa43 fa0a 	asr.w	sl, r3, sl
 80107b2:	44da      	add	sl, fp
 80107b4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80107b8:	489d      	ldr	r0, [pc, #628]	@ (8010a30 <__ieee754_pow+0xa68>)
 80107ba:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80107be:	4108      	asrs	r0, r1
 80107c0:	ea00 030a 	and.w	r3, r0, sl
 80107c4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80107c8:	f1c1 0114 	rsb	r1, r1, #20
 80107cc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80107d0:	fa4a fa01 	asr.w	sl, sl, r1
 80107d4:	f1bb 0f00 	cmp.w	fp, #0
 80107d8:	4640      	mov	r0, r8
 80107da:	4649      	mov	r1, r9
 80107dc:	f04f 0200 	mov.w	r2, #0
 80107e0:	bfb8      	it	lt
 80107e2:	f1ca 0a00 	rsblt	sl, sl, #0
 80107e6:	f7ef fd6f 	bl	80002c8 <__aeabi_dsub>
 80107ea:	4680      	mov	r8, r0
 80107ec:	4689      	mov	r9, r1
 80107ee:	4632      	mov	r2, r6
 80107f0:	463b      	mov	r3, r7
 80107f2:	4640      	mov	r0, r8
 80107f4:	4649      	mov	r1, r9
 80107f6:	f7ef fd69 	bl	80002cc <__adddf3>
 80107fa:	2400      	movs	r4, #0
 80107fc:	a37c      	add	r3, pc, #496	@ (adr r3, 80109f0 <__ieee754_pow+0xa28>)
 80107fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010802:	4620      	mov	r0, r4
 8010804:	460d      	mov	r5, r1
 8010806:	f7ef ff17 	bl	8000638 <__aeabi_dmul>
 801080a:	4642      	mov	r2, r8
 801080c:	e9cd 0100 	strd	r0, r1, [sp]
 8010810:	464b      	mov	r3, r9
 8010812:	4620      	mov	r0, r4
 8010814:	4629      	mov	r1, r5
 8010816:	f7ef fd57 	bl	80002c8 <__aeabi_dsub>
 801081a:	4602      	mov	r2, r0
 801081c:	460b      	mov	r3, r1
 801081e:	4630      	mov	r0, r6
 8010820:	4639      	mov	r1, r7
 8010822:	f7ef fd51 	bl	80002c8 <__aeabi_dsub>
 8010826:	a374      	add	r3, pc, #464	@ (adr r3, 80109f8 <__ieee754_pow+0xa30>)
 8010828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801082c:	f7ef ff04 	bl	8000638 <__aeabi_dmul>
 8010830:	a373      	add	r3, pc, #460	@ (adr r3, 8010a00 <__ieee754_pow+0xa38>)
 8010832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010836:	4680      	mov	r8, r0
 8010838:	4689      	mov	r9, r1
 801083a:	4620      	mov	r0, r4
 801083c:	4629      	mov	r1, r5
 801083e:	f7ef fefb 	bl	8000638 <__aeabi_dmul>
 8010842:	4602      	mov	r2, r0
 8010844:	460b      	mov	r3, r1
 8010846:	4640      	mov	r0, r8
 8010848:	4649      	mov	r1, r9
 801084a:	f7ef fd3f 	bl	80002cc <__adddf3>
 801084e:	4604      	mov	r4, r0
 8010850:	460d      	mov	r5, r1
 8010852:	4602      	mov	r2, r0
 8010854:	460b      	mov	r3, r1
 8010856:	e9dd 0100 	ldrd	r0, r1, [sp]
 801085a:	f7ef fd37 	bl	80002cc <__adddf3>
 801085e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010862:	4680      	mov	r8, r0
 8010864:	4689      	mov	r9, r1
 8010866:	f7ef fd2f 	bl	80002c8 <__aeabi_dsub>
 801086a:	4602      	mov	r2, r0
 801086c:	460b      	mov	r3, r1
 801086e:	4620      	mov	r0, r4
 8010870:	4629      	mov	r1, r5
 8010872:	f7ef fd29 	bl	80002c8 <__aeabi_dsub>
 8010876:	4642      	mov	r2, r8
 8010878:	4606      	mov	r6, r0
 801087a:	460f      	mov	r7, r1
 801087c:	464b      	mov	r3, r9
 801087e:	4640      	mov	r0, r8
 8010880:	4649      	mov	r1, r9
 8010882:	f7ef fed9 	bl	8000638 <__aeabi_dmul>
 8010886:	a360      	add	r3, pc, #384	@ (adr r3, 8010a08 <__ieee754_pow+0xa40>)
 8010888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801088c:	4604      	mov	r4, r0
 801088e:	460d      	mov	r5, r1
 8010890:	f7ef fed2 	bl	8000638 <__aeabi_dmul>
 8010894:	a35e      	add	r3, pc, #376	@ (adr r3, 8010a10 <__ieee754_pow+0xa48>)
 8010896:	e9d3 2300 	ldrd	r2, r3, [r3]
 801089a:	f7ef fd15 	bl	80002c8 <__aeabi_dsub>
 801089e:	4622      	mov	r2, r4
 80108a0:	462b      	mov	r3, r5
 80108a2:	f7ef fec9 	bl	8000638 <__aeabi_dmul>
 80108a6:	a35c      	add	r3, pc, #368	@ (adr r3, 8010a18 <__ieee754_pow+0xa50>)
 80108a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ac:	f7ef fd0e 	bl	80002cc <__adddf3>
 80108b0:	4622      	mov	r2, r4
 80108b2:	462b      	mov	r3, r5
 80108b4:	f7ef fec0 	bl	8000638 <__aeabi_dmul>
 80108b8:	a359      	add	r3, pc, #356	@ (adr r3, 8010a20 <__ieee754_pow+0xa58>)
 80108ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108be:	f7ef fd03 	bl	80002c8 <__aeabi_dsub>
 80108c2:	4622      	mov	r2, r4
 80108c4:	462b      	mov	r3, r5
 80108c6:	f7ef feb7 	bl	8000638 <__aeabi_dmul>
 80108ca:	a357      	add	r3, pc, #348	@ (adr r3, 8010a28 <__ieee754_pow+0xa60>)
 80108cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108d0:	f7ef fcfc 	bl	80002cc <__adddf3>
 80108d4:	4622      	mov	r2, r4
 80108d6:	462b      	mov	r3, r5
 80108d8:	f7ef feae 	bl	8000638 <__aeabi_dmul>
 80108dc:	4602      	mov	r2, r0
 80108de:	460b      	mov	r3, r1
 80108e0:	4640      	mov	r0, r8
 80108e2:	4649      	mov	r1, r9
 80108e4:	f7ef fcf0 	bl	80002c8 <__aeabi_dsub>
 80108e8:	4604      	mov	r4, r0
 80108ea:	460d      	mov	r5, r1
 80108ec:	4602      	mov	r2, r0
 80108ee:	460b      	mov	r3, r1
 80108f0:	4640      	mov	r0, r8
 80108f2:	4649      	mov	r1, r9
 80108f4:	f7ef fea0 	bl	8000638 <__aeabi_dmul>
 80108f8:	2200      	movs	r2, #0
 80108fa:	e9cd 0100 	strd	r0, r1, [sp]
 80108fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010902:	4620      	mov	r0, r4
 8010904:	4629      	mov	r1, r5
 8010906:	f7ef fcdf 	bl	80002c8 <__aeabi_dsub>
 801090a:	4602      	mov	r2, r0
 801090c:	460b      	mov	r3, r1
 801090e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010912:	f7ef ffbb 	bl	800088c <__aeabi_ddiv>
 8010916:	4632      	mov	r2, r6
 8010918:	4604      	mov	r4, r0
 801091a:	460d      	mov	r5, r1
 801091c:	463b      	mov	r3, r7
 801091e:	4640      	mov	r0, r8
 8010920:	4649      	mov	r1, r9
 8010922:	f7ef fe89 	bl	8000638 <__aeabi_dmul>
 8010926:	4632      	mov	r2, r6
 8010928:	463b      	mov	r3, r7
 801092a:	f7ef fccf 	bl	80002cc <__adddf3>
 801092e:	4602      	mov	r2, r0
 8010930:	460b      	mov	r3, r1
 8010932:	4620      	mov	r0, r4
 8010934:	4629      	mov	r1, r5
 8010936:	f7ef fcc7 	bl	80002c8 <__aeabi_dsub>
 801093a:	4642      	mov	r2, r8
 801093c:	464b      	mov	r3, r9
 801093e:	f7ef fcc3 	bl	80002c8 <__aeabi_dsub>
 8010942:	460b      	mov	r3, r1
 8010944:	4602      	mov	r2, r0
 8010946:	493b      	ldr	r1, [pc, #236]	@ (8010a34 <__ieee754_pow+0xa6c>)
 8010948:	2000      	movs	r0, #0
 801094a:	f7ef fcbd 	bl	80002c8 <__aeabi_dsub>
 801094e:	ec41 0b10 	vmov	d0, r0, r1
 8010952:	ee10 3a90 	vmov	r3, s1
 8010956:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801095a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801095e:	da30      	bge.n	80109c2 <__ieee754_pow+0x9fa>
 8010960:	4650      	mov	r0, sl
 8010962:	f000 fbed 	bl	8011140 <scalbn>
 8010966:	ec51 0b10 	vmov	r0, r1, d0
 801096a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801096e:	f7ff bbd2 	b.w	8010116 <__ieee754_pow+0x14e>
 8010972:	4c31      	ldr	r4, [pc, #196]	@ (8010a38 <__ieee754_pow+0xa70>)
 8010974:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010978:	42a3      	cmp	r3, r4
 801097a:	d91a      	bls.n	80109b2 <__ieee754_pow+0x9ea>
 801097c:	4b2f      	ldr	r3, [pc, #188]	@ (8010a3c <__ieee754_pow+0xa74>)
 801097e:	440b      	add	r3, r1
 8010980:	4303      	orrs	r3, r0
 8010982:	d009      	beq.n	8010998 <__ieee754_pow+0x9d0>
 8010984:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010988:	2200      	movs	r2, #0
 801098a:	2300      	movs	r3, #0
 801098c:	f7f0 f8c6 	bl	8000b1c <__aeabi_dcmplt>
 8010990:	3800      	subs	r0, #0
 8010992:	bf18      	it	ne
 8010994:	2001      	movne	r0, #1
 8010996:	e42b      	b.n	80101f0 <__ieee754_pow+0x228>
 8010998:	4642      	mov	r2, r8
 801099a:	464b      	mov	r3, r9
 801099c:	f7ef fc94 	bl	80002c8 <__aeabi_dsub>
 80109a0:	4632      	mov	r2, r6
 80109a2:	463b      	mov	r3, r7
 80109a4:	f7f0 f8ce 	bl	8000b44 <__aeabi_dcmpge>
 80109a8:	2800      	cmp	r0, #0
 80109aa:	d1eb      	bne.n	8010984 <__ieee754_pow+0x9bc>
 80109ac:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8010a4c <__ieee754_pow+0xa84>
 80109b0:	e6f7      	b.n	80107a2 <__ieee754_pow+0x7da>
 80109b2:	469a      	mov	sl, r3
 80109b4:	4b22      	ldr	r3, [pc, #136]	@ (8010a40 <__ieee754_pow+0xa78>)
 80109b6:	459a      	cmp	sl, r3
 80109b8:	f63f aef3 	bhi.w	80107a2 <__ieee754_pow+0x7da>
 80109bc:	f8dd a010 	ldr.w	sl, [sp, #16]
 80109c0:	e715      	b.n	80107ee <__ieee754_pow+0x826>
 80109c2:	ec51 0b10 	vmov	r0, r1, d0
 80109c6:	4619      	mov	r1, r3
 80109c8:	e7cf      	b.n	801096a <__ieee754_pow+0x9a2>
 80109ca:	491a      	ldr	r1, [pc, #104]	@ (8010a34 <__ieee754_pow+0xa6c>)
 80109cc:	2000      	movs	r0, #0
 80109ce:	f7ff bb18 	b.w	8010002 <__ieee754_pow+0x3a>
 80109d2:	2000      	movs	r0, #0
 80109d4:	2100      	movs	r1, #0
 80109d6:	f7ff bb14 	b.w	8010002 <__ieee754_pow+0x3a>
 80109da:	4630      	mov	r0, r6
 80109dc:	4639      	mov	r1, r7
 80109de:	f7ff bb10 	b.w	8010002 <__ieee754_pow+0x3a>
 80109e2:	460c      	mov	r4, r1
 80109e4:	f7ff bb5e 	b.w	80100a4 <__ieee754_pow+0xdc>
 80109e8:	2400      	movs	r4, #0
 80109ea:	f7ff bb49 	b.w	8010080 <__ieee754_pow+0xb8>
 80109ee:	bf00      	nop
 80109f0:	00000000 	.word	0x00000000
 80109f4:	3fe62e43 	.word	0x3fe62e43
 80109f8:	fefa39ef 	.word	0xfefa39ef
 80109fc:	3fe62e42 	.word	0x3fe62e42
 8010a00:	0ca86c39 	.word	0x0ca86c39
 8010a04:	be205c61 	.word	0xbe205c61
 8010a08:	72bea4d0 	.word	0x72bea4d0
 8010a0c:	3e663769 	.word	0x3e663769
 8010a10:	c5d26bf1 	.word	0xc5d26bf1
 8010a14:	3ebbbd41 	.word	0x3ebbbd41
 8010a18:	af25de2c 	.word	0xaf25de2c
 8010a1c:	3f11566a 	.word	0x3f11566a
 8010a20:	16bebd93 	.word	0x16bebd93
 8010a24:	3f66c16c 	.word	0x3f66c16c
 8010a28:	5555553e 	.word	0x5555553e
 8010a2c:	3fc55555 	.word	0x3fc55555
 8010a30:	fff00000 	.word	0xfff00000
 8010a34:	3ff00000 	.word	0x3ff00000
 8010a38:	4090cbff 	.word	0x4090cbff
 8010a3c:	3f6f3400 	.word	0x3f6f3400
 8010a40:	3fe00000 	.word	0x3fe00000
 8010a44:	652b82fe 	.word	0x652b82fe
 8010a48:	3c971547 	.word	0x3c971547
 8010a4c:	4090cc00 	.word	0x4090cc00

08010a50 <atan>:
 8010a50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a54:	ec55 4b10 	vmov	r4, r5, d0
 8010a58:	4bbf      	ldr	r3, [pc, #764]	@ (8010d58 <atan+0x308>)
 8010a5a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8010a5e:	429e      	cmp	r6, r3
 8010a60:	46ab      	mov	fp, r5
 8010a62:	d918      	bls.n	8010a96 <atan+0x46>
 8010a64:	4bbd      	ldr	r3, [pc, #756]	@ (8010d5c <atan+0x30c>)
 8010a66:	429e      	cmp	r6, r3
 8010a68:	d801      	bhi.n	8010a6e <atan+0x1e>
 8010a6a:	d109      	bne.n	8010a80 <atan+0x30>
 8010a6c:	b144      	cbz	r4, 8010a80 <atan+0x30>
 8010a6e:	4622      	mov	r2, r4
 8010a70:	462b      	mov	r3, r5
 8010a72:	4620      	mov	r0, r4
 8010a74:	4629      	mov	r1, r5
 8010a76:	f7ef fc29 	bl	80002cc <__adddf3>
 8010a7a:	4604      	mov	r4, r0
 8010a7c:	460d      	mov	r5, r1
 8010a7e:	e006      	b.n	8010a8e <atan+0x3e>
 8010a80:	f1bb 0f00 	cmp.w	fp, #0
 8010a84:	f340 812b 	ble.w	8010cde <atan+0x28e>
 8010a88:	a597      	add	r5, pc, #604	@ (adr r5, 8010ce8 <atan+0x298>)
 8010a8a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010a8e:	ec45 4b10 	vmov	d0, r4, r5
 8010a92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a96:	4bb2      	ldr	r3, [pc, #712]	@ (8010d60 <atan+0x310>)
 8010a98:	429e      	cmp	r6, r3
 8010a9a:	d813      	bhi.n	8010ac4 <atan+0x74>
 8010a9c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8010aa0:	429e      	cmp	r6, r3
 8010aa2:	d80c      	bhi.n	8010abe <atan+0x6e>
 8010aa4:	a392      	add	r3, pc, #584	@ (adr r3, 8010cf0 <atan+0x2a0>)
 8010aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aaa:	4620      	mov	r0, r4
 8010aac:	4629      	mov	r1, r5
 8010aae:	f7ef fc0d 	bl	80002cc <__adddf3>
 8010ab2:	4bac      	ldr	r3, [pc, #688]	@ (8010d64 <atan+0x314>)
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	f7f0 f84f 	bl	8000b58 <__aeabi_dcmpgt>
 8010aba:	2800      	cmp	r0, #0
 8010abc:	d1e7      	bne.n	8010a8e <atan+0x3e>
 8010abe:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8010ac2:	e029      	b.n	8010b18 <atan+0xc8>
 8010ac4:	f000 f95c 	bl	8010d80 <fabs>
 8010ac8:	4ba7      	ldr	r3, [pc, #668]	@ (8010d68 <atan+0x318>)
 8010aca:	429e      	cmp	r6, r3
 8010acc:	ec55 4b10 	vmov	r4, r5, d0
 8010ad0:	f200 80bc 	bhi.w	8010c4c <atan+0x1fc>
 8010ad4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8010ad8:	429e      	cmp	r6, r3
 8010ada:	f200 809e 	bhi.w	8010c1a <atan+0x1ca>
 8010ade:	4622      	mov	r2, r4
 8010ae0:	462b      	mov	r3, r5
 8010ae2:	4620      	mov	r0, r4
 8010ae4:	4629      	mov	r1, r5
 8010ae6:	f7ef fbf1 	bl	80002cc <__adddf3>
 8010aea:	4b9e      	ldr	r3, [pc, #632]	@ (8010d64 <atan+0x314>)
 8010aec:	2200      	movs	r2, #0
 8010aee:	f7ef fbeb 	bl	80002c8 <__aeabi_dsub>
 8010af2:	2200      	movs	r2, #0
 8010af4:	4606      	mov	r6, r0
 8010af6:	460f      	mov	r7, r1
 8010af8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010afc:	4620      	mov	r0, r4
 8010afe:	4629      	mov	r1, r5
 8010b00:	f7ef fbe4 	bl	80002cc <__adddf3>
 8010b04:	4602      	mov	r2, r0
 8010b06:	460b      	mov	r3, r1
 8010b08:	4630      	mov	r0, r6
 8010b0a:	4639      	mov	r1, r7
 8010b0c:	f7ef febe 	bl	800088c <__aeabi_ddiv>
 8010b10:	f04f 0a00 	mov.w	sl, #0
 8010b14:	4604      	mov	r4, r0
 8010b16:	460d      	mov	r5, r1
 8010b18:	4622      	mov	r2, r4
 8010b1a:	462b      	mov	r3, r5
 8010b1c:	4620      	mov	r0, r4
 8010b1e:	4629      	mov	r1, r5
 8010b20:	f7ef fd8a 	bl	8000638 <__aeabi_dmul>
 8010b24:	4602      	mov	r2, r0
 8010b26:	460b      	mov	r3, r1
 8010b28:	4680      	mov	r8, r0
 8010b2a:	4689      	mov	r9, r1
 8010b2c:	f7ef fd84 	bl	8000638 <__aeabi_dmul>
 8010b30:	a371      	add	r3, pc, #452	@ (adr r3, 8010cf8 <atan+0x2a8>)
 8010b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b36:	4606      	mov	r6, r0
 8010b38:	460f      	mov	r7, r1
 8010b3a:	f7ef fd7d 	bl	8000638 <__aeabi_dmul>
 8010b3e:	a370      	add	r3, pc, #448	@ (adr r3, 8010d00 <atan+0x2b0>)
 8010b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b44:	f7ef fbc2 	bl	80002cc <__adddf3>
 8010b48:	4632      	mov	r2, r6
 8010b4a:	463b      	mov	r3, r7
 8010b4c:	f7ef fd74 	bl	8000638 <__aeabi_dmul>
 8010b50:	a36d      	add	r3, pc, #436	@ (adr r3, 8010d08 <atan+0x2b8>)
 8010b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b56:	f7ef fbb9 	bl	80002cc <__adddf3>
 8010b5a:	4632      	mov	r2, r6
 8010b5c:	463b      	mov	r3, r7
 8010b5e:	f7ef fd6b 	bl	8000638 <__aeabi_dmul>
 8010b62:	a36b      	add	r3, pc, #428	@ (adr r3, 8010d10 <atan+0x2c0>)
 8010b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b68:	f7ef fbb0 	bl	80002cc <__adddf3>
 8010b6c:	4632      	mov	r2, r6
 8010b6e:	463b      	mov	r3, r7
 8010b70:	f7ef fd62 	bl	8000638 <__aeabi_dmul>
 8010b74:	a368      	add	r3, pc, #416	@ (adr r3, 8010d18 <atan+0x2c8>)
 8010b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b7a:	f7ef fba7 	bl	80002cc <__adddf3>
 8010b7e:	4632      	mov	r2, r6
 8010b80:	463b      	mov	r3, r7
 8010b82:	f7ef fd59 	bl	8000638 <__aeabi_dmul>
 8010b86:	a366      	add	r3, pc, #408	@ (adr r3, 8010d20 <atan+0x2d0>)
 8010b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b8c:	f7ef fb9e 	bl	80002cc <__adddf3>
 8010b90:	4642      	mov	r2, r8
 8010b92:	464b      	mov	r3, r9
 8010b94:	f7ef fd50 	bl	8000638 <__aeabi_dmul>
 8010b98:	a363      	add	r3, pc, #396	@ (adr r3, 8010d28 <atan+0x2d8>)
 8010b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b9e:	4680      	mov	r8, r0
 8010ba0:	4689      	mov	r9, r1
 8010ba2:	4630      	mov	r0, r6
 8010ba4:	4639      	mov	r1, r7
 8010ba6:	f7ef fd47 	bl	8000638 <__aeabi_dmul>
 8010baa:	a361      	add	r3, pc, #388	@ (adr r3, 8010d30 <atan+0x2e0>)
 8010bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bb0:	f7ef fb8a 	bl	80002c8 <__aeabi_dsub>
 8010bb4:	4632      	mov	r2, r6
 8010bb6:	463b      	mov	r3, r7
 8010bb8:	f7ef fd3e 	bl	8000638 <__aeabi_dmul>
 8010bbc:	a35e      	add	r3, pc, #376	@ (adr r3, 8010d38 <atan+0x2e8>)
 8010bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bc2:	f7ef fb81 	bl	80002c8 <__aeabi_dsub>
 8010bc6:	4632      	mov	r2, r6
 8010bc8:	463b      	mov	r3, r7
 8010bca:	f7ef fd35 	bl	8000638 <__aeabi_dmul>
 8010bce:	a35c      	add	r3, pc, #368	@ (adr r3, 8010d40 <atan+0x2f0>)
 8010bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bd4:	f7ef fb78 	bl	80002c8 <__aeabi_dsub>
 8010bd8:	4632      	mov	r2, r6
 8010bda:	463b      	mov	r3, r7
 8010bdc:	f7ef fd2c 	bl	8000638 <__aeabi_dmul>
 8010be0:	a359      	add	r3, pc, #356	@ (adr r3, 8010d48 <atan+0x2f8>)
 8010be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be6:	f7ef fb6f 	bl	80002c8 <__aeabi_dsub>
 8010bea:	4632      	mov	r2, r6
 8010bec:	463b      	mov	r3, r7
 8010bee:	f7ef fd23 	bl	8000638 <__aeabi_dmul>
 8010bf2:	4602      	mov	r2, r0
 8010bf4:	460b      	mov	r3, r1
 8010bf6:	4640      	mov	r0, r8
 8010bf8:	4649      	mov	r1, r9
 8010bfa:	f7ef fb67 	bl	80002cc <__adddf3>
 8010bfe:	4622      	mov	r2, r4
 8010c00:	462b      	mov	r3, r5
 8010c02:	f7ef fd19 	bl	8000638 <__aeabi_dmul>
 8010c06:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8010c0a:	4602      	mov	r2, r0
 8010c0c:	460b      	mov	r3, r1
 8010c0e:	d148      	bne.n	8010ca2 <atan+0x252>
 8010c10:	4620      	mov	r0, r4
 8010c12:	4629      	mov	r1, r5
 8010c14:	f7ef fb58 	bl	80002c8 <__aeabi_dsub>
 8010c18:	e72f      	b.n	8010a7a <atan+0x2a>
 8010c1a:	4b52      	ldr	r3, [pc, #328]	@ (8010d64 <atan+0x314>)
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	4620      	mov	r0, r4
 8010c20:	4629      	mov	r1, r5
 8010c22:	f7ef fb51 	bl	80002c8 <__aeabi_dsub>
 8010c26:	4b4f      	ldr	r3, [pc, #316]	@ (8010d64 <atan+0x314>)
 8010c28:	4606      	mov	r6, r0
 8010c2a:	460f      	mov	r7, r1
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	4620      	mov	r0, r4
 8010c30:	4629      	mov	r1, r5
 8010c32:	f7ef fb4b 	bl	80002cc <__adddf3>
 8010c36:	4602      	mov	r2, r0
 8010c38:	460b      	mov	r3, r1
 8010c3a:	4630      	mov	r0, r6
 8010c3c:	4639      	mov	r1, r7
 8010c3e:	f7ef fe25 	bl	800088c <__aeabi_ddiv>
 8010c42:	f04f 0a01 	mov.w	sl, #1
 8010c46:	4604      	mov	r4, r0
 8010c48:	460d      	mov	r5, r1
 8010c4a:	e765      	b.n	8010b18 <atan+0xc8>
 8010c4c:	4b47      	ldr	r3, [pc, #284]	@ (8010d6c <atan+0x31c>)
 8010c4e:	429e      	cmp	r6, r3
 8010c50:	d21c      	bcs.n	8010c8c <atan+0x23c>
 8010c52:	4b47      	ldr	r3, [pc, #284]	@ (8010d70 <atan+0x320>)
 8010c54:	2200      	movs	r2, #0
 8010c56:	4620      	mov	r0, r4
 8010c58:	4629      	mov	r1, r5
 8010c5a:	f7ef fb35 	bl	80002c8 <__aeabi_dsub>
 8010c5e:	4b44      	ldr	r3, [pc, #272]	@ (8010d70 <atan+0x320>)
 8010c60:	4606      	mov	r6, r0
 8010c62:	460f      	mov	r7, r1
 8010c64:	2200      	movs	r2, #0
 8010c66:	4620      	mov	r0, r4
 8010c68:	4629      	mov	r1, r5
 8010c6a:	f7ef fce5 	bl	8000638 <__aeabi_dmul>
 8010c6e:	4b3d      	ldr	r3, [pc, #244]	@ (8010d64 <atan+0x314>)
 8010c70:	2200      	movs	r2, #0
 8010c72:	f7ef fb2b 	bl	80002cc <__adddf3>
 8010c76:	4602      	mov	r2, r0
 8010c78:	460b      	mov	r3, r1
 8010c7a:	4630      	mov	r0, r6
 8010c7c:	4639      	mov	r1, r7
 8010c7e:	f7ef fe05 	bl	800088c <__aeabi_ddiv>
 8010c82:	f04f 0a02 	mov.w	sl, #2
 8010c86:	4604      	mov	r4, r0
 8010c88:	460d      	mov	r5, r1
 8010c8a:	e745      	b.n	8010b18 <atan+0xc8>
 8010c8c:	4622      	mov	r2, r4
 8010c8e:	462b      	mov	r3, r5
 8010c90:	4938      	ldr	r1, [pc, #224]	@ (8010d74 <atan+0x324>)
 8010c92:	2000      	movs	r0, #0
 8010c94:	f7ef fdfa 	bl	800088c <__aeabi_ddiv>
 8010c98:	f04f 0a03 	mov.w	sl, #3
 8010c9c:	4604      	mov	r4, r0
 8010c9e:	460d      	mov	r5, r1
 8010ca0:	e73a      	b.n	8010b18 <atan+0xc8>
 8010ca2:	4b35      	ldr	r3, [pc, #212]	@ (8010d78 <atan+0x328>)
 8010ca4:	4e35      	ldr	r6, [pc, #212]	@ (8010d7c <atan+0x32c>)
 8010ca6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cae:	f7ef fb0b 	bl	80002c8 <__aeabi_dsub>
 8010cb2:	4622      	mov	r2, r4
 8010cb4:	462b      	mov	r3, r5
 8010cb6:	f7ef fb07 	bl	80002c8 <__aeabi_dsub>
 8010cba:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010cbe:	4602      	mov	r2, r0
 8010cc0:	460b      	mov	r3, r1
 8010cc2:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010cc6:	f7ef faff 	bl	80002c8 <__aeabi_dsub>
 8010cca:	f1bb 0f00 	cmp.w	fp, #0
 8010cce:	4604      	mov	r4, r0
 8010cd0:	460d      	mov	r5, r1
 8010cd2:	f6bf aedc 	bge.w	8010a8e <atan+0x3e>
 8010cd6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010cda:	461d      	mov	r5, r3
 8010cdc:	e6d7      	b.n	8010a8e <atan+0x3e>
 8010cde:	a51c      	add	r5, pc, #112	@ (adr r5, 8010d50 <atan+0x300>)
 8010ce0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010ce4:	e6d3      	b.n	8010a8e <atan+0x3e>
 8010ce6:	bf00      	nop
 8010ce8:	54442d18 	.word	0x54442d18
 8010cec:	3ff921fb 	.word	0x3ff921fb
 8010cf0:	8800759c 	.word	0x8800759c
 8010cf4:	7e37e43c 	.word	0x7e37e43c
 8010cf8:	e322da11 	.word	0xe322da11
 8010cfc:	3f90ad3a 	.word	0x3f90ad3a
 8010d00:	24760deb 	.word	0x24760deb
 8010d04:	3fa97b4b 	.word	0x3fa97b4b
 8010d08:	a0d03d51 	.word	0xa0d03d51
 8010d0c:	3fb10d66 	.word	0x3fb10d66
 8010d10:	c54c206e 	.word	0xc54c206e
 8010d14:	3fb745cd 	.word	0x3fb745cd
 8010d18:	920083ff 	.word	0x920083ff
 8010d1c:	3fc24924 	.word	0x3fc24924
 8010d20:	5555550d 	.word	0x5555550d
 8010d24:	3fd55555 	.word	0x3fd55555
 8010d28:	2c6a6c2f 	.word	0x2c6a6c2f
 8010d2c:	bfa2b444 	.word	0xbfa2b444
 8010d30:	52defd9a 	.word	0x52defd9a
 8010d34:	3fadde2d 	.word	0x3fadde2d
 8010d38:	af749a6d 	.word	0xaf749a6d
 8010d3c:	3fb3b0f2 	.word	0x3fb3b0f2
 8010d40:	fe231671 	.word	0xfe231671
 8010d44:	3fbc71c6 	.word	0x3fbc71c6
 8010d48:	9998ebc4 	.word	0x9998ebc4
 8010d4c:	3fc99999 	.word	0x3fc99999
 8010d50:	54442d18 	.word	0x54442d18
 8010d54:	bff921fb 	.word	0xbff921fb
 8010d58:	440fffff 	.word	0x440fffff
 8010d5c:	7ff00000 	.word	0x7ff00000
 8010d60:	3fdbffff 	.word	0x3fdbffff
 8010d64:	3ff00000 	.word	0x3ff00000
 8010d68:	3ff2ffff 	.word	0x3ff2ffff
 8010d6c:	40038000 	.word	0x40038000
 8010d70:	3ff80000 	.word	0x3ff80000
 8010d74:	bff00000 	.word	0xbff00000
 8010d78:	08012480 	.word	0x08012480
 8010d7c:	080124a0 	.word	0x080124a0

08010d80 <fabs>:
 8010d80:	ec51 0b10 	vmov	r0, r1, d0
 8010d84:	4602      	mov	r2, r0
 8010d86:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010d8a:	ec43 2b10 	vmov	d0, r2, r3
 8010d8e:	4770      	bx	lr

08010d90 <__kernel_cosf>:
 8010d90:	ee10 3a10 	vmov	r3, s0
 8010d94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010d98:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8010d9c:	eef0 6a40 	vmov.f32	s13, s0
 8010da0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010da4:	d204      	bcs.n	8010db0 <__kernel_cosf+0x20>
 8010da6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8010daa:	ee17 2a90 	vmov	r2, s15
 8010dae:	b342      	cbz	r2, 8010e02 <__kernel_cosf+0x72>
 8010db0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8010db4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8010e20 <__kernel_cosf+0x90>
 8010db8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8010e24 <__kernel_cosf+0x94>
 8010dbc:	4a1a      	ldr	r2, [pc, #104]	@ (8010e28 <__kernel_cosf+0x98>)
 8010dbe:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010dc2:	4293      	cmp	r3, r2
 8010dc4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010e2c <__kernel_cosf+0x9c>
 8010dc8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010dcc:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8010e30 <__kernel_cosf+0xa0>
 8010dd0:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010dd4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8010e34 <__kernel_cosf+0xa4>
 8010dd8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010ddc:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8010e38 <__kernel_cosf+0xa8>
 8010de0:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010de4:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8010de8:	ee26 6a07 	vmul.f32	s12, s12, s14
 8010dec:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010df0:	eee7 0a06 	vfma.f32	s1, s14, s12
 8010df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010df8:	d804      	bhi.n	8010e04 <__kernel_cosf+0x74>
 8010dfa:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8010dfe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010e02:	4770      	bx	lr
 8010e04:	4a0d      	ldr	r2, [pc, #52]	@ (8010e3c <__kernel_cosf+0xac>)
 8010e06:	4293      	cmp	r3, r2
 8010e08:	bf9a      	itte	ls
 8010e0a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8010e0e:	ee07 3a10 	vmovls	s14, r3
 8010e12:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8010e16:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010e1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010e1e:	e7ec      	b.n	8010dfa <__kernel_cosf+0x6a>
 8010e20:	ad47d74e 	.word	0xad47d74e
 8010e24:	310f74f6 	.word	0x310f74f6
 8010e28:	3e999999 	.word	0x3e999999
 8010e2c:	b493f27c 	.word	0xb493f27c
 8010e30:	37d00d01 	.word	0x37d00d01
 8010e34:	bab60b61 	.word	0xbab60b61
 8010e38:	3d2aaaab 	.word	0x3d2aaaab
 8010e3c:	3f480000 	.word	0x3f480000

08010e40 <__kernel_sinf>:
 8010e40:	ee10 3a10 	vmov	r3, s0
 8010e44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010e48:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8010e4c:	d204      	bcs.n	8010e58 <__kernel_sinf+0x18>
 8010e4e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010e52:	ee17 3a90 	vmov	r3, s15
 8010e56:	b35b      	cbz	r3, 8010eb0 <__kernel_sinf+0x70>
 8010e58:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010e5c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8010eb4 <__kernel_sinf+0x74>
 8010e60:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8010eb8 <__kernel_sinf+0x78>
 8010e64:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010e68:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8010ebc <__kernel_sinf+0x7c>
 8010e6c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010e70:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8010ec0 <__kernel_sinf+0x80>
 8010e74:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010e78:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8010ec4 <__kernel_sinf+0x84>
 8010e7c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8010e80:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010e84:	b930      	cbnz	r0, 8010e94 <__kernel_sinf+0x54>
 8010e86:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8010ec8 <__kernel_sinf+0x88>
 8010e8a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010e8e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8010e92:	4770      	bx	lr
 8010e94:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8010e98:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8010e9c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8010ea0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8010ea4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8010ecc <__kernel_sinf+0x8c>
 8010ea8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8010eac:	ee30 0a60 	vsub.f32	s0, s0, s1
 8010eb0:	4770      	bx	lr
 8010eb2:	bf00      	nop
 8010eb4:	2f2ec9d3 	.word	0x2f2ec9d3
 8010eb8:	b2d72f34 	.word	0xb2d72f34
 8010ebc:	3638ef1b 	.word	0x3638ef1b
 8010ec0:	b9500d01 	.word	0xb9500d01
 8010ec4:	3c088889 	.word	0x3c088889
 8010ec8:	be2aaaab 	.word	0xbe2aaaab
 8010ecc:	3e2aaaab 	.word	0x3e2aaaab

08010ed0 <__ieee754_rem_pio2f>:
 8010ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ed2:	ee10 6a10 	vmov	r6, s0
 8010ed6:	4b88      	ldr	r3, [pc, #544]	@ (80110f8 <__ieee754_rem_pio2f+0x228>)
 8010ed8:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8010edc:	429d      	cmp	r5, r3
 8010ede:	b087      	sub	sp, #28
 8010ee0:	4604      	mov	r4, r0
 8010ee2:	d805      	bhi.n	8010ef0 <__ieee754_rem_pio2f+0x20>
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	ed80 0a00 	vstr	s0, [r0]
 8010eea:	6043      	str	r3, [r0, #4]
 8010eec:	2000      	movs	r0, #0
 8010eee:	e022      	b.n	8010f36 <__ieee754_rem_pio2f+0x66>
 8010ef0:	4b82      	ldr	r3, [pc, #520]	@ (80110fc <__ieee754_rem_pio2f+0x22c>)
 8010ef2:	429d      	cmp	r5, r3
 8010ef4:	d83a      	bhi.n	8010f6c <__ieee754_rem_pio2f+0x9c>
 8010ef6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8010efa:	2e00      	cmp	r6, #0
 8010efc:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8011100 <__ieee754_rem_pio2f+0x230>
 8010f00:	4a80      	ldr	r2, [pc, #512]	@ (8011104 <__ieee754_rem_pio2f+0x234>)
 8010f02:	f023 030f 	bic.w	r3, r3, #15
 8010f06:	dd18      	ble.n	8010f3a <__ieee754_rem_pio2f+0x6a>
 8010f08:	4293      	cmp	r3, r2
 8010f0a:	ee70 7a47 	vsub.f32	s15, s0, s14
 8010f0e:	bf09      	itett	eq
 8010f10:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8011108 <__ieee754_rem_pio2f+0x238>
 8010f14:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 801110c <__ieee754_rem_pio2f+0x23c>
 8010f18:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8011110 <__ieee754_rem_pio2f+0x240>
 8010f1c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8010f20:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8010f24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010f28:	ed80 7a00 	vstr	s14, [r0]
 8010f2c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010f30:	edc0 7a01 	vstr	s15, [r0, #4]
 8010f34:	2001      	movs	r0, #1
 8010f36:	b007      	add	sp, #28
 8010f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f3a:	4293      	cmp	r3, r2
 8010f3c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8010f40:	bf09      	itett	eq
 8010f42:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8011108 <__ieee754_rem_pio2f+0x238>
 8010f46:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 801110c <__ieee754_rem_pio2f+0x23c>
 8010f4a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8011110 <__ieee754_rem_pio2f+0x240>
 8010f4e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8010f52:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010f56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010f5a:	ed80 7a00 	vstr	s14, [r0]
 8010f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f62:	edc0 7a01 	vstr	s15, [r0, #4]
 8010f66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010f6a:	e7e4      	b.n	8010f36 <__ieee754_rem_pio2f+0x66>
 8010f6c:	4b69      	ldr	r3, [pc, #420]	@ (8011114 <__ieee754_rem_pio2f+0x244>)
 8010f6e:	429d      	cmp	r5, r3
 8010f70:	d873      	bhi.n	801105a <__ieee754_rem_pio2f+0x18a>
 8010f72:	f000 f8dd 	bl	8011130 <fabsf>
 8010f76:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8011118 <__ieee754_rem_pio2f+0x248>
 8010f7a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010f7e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010f82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010f8a:	ee17 0a90 	vmov	r0, s15
 8010f8e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8011100 <__ieee754_rem_pio2f+0x230>
 8010f92:	eea7 0a67 	vfms.f32	s0, s14, s15
 8010f96:	281f      	cmp	r0, #31
 8010f98:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801110c <__ieee754_rem_pio2f+0x23c>
 8010f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fa0:	eeb1 6a47 	vneg.f32	s12, s14
 8010fa4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010fa8:	ee16 1a90 	vmov	r1, s13
 8010fac:	dc09      	bgt.n	8010fc2 <__ieee754_rem_pio2f+0xf2>
 8010fae:	4a5b      	ldr	r2, [pc, #364]	@ (801111c <__ieee754_rem_pio2f+0x24c>)
 8010fb0:	1e47      	subs	r7, r0, #1
 8010fb2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8010fb6:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8010fba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8010fbe:	4293      	cmp	r3, r2
 8010fc0:	d107      	bne.n	8010fd2 <__ieee754_rem_pio2f+0x102>
 8010fc2:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8010fc6:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8010fca:	2a08      	cmp	r2, #8
 8010fcc:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8010fd0:	dc14      	bgt.n	8010ffc <__ieee754_rem_pio2f+0x12c>
 8010fd2:	6021      	str	r1, [r4, #0]
 8010fd4:	ed94 7a00 	vldr	s14, [r4]
 8010fd8:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010fdc:	2e00      	cmp	r6, #0
 8010fde:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010fe2:	ed84 0a01 	vstr	s0, [r4, #4]
 8010fe6:	daa6      	bge.n	8010f36 <__ieee754_rem_pio2f+0x66>
 8010fe8:	eeb1 7a47 	vneg.f32	s14, s14
 8010fec:	eeb1 0a40 	vneg.f32	s0, s0
 8010ff0:	ed84 7a00 	vstr	s14, [r4]
 8010ff4:	ed84 0a01 	vstr	s0, [r4, #4]
 8010ff8:	4240      	negs	r0, r0
 8010ffa:	e79c      	b.n	8010f36 <__ieee754_rem_pio2f+0x66>
 8010ffc:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8011108 <__ieee754_rem_pio2f+0x238>
 8011000:	eef0 6a40 	vmov.f32	s13, s0
 8011004:	eee6 6a25 	vfma.f32	s13, s12, s11
 8011008:	ee70 7a66 	vsub.f32	s15, s0, s13
 801100c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011010:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8011110 <__ieee754_rem_pio2f+0x240>
 8011014:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8011018:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801101c:	ee15 2a90 	vmov	r2, s11
 8011020:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8011024:	1a5b      	subs	r3, r3, r1
 8011026:	2b19      	cmp	r3, #25
 8011028:	dc04      	bgt.n	8011034 <__ieee754_rem_pio2f+0x164>
 801102a:	edc4 5a00 	vstr	s11, [r4]
 801102e:	eeb0 0a66 	vmov.f32	s0, s13
 8011032:	e7cf      	b.n	8010fd4 <__ieee754_rem_pio2f+0x104>
 8011034:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8011120 <__ieee754_rem_pio2f+0x250>
 8011038:	eeb0 0a66 	vmov.f32	s0, s13
 801103c:	eea6 0a25 	vfma.f32	s0, s12, s11
 8011040:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8011044:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8011124 <__ieee754_rem_pio2f+0x254>
 8011048:	eee6 7a25 	vfma.f32	s15, s12, s11
 801104c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8011050:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011054:	ed84 7a00 	vstr	s14, [r4]
 8011058:	e7bc      	b.n	8010fd4 <__ieee754_rem_pio2f+0x104>
 801105a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801105e:	d306      	bcc.n	801106e <__ieee754_rem_pio2f+0x19e>
 8011060:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011064:	edc0 7a01 	vstr	s15, [r0, #4]
 8011068:	edc0 7a00 	vstr	s15, [r0]
 801106c:	e73e      	b.n	8010eec <__ieee754_rem_pio2f+0x1c>
 801106e:	15ea      	asrs	r2, r5, #23
 8011070:	3a86      	subs	r2, #134	@ 0x86
 8011072:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8011076:	ee07 3a90 	vmov	s15, r3
 801107a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801107e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8011128 <__ieee754_rem_pio2f+0x258>
 8011082:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011086:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801108a:	ed8d 7a03 	vstr	s14, [sp, #12]
 801108e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011092:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011096:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801109a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801109e:	ed8d 7a04 	vstr	s14, [sp, #16]
 80110a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80110a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80110aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110ae:	edcd 7a05 	vstr	s15, [sp, #20]
 80110b2:	d11e      	bne.n	80110f2 <__ieee754_rem_pio2f+0x222>
 80110b4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80110b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110bc:	bf0c      	ite	eq
 80110be:	2301      	moveq	r3, #1
 80110c0:	2302      	movne	r3, #2
 80110c2:	491a      	ldr	r1, [pc, #104]	@ (801112c <__ieee754_rem_pio2f+0x25c>)
 80110c4:	9101      	str	r1, [sp, #4]
 80110c6:	2102      	movs	r1, #2
 80110c8:	9100      	str	r1, [sp, #0]
 80110ca:	a803      	add	r0, sp, #12
 80110cc:	4621      	mov	r1, r4
 80110ce:	f000 f8f3 	bl	80112b8 <__kernel_rem_pio2f>
 80110d2:	2e00      	cmp	r6, #0
 80110d4:	f6bf af2f 	bge.w	8010f36 <__ieee754_rem_pio2f+0x66>
 80110d8:	edd4 7a00 	vldr	s15, [r4]
 80110dc:	eef1 7a67 	vneg.f32	s15, s15
 80110e0:	edc4 7a00 	vstr	s15, [r4]
 80110e4:	edd4 7a01 	vldr	s15, [r4, #4]
 80110e8:	eef1 7a67 	vneg.f32	s15, s15
 80110ec:	edc4 7a01 	vstr	s15, [r4, #4]
 80110f0:	e782      	b.n	8010ff8 <__ieee754_rem_pio2f+0x128>
 80110f2:	2303      	movs	r3, #3
 80110f4:	e7e5      	b.n	80110c2 <__ieee754_rem_pio2f+0x1f2>
 80110f6:	bf00      	nop
 80110f8:	3f490fd8 	.word	0x3f490fd8
 80110fc:	4016cbe3 	.word	0x4016cbe3
 8011100:	3fc90f80 	.word	0x3fc90f80
 8011104:	3fc90fd0 	.word	0x3fc90fd0
 8011108:	37354400 	.word	0x37354400
 801110c:	37354443 	.word	0x37354443
 8011110:	2e85a308 	.word	0x2e85a308
 8011114:	43490f80 	.word	0x43490f80
 8011118:	3f22f984 	.word	0x3f22f984
 801111c:	080124c0 	.word	0x080124c0
 8011120:	2e85a300 	.word	0x2e85a300
 8011124:	248d3132 	.word	0x248d3132
 8011128:	43800000 	.word	0x43800000
 801112c:	08012540 	.word	0x08012540

08011130 <fabsf>:
 8011130:	ee10 3a10 	vmov	r3, s0
 8011134:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011138:	ee00 3a10 	vmov	s0, r3
 801113c:	4770      	bx	lr
	...

08011140 <scalbn>:
 8011140:	b570      	push	{r4, r5, r6, lr}
 8011142:	ec55 4b10 	vmov	r4, r5, d0
 8011146:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801114a:	4606      	mov	r6, r0
 801114c:	462b      	mov	r3, r5
 801114e:	b991      	cbnz	r1, 8011176 <scalbn+0x36>
 8011150:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8011154:	4323      	orrs	r3, r4
 8011156:	d03d      	beq.n	80111d4 <scalbn+0x94>
 8011158:	4b35      	ldr	r3, [pc, #212]	@ (8011230 <scalbn+0xf0>)
 801115a:	4620      	mov	r0, r4
 801115c:	4629      	mov	r1, r5
 801115e:	2200      	movs	r2, #0
 8011160:	f7ef fa6a 	bl	8000638 <__aeabi_dmul>
 8011164:	4b33      	ldr	r3, [pc, #204]	@ (8011234 <scalbn+0xf4>)
 8011166:	429e      	cmp	r6, r3
 8011168:	4604      	mov	r4, r0
 801116a:	460d      	mov	r5, r1
 801116c:	da0f      	bge.n	801118e <scalbn+0x4e>
 801116e:	a328      	add	r3, pc, #160	@ (adr r3, 8011210 <scalbn+0xd0>)
 8011170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011174:	e01e      	b.n	80111b4 <scalbn+0x74>
 8011176:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801117a:	4291      	cmp	r1, r2
 801117c:	d10b      	bne.n	8011196 <scalbn+0x56>
 801117e:	4622      	mov	r2, r4
 8011180:	4620      	mov	r0, r4
 8011182:	4629      	mov	r1, r5
 8011184:	f7ef f8a2 	bl	80002cc <__adddf3>
 8011188:	4604      	mov	r4, r0
 801118a:	460d      	mov	r5, r1
 801118c:	e022      	b.n	80111d4 <scalbn+0x94>
 801118e:	460b      	mov	r3, r1
 8011190:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011194:	3936      	subs	r1, #54	@ 0x36
 8011196:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801119a:	4296      	cmp	r6, r2
 801119c:	dd0d      	ble.n	80111ba <scalbn+0x7a>
 801119e:	2d00      	cmp	r5, #0
 80111a0:	a11d      	add	r1, pc, #116	@ (adr r1, 8011218 <scalbn+0xd8>)
 80111a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111a6:	da02      	bge.n	80111ae <scalbn+0x6e>
 80111a8:	a11d      	add	r1, pc, #116	@ (adr r1, 8011220 <scalbn+0xe0>)
 80111aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111ae:	a31a      	add	r3, pc, #104	@ (adr r3, 8011218 <scalbn+0xd8>)
 80111b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111b4:	f7ef fa40 	bl	8000638 <__aeabi_dmul>
 80111b8:	e7e6      	b.n	8011188 <scalbn+0x48>
 80111ba:	1872      	adds	r2, r6, r1
 80111bc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80111c0:	428a      	cmp	r2, r1
 80111c2:	dcec      	bgt.n	801119e <scalbn+0x5e>
 80111c4:	2a00      	cmp	r2, #0
 80111c6:	dd08      	ble.n	80111da <scalbn+0x9a>
 80111c8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80111cc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80111d0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80111d4:	ec45 4b10 	vmov	d0, r4, r5
 80111d8:	bd70      	pop	{r4, r5, r6, pc}
 80111da:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80111de:	da08      	bge.n	80111f2 <scalbn+0xb2>
 80111e0:	2d00      	cmp	r5, #0
 80111e2:	a10b      	add	r1, pc, #44	@ (adr r1, 8011210 <scalbn+0xd0>)
 80111e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111e8:	dac1      	bge.n	801116e <scalbn+0x2e>
 80111ea:	a10f      	add	r1, pc, #60	@ (adr r1, 8011228 <scalbn+0xe8>)
 80111ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111f0:	e7bd      	b.n	801116e <scalbn+0x2e>
 80111f2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80111f6:	3236      	adds	r2, #54	@ 0x36
 80111f8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80111fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011200:	4620      	mov	r0, r4
 8011202:	4b0d      	ldr	r3, [pc, #52]	@ (8011238 <scalbn+0xf8>)
 8011204:	4629      	mov	r1, r5
 8011206:	2200      	movs	r2, #0
 8011208:	e7d4      	b.n	80111b4 <scalbn+0x74>
 801120a:	bf00      	nop
 801120c:	f3af 8000 	nop.w
 8011210:	c2f8f359 	.word	0xc2f8f359
 8011214:	01a56e1f 	.word	0x01a56e1f
 8011218:	8800759c 	.word	0x8800759c
 801121c:	7e37e43c 	.word	0x7e37e43c
 8011220:	8800759c 	.word	0x8800759c
 8011224:	fe37e43c 	.word	0xfe37e43c
 8011228:	c2f8f359 	.word	0xc2f8f359
 801122c:	81a56e1f 	.word	0x81a56e1f
 8011230:	43500000 	.word	0x43500000
 8011234:	ffff3cb0 	.word	0xffff3cb0
 8011238:	3c900000 	.word	0x3c900000

0801123c <with_errno>:
 801123c:	b510      	push	{r4, lr}
 801123e:	ed2d 8b02 	vpush	{d8}
 8011242:	eeb0 8a40 	vmov.f32	s16, s0
 8011246:	eef0 8a60 	vmov.f32	s17, s1
 801124a:	4604      	mov	r4, r0
 801124c:	f7fc fd4c 	bl	800dce8 <__errno>
 8011250:	eeb0 0a48 	vmov.f32	s0, s16
 8011254:	eef0 0a68 	vmov.f32	s1, s17
 8011258:	ecbd 8b02 	vpop	{d8}
 801125c:	6004      	str	r4, [r0, #0]
 801125e:	bd10      	pop	{r4, pc}

08011260 <xflow>:
 8011260:	4603      	mov	r3, r0
 8011262:	b507      	push	{r0, r1, r2, lr}
 8011264:	ec51 0b10 	vmov	r0, r1, d0
 8011268:	b183      	cbz	r3, 801128c <xflow+0x2c>
 801126a:	4602      	mov	r2, r0
 801126c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011270:	e9cd 2300 	strd	r2, r3, [sp]
 8011274:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011278:	f7ef f9de 	bl	8000638 <__aeabi_dmul>
 801127c:	ec41 0b10 	vmov	d0, r0, r1
 8011280:	2022      	movs	r0, #34	@ 0x22
 8011282:	b003      	add	sp, #12
 8011284:	f85d eb04 	ldr.w	lr, [sp], #4
 8011288:	f7ff bfd8 	b.w	801123c <with_errno>
 801128c:	4602      	mov	r2, r0
 801128e:	460b      	mov	r3, r1
 8011290:	e7ee      	b.n	8011270 <xflow+0x10>
 8011292:	0000      	movs	r0, r0
 8011294:	0000      	movs	r0, r0
	...

08011298 <__math_uflow>:
 8011298:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80112a0 <__math_uflow+0x8>
 801129c:	f7ff bfe0 	b.w	8011260 <xflow>
 80112a0:	00000000 	.word	0x00000000
 80112a4:	10000000 	.word	0x10000000

080112a8 <__math_oflow>:
 80112a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80112b0 <__math_oflow+0x8>
 80112ac:	f7ff bfd8 	b.w	8011260 <xflow>
 80112b0:	00000000 	.word	0x00000000
 80112b4:	70000000 	.word	0x70000000

080112b8 <__kernel_rem_pio2f>:
 80112b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112bc:	ed2d 8b04 	vpush	{d8-d9}
 80112c0:	b0d9      	sub	sp, #356	@ 0x164
 80112c2:	4690      	mov	r8, r2
 80112c4:	9001      	str	r0, [sp, #4]
 80112c6:	4ab9      	ldr	r2, [pc, #740]	@ (80115ac <__kernel_rem_pio2f+0x2f4>)
 80112c8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80112ca:	f118 0f04 	cmn.w	r8, #4
 80112ce:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80112d2:	460f      	mov	r7, r1
 80112d4:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80112d8:	db27      	blt.n	801132a <__kernel_rem_pio2f+0x72>
 80112da:	f1b8 0203 	subs.w	r2, r8, #3
 80112de:	bf48      	it	mi
 80112e0:	f108 0204 	addmi.w	r2, r8, #4
 80112e4:	10d2      	asrs	r2, r2, #3
 80112e6:	1c55      	adds	r5, r2, #1
 80112e8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80112ea:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 80115bc <__kernel_rem_pio2f+0x304>
 80112ee:	00e8      	lsls	r0, r5, #3
 80112f0:	eba2 060b 	sub.w	r6, r2, fp
 80112f4:	9002      	str	r0, [sp, #8]
 80112f6:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80112fa:	eb0a 0c0b 	add.w	ip, sl, fp
 80112fe:	ac1c      	add	r4, sp, #112	@ 0x70
 8011300:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8011304:	2000      	movs	r0, #0
 8011306:	4560      	cmp	r0, ip
 8011308:	dd11      	ble.n	801132e <__kernel_rem_pio2f+0x76>
 801130a:	a91c      	add	r1, sp, #112	@ 0x70
 801130c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8011310:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8011314:	f04f 0c00 	mov.w	ip, #0
 8011318:	45d4      	cmp	ip, sl
 801131a:	dc27      	bgt.n	801136c <__kernel_rem_pio2f+0xb4>
 801131c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8011320:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 80115bc <__kernel_rem_pio2f+0x304>
 8011324:	4606      	mov	r6, r0
 8011326:	2400      	movs	r4, #0
 8011328:	e016      	b.n	8011358 <__kernel_rem_pio2f+0xa0>
 801132a:	2200      	movs	r2, #0
 801132c:	e7db      	b.n	80112e6 <__kernel_rem_pio2f+0x2e>
 801132e:	42c6      	cmn	r6, r0
 8011330:	bf5d      	ittte	pl
 8011332:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8011336:	ee07 1a90 	vmovpl	s15, r1
 801133a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801133e:	eef0 7a47 	vmovmi.f32	s15, s14
 8011342:	ece4 7a01 	vstmia	r4!, {s15}
 8011346:	3001      	adds	r0, #1
 8011348:	e7dd      	b.n	8011306 <__kernel_rem_pio2f+0x4e>
 801134a:	ecfe 6a01 	vldmia	lr!, {s13}
 801134e:	ed96 7a00 	vldr	s14, [r6]
 8011352:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011356:	3401      	adds	r4, #1
 8011358:	455c      	cmp	r4, fp
 801135a:	f1a6 0604 	sub.w	r6, r6, #4
 801135e:	ddf4      	ble.n	801134a <__kernel_rem_pio2f+0x92>
 8011360:	ece9 7a01 	vstmia	r9!, {s15}
 8011364:	f10c 0c01 	add.w	ip, ip, #1
 8011368:	3004      	adds	r0, #4
 801136a:	e7d5      	b.n	8011318 <__kernel_rem_pio2f+0x60>
 801136c:	a908      	add	r1, sp, #32
 801136e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011372:	9104      	str	r1, [sp, #16]
 8011374:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8011376:	eddf 8a90 	vldr	s17, [pc, #576]	@ 80115b8 <__kernel_rem_pio2f+0x300>
 801137a:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 80115b4 <__kernel_rem_pio2f+0x2fc>
 801137e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8011382:	9203      	str	r2, [sp, #12]
 8011384:	4654      	mov	r4, sl
 8011386:	00a2      	lsls	r2, r4, #2
 8011388:	9205      	str	r2, [sp, #20]
 801138a:	aa58      	add	r2, sp, #352	@ 0x160
 801138c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8011390:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8011394:	a944      	add	r1, sp, #272	@ 0x110
 8011396:	aa08      	add	r2, sp, #32
 8011398:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801139c:	4694      	mov	ip, r2
 801139e:	4626      	mov	r6, r4
 80113a0:	2e00      	cmp	r6, #0
 80113a2:	f1a0 0004 	sub.w	r0, r0, #4
 80113a6:	dc4c      	bgt.n	8011442 <__kernel_rem_pio2f+0x18a>
 80113a8:	4628      	mov	r0, r5
 80113aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80113ae:	f000 f9f5 	bl	801179c <scalbnf>
 80113b2:	eeb0 8a40 	vmov.f32	s16, s0
 80113b6:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80113ba:	ee28 0a00 	vmul.f32	s0, s16, s0
 80113be:	f000 fa53 	bl	8011868 <floorf>
 80113c2:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80113c6:	eea0 8a67 	vfms.f32	s16, s0, s15
 80113ca:	2d00      	cmp	r5, #0
 80113cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80113d0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80113d4:	ee17 9a90 	vmov	r9, s15
 80113d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80113dc:	ee38 8a67 	vsub.f32	s16, s16, s15
 80113e0:	dd41      	ble.n	8011466 <__kernel_rem_pio2f+0x1ae>
 80113e2:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 80113e6:	a908      	add	r1, sp, #32
 80113e8:	f1c5 0e08 	rsb	lr, r5, #8
 80113ec:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80113f0:	fa46 f00e 	asr.w	r0, r6, lr
 80113f4:	4481      	add	r9, r0
 80113f6:	fa00 f00e 	lsl.w	r0, r0, lr
 80113fa:	1a36      	subs	r6, r6, r0
 80113fc:	f1c5 0007 	rsb	r0, r5, #7
 8011400:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8011404:	4106      	asrs	r6, r0
 8011406:	2e00      	cmp	r6, #0
 8011408:	dd3c      	ble.n	8011484 <__kernel_rem_pio2f+0x1cc>
 801140a:	f04f 0e00 	mov.w	lr, #0
 801140e:	f109 0901 	add.w	r9, r9, #1
 8011412:	4670      	mov	r0, lr
 8011414:	4574      	cmp	r4, lr
 8011416:	dc68      	bgt.n	80114ea <__kernel_rem_pio2f+0x232>
 8011418:	2d00      	cmp	r5, #0
 801141a:	dd03      	ble.n	8011424 <__kernel_rem_pio2f+0x16c>
 801141c:	2d01      	cmp	r5, #1
 801141e:	d074      	beq.n	801150a <__kernel_rem_pio2f+0x252>
 8011420:	2d02      	cmp	r5, #2
 8011422:	d07d      	beq.n	8011520 <__kernel_rem_pio2f+0x268>
 8011424:	2e02      	cmp	r6, #2
 8011426:	d12d      	bne.n	8011484 <__kernel_rem_pio2f+0x1cc>
 8011428:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801142c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8011430:	b340      	cbz	r0, 8011484 <__kernel_rem_pio2f+0x1cc>
 8011432:	4628      	mov	r0, r5
 8011434:	9306      	str	r3, [sp, #24]
 8011436:	f000 f9b1 	bl	801179c <scalbnf>
 801143a:	9b06      	ldr	r3, [sp, #24]
 801143c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8011440:	e020      	b.n	8011484 <__kernel_rem_pio2f+0x1cc>
 8011442:	ee60 7a28 	vmul.f32	s15, s0, s17
 8011446:	3e01      	subs	r6, #1
 8011448:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801144c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011450:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8011454:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011458:	ecac 0a01 	vstmia	ip!, {s0}
 801145c:	ed90 0a00 	vldr	s0, [r0]
 8011460:	ee37 0a80 	vadd.f32	s0, s15, s0
 8011464:	e79c      	b.n	80113a0 <__kernel_rem_pio2f+0xe8>
 8011466:	d105      	bne.n	8011474 <__kernel_rem_pio2f+0x1bc>
 8011468:	1e60      	subs	r0, r4, #1
 801146a:	a908      	add	r1, sp, #32
 801146c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8011470:	11f6      	asrs	r6, r6, #7
 8011472:	e7c8      	b.n	8011406 <__kernel_rem_pio2f+0x14e>
 8011474:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011478:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801147c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011480:	da31      	bge.n	80114e6 <__kernel_rem_pio2f+0x22e>
 8011482:	2600      	movs	r6, #0
 8011484:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801148c:	f040 8098 	bne.w	80115c0 <__kernel_rem_pio2f+0x308>
 8011490:	1e60      	subs	r0, r4, #1
 8011492:	2200      	movs	r2, #0
 8011494:	4550      	cmp	r0, sl
 8011496:	da4b      	bge.n	8011530 <__kernel_rem_pio2f+0x278>
 8011498:	2a00      	cmp	r2, #0
 801149a:	d065      	beq.n	8011568 <__kernel_rem_pio2f+0x2b0>
 801149c:	3c01      	subs	r4, #1
 801149e:	ab08      	add	r3, sp, #32
 80114a0:	3d08      	subs	r5, #8
 80114a2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d0f8      	beq.n	801149c <__kernel_rem_pio2f+0x1e4>
 80114aa:	4628      	mov	r0, r5
 80114ac:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80114b0:	f000 f974 	bl	801179c <scalbnf>
 80114b4:	1c63      	adds	r3, r4, #1
 80114b6:	aa44      	add	r2, sp, #272	@ 0x110
 80114b8:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80115b8 <__kernel_rem_pio2f+0x300>
 80114bc:	0099      	lsls	r1, r3, #2
 80114be:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80114c2:	4623      	mov	r3, r4
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	f280 80a9 	bge.w	801161c <__kernel_rem_pio2f+0x364>
 80114ca:	4623      	mov	r3, r4
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	f2c0 80c7 	blt.w	8011660 <__kernel_rem_pio2f+0x3a8>
 80114d2:	aa44      	add	r2, sp, #272	@ 0x110
 80114d4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80114d8:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80115b0 <__kernel_rem_pio2f+0x2f8>
 80114dc:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80115bc <__kernel_rem_pio2f+0x304>
 80114e0:	2000      	movs	r0, #0
 80114e2:	1ae2      	subs	r2, r4, r3
 80114e4:	e0b1      	b.n	801164a <__kernel_rem_pio2f+0x392>
 80114e6:	2602      	movs	r6, #2
 80114e8:	e78f      	b.n	801140a <__kernel_rem_pio2f+0x152>
 80114ea:	f852 1b04 	ldr.w	r1, [r2], #4
 80114ee:	b948      	cbnz	r0, 8011504 <__kernel_rem_pio2f+0x24c>
 80114f0:	b121      	cbz	r1, 80114fc <__kernel_rem_pio2f+0x244>
 80114f2:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80114f6:	f842 1c04 	str.w	r1, [r2, #-4]
 80114fa:	2101      	movs	r1, #1
 80114fc:	f10e 0e01 	add.w	lr, lr, #1
 8011500:	4608      	mov	r0, r1
 8011502:	e787      	b.n	8011414 <__kernel_rem_pio2f+0x15c>
 8011504:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8011508:	e7f5      	b.n	80114f6 <__kernel_rem_pio2f+0x23e>
 801150a:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801150e:	aa08      	add	r2, sp, #32
 8011510:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8011514:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8011518:	a908      	add	r1, sp, #32
 801151a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801151e:	e781      	b.n	8011424 <__kernel_rem_pio2f+0x16c>
 8011520:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8011524:	aa08      	add	r2, sp, #32
 8011526:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801152a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801152e:	e7f3      	b.n	8011518 <__kernel_rem_pio2f+0x260>
 8011530:	a908      	add	r1, sp, #32
 8011532:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8011536:	3801      	subs	r0, #1
 8011538:	430a      	orrs	r2, r1
 801153a:	e7ab      	b.n	8011494 <__kernel_rem_pio2f+0x1dc>
 801153c:	3201      	adds	r2, #1
 801153e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8011542:	2e00      	cmp	r6, #0
 8011544:	d0fa      	beq.n	801153c <__kernel_rem_pio2f+0x284>
 8011546:	9905      	ldr	r1, [sp, #20]
 8011548:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 801154c:	eb0d 0001 	add.w	r0, sp, r1
 8011550:	18e6      	adds	r6, r4, r3
 8011552:	a91c      	add	r1, sp, #112	@ 0x70
 8011554:	f104 0c01 	add.w	ip, r4, #1
 8011558:	384c      	subs	r0, #76	@ 0x4c
 801155a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801155e:	4422      	add	r2, r4
 8011560:	4562      	cmp	r2, ip
 8011562:	da04      	bge.n	801156e <__kernel_rem_pio2f+0x2b6>
 8011564:	4614      	mov	r4, r2
 8011566:	e70e      	b.n	8011386 <__kernel_rem_pio2f+0xce>
 8011568:	9804      	ldr	r0, [sp, #16]
 801156a:	2201      	movs	r2, #1
 801156c:	e7e7      	b.n	801153e <__kernel_rem_pio2f+0x286>
 801156e:	9903      	ldr	r1, [sp, #12]
 8011570:	f8dd e004 	ldr.w	lr, [sp, #4]
 8011574:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8011578:	9105      	str	r1, [sp, #20]
 801157a:	ee07 1a90 	vmov	s15, r1
 801157e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011582:	2400      	movs	r4, #0
 8011584:	ece6 7a01 	vstmia	r6!, {s15}
 8011588:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80115bc <__kernel_rem_pio2f+0x304>
 801158c:	46b1      	mov	r9, r6
 801158e:	455c      	cmp	r4, fp
 8011590:	dd04      	ble.n	801159c <__kernel_rem_pio2f+0x2e4>
 8011592:	ece0 7a01 	vstmia	r0!, {s15}
 8011596:	f10c 0c01 	add.w	ip, ip, #1
 801159a:	e7e1      	b.n	8011560 <__kernel_rem_pio2f+0x2a8>
 801159c:	ecfe 6a01 	vldmia	lr!, {s13}
 80115a0:	ed39 7a01 	vldmdb	r9!, {s14}
 80115a4:	3401      	adds	r4, #1
 80115a6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80115aa:	e7f0      	b.n	801158e <__kernel_rem_pio2f+0x2d6>
 80115ac:	08012884 	.word	0x08012884
 80115b0:	08012858 	.word	0x08012858
 80115b4:	43800000 	.word	0x43800000
 80115b8:	3b800000 	.word	0x3b800000
 80115bc:	00000000 	.word	0x00000000
 80115c0:	9b02      	ldr	r3, [sp, #8]
 80115c2:	eeb0 0a48 	vmov.f32	s0, s16
 80115c6:	eba3 0008 	sub.w	r0, r3, r8
 80115ca:	f000 f8e7 	bl	801179c <scalbnf>
 80115ce:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80115b4 <__kernel_rem_pio2f+0x2fc>
 80115d2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80115d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115da:	db19      	blt.n	8011610 <__kernel_rem_pio2f+0x358>
 80115dc:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80115b8 <__kernel_rem_pio2f+0x300>
 80115e0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80115e4:	aa08      	add	r2, sp, #32
 80115e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80115ea:	3508      	adds	r5, #8
 80115ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80115f0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80115f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80115f8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80115fc:	ee10 3a10 	vmov	r3, s0
 8011600:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8011604:	ee17 3a90 	vmov	r3, s15
 8011608:	3401      	adds	r4, #1
 801160a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801160e:	e74c      	b.n	80114aa <__kernel_rem_pio2f+0x1f2>
 8011610:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011614:	aa08      	add	r2, sp, #32
 8011616:	ee10 3a10 	vmov	r3, s0
 801161a:	e7f6      	b.n	801160a <__kernel_rem_pio2f+0x352>
 801161c:	a808      	add	r0, sp, #32
 801161e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8011622:	9001      	str	r0, [sp, #4]
 8011624:	ee07 0a90 	vmov	s15, r0
 8011628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801162c:	3b01      	subs	r3, #1
 801162e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011632:	ee20 0a07 	vmul.f32	s0, s0, s14
 8011636:	ed62 7a01 	vstmdb	r2!, {s15}
 801163a:	e743      	b.n	80114c4 <__kernel_rem_pio2f+0x20c>
 801163c:	ecfc 6a01 	vldmia	ip!, {s13}
 8011640:	ecb5 7a01 	vldmia	r5!, {s14}
 8011644:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011648:	3001      	adds	r0, #1
 801164a:	4550      	cmp	r0, sl
 801164c:	dc01      	bgt.n	8011652 <__kernel_rem_pio2f+0x39a>
 801164e:	4282      	cmp	r2, r0
 8011650:	daf4      	bge.n	801163c <__kernel_rem_pio2f+0x384>
 8011652:	a858      	add	r0, sp, #352	@ 0x160
 8011654:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8011658:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 801165c:	3b01      	subs	r3, #1
 801165e:	e735      	b.n	80114cc <__kernel_rem_pio2f+0x214>
 8011660:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8011662:	2b02      	cmp	r3, #2
 8011664:	dc09      	bgt.n	801167a <__kernel_rem_pio2f+0x3c2>
 8011666:	2b00      	cmp	r3, #0
 8011668:	dc2b      	bgt.n	80116c2 <__kernel_rem_pio2f+0x40a>
 801166a:	d044      	beq.n	80116f6 <__kernel_rem_pio2f+0x43e>
 801166c:	f009 0007 	and.w	r0, r9, #7
 8011670:	b059      	add	sp, #356	@ 0x164
 8011672:	ecbd 8b04 	vpop	{d8-d9}
 8011676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801167a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801167c:	2b03      	cmp	r3, #3
 801167e:	d1f5      	bne.n	801166c <__kernel_rem_pio2f+0x3b4>
 8011680:	aa30      	add	r2, sp, #192	@ 0xc0
 8011682:	1f0b      	subs	r3, r1, #4
 8011684:	4413      	add	r3, r2
 8011686:	461a      	mov	r2, r3
 8011688:	4620      	mov	r0, r4
 801168a:	2800      	cmp	r0, #0
 801168c:	f1a2 0204 	sub.w	r2, r2, #4
 8011690:	dc52      	bgt.n	8011738 <__kernel_rem_pio2f+0x480>
 8011692:	4622      	mov	r2, r4
 8011694:	2a01      	cmp	r2, #1
 8011696:	f1a3 0304 	sub.w	r3, r3, #4
 801169a:	dc5d      	bgt.n	8011758 <__kernel_rem_pio2f+0x4a0>
 801169c:	ab30      	add	r3, sp, #192	@ 0xc0
 801169e:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 80115bc <__kernel_rem_pio2f+0x304>
 80116a2:	440b      	add	r3, r1
 80116a4:	2c01      	cmp	r4, #1
 80116a6:	dc67      	bgt.n	8011778 <__kernel_rem_pio2f+0x4c0>
 80116a8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80116ac:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80116b0:	2e00      	cmp	r6, #0
 80116b2:	d167      	bne.n	8011784 <__kernel_rem_pio2f+0x4cc>
 80116b4:	edc7 6a00 	vstr	s13, [r7]
 80116b8:	ed87 7a01 	vstr	s14, [r7, #4]
 80116bc:	edc7 7a02 	vstr	s15, [r7, #8]
 80116c0:	e7d4      	b.n	801166c <__kernel_rem_pio2f+0x3b4>
 80116c2:	ab30      	add	r3, sp, #192	@ 0xc0
 80116c4:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 80115bc <__kernel_rem_pio2f+0x304>
 80116c8:	440b      	add	r3, r1
 80116ca:	4622      	mov	r2, r4
 80116cc:	2a00      	cmp	r2, #0
 80116ce:	da24      	bge.n	801171a <__kernel_rem_pio2f+0x462>
 80116d0:	b34e      	cbz	r6, 8011726 <__kernel_rem_pio2f+0x46e>
 80116d2:	eef1 7a47 	vneg.f32	s15, s14
 80116d6:	edc7 7a00 	vstr	s15, [r7]
 80116da:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80116de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80116e2:	aa31      	add	r2, sp, #196	@ 0xc4
 80116e4:	2301      	movs	r3, #1
 80116e6:	429c      	cmp	r4, r3
 80116e8:	da20      	bge.n	801172c <__kernel_rem_pio2f+0x474>
 80116ea:	b10e      	cbz	r6, 80116f0 <__kernel_rem_pio2f+0x438>
 80116ec:	eef1 7a67 	vneg.f32	s15, s15
 80116f0:	edc7 7a01 	vstr	s15, [r7, #4]
 80116f4:	e7ba      	b.n	801166c <__kernel_rem_pio2f+0x3b4>
 80116f6:	ab30      	add	r3, sp, #192	@ 0xc0
 80116f8:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 80115bc <__kernel_rem_pio2f+0x304>
 80116fc:	440b      	add	r3, r1
 80116fe:	2c00      	cmp	r4, #0
 8011700:	da05      	bge.n	801170e <__kernel_rem_pio2f+0x456>
 8011702:	b10e      	cbz	r6, 8011708 <__kernel_rem_pio2f+0x450>
 8011704:	eef1 7a67 	vneg.f32	s15, s15
 8011708:	edc7 7a00 	vstr	s15, [r7]
 801170c:	e7ae      	b.n	801166c <__kernel_rem_pio2f+0x3b4>
 801170e:	ed33 7a01 	vldmdb	r3!, {s14}
 8011712:	3c01      	subs	r4, #1
 8011714:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011718:	e7f1      	b.n	80116fe <__kernel_rem_pio2f+0x446>
 801171a:	ed73 7a01 	vldmdb	r3!, {s15}
 801171e:	3a01      	subs	r2, #1
 8011720:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011724:	e7d2      	b.n	80116cc <__kernel_rem_pio2f+0x414>
 8011726:	eef0 7a47 	vmov.f32	s15, s14
 801172a:	e7d4      	b.n	80116d6 <__kernel_rem_pio2f+0x41e>
 801172c:	ecb2 7a01 	vldmia	r2!, {s14}
 8011730:	3301      	adds	r3, #1
 8011732:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011736:	e7d6      	b.n	80116e6 <__kernel_rem_pio2f+0x42e>
 8011738:	edd2 7a00 	vldr	s15, [r2]
 801173c:	edd2 6a01 	vldr	s13, [r2, #4]
 8011740:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011744:	3801      	subs	r0, #1
 8011746:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801174a:	ed82 7a00 	vstr	s14, [r2]
 801174e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011752:	edc2 7a01 	vstr	s15, [r2, #4]
 8011756:	e798      	b.n	801168a <__kernel_rem_pio2f+0x3d2>
 8011758:	edd3 7a00 	vldr	s15, [r3]
 801175c:	edd3 6a01 	vldr	s13, [r3, #4]
 8011760:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011764:	3a01      	subs	r2, #1
 8011766:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801176a:	ed83 7a00 	vstr	s14, [r3]
 801176e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011772:	edc3 7a01 	vstr	s15, [r3, #4]
 8011776:	e78d      	b.n	8011694 <__kernel_rem_pio2f+0x3dc>
 8011778:	ed33 7a01 	vldmdb	r3!, {s14}
 801177c:	3c01      	subs	r4, #1
 801177e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011782:	e78f      	b.n	80116a4 <__kernel_rem_pio2f+0x3ec>
 8011784:	eef1 6a66 	vneg.f32	s13, s13
 8011788:	eeb1 7a47 	vneg.f32	s14, s14
 801178c:	edc7 6a00 	vstr	s13, [r7]
 8011790:	ed87 7a01 	vstr	s14, [r7, #4]
 8011794:	eef1 7a67 	vneg.f32	s15, s15
 8011798:	e790      	b.n	80116bc <__kernel_rem_pio2f+0x404>
 801179a:	bf00      	nop

0801179c <scalbnf>:
 801179c:	ee10 3a10 	vmov	r3, s0
 80117a0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80117a4:	d02b      	beq.n	80117fe <scalbnf+0x62>
 80117a6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80117aa:	d302      	bcc.n	80117b2 <scalbnf+0x16>
 80117ac:	ee30 0a00 	vadd.f32	s0, s0, s0
 80117b0:	4770      	bx	lr
 80117b2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80117b6:	d123      	bne.n	8011800 <scalbnf+0x64>
 80117b8:	4b24      	ldr	r3, [pc, #144]	@ (801184c <scalbnf+0xb0>)
 80117ba:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8011850 <scalbnf+0xb4>
 80117be:	4298      	cmp	r0, r3
 80117c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80117c4:	db17      	blt.n	80117f6 <scalbnf+0x5a>
 80117c6:	ee10 3a10 	vmov	r3, s0
 80117ca:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80117ce:	3a19      	subs	r2, #25
 80117d0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80117d4:	4288      	cmp	r0, r1
 80117d6:	dd15      	ble.n	8011804 <scalbnf+0x68>
 80117d8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8011854 <scalbnf+0xb8>
 80117dc:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8011858 <scalbnf+0xbc>
 80117e0:	ee10 3a10 	vmov	r3, s0
 80117e4:	eeb0 7a67 	vmov.f32	s14, s15
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	bfb8      	it	lt
 80117ec:	eef0 7a66 	vmovlt.f32	s15, s13
 80117f0:	ee27 0a87 	vmul.f32	s0, s15, s14
 80117f4:	4770      	bx	lr
 80117f6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801185c <scalbnf+0xc0>
 80117fa:	ee27 0a80 	vmul.f32	s0, s15, s0
 80117fe:	4770      	bx	lr
 8011800:	0dd2      	lsrs	r2, r2, #23
 8011802:	e7e5      	b.n	80117d0 <scalbnf+0x34>
 8011804:	4410      	add	r0, r2
 8011806:	28fe      	cmp	r0, #254	@ 0xfe
 8011808:	dce6      	bgt.n	80117d8 <scalbnf+0x3c>
 801180a:	2800      	cmp	r0, #0
 801180c:	dd06      	ble.n	801181c <scalbnf+0x80>
 801180e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011812:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011816:	ee00 3a10 	vmov	s0, r3
 801181a:	4770      	bx	lr
 801181c:	f110 0f16 	cmn.w	r0, #22
 8011820:	da09      	bge.n	8011836 <scalbnf+0x9a>
 8011822:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801185c <scalbnf+0xc0>
 8011826:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8011860 <scalbnf+0xc4>
 801182a:	ee10 3a10 	vmov	r3, s0
 801182e:	eeb0 7a67 	vmov.f32	s14, s15
 8011832:	2b00      	cmp	r3, #0
 8011834:	e7d9      	b.n	80117ea <scalbnf+0x4e>
 8011836:	3019      	adds	r0, #25
 8011838:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801183c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011840:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8011864 <scalbnf+0xc8>
 8011844:	ee07 3a90 	vmov	s15, r3
 8011848:	e7d7      	b.n	80117fa <scalbnf+0x5e>
 801184a:	bf00      	nop
 801184c:	ffff3cb0 	.word	0xffff3cb0
 8011850:	4c000000 	.word	0x4c000000
 8011854:	7149f2ca 	.word	0x7149f2ca
 8011858:	f149f2ca 	.word	0xf149f2ca
 801185c:	0da24260 	.word	0x0da24260
 8011860:	8da24260 	.word	0x8da24260
 8011864:	33000000 	.word	0x33000000

08011868 <floorf>:
 8011868:	ee10 3a10 	vmov	r3, s0
 801186c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011870:	3a7f      	subs	r2, #127	@ 0x7f
 8011872:	2a16      	cmp	r2, #22
 8011874:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011878:	dc2b      	bgt.n	80118d2 <floorf+0x6a>
 801187a:	2a00      	cmp	r2, #0
 801187c:	da12      	bge.n	80118a4 <floorf+0x3c>
 801187e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80118e4 <floorf+0x7c>
 8011882:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011886:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801188a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801188e:	dd06      	ble.n	801189e <floorf+0x36>
 8011890:	2b00      	cmp	r3, #0
 8011892:	da24      	bge.n	80118de <floorf+0x76>
 8011894:	2900      	cmp	r1, #0
 8011896:	4b14      	ldr	r3, [pc, #80]	@ (80118e8 <floorf+0x80>)
 8011898:	bf08      	it	eq
 801189a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801189e:	ee00 3a10 	vmov	s0, r3
 80118a2:	4770      	bx	lr
 80118a4:	4911      	ldr	r1, [pc, #68]	@ (80118ec <floorf+0x84>)
 80118a6:	4111      	asrs	r1, r2
 80118a8:	420b      	tst	r3, r1
 80118aa:	d0fa      	beq.n	80118a2 <floorf+0x3a>
 80118ac:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80118e4 <floorf+0x7c>
 80118b0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80118b4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80118b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118bc:	ddef      	ble.n	801189e <floorf+0x36>
 80118be:	2b00      	cmp	r3, #0
 80118c0:	bfbe      	ittt	lt
 80118c2:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80118c6:	fa40 f202 	asrlt.w	r2, r0, r2
 80118ca:	189b      	addlt	r3, r3, r2
 80118cc:	ea23 0301 	bic.w	r3, r3, r1
 80118d0:	e7e5      	b.n	801189e <floorf+0x36>
 80118d2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80118d6:	d3e4      	bcc.n	80118a2 <floorf+0x3a>
 80118d8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80118dc:	4770      	bx	lr
 80118de:	2300      	movs	r3, #0
 80118e0:	e7dd      	b.n	801189e <floorf+0x36>
 80118e2:	bf00      	nop
 80118e4:	7149f2ca 	.word	0x7149f2ca
 80118e8:	bf800000 	.word	0xbf800000
 80118ec:	007fffff 	.word	0x007fffff

080118f0 <_init>:
 80118f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118f2:	bf00      	nop
 80118f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118f6:	bc08      	pop	{r3}
 80118f8:	469e      	mov	lr, r3
 80118fa:	4770      	bx	lr

080118fc <_fini>:
 80118fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118fe:	bf00      	nop
 8011900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011902:	bc08      	pop	{r3}
 8011904:	469e      	mov	lr, r3
 8011906:	4770      	bx	lr
