
camera_stabilizer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe60  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b48  08010030  08010030  00011030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010b78  08010b78  000121e8  2**0
                  CONTENTS
  4 .ARM          00000008  08010b78  08010b78  00011b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010b80  08010b80  000121e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010b80  08010b80  00011b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010b84  08010b84  00011b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08010b88  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b678  200001e8  08010d70  000121e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b860  08010d70  00012860  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000121e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000204dc  00000000  00000000  00012218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046a0  00000000  00000000  000326f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c98  00000000  00000000  00036d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001660  00000000  00000000  00038a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000294e5  00000000  00000000  0003a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002344b  00000000  00000000  00063575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f038c  00000000  00000000  000869c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00176d4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f6c  00000000  00000000  00176d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0017fcfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010018 	.word	0x08010018

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	08010018 	.word	0x08010018

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <computeDT>:
#include "compute_angles.h"

PitchRollYaw resultsPRY;
CompFilter resultsCompFilter;

double computeDT(uint32_t *prevTick) {
 8000f78:	b5b0      	push	{r4, r5, r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
    uint32_t currTick = osKernelGetTickCount();  // Get current tick
 8000f80:	f007 faa6 	bl	80084d0 <osKernelGetTickCount>
 8000f84:	61b8      	str	r0, [r7, #24]
    uint32_t tickFreq = osKernelGetTickFreq();  // Get tick frequency (e.g., 1000 Hz)
 8000f86:	f007 fab8 	bl	80084fa <osKernelGetTickFreq>
 8000f8a:	6178      	str	r0, [r7, #20]

    // Ensure tick frequency is valid
    if (tickFreq == 0) {
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d107      	bne.n	8000fa2 <computeDT+0x2a>
        printf("Error: Tick frequency is zero!\n");
 8000f92:	481c      	ldr	r0, [pc, #112]	@ (8001004 <computeDT+0x8c>)
 8000f94:	f00b fe02 	bl	800cb9c <puts>
        return 0.0;  // Avoid division by zero
 8000f98:	f04f 0200 	mov.w	r2, #0
 8000f9c:	f04f 0300 	mov.w	r3, #0
 8000fa0:	e026      	b.n	8000ff0 <computeDT+0x78>
    }

    uint32_t deltaTicks;
    if (currTick >= *prevTick) {
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d305      	bcc.n	8000fb8 <computeDT+0x40>
        deltaTicks = currTick - *prevTick;  // Normal case
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	61fb      	str	r3, [r7, #28]
 8000fb6:	e004      	b.n	8000fc2 <computeDT+0x4a>
    } else {
        deltaTicks = (0xFFFFFFFF - *prevTick) + currTick + 1;  // Handle overflow
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	61fb      	str	r3, [r7, #28]
    }

    *prevTick = currTick;  // Update previous tick for the next call
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	601a      	str	r2, [r3, #0]

    double dt = (double)deltaTicks / tickFreq;  // Convert ticks to seconds
 8000fc8:	69f8      	ldr	r0, [r7, #28]
 8000fca:	f7ff fabb 	bl	8000544 <__aeabi_ui2d>
 8000fce:	4604      	mov	r4, r0
 8000fd0:	460d      	mov	r5, r1
 8000fd2:	6978      	ldr	r0, [r7, #20]
 8000fd4:	f7ff fab6 	bl	8000544 <__aeabi_ui2d>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4620      	mov	r0, r4
 8000fde:	4629      	mov	r1, r5
 8000fe0:	f7ff fc54 	bl	800088c <__aeabi_ddiv>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	e9c7 2302 	strd	r2, r3, [r7, #8]

    // Debugging output
//    printf("computeDT -> currTick: %lu, prevTick: %lu, deltaTicks: %lu, tickFreq: %lu, dt: %.6f\n",
//           currTick, *prevTick, deltaTicks, tickFreq, dt);

    return dt;  // Return time difference in seconds
 8000fec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8000ff0:	ec43 2b17 	vmov	d7, r2, r3
 8000ff4:	eeb0 0a47 	vmov.f32	s0, s14
 8000ff8:	eef0 0a67 	vmov.f32	s1, s15
 8000ffc:	3720      	adds	r7, #32
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bdb0      	pop	{r4, r5, r7, pc}
 8001002:	bf00      	nop
 8001004:	08010030 	.word	0x08010030

08001008 <radiansToDegrees>:

float radiansToDegrees(float radians) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / M_PI);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff fab8 	bl	8000588 <__aeabi_f2d>
 8001018:	a309      	add	r3, pc, #36	@ (adr r3, 8001040 <radiansToDegrees+0x38>)
 800101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101e:	f7ff fb0b 	bl	8000638 <__aeabi_dmul>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4610      	mov	r0, r2
 8001028:	4619      	mov	r1, r3
 800102a:	f7ff fddd 	bl	8000be8 <__aeabi_d2f>
 800102e:	4603      	mov	r3, r0
 8001030:	ee07 3a90 	vmov	s15, r3
}
 8001034:	eeb0 0a67 	vmov.f32	s0, s15
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	1a63c1f8 	.word	0x1a63c1f8
 8001044:	404ca5dc 	.word	0x404ca5dc

08001048 <Kalman_Init>:
}

// Initialize the Kalman filter

//The Measurement Noise (R) for the Kalman filter, based on the accelerometer noise density of 400 ug/sqrt(Hz) at 8kHz sample rate is R=0.000640
void Kalman_Init(KalmanFilter *kf, float Q_angle, float Q_bias, float R_measure) {
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	ed87 0a02 	vstr	s0, [r7, #8]
 8001054:	edc7 0a01 	vstr	s1, [r7, #4]
 8001058:	ed87 1a00 	vstr	s2, [r7]
    // Initialization of states
    kf->angle = 0.0f; // θ₀|₀ = 0
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
    kf->bias = 0.0f;  // b₀|₀ = 0
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	605a      	str	r2, [r3, #4]
    kf->rate = 0.0f;  // Unbiased angular rate is initialized to 0
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	609a      	str	r2, [r3, #8]

    // Initialize the error covariance matrix P₀|₀
    kf->P[0][0] = 1.0f; kf->P[0][1] = 0.0f;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f04f 0200 	mov.w	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
    kf->P[1][0] = 0.0f; kf->P[1][1] = 1.0f;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	615a      	str	r2, [r3, #20]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001092:	619a      	str	r2, [r3, #24]

    // Set process and measurement noise covariances
    kf->Q_angle = Q_angle;    // Q_θ: Variance in angle
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	61da      	str	r2, [r3, #28]
    kf->Q_bias = Q_bias;      // Q_b: Variance in gyroscope bias
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	621a      	str	r2, [r3, #32]
    kf->R_measure = R_measure; // R: Variance in accelerometer measurement
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80010a6:	bf00      	nop
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <Kalman_Update>:

// Update the Kalman filter with new sensor data
float Kalman_Update(KalmanFilter *kf, float new_angle, float new_rate, float dt) {
 80010b2:	b480      	push	{r7}
 80010b4:	b08b      	sub	sp, #44	@ 0x2c
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	60f8      	str	r0, [r7, #12]
 80010ba:	ed87 0a02 	vstr	s0, [r7, #8]
 80010be:	edc7 0a01 	vstr	s1, [r7, #4]
 80010c2:	ed87 1a00 	vstr	s2, [r7]
    // Step 1: Prediction

    // Predict the unbiased rate: ωₖ - bₖ
    kf->rate = new_rate - kf->bias; // Equation: ωₖ - bₖ
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80010cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80010d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	edc3 7a02 	vstr	s15, [r3, #8]

    // Predict the angle: θₖ|ₖ₋₁ = θₖ₋₁|ₖ₋₁ + Δt * (ωₖ - bₖ)
    kf->angle += dt * kf->rate; // θₖ|ₖ₋₁ = θₖ₋₁|ₖ₋₁ + Δt * rate
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	ed93 7a00 	vldr	s14, [r3]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	edd3 6a02 	vldr	s13, [r3, #8]
 80010e6:	edd7 7a00 	vldr	s15, [r7]
 80010ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	edc3 7a00 	vstr	s15, [r3]

    // Update the error covariance matrix:
    // Pₖ|ₖ₋₁ = F * Pₖ₋₁|ₖ₋₁ * Fᵀ + Q
    kf->P[0][0] += dt * (dt * kf->P[1][1] - kf->P[0][1] - kf->P[1][0] + kf->Q_angle); // Update Pₖ|ₖ₋₁[0][0]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	ed93 7a03 	vldr	s14, [r3, #12]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	edd3 6a06 	vldr	s13, [r3, #24]
 8001104:	edd7 7a00 	vldr	s15, [r7]
 8001108:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001112:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	edd3 7a05 	vldr	s15, [r3, #20]
 800111c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	edd3 7a07 	vldr	s15, [r3, #28]
 8001126:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800112a:	edd7 7a00 	vldr	s15, [r7]
 800112e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001132:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	edc3 7a03 	vstr	s15, [r3, #12]
    kf->P[0][1] -= dt * kf->P[1][1]; // Update Pₖ|ₖ₋₁[0][1]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	edd3 6a06 	vldr	s13, [r3, #24]
 8001148:	edd7 7a00 	vldr	s15, [r7]
 800114c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001150:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->P[1][0] -= dt * kf->P[1][1]; // Update Pₖ|ₖ₋₁[1][0]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	edd3 6a06 	vldr	s13, [r3, #24]
 8001166:	edd7 7a00 	vldr	s15, [r7]
 800116a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800116e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	edc3 7a05 	vstr	s15, [r3, #20]
    kf->P[1][1] += kf->Q_bias * dt;  // Update Pₖ|ₖ₋₁[1][1]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	ed93 7a06 	vldr	s14, [r3, #24]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	edd3 6a08 	vldr	s13, [r3, #32]
 8001184:	edd7 7a00 	vldr	s15, [r7]
 8001188:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800118c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	edc3 7a06 	vstr	s15, [r3, #24]

    // Step 2: Update

    // Compute the innovation: yₖ = zₖ - H * θₖ|ₖ₋₁
    float y = new_angle - kf->angle; // Innovation: yₖ = zₖ - θₖ|ₖ₋₁
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	edd3 7a00 	vldr	s15, [r3]
 800119c:	ed97 7a02 	vldr	s14, [r7, #8]
 80011a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011a4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Compute the innovation covariance: S = H * Pₖ|ₖ₋₁ * Hᵀ + R
    float S = kf->P[0][0] + kf->R_measure; // S = Pₖ|ₖ₋₁[0][0] + R
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	ed93 7a03 	vldr	s14, [r3, #12]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80011b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b8:	edc7 7a08 	vstr	s15, [r7, #32]

    // Compute the Kalman gain: K = Pₖ|ₖ₋₁ * Hᵀ / S
    float K[2];
    K[0] = kf->P[0][0] / S; // K₁ = Pₖ|ₖ₋₁[0][0] / S
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	edd3 6a03 	vldr	s13, [r3, #12]
 80011c2:	ed97 7a08 	vldr	s14, [r7, #32]
 80011c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ca:	edc7 7a04 	vstr	s15, [r7, #16]
    K[1] = kf->P[1][0] / S; // K₂ = Pₖ|ₖ₋₁[1][0] / S
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	edd3 6a05 	vldr	s13, [r3, #20]
 80011d4:	ed97 7a08 	vldr	s14, [r7, #32]
 80011d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011dc:	edc7 7a05 	vstr	s15, [r7, #20]

    // Update the state estimates: θₖ|ₖ = θₖ|ₖ₋₁ + K₁ * yₖ
    kf->angle += K[0] * y; // θₖ|ₖ = θₖ|ₖ₋₁ + K₁ * yₖ
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	ed93 7a00 	vldr	s14, [r3]
 80011e6:	edd7 6a04 	vldr	s13, [r7, #16]
 80011ea:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80011ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	edc3 7a00 	vstr	s15, [r3]

    // Update the bias: bₖ|ₖ = bₖ|ₖ₋₁ + K₂ * yₖ
    kf->bias += K[1] * y; // bₖ|ₖ = bₖ|ₖ₋₁ + K₂ * yₖ
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	ed93 7a01 	vldr	s14, [r3, #4]
 8001202:	edd7 6a05 	vldr	s13, [r7, #20]
 8001206:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800120a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800120e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	edc3 7a01 	vstr	s15, [r3, #4]

    // Update the error covariance matrix:
    // Pₖ|ₖ = (I - K * H) * Pₖ|ₖ₋₁
    float P00_temp = kf->P[0][0]; // Temporary value to hold Pₖ|ₖ₋₁[0][0]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	61fb      	str	r3, [r7, #28]
    float P01_temp = kf->P[0][1]; // Temporary value to hold Pₖ|ₖ₋₁[0][1]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	61bb      	str	r3, [r7, #24]

    kf->P[0][0] -= K[0] * P00_temp; // Update Pₖ|ₖ[0][0]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	ed93 7a03 	vldr	s14, [r3, #12]
 800122a:	edd7 6a04 	vldr	s13, [r7, #16]
 800122e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001232:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001236:	ee77 7a67 	vsub.f32	s15, s14, s15
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	edc3 7a03 	vstr	s15, [r3, #12]
    kf->P[0][1] -= K[0] * P01_temp; // Update Pₖ|ₖ[0][1]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	ed93 7a04 	vldr	s14, [r3, #16]
 8001246:	edd7 6a04 	vldr	s13, [r7, #16]
 800124a:	edd7 7a06 	vldr	s15, [r7, #24]
 800124e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001252:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->P[1][0] -= K[1] * P00_temp; // Update Pₖ|ₖ[1][0]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001262:	edd7 6a05 	vldr	s13, [r7, #20]
 8001266:	edd7 7a07 	vldr	s15, [r7, #28]
 800126a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800126e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	edc3 7a05 	vstr	s15, [r3, #20]
    kf->P[1][1] -= K[1] * P01_temp; // Update Pₖ|ₖ[1][1]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	ed93 7a06 	vldr	s14, [r3, #24]
 800127e:	edd7 6a05 	vldr	s13, [r7, #20]
 8001282:	edd7 7a06 	vldr	s15, [r7, #24]
 8001286:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800128a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	edc3 7a06 	vstr	s15, [r3, #24]

    // Return the updated angle estimate
    return kf->angle; // Return θₖ|ₖ
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	ee07 3a90 	vmov	s15, r3
}
 800129c:	eeb0 0a67 	vmov.f32	s0, s15
 80012a0:	372c      	adds	r7, #44	@ 0x2c
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	0000      	movs	r0, r0
 80012ac:	0000      	movs	r0, r0
	...

080012b0 <computeAngles>:


PitchRollYaw* computeAngles(MPU6050_Data *dataToProcess, uint32_t *prevTick) {
 80012b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012b4:	b084      	sub	sp, #16
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]
	resultsPRY.pitchAcc = atan2(dataToProcess->accelY, sqrt(pow(dataToProcess->accelX,2)+pow(dataToProcess->accelZ,2)));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f961 	bl	8000588 <__aeabi_f2d>
 80012c6:	4604      	mov	r4, r0
 80012c8:	460d      	mov	r5, r1
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f95a 	bl	8000588 <__aeabi_f2d>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	ed9f 1b7d 	vldr	d1, [pc, #500]	@ 80014d0 <computeAngles+0x220>
 80012dc:	ec43 2b10 	vmov	d0, r2, r3
 80012e0:	f00d fcb0 	bl	800ec44 <pow>
 80012e4:	ec59 8b10 	vmov	r8, r9, d0
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff f94b 	bl	8000588 <__aeabi_f2d>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	ed9f 1b76 	vldr	d1, [pc, #472]	@ 80014d0 <computeAngles+0x220>
 80012fa:	ec43 2b10 	vmov	d0, r2, r3
 80012fe:	f00d fca1 	bl	800ec44 <pow>
 8001302:	ec53 2b10 	vmov	r2, r3, d0
 8001306:	4640      	mov	r0, r8
 8001308:	4649      	mov	r1, r9
 800130a:	f7fe ffdf 	bl	80002cc <__adddf3>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	ec43 2b17 	vmov	d7, r2, r3
 8001316:	eeb0 0a47 	vmov.f32	s0, s14
 800131a:	eef0 0a67 	vmov.f32	s1, s15
 800131e:	f00d fd01 	bl	800ed24 <sqrt>
 8001322:	eeb0 7a40 	vmov.f32	s14, s0
 8001326:	eef0 7a60 	vmov.f32	s15, s1
 800132a:	eeb0 1a47 	vmov.f32	s2, s14
 800132e:	eef0 1a67 	vmov.f32	s3, s15
 8001332:	ec45 4b10 	vmov	d0, r4, r5
 8001336:	f00d fc83 	bl	800ec40 <atan2>
 800133a:	ec53 2b10 	vmov	r2, r3, d0
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f7ff fc51 	bl	8000be8 <__aeabi_d2f>
 8001346:	4603      	mov	r3, r0
 8001348:	4a63      	ldr	r2, [pc, #396]	@ (80014d8 <computeAngles+0x228>)
 800134a:	6013      	str	r3, [r2, #0]
	resultsPRY.rollAcc = atan2(dataToProcess->accelX, sqrt(pow(dataToProcess->accelY,2)+pow(dataToProcess->accelZ,2)));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f919 	bl	8000588 <__aeabi_f2d>
 8001356:	4604      	mov	r4, r0
 8001358:	460d      	mov	r5, r1
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff f912 	bl	8000588 <__aeabi_f2d>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	ed9f 1b59 	vldr	d1, [pc, #356]	@ 80014d0 <computeAngles+0x220>
 800136c:	ec43 2b10 	vmov	d0, r2, r3
 8001370:	f00d fc68 	bl	800ec44 <pow>
 8001374:	ec59 8b10 	vmov	r8, r9, d0
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f903 	bl	8000588 <__aeabi_f2d>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	ed9f 1b52 	vldr	d1, [pc, #328]	@ 80014d0 <computeAngles+0x220>
 800138a:	ec43 2b10 	vmov	d0, r2, r3
 800138e:	f00d fc59 	bl	800ec44 <pow>
 8001392:	ec53 2b10 	vmov	r2, r3, d0
 8001396:	4640      	mov	r0, r8
 8001398:	4649      	mov	r1, r9
 800139a:	f7fe ff97 	bl	80002cc <__adddf3>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	ec43 2b17 	vmov	d7, r2, r3
 80013a6:	eeb0 0a47 	vmov.f32	s0, s14
 80013aa:	eef0 0a67 	vmov.f32	s1, s15
 80013ae:	f00d fcb9 	bl	800ed24 <sqrt>
 80013b2:	eeb0 7a40 	vmov.f32	s14, s0
 80013b6:	eef0 7a60 	vmov.f32	s15, s1
 80013ba:	eeb0 1a47 	vmov.f32	s2, s14
 80013be:	eef0 1a67 	vmov.f32	s3, s15
 80013c2:	ec45 4b10 	vmov	d0, r4, r5
 80013c6:	f00d fc3b 	bl	800ec40 <atan2>
 80013ca:	ec53 2b10 	vmov	r2, r3, d0
 80013ce:	4610      	mov	r0, r2
 80013d0:	4619      	mov	r1, r3
 80013d2:	f7ff fc09 	bl	8000be8 <__aeabi_d2f>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4a3f      	ldr	r2, [pc, #252]	@ (80014d8 <computeAngles+0x228>)
 80013da:	6053      	str	r3, [r2, #4]

    resultsPRY.pitchAcc = radiansToDegrees(resultsPRY.pitchAcc);
 80013dc:	4b3e      	ldr	r3, [pc, #248]	@ (80014d8 <computeAngles+0x228>)
 80013de:	edd3 7a00 	vldr	s15, [r3]
 80013e2:	eeb0 0a67 	vmov.f32	s0, s15
 80013e6:	f7ff fe0f 	bl	8001008 <radiansToDegrees>
 80013ea:	eef0 7a40 	vmov.f32	s15, s0
 80013ee:	4b3a      	ldr	r3, [pc, #232]	@ (80014d8 <computeAngles+0x228>)
 80013f0:	edc3 7a00 	vstr	s15, [r3]
    resultsPRY.rollAcc = radiansToDegrees(resultsPRY.rollAcc);
 80013f4:	4b38      	ldr	r3, [pc, #224]	@ (80014d8 <computeAngles+0x228>)
 80013f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80013fa:	eeb0 0a67 	vmov.f32	s0, s15
 80013fe:	f7ff fe03 	bl	8001008 <radiansToDegrees>
 8001402:	eef0 7a40 	vmov.f32	s15, s0
 8001406:	4b34      	ldr	r3, [pc, #208]	@ (80014d8 <computeAngles+0x228>)
 8001408:	edc3 7a01 	vstr	s15, [r3, #4]

    double dt = computeDT(prevTick);
 800140c:	6838      	ldr	r0, [r7, #0]
 800140e:	f7ff fdb3 	bl	8000f78 <computeDT>
 8001412:	ed87 0b02 	vstr	d0, [r7, #8]

    resultsPRY.pitchGyroDelta = dataToProcess->gyroX * dt;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff f8b4 	bl	8000588 <__aeabi_f2d>
 8001420:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001424:	f7ff f908 	bl	8000638 <__aeabi_dmul>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	f7ff fbda 	bl	8000be8 <__aeabi_d2f>
 8001434:	4603      	mov	r3, r0
 8001436:	4a28      	ldr	r2, [pc, #160]	@ (80014d8 <computeAngles+0x228>)
 8001438:	6153      	str	r3, [r2, #20]
    resultsPRY.rollGyroDelta = dataToProcess->gyroY * dt;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f8a2 	bl	8000588 <__aeabi_f2d>
 8001444:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001448:	f7ff f8f6 	bl	8000638 <__aeabi_dmul>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	4610      	mov	r0, r2
 8001452:	4619      	mov	r1, r3
 8001454:	f7ff fbc8 	bl	8000be8 <__aeabi_d2f>
 8001458:	4603      	mov	r3, r0
 800145a:	4a1f      	ldr	r2, [pc, #124]	@ (80014d8 <computeAngles+0x228>)
 800145c:	6193      	str	r3, [r2, #24]
    resultsPRY.yawGyroDelta = dataToProcess->gyroZ * dt;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff f890 	bl	8000588 <__aeabi_f2d>
 8001468:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800146c:	f7ff f8e4 	bl	8000638 <__aeabi_dmul>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4610      	mov	r0, r2
 8001476:	4619      	mov	r1, r3
 8001478:	f7ff fbb6 	bl	8000be8 <__aeabi_d2f>
 800147c:	4603      	mov	r3, r0
 800147e:	4a16      	ldr	r2, [pc, #88]	@ (80014d8 <computeAngles+0x228>)
 8001480:	61d3      	str	r3, [r2, #28]

    resultsPRY.pitchGyro += resultsPRY.pitchGyroDelta;
 8001482:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <computeAngles+0x228>)
 8001484:	ed93 7a02 	vldr	s14, [r3, #8]
 8001488:	4b13      	ldr	r3, [pc, #76]	@ (80014d8 <computeAngles+0x228>)
 800148a:	edd3 7a05 	vldr	s15, [r3, #20]
 800148e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001492:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <computeAngles+0x228>)
 8001494:	edc3 7a02 	vstr	s15, [r3, #8]
    resultsPRY.rollGyro += resultsPRY.rollGyroDelta;
 8001498:	4b0f      	ldr	r3, [pc, #60]	@ (80014d8 <computeAngles+0x228>)
 800149a:	ed93 7a03 	vldr	s14, [r3, #12]
 800149e:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <computeAngles+0x228>)
 80014a0:	edd3 7a06 	vldr	s15, [r3, #24]
 80014a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a8:	4b0b      	ldr	r3, [pc, #44]	@ (80014d8 <computeAngles+0x228>)
 80014aa:	edc3 7a03 	vstr	s15, [r3, #12]
    resultsPRY.yawGyro += resultsPRY.yawGyroDelta;
 80014ae:	4b0a      	ldr	r3, [pc, #40]	@ (80014d8 <computeAngles+0x228>)
 80014b0:	ed93 7a04 	vldr	s14, [r3, #16]
 80014b4:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <computeAngles+0x228>)
 80014b6:	edd3 7a07 	vldr	s15, [r3, #28]
 80014ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014be:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <computeAngles+0x228>)
 80014c0:	edc3 7a04 	vstr	s15, [r3, #16]

    return &resultsPRY;
 80014c4:	4b04      	ldr	r3, [pc, #16]	@ (80014d8 <computeAngles+0x228>)
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014d0:	00000000 	.word	0x00000000
 80014d4:	40000000 	.word	0x40000000
 80014d8:	20000204 	.word	0x20000204

080014dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e0:	f002 f888 	bl	80035f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014e4:	f000 f872 	bl	80015cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014e8:	f000 fc76 	bl	8001dd8 <MX_GPIO_Init>
  MX_DMA_Init();
 80014ec:	f000 fc44 	bl	8001d78 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80014f0:	f000 fc18 	bl	8001d24 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80014f4:	f000 f928 	bl	8001748 <MX_I2C1_Init>
  MX_SPI1_Init();
 80014f8:	f000 f954 	bl	80017a4 <MX_SPI1_Init>
  MX_ADC1_Init();
 80014fc:	f000 f8d2 	bl	80016a4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001500:	f000 f986 	bl	8001810 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001504:	f000 fa48 	bl	8001998 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001508:	f000 fac6 	bl	8001a98 <MX_TIM3_Init>
  MX_TIM8_Init();
 800150c:	f000 fb46 	bl	8001b9c <MX_TIM8_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001510:	f006 ff94 	bl	800843c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of uartMutex */
  uartMutexHandle = osMutexNew(&uartMutex_attributes);
 8001514:	481c      	ldr	r0, [pc, #112]	@ (8001588 <main+0xac>)
 8001516:	f007 f8a6 	bl	8008666 <osMutexNew>
 800151a:	4603      	mov	r3, r0
 800151c:	4a1b      	ldr	r2, [pc, #108]	@ (800158c <main+0xb0>)
 800151e:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of dmaTxCompleteSemaphore */
  dmaTxCompleteSemaphoreHandle = osSemaphoreNew(1, 1, &dmaTxCompleteSemaphore_attributes);
 8001520:	4a1b      	ldr	r2, [pc, #108]	@ (8001590 <main+0xb4>)
 8001522:	2101      	movs	r1, #1
 8001524:	2001      	movs	r0, #1
 8001526:	f007 f9ac 	bl	8008882 <osSemaphoreNew>
 800152a:	4603      	mov	r3, r0
 800152c:	4a19      	ldr	r2, [pc, #100]	@ (8001594 <main+0xb8>)
 800152e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of MPU6050Data */
  MPU6050DataHandle = osMessageQueueNew (10, sizeof(MPU6050_Data), &MPU6050Data_attributes);
 8001530:	4a19      	ldr	r2, [pc, #100]	@ (8001598 <main+0xbc>)
 8001532:	2124      	movs	r1, #36	@ 0x24
 8001534:	200a      	movs	r0, #10
 8001536:	f007 fa7f 	bl	8008a38 <osMessageQueueNew>
 800153a:	4603      	mov	r3, r0
 800153c:	4a17      	ldr	r2, [pc, #92]	@ (800159c <main+0xc0>)
 800153e:	6013      	str	r3, [r2, #0]

  /* creation of KalmanAngle */
  KalmanAngleHandle = osMessageQueueNew (80, sizeof(KalmanFilter), &KalmanAngle_attributes);
 8001540:	4a17      	ldr	r2, [pc, #92]	@ (80015a0 <main+0xc4>)
 8001542:	2128      	movs	r1, #40	@ 0x28
 8001544:	2050      	movs	r0, #80	@ 0x50
 8001546:	f007 fa77 	bl	8008a38 <osMessageQueueNew>
 800154a:	4603      	mov	r3, r0
 800154c:	4a15      	ldr	r2, [pc, #84]	@ (80015a4 <main+0xc8>)
 800154e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MotorRun */
  MotorRunHandle = osThreadNew(motorRun, NULL, &MotorRun_attributes);
 8001550:	4a15      	ldr	r2, [pc, #84]	@ (80015a8 <main+0xcc>)
 8001552:	2100      	movs	r1, #0
 8001554:	4815      	ldr	r0, [pc, #84]	@ (80015ac <main+0xd0>)
 8001556:	f006 ffd9 	bl	800850c <osThreadNew>
 800155a:	4603      	mov	r3, r0
 800155c:	4a14      	ldr	r2, [pc, #80]	@ (80015b0 <main+0xd4>)
 800155e:	6013      	str	r3, [r2, #0]

  /* creation of MPU6050Task */
  MPU6050TaskHandle = osThreadNew(mpu6050_ReadData, NULL, &MPU6050Task_attributes);
 8001560:	4a14      	ldr	r2, [pc, #80]	@ (80015b4 <main+0xd8>)
 8001562:	2100      	movs	r1, #0
 8001564:	4814      	ldr	r0, [pc, #80]	@ (80015b8 <main+0xdc>)
 8001566:	f006 ffd1 	bl	800850c <osThreadNew>
 800156a:	4603      	mov	r3, r0
 800156c:	4a13      	ldr	r2, [pc, #76]	@ (80015bc <main+0xe0>)
 800156e:	6013      	str	r3, [r2, #0]

  /* creation of DataProcessingT */
  DataProcessingTHandle = osThreadNew(DataProcessing, NULL, &DataProcessingT_attributes);
 8001570:	4a13      	ldr	r2, [pc, #76]	@ (80015c0 <main+0xe4>)
 8001572:	2100      	movs	r1, #0
 8001574:	4813      	ldr	r0, [pc, #76]	@ (80015c4 <main+0xe8>)
 8001576:	f006 ffc9 	bl	800850c <osThreadNew>
 800157a:	4603      	mov	r3, r0
 800157c:	4a12      	ldr	r2, [pc, #72]	@ (80015c8 <main+0xec>)
 800157e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001580:	f006 ff80 	bl	8008484 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <main+0xa8>
 8001588:	0801054c 	.word	0x0801054c
 800158c:	200005b4 	.word	0x200005b4
 8001590:	0801055c 	.word	0x0801055c
 8001594:	200005b8 	.word	0x200005b8
 8001598:	0801051c 	.word	0x0801051c
 800159c:	200005ac 	.word	0x200005ac
 80015a0:	08010534 	.word	0x08010534
 80015a4:	200005b0 	.word	0x200005b0
 80015a8:	080104b0 	.word	0x080104b0
 80015ac:	080028c5 	.word	0x080028c5
 80015b0:	200005a0 	.word	0x200005a0
 80015b4:	080104d4 	.word	0x080104d4
 80015b8:	080023bd 	.word	0x080023bd
 80015bc:	200005a4 	.word	0x200005a4
 80015c0:	080104f8 	.word	0x080104f8
 80015c4:	08002569 	.word	0x08002569
 80015c8:	200005a8 	.word	0x200005a8

080015cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b094      	sub	sp, #80	@ 0x50
 80015d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d2:	f107 031c 	add.w	r3, r7, #28
 80015d6:	2234      	movs	r2, #52	@ 0x34
 80015d8:	2100      	movs	r1, #0
 80015da:	4618      	mov	r0, r3
 80015dc:	f00b fbf2 	bl	800cdc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e0:	f107 0308 	add.w	r3, r7, #8
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f0:	2300      	movs	r3, #0
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	4b29      	ldr	r3, [pc, #164]	@ (800169c <SystemClock_Config+0xd0>)
 80015f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f8:	4a28      	ldr	r2, [pc, #160]	@ (800169c <SystemClock_Config+0xd0>)
 80015fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001600:	4b26      	ldr	r3, [pc, #152]	@ (800169c <SystemClock_Config+0xd0>)
 8001602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800160c:	2300      	movs	r3, #0
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	4b23      	ldr	r3, [pc, #140]	@ (80016a0 <SystemClock_Config+0xd4>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a22      	ldr	r2, [pc, #136]	@ (80016a0 <SystemClock_Config+0xd4>)
 8001616:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	4b20      	ldr	r3, [pc, #128]	@ (80016a0 <SystemClock_Config+0xd4>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001624:	603b      	str	r3, [r7, #0]
 8001626:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001628:	2302      	movs	r3, #2
 800162a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800162c:	2301      	movs	r3, #1
 800162e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001630:	2310      	movs	r3, #16
 8001632:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001634:	2302      	movs	r3, #2
 8001636:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001638:	2300      	movs	r3, #0
 800163a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800163c:	2308      	movs	r3, #8
 800163e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 150;
 8001640:	2396      	movs	r3, #150	@ 0x96
 8001642:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001644:	2302      	movs	r3, #2
 8001646:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001648:	2302      	movs	r3, #2
 800164a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800164c:	2302      	movs	r3, #2
 800164e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001650:	f107 031c 	add.w	r3, r7, #28
 8001654:	4618      	mov	r0, r3
 8001656:	f004 fe17 	bl	8006288 <HAL_RCC_OscConfig>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001660:	f000 fc28 	bl	8001eb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001664:	230f      	movs	r3, #15
 8001666:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001668:	2302      	movs	r3, #2
 800166a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800166c:	2300      	movs	r3, #0
 800166e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001670:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001674:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001676:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800167a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800167c:	f107 0308 	add.w	r3, r7, #8
 8001680:	2104      	movs	r1, #4
 8001682:	4618      	mov	r0, r3
 8001684:	f004 fab6 	bl	8005bf4 <HAL_RCC_ClockConfig>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800168e:	f000 fc11 	bl	8001eb4 <Error_Handler>
  }
}
 8001692:	bf00      	nop
 8001694:	3750      	adds	r7, #80	@ 0x50
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800
 80016a0:	40007000 	.word	0x40007000

080016a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016aa:	463b      	mov	r3, r7
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016b6:	4b21      	ldr	r3, [pc, #132]	@ (800173c <MX_ADC1_Init+0x98>)
 80016b8:	4a21      	ldr	r2, [pc, #132]	@ (8001740 <MX_ADC1_Init+0x9c>)
 80016ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016bc:	4b1f      	ldr	r3, [pc, #124]	@ (800173c <MX_ADC1_Init+0x98>)
 80016be:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016c4:	4b1d      	ldr	r3, [pc, #116]	@ (800173c <MX_ADC1_Init+0x98>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80016ca:	4b1c      	ldr	r3, [pc, #112]	@ (800173c <MX_ADC1_Init+0x98>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016d0:	4b1a      	ldr	r3, [pc, #104]	@ (800173c <MX_ADC1_Init+0x98>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016d6:	4b19      	ldr	r3, [pc, #100]	@ (800173c <MX_ADC1_Init+0x98>)
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016de:	4b17      	ldr	r3, [pc, #92]	@ (800173c <MX_ADC1_Init+0x98>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016e4:	4b15      	ldr	r3, [pc, #84]	@ (800173c <MX_ADC1_Init+0x98>)
 80016e6:	4a17      	ldr	r2, [pc, #92]	@ (8001744 <MX_ADC1_Init+0xa0>)
 80016e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016ea:	4b14      	ldr	r3, [pc, #80]	@ (800173c <MX_ADC1_Init+0x98>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80016f0:	4b12      	ldr	r3, [pc, #72]	@ (800173c <MX_ADC1_Init+0x98>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016f6:	4b11      	ldr	r3, [pc, #68]	@ (800173c <MX_ADC1_Init+0x98>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016fe:	4b0f      	ldr	r3, [pc, #60]	@ (800173c <MX_ADC1_Init+0x98>)
 8001700:	2201      	movs	r2, #1
 8001702:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001704:	480d      	ldr	r0, [pc, #52]	@ (800173c <MX_ADC1_Init+0x98>)
 8001706:	f002 f80b 	bl	8003720 <HAL_ADC_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001710:	f000 fbd0 	bl	8001eb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001714:	230a      	movs	r3, #10
 8001716:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001718:	2301      	movs	r3, #1
 800171a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800171c:	2300      	movs	r3, #0
 800171e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001720:	463b      	mov	r3, r7
 8001722:	4619      	mov	r1, r3
 8001724:	4805      	ldr	r0, [pc, #20]	@ (800173c <MX_ADC1_Init+0x98>)
 8001726:	f002 f83f 	bl	80037a8 <HAL_ADC_ConfigChannel>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001730:	f000 fbc0 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001734:	bf00      	nop
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000224 	.word	0x20000224
 8001740:	40012000 	.word	0x40012000
 8001744:	0f000001 	.word	0x0f000001

08001748 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800174c:	4b12      	ldr	r3, [pc, #72]	@ (8001798 <MX_I2C1_Init+0x50>)
 800174e:	4a13      	ldr	r2, [pc, #76]	@ (800179c <MX_I2C1_Init+0x54>)
 8001750:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001752:	4b11      	ldr	r3, [pc, #68]	@ (8001798 <MX_I2C1_Init+0x50>)
 8001754:	4a12      	ldr	r2, [pc, #72]	@ (80017a0 <MX_I2C1_Init+0x58>)
 8001756:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001758:	4b0f      	ldr	r3, [pc, #60]	@ (8001798 <MX_I2C1_Init+0x50>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800175e:	4b0e      	ldr	r3, [pc, #56]	@ (8001798 <MX_I2C1_Init+0x50>)
 8001760:	2200      	movs	r2, #0
 8001762:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001764:	4b0c      	ldr	r3, [pc, #48]	@ (8001798 <MX_I2C1_Init+0x50>)
 8001766:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800176a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800176c:	4b0a      	ldr	r3, [pc, #40]	@ (8001798 <MX_I2C1_Init+0x50>)
 800176e:	2200      	movs	r2, #0
 8001770:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001772:	4b09      	ldr	r3, [pc, #36]	@ (8001798 <MX_I2C1_Init+0x50>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001778:	4b07      	ldr	r3, [pc, #28]	@ (8001798 <MX_I2C1_Init+0x50>)
 800177a:	2200      	movs	r2, #0
 800177c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800177e:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <MX_I2C1_Init+0x50>)
 8001780:	2200      	movs	r2, #0
 8001782:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001784:	4804      	ldr	r0, [pc, #16]	@ (8001798 <MX_I2C1_Init+0x50>)
 8001786:	f003 f885 	bl	8004894 <HAL_I2C_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001790:	f000 fb90 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	2000026c 	.word	0x2000026c
 800179c:	40005400 	.word	0x40005400
 80017a0:	00061a80 	.word	0x00061a80

080017a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017a8:	4b17      	ldr	r3, [pc, #92]	@ (8001808 <MX_SPI1_Init+0x64>)
 80017aa:	4a18      	ldr	r2, [pc, #96]	@ (800180c <MX_SPI1_Init+0x68>)
 80017ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017ae:	4b16      	ldr	r3, [pc, #88]	@ (8001808 <MX_SPI1_Init+0x64>)
 80017b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017b6:	4b14      	ldr	r3, [pc, #80]	@ (8001808 <MX_SPI1_Init+0x64>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017bc:	4b12      	ldr	r3, [pc, #72]	@ (8001808 <MX_SPI1_Init+0x64>)
 80017be:	2200      	movs	r2, #0
 80017c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017c2:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <MX_SPI1_Init+0x64>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001808 <MX_SPI1_Init+0x64>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001808 <MX_SPI1_Init+0x64>)
 80017d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001808 <MX_SPI1_Init+0x64>)
 80017d8:	2200      	movs	r2, #0
 80017da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001808 <MX_SPI1_Init+0x64>)
 80017de:	2200      	movs	r2, #0
 80017e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017e2:	4b09      	ldr	r3, [pc, #36]	@ (8001808 <MX_SPI1_Init+0x64>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017e8:	4b07      	ldr	r3, [pc, #28]	@ (8001808 <MX_SPI1_Init+0x64>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017ee:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <MX_SPI1_Init+0x64>)
 80017f0:	220a      	movs	r2, #10
 80017f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017f4:	4804      	ldr	r0, [pc, #16]	@ (8001808 <MX_SPI1_Init+0x64>)
 80017f6:	f004 ffe5 	bl	80067c4 <HAL_SPI_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001800:	f000 fb58 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000380 	.word	0x20000380
 800180c:	40013000 	.word	0x40013000

08001810 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b096      	sub	sp, #88	@ 0x58
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001816:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001824:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800182e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	611a      	str	r2, [r3, #16]
 800183e:	615a      	str	r2, [r3, #20]
 8001840:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001842:	1d3b      	adds	r3, r7, #4
 8001844:	2220      	movs	r2, #32
 8001846:	2100      	movs	r1, #0
 8001848:	4618      	mov	r0, r3
 800184a:	f00b fabb 	bl	800cdc4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800184e:	4b50      	ldr	r3, [pc, #320]	@ (8001990 <MX_TIM1_Init+0x180>)
 8001850:	4a50      	ldr	r2, [pc, #320]	@ (8001994 <MX_TIM1_Init+0x184>)
 8001852:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001854:	4b4e      	ldr	r3, [pc, #312]	@ (8001990 <MX_TIM1_Init+0x180>)
 8001856:	2200      	movs	r2, #0
 8001858:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185a:	4b4d      	ldr	r3, [pc, #308]	@ (8001990 <MX_TIM1_Init+0x180>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001860:	4b4b      	ldr	r3, [pc, #300]	@ (8001990 <MX_TIM1_Init+0x180>)
 8001862:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001866:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001868:	4b49      	ldr	r3, [pc, #292]	@ (8001990 <MX_TIM1_Init+0x180>)
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800186e:	4b48      	ldr	r3, [pc, #288]	@ (8001990 <MX_TIM1_Init+0x180>)
 8001870:	2200      	movs	r2, #0
 8001872:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001874:	4b46      	ldr	r3, [pc, #280]	@ (8001990 <MX_TIM1_Init+0x180>)
 8001876:	2200      	movs	r2, #0
 8001878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800187a:	4845      	ldr	r0, [pc, #276]	@ (8001990 <MX_TIM1_Init+0x180>)
 800187c:	f005 fa4c 	bl	8006d18 <HAL_TIM_Base_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001886:	f000 fb15 	bl	8001eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800188a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800188e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001890:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001894:	4619      	mov	r1, r3
 8001896:	483e      	ldr	r0, [pc, #248]	@ (8001990 <MX_TIM1_Init+0x180>)
 8001898:	f005 fba8 	bl	8006fec <HAL_TIM_ConfigClockSource>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80018a2:	f000 fb07 	bl	8001eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018a6:	483a      	ldr	r0, [pc, #232]	@ (8001990 <MX_TIM1_Init+0x180>)
 80018a8:	f005 fa85 	bl	8006db6 <HAL_TIM_PWM_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80018b2:	f000 faff 	bl	8001eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b6:	2300      	movs	r3, #0
 80018b8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018be:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80018c2:	4619      	mov	r1, r3
 80018c4:	4832      	ldr	r0, [pc, #200]	@ (8001990 <MX_TIM1_Init+0x180>)
 80018c6:	f005 ff4f 	bl	8007768 <HAL_TIMEx_MasterConfigSynchronization>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80018d0:	f000 faf0 	bl	8001eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018d4:	2360      	movs	r3, #96	@ 0x60
 80018d6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018dc:	2300      	movs	r3, #0
 80018de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018e0:	2300      	movs	r3, #0
 80018e2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018e4:	2300      	movs	r3, #0
 80018e6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018e8:	2300      	movs	r3, #0
 80018ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018ec:	2300      	movs	r3, #0
 80018ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018f4:	2200      	movs	r2, #0
 80018f6:	4619      	mov	r1, r3
 80018f8:	4825      	ldr	r0, [pc, #148]	@ (8001990 <MX_TIM1_Init+0x180>)
 80018fa:	f005 fab5 	bl	8006e68 <HAL_TIM_PWM_ConfigChannel>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001904:	f000 fad6 	bl	8001eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001908:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800190c:	2204      	movs	r2, #4
 800190e:	4619      	mov	r1, r3
 8001910:	481f      	ldr	r0, [pc, #124]	@ (8001990 <MX_TIM1_Init+0x180>)
 8001912:	f005 faa9 	bl	8006e68 <HAL_TIM_PWM_ConfigChannel>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800191c:	f000 faca 	bl	8001eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001920:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001924:	2208      	movs	r2, #8
 8001926:	4619      	mov	r1, r3
 8001928:	4819      	ldr	r0, [pc, #100]	@ (8001990 <MX_TIM1_Init+0x180>)
 800192a:	f005 fa9d 	bl	8006e68 <HAL_TIM_PWM_ConfigChannel>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001934:	f000 fabe 	bl	8001eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001938:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800193c:	220c      	movs	r2, #12
 800193e:	4619      	mov	r1, r3
 8001940:	4813      	ldr	r0, [pc, #76]	@ (8001990 <MX_TIM1_Init+0x180>)
 8001942:	f005 fa91 	bl	8006e68 <HAL_TIM_PWM_ConfigChannel>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800194c:	f000 fab2 	bl	8001eb4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001950:	2300      	movs	r3, #0
 8001952:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001954:	2300      	movs	r3, #0
 8001956:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001958:	2300      	movs	r3, #0
 800195a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001964:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001968:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800196a:	2300      	movs	r3, #0
 800196c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	4619      	mov	r1, r3
 8001972:	4807      	ldr	r0, [pc, #28]	@ (8001990 <MX_TIM1_Init+0x180>)
 8001974:	f005 ff74 	bl	8007860 <HAL_TIMEx_ConfigBreakDeadTime>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800197e:	f000 fa99 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001982:	4803      	ldr	r0, [pc, #12]	@ (8001990 <MX_TIM1_Init+0x180>)
 8001984:	f001 fbca 	bl	800311c <HAL_TIM_MspPostInit>

}
 8001988:	bf00      	nop
 800198a:	3758      	adds	r7, #88	@ 0x58
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	200003d8 	.word	0x200003d8
 8001994:	40010000 	.word	0x40010000

08001998 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08e      	sub	sp, #56	@ 0x38
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800199e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ac:	f107 0320 	add.w	r3, r7, #32
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
 80019c4:	615a      	str	r2, [r3, #20]
 80019c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019c8:	4b32      	ldr	r3, [pc, #200]	@ (8001a94 <MX_TIM2_Init+0xfc>)
 80019ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019d0:	4b30      	ldr	r3, [pc, #192]	@ (8001a94 <MX_TIM2_Init+0xfc>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001a94 <MX_TIM2_Init+0xfc>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80019dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001a94 <MX_TIM2_Init+0xfc>)
 80019de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a94 <MX_TIM2_Init+0xfc>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001a94 <MX_TIM2_Init+0xfc>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019f0:	4828      	ldr	r0, [pc, #160]	@ (8001a94 <MX_TIM2_Init+0xfc>)
 80019f2:	f005 f991 	bl	8006d18 <HAL_TIM_Base_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80019fc:	f000 fa5a 	bl	8001eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a04:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4821      	ldr	r0, [pc, #132]	@ (8001a94 <MX_TIM2_Init+0xfc>)
 8001a0e:	f005 faed 	bl	8006fec <HAL_TIM_ConfigClockSource>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001a18:	f000 fa4c 	bl	8001eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a1c:	481d      	ldr	r0, [pc, #116]	@ (8001a94 <MX_TIM2_Init+0xfc>)
 8001a1e:	f005 f9ca 	bl	8006db6 <HAL_TIM_PWM_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001a28:	f000 fa44 	bl	8001eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a34:	f107 0320 	add.w	r3, r7, #32
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4816      	ldr	r0, [pc, #88]	@ (8001a94 <MX_TIM2_Init+0xfc>)
 8001a3c:	f005 fe94 	bl	8007768 <HAL_TIMEx_MasterConfigSynchronization>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001a46:	f000 fa35 	bl	8001eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a4a:	2360      	movs	r3, #96	@ 0x60
 8001a4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a5a:	1d3b      	adds	r3, r7, #4
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	4619      	mov	r1, r3
 8001a60:	480c      	ldr	r0, [pc, #48]	@ (8001a94 <MX_TIM2_Init+0xfc>)
 8001a62:	f005 fa01 	bl	8006e68 <HAL_TIM_PWM_ConfigChannel>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001a6c:	f000 fa22 	bl	8001eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	2204      	movs	r2, #4
 8001a74:	4619      	mov	r1, r3
 8001a76:	4807      	ldr	r0, [pc, #28]	@ (8001a94 <MX_TIM2_Init+0xfc>)
 8001a78:	f005 f9f6 	bl	8006e68 <HAL_TIM_PWM_ConfigChannel>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001a82:	f000 fa17 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a86:	4803      	ldr	r0, [pc, #12]	@ (8001a94 <MX_TIM2_Init+0xfc>)
 8001a88:	f001 fb48 	bl	800311c <HAL_TIM_MspPostInit>

}
 8001a8c:	bf00      	nop
 8001a8e:	3738      	adds	r7, #56	@ 0x38
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000420 	.word	0x20000420

08001a98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08e      	sub	sp, #56	@ 0x38
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	609a      	str	r2, [r3, #8]
 8001aaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aac:	f107 0320 	add.w	r3, r7, #32
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
 8001ac4:	615a      	str	r2, [r3, #20]
 8001ac6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ac8:	4b32      	ldr	r3, [pc, #200]	@ (8001b94 <MX_TIM3_Init+0xfc>)
 8001aca:	4a33      	ldr	r2, [pc, #204]	@ (8001b98 <MX_TIM3_Init+0x100>)
 8001acc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ace:	4b31      	ldr	r3, [pc, #196]	@ (8001b94 <MX_TIM3_Init+0xfc>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad4:	4b2f      	ldr	r3, [pc, #188]	@ (8001b94 <MX_TIM3_Init+0xfc>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ada:	4b2e      	ldr	r3, [pc, #184]	@ (8001b94 <MX_TIM3_Init+0xfc>)
 8001adc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ae0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae2:	4b2c      	ldr	r3, [pc, #176]	@ (8001b94 <MX_TIM3_Init+0xfc>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8001b94 <MX_TIM3_Init+0xfc>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001aee:	4829      	ldr	r0, [pc, #164]	@ (8001b94 <MX_TIM3_Init+0xfc>)
 8001af0:	f005 f912 	bl	8006d18 <HAL_TIM_Base_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001afa:	f000 f9db 	bl	8001eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001afe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b02:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b04:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4822      	ldr	r0, [pc, #136]	@ (8001b94 <MX_TIM3_Init+0xfc>)
 8001b0c:	f005 fa6e 	bl	8006fec <HAL_TIM_ConfigClockSource>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001b16:	f000 f9cd 	bl	8001eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b1a:	481e      	ldr	r0, [pc, #120]	@ (8001b94 <MX_TIM3_Init+0xfc>)
 8001b1c:	f005 f94b 	bl	8006db6 <HAL_TIM_PWM_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001b26:	f000 f9c5 	bl	8001eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b32:	f107 0320 	add.w	r3, r7, #32
 8001b36:	4619      	mov	r1, r3
 8001b38:	4816      	ldr	r0, [pc, #88]	@ (8001b94 <MX_TIM3_Init+0xfc>)
 8001b3a:	f005 fe15 	bl	8007768 <HAL_TIMEx_MasterConfigSynchronization>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001b44:	f000 f9b6 	bl	8001eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b48:	2360      	movs	r3, #96	@ 0x60
 8001b4a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	480d      	ldr	r0, [pc, #52]	@ (8001b94 <MX_TIM3_Init+0xfc>)
 8001b60:	f005 f982 	bl	8006e68 <HAL_TIM_PWM_ConfigChannel>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001b6a:	f000 f9a3 	bl	8001eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	2204      	movs	r2, #4
 8001b72:	4619      	mov	r1, r3
 8001b74:	4807      	ldr	r0, [pc, #28]	@ (8001b94 <MX_TIM3_Init+0xfc>)
 8001b76:	f005 f977 	bl	8006e68 <HAL_TIM_PWM_ConfigChannel>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001b80:	f000 f998 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b84:	4803      	ldr	r0, [pc, #12]	@ (8001b94 <MX_TIM3_Init+0xfc>)
 8001b86:	f001 fac9 	bl	800311c <HAL_TIM_MspPostInit>

}
 8001b8a:	bf00      	nop
 8001b8c:	3738      	adds	r7, #56	@ 0x38
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000468 	.word	0x20000468
 8001b98:	40000400 	.word	0x40000400

08001b9c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b096      	sub	sp, #88	@ 0x58
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ba2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
 8001bae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	60da      	str	r2, [r3, #12]
 8001bc8:	611a      	str	r2, [r3, #16]
 8001bca:	615a      	str	r2, [r3, #20]
 8001bcc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f00b f8f5 	bl	800cdc4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001bda:	4b50      	ldr	r3, [pc, #320]	@ (8001d1c <MX_TIM8_Init+0x180>)
 8001bdc:	4a50      	ldr	r2, [pc, #320]	@ (8001d20 <MX_TIM8_Init+0x184>)
 8001bde:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001be0:	4b4e      	ldr	r3, [pc, #312]	@ (8001d1c <MX_TIM8_Init+0x180>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be6:	4b4d      	ldr	r3, [pc, #308]	@ (8001d1c <MX_TIM8_Init+0x180>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001bec:	4b4b      	ldr	r3, [pc, #300]	@ (8001d1c <MX_TIM8_Init+0x180>)
 8001bee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bf2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf4:	4b49      	ldr	r3, [pc, #292]	@ (8001d1c <MX_TIM8_Init+0x180>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001bfa:	4b48      	ldr	r3, [pc, #288]	@ (8001d1c <MX_TIM8_Init+0x180>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c00:	4b46      	ldr	r3, [pc, #280]	@ (8001d1c <MX_TIM8_Init+0x180>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001c06:	4845      	ldr	r0, [pc, #276]	@ (8001d1c <MX_TIM8_Init+0x180>)
 8001c08:	f005 f886 	bl	8006d18 <HAL_TIM_Base_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001c12:	f000 f94f 	bl	8001eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001c1c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001c20:	4619      	mov	r1, r3
 8001c22:	483e      	ldr	r0, [pc, #248]	@ (8001d1c <MX_TIM8_Init+0x180>)
 8001c24:	f005 f9e2 	bl	8006fec <HAL_TIM_ConfigClockSource>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001c2e:	f000 f941 	bl	8001eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001c32:	483a      	ldr	r0, [pc, #232]	@ (8001d1c <MX_TIM8_Init+0x180>)
 8001c34:	f005 f8bf 	bl	8006db6 <HAL_TIM_PWM_Init>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001c3e:	f000 f939 	bl	8001eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c42:	2300      	movs	r3, #0
 8001c44:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001c4a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4832      	ldr	r0, [pc, #200]	@ (8001d1c <MX_TIM8_Init+0x180>)
 8001c52:	f005 fd89 	bl	8007768 <HAL_TIMEx_MasterConfigSynchronization>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001c5c:	f000 f92a 	bl	8001eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c60:	2360      	movs	r3, #96	@ 0x60
 8001c62:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c74:	2300      	movs	r3, #0
 8001c76:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c80:	2200      	movs	r2, #0
 8001c82:	4619      	mov	r1, r3
 8001c84:	4825      	ldr	r0, [pc, #148]	@ (8001d1c <MX_TIM8_Init+0x180>)
 8001c86:	f005 f8ef 	bl	8006e68 <HAL_TIM_PWM_ConfigChannel>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001c90:	f000 f910 	bl	8001eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c98:	2204      	movs	r2, #4
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	481f      	ldr	r0, [pc, #124]	@ (8001d1c <MX_TIM8_Init+0x180>)
 8001c9e:	f005 f8e3 	bl	8006e68 <HAL_TIM_PWM_ConfigChannel>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001ca8:	f000 f904 	bl	8001eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cb0:	2208      	movs	r2, #8
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4819      	ldr	r0, [pc, #100]	@ (8001d1c <MX_TIM8_Init+0x180>)
 8001cb6:	f005 f8d7 	bl	8006e68 <HAL_TIM_PWM_ConfigChannel>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8001cc0:	f000 f8f8 	bl	8001eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cc8:	220c      	movs	r2, #12
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4813      	ldr	r0, [pc, #76]	@ (8001d1c <MX_TIM8_Init+0x180>)
 8001cce:	f005 f8cb 	bl	8006e68 <HAL_TIM_PWM_ConfigChannel>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8001cd8:	f000 f8ec 	bl	8001eb4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cf0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cf4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4807      	ldr	r0, [pc, #28]	@ (8001d1c <MX_TIM8_Init+0x180>)
 8001d00:	f005 fdae 	bl	8007860 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8001d0a:	f000 f8d3 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001d0e:	4803      	ldr	r0, [pc, #12]	@ (8001d1c <MX_TIM8_Init+0x180>)
 8001d10:	f001 fa04 	bl	800311c <HAL_TIM_MspPostInit>

}
 8001d14:	bf00      	nop
 8001d16:	3758      	adds	r7, #88	@ 0x58
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	200004b0 	.word	0x200004b0
 8001d20:	40010400 	.word	0x40010400

08001d24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d28:	4b11      	ldr	r3, [pc, #68]	@ (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d2a:	4a12      	ldr	r2, [pc, #72]	@ (8001d74 <MX_USART2_UART_Init+0x50>)
 8001d2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d2e:	4b10      	ldr	r3, [pc, #64]	@ (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d36:	4b0e      	ldr	r3, [pc, #56]	@ (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d42:	4b0b      	ldr	r3, [pc, #44]	@ (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d48:	4b09      	ldr	r3, [pc, #36]	@ (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d4e:	4b08      	ldr	r3, [pc, #32]	@ (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d54:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d5a:	4805      	ldr	r0, [pc, #20]	@ (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d5c:	f005 fdd2 	bl	8007904 <HAL_UART_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d66:	f000 f8a5 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200004f8 	.word	0x200004f8
 8001d74:	40004400 	.word	0x40004400

08001d78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	4b14      	ldr	r3, [pc, #80]	@ (8001dd4 <MX_DMA_Init+0x5c>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d86:	4a13      	ldr	r2, [pc, #76]	@ (8001dd4 <MX_DMA_Init+0x5c>)
 8001d88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d8e:	4b11      	ldr	r3, [pc, #68]	@ (8001dd4 <MX_DMA_Init+0x5c>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2105      	movs	r1, #5
 8001d9e:	200b      	movs	r0, #11
 8001da0:	f002 f80b 	bl	8003dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001da4:	200b      	movs	r0, #11
 8001da6:	f002 f824 	bl	8003df2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001daa:	2200      	movs	r2, #0
 8001dac:	2105      	movs	r1, #5
 8001dae:	2011      	movs	r0, #17
 8001db0:	f002 f803 	bl	8003dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001db4:	2011      	movs	r0, #17
 8001db6:	f002 f81c 	bl	8003df2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2105      	movs	r1, #5
 8001dbe:	202f      	movs	r0, #47	@ 0x2f
 8001dc0:	f001 fffb 	bl	8003dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001dc4:	202f      	movs	r0, #47	@ 0x2f
 8001dc6:	f002 f814 	bl	8003df2 <HAL_NVIC_EnableIRQ>

}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40023800 	.word	0x40023800

08001dd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	@ 0x28
 8001ddc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dde:	f107 0314 	add.w	r3, r7, #20
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]
 8001dec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	4b2d      	ldr	r3, [pc, #180]	@ (8001ea8 <MX_GPIO_Init+0xd0>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	4a2c      	ldr	r2, [pc, #176]	@ (8001ea8 <MX_GPIO_Init+0xd0>)
 8001df8:	f043 0304 	orr.w	r3, r3, #4
 8001dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dfe:	4b2a      	ldr	r3, [pc, #168]	@ (8001ea8 <MX_GPIO_Init+0xd0>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	f003 0304 	and.w	r3, r3, #4
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	4b26      	ldr	r3, [pc, #152]	@ (8001ea8 <MX_GPIO_Init+0xd0>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	4a25      	ldr	r2, [pc, #148]	@ (8001ea8 <MX_GPIO_Init+0xd0>)
 8001e14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e1a:	4b23      	ldr	r3, [pc, #140]	@ (8001ea8 <MX_GPIO_Init+0xd0>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea8 <MX_GPIO_Init+0xd0>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ea8 <MX_GPIO_Init+0xd0>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e36:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea8 <MX_GPIO_Init+0xd0>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	607b      	str	r3, [r7, #4]
 8001e46:	4b18      	ldr	r3, [pc, #96]	@ (8001ea8 <MX_GPIO_Init+0xd0>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	4a17      	ldr	r2, [pc, #92]	@ (8001ea8 <MX_GPIO_Init+0xd0>)
 8001e4c:	f043 0302 	orr.w	r3, r3, #2
 8001e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e52:	4b15      	ldr	r3, [pc, #84]	@ (8001ea8 <MX_GPIO_Init+0xd0>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2106      	movs	r1, #6
 8001e62:	4812      	ldr	r0, [pc, #72]	@ (8001eac <MX_GPIO_Init+0xd4>)
 8001e64:	f002 fcfc 	bl	8004860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e6e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001e72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	480c      	ldr	r0, [pc, #48]	@ (8001eb0 <MX_GPIO_Init+0xd8>)
 8001e80:	f002 fb42 	bl	8004508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001e84:	2306      	movs	r3, #6
 8001e86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e90:	2300      	movs	r3, #0
 8001e92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4804      	ldr	r0, [pc, #16]	@ (8001eac <MX_GPIO_Init+0xd4>)
 8001e9c:	f002 fb34 	bl	8004508 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ea0:	bf00      	nop
 8001ea2:	3728      	adds	r7, #40	@ 0x28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40020400 	.word	0x40020400
 8001eb0:	40020800 	.word	0x40020800

08001eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb8:	b672      	cpsid	i
}
 8001eba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ebc:	bf00      	nop
 8001ebe:	e7fd      	b.n	8001ebc <Error_Handler+0x8>

08001ec0 <MPU6050_Init>:

#include "mpu6050.h"
#include "write_printf.h"
#include "main.h"

void MPU6050_Init(void) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	@ 0x28
 8001ec4:	af04      	add	r7, sp, #16
    uint8_t data[2];

//    MPU6050_SoftReset();

    HAL_Delay(2000);
 8001ec6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001eca:	f001 fc05 	bl	80036d8 <HAL_Delay>

    // Wake up the MPU6050 (write 0 to PWR_MGMT_1 register)
    data[0] = 0x6B;  // Register address
 8001ece:	236b      	movs	r3, #107	@ 0x6b
 8001ed0:	733b      	strb	r3, [r7, #12]
    data[1] = 0x00;  // Data to write
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	737b      	strb	r3, [r7, #13]
    HAL_StatusTypeDef status;
	status = HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, data, 2, HAL_MAX_DELAY);
 8001ed6:	f107 020c 	add.w	r2, r7, #12
 8001eda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	21d0      	movs	r1, #208	@ 0xd0
 8001ee4:	485e      	ldr	r0, [pc, #376]	@ (8002060 <MPU6050_Init+0x1a0>)
 8001ee6:	f002 fe19 	bl	8004b1c <HAL_I2C_Master_Transmit>
 8001eea:	4603      	mov	r3, r0
 8001eec:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 8001eee:	7dfb      	ldrb	r3, [r7, #23]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00a      	beq.n	8001f0a <MPU6050_Init+0x4a>
		uint32_t err = HAL_I2C_GetError(&hi2c1);
 8001ef4:	485a      	ldr	r0, [pc, #360]	@ (8002060 <MPU6050_Init+0x1a0>)
 8001ef6:	f003 fa3b 	bl	8005370 <HAL_I2C_GetError>
 8001efa:	6138      	str	r0, [r7, #16]
		printf("I2C transmit failed, status: %d, error: 0x%08lx\r\n", status, err);
 8001efc:	7dfb      	ldrb	r3, [r7, #23]
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4619      	mov	r1, r3
 8001f02:	4858      	ldr	r0, [pc, #352]	@ (8002064 <MPU6050_Init+0x1a4>)
 8001f04:	f00a fde2 	bl	800cacc <iprintf>
 8001f08:	e002      	b.n	8001f10 <MPU6050_Init+0x50>
	} else {
		printf("I2C transmit succeeded.\r\n");
 8001f0a:	4857      	ldr	r0, [pc, #348]	@ (8002068 <MPU6050_Init+0x1a8>)
 8001f0c:	f00a fe46 	bl	800cb9c <puts>
	}

    uint8_t data_config;

    // Set accelerometer range to ±2g
    data_config = 0x00;
 8001f10:	2300      	movs	r3, #0
 8001f12:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG, 1, &data_config, 1, HAL_MAX_DELAY);
 8001f14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f18:	9302      	str	r3, [sp, #8]
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	9301      	str	r3, [sp, #4]
 8001f1e:	f107 030b 	add.w	r3, r7, #11
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	2301      	movs	r3, #1
 8001f26:	221c      	movs	r2, #28
 8001f28:	21d0      	movs	r1, #208	@ 0xd0
 8001f2a:	484d      	ldr	r0, [pc, #308]	@ (8002060 <MPU6050_Init+0x1a0>)
 8001f2c:	f002 fef4 	bl	8004d18 <HAL_I2C_Mem_Write>

    // Set gyroscope range to ±250°/s
    data_config = 0x00;
 8001f30:	2300      	movs	r3, #0
 8001f32:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG, 1, &data_config, 1, HAL_MAX_DELAY);
 8001f34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f38:	9302      	str	r3, [sp, #8]
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	9301      	str	r3, [sp, #4]
 8001f3e:	f107 030b 	add.w	r3, r7, #11
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	2301      	movs	r3, #1
 8001f46:	221b      	movs	r2, #27
 8001f48:	21d0      	movs	r1, #208	@ 0xd0
 8001f4a:	4845      	ldr	r0, [pc, #276]	@ (8002060 <MPU6050_Init+0x1a0>)
 8001f4c:	f002 fee4 	bl	8004d18 <HAL_I2C_Mem_Write>

    uint8_t config;
    // Set DLPF_CFG to 0x02 (21 Hz accelerometer, 20 Hz gyroscope bandwidth, 1 kHz sample rate)
    config = 0x00;
 8001f50:	2300      	movs	r3, #0
 8001f52:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, CONFIG, 1, &config, 1, HAL_MAX_DELAY);
 8001f54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f58:	9302      	str	r3, [sp, #8]
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	9301      	str	r3, [sp, #4]
 8001f5e:	f107 030a 	add.w	r3, r7, #10
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	2301      	movs	r3, #1
 8001f66:	221a      	movs	r2, #26
 8001f68:	21d0      	movs	r1, #208	@ 0xd0
 8001f6a:	483d      	ldr	r0, [pc, #244]	@ (8002060 <MPU6050_Init+0x1a0>)
 8001f6c:	f002 fed4 	bl	8004d18 <HAL_I2C_Mem_Write>

    config = 0x00;  // ACCEL_HPF = 0x01 (5 Hz cutoff frequency)
 8001f70:	2300      	movs	r3, #0
 8001f72:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG, 1, &config, 1, HAL_MAX_DELAY);
 8001f74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f78:	9302      	str	r3, [sp, #8]
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	9301      	str	r3, [sp, #4]
 8001f7e:	f107 030a 	add.w	r3, r7, #10
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	2301      	movs	r3, #1
 8001f86:	221c      	movs	r2, #28
 8001f88:	21d0      	movs	r1, #208	@ 0xd0
 8001f8a:	4835      	ldr	r0, [pc, #212]	@ (8002060 <MPU6050_Init+0x1a0>)
 8001f8c:	f002 fec4 	bl	8004d18 <HAL_I2C_Mem_Write>

    // Set sample rate to 100 Hz
    config = 0x00; // 1000 / (1 + 9) = 100 Hz
 8001f90:	2300      	movs	r3, #0
 8001f92:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPRT_DIV, 1, &config, 1, HAL_MAX_DELAY);
 8001f94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f98:	9302      	str	r3, [sp, #8]
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	9301      	str	r3, [sp, #4]
 8001f9e:	f107 030a 	add.w	r3, r7, #10
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	2219      	movs	r2, #25
 8001fa8:	21d0      	movs	r1, #208	@ 0xd0
 8001faa:	482d      	ldr	r0, [pc, #180]	@ (8002060 <MPU6050_Init+0x1a0>)
 8001fac:	f002 feb4 	bl	8004d18 <HAL_I2C_Mem_Write>



    uint8_t whoAmI = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x75, 1, &whoAmI, sizeof(whoAmI), HAL_MAX_DELAY);
 8001fb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fb8:	9302      	str	r3, [sp, #8]
 8001fba:	2301      	movs	r3, #1
 8001fbc:	9301      	str	r3, [sp, #4]
 8001fbe:	f107 0309 	add.w	r3, r7, #9
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	2275      	movs	r2, #117	@ 0x75
 8001fc8:	21d0      	movs	r1, #208	@ 0xd0
 8001fca:	4825      	ldr	r0, [pc, #148]	@ (8002060 <MPU6050_Init+0x1a0>)
 8001fcc:	f002 ff9e 	bl	8004f0c <HAL_I2C_Mem_Read>
    if (whoAmI != 0x68) {
 8001fd0:	7a7b      	ldrb	r3, [r7, #9]
 8001fd2:	2b68      	cmp	r3, #104	@ 0x68
 8001fd4:	d005      	beq.n	8001fe2 <MPU6050_Init+0x122>
        printf("MPU6050 not detected. WHO_AM_I = 0x%02X\r\n", whoAmI);
 8001fd6:	7a7b      	ldrb	r3, [r7, #9]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4824      	ldr	r0, [pc, #144]	@ (800206c <MPU6050_Init+0x1ac>)
 8001fdc:	f00a fd76 	bl	800cacc <iprintf>
 8001fe0:	e004      	b.n	8001fec <MPU6050_Init+0x12c>
    } else {
        printf("MPU6050 detected. WHO_AM_I = 0x%02X\r\n", whoAmI);
 8001fe2:	7a7b      	ldrb	r3, [r7, #9]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4822      	ldr	r0, [pc, #136]	@ (8002070 <MPU6050_Init+0x1b0>)
 8001fe8:	f00a fd70 	bl	800cacc <iprintf>
    }

    uint8_t fifoConfig, userCtrl, gConfig, sConfig;
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, FIFO_EN, 1, &fifoConfig, 1, HAL_MAX_DELAY);
 8001fec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ff0:	9302      	str	r3, [sp, #8]
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	9301      	str	r3, [sp, #4]
 8001ff6:	f107 0308 	add.w	r3, r7, #8
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	2223      	movs	r2, #35	@ 0x23
 8002000:	21d0      	movs	r1, #208	@ 0xd0
 8002002:	4817      	ldr	r0, [pc, #92]	@ (8002060 <MPU6050_Init+0x1a0>)
 8002004:	f002 ff82 	bl	8004f0c <HAL_I2C_Mem_Read>
//    printf("FIFO_EN: 0x%02X\r\n", fifoConfig);

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, USER_CTRL, 1, &userCtrl, 1, HAL_MAX_DELAY);
 8002008:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800200c:	9302      	str	r3, [sp, #8]
 800200e:	2301      	movs	r3, #1
 8002010:	9301      	str	r3, [sp, #4]
 8002012:	1dfb      	adds	r3, r7, #7
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	2301      	movs	r3, #1
 8002018:	226a      	movs	r2, #106	@ 0x6a
 800201a:	21d0      	movs	r1, #208	@ 0xd0
 800201c:	4810      	ldr	r0, [pc, #64]	@ (8002060 <MPU6050_Init+0x1a0>)
 800201e:	f002 ff75 	bl	8004f0c <HAL_I2C_Mem_Read>
//    printf("USER_CTRL: 0x%02X\r\n", userCtrl);

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG, 1, &gConfig, 1, HAL_MAX_DELAY);
 8002022:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002026:	9302      	str	r3, [sp, #8]
 8002028:	2301      	movs	r3, #1
 800202a:	9301      	str	r3, [sp, #4]
 800202c:	1dbb      	adds	r3, r7, #6
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	2301      	movs	r3, #1
 8002032:	221c      	movs	r2, #28
 8002034:	21d0      	movs	r1, #208	@ 0xd0
 8002036:	480a      	ldr	r0, [pc, #40]	@ (8002060 <MPU6050_Init+0x1a0>)
 8002038:	f002 ff68 	bl	8004f0c <HAL_I2C_Mem_Read>
//    printf("ACCEL CONFIG: 0x%02X\r\n", gConfig);

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_CONFIG, 1, &sConfig, 1, HAL_MAX_DELAY);
 800203c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002040:	9302      	str	r3, [sp, #8]
 8002042:	2301      	movs	r3, #1
 8002044:	9301      	str	r3, [sp, #4]
 8002046:	1d7b      	adds	r3, r7, #5
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	2301      	movs	r3, #1
 800204c:	221b      	movs	r2, #27
 800204e:	21d0      	movs	r1, #208	@ 0xd0
 8002050:	4803      	ldr	r0, [pc, #12]	@ (8002060 <MPU6050_Init+0x1a0>)
 8002052:	f002 ff5b 	bl	8004f0c <HAL_I2C_Mem_Read>
//    printf("GYRO CONFIG: 0x%02X\r\n", sConfig);
}
 8002056:	bf00      	nop
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	2000026c 	.word	0x2000026c
 8002064:	080100b4 	.word	0x080100b4
 8002068:	080100e8 	.word	0x080100e8
 800206c:	08010104 	.word	0x08010104
 8002070:	08010130 	.word	0x08010130

08002074 <MPU6050_ReadAll>:

void MPU6050_ReadAll(MPU6050_Data *dataToProcess) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b08e      	sub	sp, #56	@ 0x38
 8002078:	af04      	add	r7, sp, #16
 800207a:	6078      	str	r0, [r7, #4]

    int16_t accelX, accelY, accelZ;
    int16_t gyroX, gyroY, gyroZ;

    // Read 14 bytes starting from register 0x3B
    if (HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, buffer, 14, HAL_MAX_DELAY) == HAL_OK) {
 800207c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002080:	9302      	str	r3, [sp, #8]
 8002082:	230e      	movs	r3, #14
 8002084:	9301      	str	r3, [sp, #4]
 8002086:	f107 030c 	add.w	r3, r7, #12
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	2301      	movs	r3, #1
 800208e:	223b      	movs	r2, #59	@ 0x3b
 8002090:	21d0      	movs	r1, #208	@ 0xd0
 8002092:	4859      	ldr	r0, [pc, #356]	@ (80021f8 <MPU6050_ReadAll+0x184>)
 8002094:	f002 ff3a 	bl	8004f0c <HAL_I2C_Mem_Read>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d159      	bne.n	8002152 <MPU6050_ReadAll+0xde>
        accelX = (int16_t)((buffer[0] << 8) | buffer[1]) - dataToProcess->accelOffsets[0];
 800209e:	7b3b      	ldrb	r3, [r7, #12]
 80020a0:	021b      	lsls	r3, r3, #8
 80020a2:	b21a      	sxth	r2, r3
 80020a4:	7b7b      	ldrb	r3, [r7, #13]
 80020a6:	b21b      	sxth	r3, r3
 80020a8:	4313      	orrs	r3, r2
 80020aa:	b21b      	sxth	r3, r3
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
        accelY = (int16_t)((buffer[2] << 8) | buffer[3]) - dataToProcess->accelOffsets[1];
 80020bc:	7bbb      	ldrb	r3, [r7, #14]
 80020be:	021b      	lsls	r3, r3, #8
 80020c0:	b21a      	sxth	r2, r3
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
 80020c4:	b21b      	sxth	r3, r3
 80020c6:	4313      	orrs	r3, r2
 80020c8:	b21b      	sxth	r3, r3
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
        accelZ = (int16_t)((buffer[4] << 8) | buffer[5]) - dataToProcess->accelOffsets[2];
 80020da:	7c3b      	ldrb	r3, [r7, #16]
 80020dc:	021b      	lsls	r3, r3, #8
 80020de:	b21a      	sxth	r2, r3
 80020e0:	7c7b      	ldrb	r3, [r7, #17]
 80020e2:	b21b      	sxth	r3, r3
 80020e4:	4313      	orrs	r3, r2
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	847b      	strh	r3, [r7, #34]	@ 0x22
        gyroX  = (int16_t)((buffer[8] << 8) | buffer[9]) - dataToProcess->gyroOffsets[0];
 80020f8:	7d3b      	ldrb	r3, [r7, #20]
 80020fa:	021b      	lsls	r3, r3, #8
 80020fc:	b21a      	sxth	r2, r3
 80020fe:	7d7b      	ldrb	r3, [r7, #21]
 8002100:	b21b      	sxth	r3, r3
 8002102:	4313      	orrs	r3, r2
 8002104:	b21b      	sxth	r3, r3
 8002106:	b29a      	uxth	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800210e:	b29b      	uxth	r3, r3
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	b29b      	uxth	r3, r3
 8002114:	843b      	strh	r3, [r7, #32]
        gyroY  = (int16_t)((buffer[10] << 8) | buffer[11]) - dataToProcess->gyroOffsets[1];
 8002116:	7dbb      	ldrb	r3, [r7, #22]
 8002118:	021b      	lsls	r3, r3, #8
 800211a:	b21a      	sxth	r2, r3
 800211c:	7dfb      	ldrb	r3, [r7, #23]
 800211e:	b21b      	sxth	r3, r3
 8002120:	4313      	orrs	r3, r2
 8002122:	b21b      	sxth	r3, r3
 8002124:	b29a      	uxth	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800212c:	b29b      	uxth	r3, r3
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	b29b      	uxth	r3, r3
 8002132:	83fb      	strh	r3, [r7, #30]
        gyroZ  = (int16_t)((buffer[12] << 8) | buffer[13]) - dataToProcess->gyroOffsets[2];
 8002134:	7e3b      	ldrb	r3, [r7, #24]
 8002136:	021b      	lsls	r3, r3, #8
 8002138:	b21a      	sxth	r2, r3
 800213a:	7e7b      	ldrb	r3, [r7, #25]
 800213c:	b21b      	sxth	r3, r3
 800213e:	4313      	orrs	r3, r2
 8002140:	b21b      	sxth	r3, r3
 8002142:	b29a      	uxth	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 800214a:	b29b      	uxth	r3, r3
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	b29b      	uxth	r3, r3
 8002150:	83bb      	strh	r3, [r7, #28]
    } else {
    	//Error handle
    }

    dataToProcess->accelX = accelX / 16384.0f;
 8002152:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002156:	ee07 3a90 	vmov	s15, r3
 800215a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800215e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80021fc <MPU6050_ReadAll+0x188>
 8002162:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	edc3 7a00 	vstr	s15, [r3]
    dataToProcess->accelY = accelY / 16384.0f;
 800216c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002170:	ee07 3a90 	vmov	s15, r3
 8002174:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002178:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80021fc <MPU6050_ReadAll+0x188>
 800217c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	edc3 7a01 	vstr	s15, [r3, #4]
    dataToProcess->accelZ = accelZ / 16384.0f;
 8002186:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800218a:	ee07 3a90 	vmov	s15, r3
 800218e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002192:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 80021fc <MPU6050_ReadAll+0x188>
 8002196:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	edc3 7a02 	vstr	s15, [r3, #8]

    dataToProcess->gyroX = gyroX / 131.0f;
 80021a0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80021a4:	ee07 3a90 	vmov	s15, r3
 80021a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021ac:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8002200 <MPU6050_ReadAll+0x18c>
 80021b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	edc3 7a03 	vstr	s15, [r3, #12]
    dataToProcess->gyroY = gyroY / 131.0f;
 80021ba:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80021be:	ee07 3a90 	vmov	s15, r3
 80021c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021c6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8002200 <MPU6050_ReadAll+0x18c>
 80021ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	edc3 7a04 	vstr	s15, [r3, #16]
    dataToProcess->gyroZ = gyroZ / 131.0f;
 80021d4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80021d8:	ee07 3a90 	vmov	s15, r3
 80021dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021e0:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8002200 <MPU6050_ReadAll+0x18c>
 80021e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80021ee:	bf00      	nop
 80021f0:	3728      	adds	r7, #40	@ 0x28
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	2000026c 	.word	0x2000026c
 80021fc:	46800000 	.word	0x46800000
 8002200:	43030000 	.word	0x43030000

08002204 <MPU6050_CalibrateExternal>:
    		dataToProcess->gyroOffsets[2]);

    HAL_Delay(2000);
}

void MPU6050_CalibrateExternal(MPU6050_Data *dataToProcess) {
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
    // Calculate offsets
    MPU6050_CalculateOffsets(dataToProcess->accelOffsets, dataToProcess->gyroOffsets);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f103 0218 	add.w	r2, r3, #24
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	331e      	adds	r3, #30
 8002216:	4619      	mov	r1, r3
 8002218:	4610      	mov	r0, r2
 800221a:	f000 f829 	bl	8002270 <MPU6050_CalculateOffsets>

    // Optional: Print offsets for debugging
    printf("Accel Offsets: X=%d, Y=%d, Z=%d\r\n", dataToProcess->accelOffsets[0], dataToProcess->accelOffsets[1],
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002224:	4619      	mov	r1, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800222c:	461a      	mov	r2, r3
    		dataToProcess->accelOffsets[2]);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
    printf("Accel Offsets: X=%d, Y=%d, Z=%d\r\n", dataToProcess->accelOffsets[0], dataToProcess->accelOffsets[1],
 8002234:	480c      	ldr	r0, [pc, #48]	@ (8002268 <MPU6050_CalibrateExternal+0x64>)
 8002236:	f00a fc49 	bl	800cacc <iprintf>
    printf("Gyro Offsets: X=%d, Y=%d, Z=%d\r\n", dataToProcess->gyroOffsets[0], dataToProcess->gyroOffsets[1],
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002240:	4619      	mov	r1, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002248:	461a      	mov	r2, r3
    		dataToProcess->gyroOffsets[2]);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
    printf("Gyro Offsets: X=%d, Y=%d, Z=%d\r\n", dataToProcess->gyroOffsets[0], dataToProcess->gyroOffsets[1],
 8002250:	4806      	ldr	r0, [pc, #24]	@ (800226c <MPU6050_CalibrateExternal+0x68>)
 8002252:	f00a fc3b 	bl	800cacc <iprintf>

    HAL_Delay(2000);
 8002256:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800225a:	f001 fa3d 	bl	80036d8 <HAL_Delay>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	08010158 	.word	0x08010158
 800226c:	0801017c 	.word	0x0801017c

08002270 <MPU6050_CalculateOffsets>:

void MPU6050_CalculateOffsets(int16_t *accelOffsets, int16_t *gyroOffsets) {
 8002270:	b580      	push	{r7, lr}
 8002272:	b092      	sub	sp, #72	@ 0x48
 8002274:	af04      	add	r7, sp, #16
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
    int32_t accelX_sum = 0, accelY_sum = 0, accelZ_sum = 0;
 800227a:	2300      	movs	r3, #0
 800227c:	637b      	str	r3, [r7, #52]	@ 0x34
 800227e:	2300      	movs	r3, #0
 8002280:	633b      	str	r3, [r7, #48]	@ 0x30
 8002282:	2300      	movs	r3, #0
 8002284:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int32_t gyroX_sum = 0, gyroY_sum = 0, gyroZ_sum = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	62bb      	str	r3, [r7, #40]	@ 0x28
 800228a:	2300      	movs	r3, #0
 800228c:	627b      	str	r3, [r7, #36]	@ 0x24
 800228e:	2300      	movs	r3, #0
 8002290:	623b      	str	r3, [r7, #32]

    int n = 4000;
 8002292:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002296:	61bb      	str	r3, [r7, #24]

    uint8_t rawData[14];

    for (int i = 0; i < n; i++) {
 8002298:	2300      	movs	r3, #0
 800229a:	61fb      	str	r3, [r7, #28]
 800229c:	e056      	b.n	800234c <MPU6050_CalculateOffsets+0xdc>
        if (HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, rawData, 14, HAL_MAX_DELAY) == HAL_OK) {
 800229e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022a2:	9302      	str	r3, [sp, #8]
 80022a4:	230e      	movs	r3, #14
 80022a6:	9301      	str	r3, [sp, #4]
 80022a8:	f107 0308 	add.w	r3, r7, #8
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	2301      	movs	r3, #1
 80022b0:	223b      	movs	r2, #59	@ 0x3b
 80022b2:	21d0      	movs	r1, #208	@ 0xd0
 80022b4:	4840      	ldr	r0, [pc, #256]	@ (80023b8 <MPU6050_CalculateOffsets+0x148>)
 80022b6:	f002 fe29 	bl	8004f0c <HAL_I2C_Mem_Read>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d142      	bne.n	8002346 <MPU6050_CalculateOffsets+0xd6>
        	accelX_sum += (int16_t)((rawData[0] << 8) | rawData[1]);
 80022c0:	7a3b      	ldrb	r3, [r7, #8]
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	b21a      	sxth	r2, r3
 80022c6:	7a7b      	ldrb	r3, [r7, #9]
 80022c8:	b21b      	sxth	r3, r3
 80022ca:	4313      	orrs	r3, r2
 80022cc:	b21b      	sxth	r3, r3
 80022ce:	461a      	mov	r2, r3
 80022d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022d2:	4413      	add	r3, r2
 80022d4:	637b      	str	r3, [r7, #52]	@ 0x34
        	accelY_sum += (int16_t)((rawData[2] << 8) | rawData[3]);
 80022d6:	7abb      	ldrb	r3, [r7, #10]
 80022d8:	021b      	lsls	r3, r3, #8
 80022da:	b21a      	sxth	r2, r3
 80022dc:	7afb      	ldrb	r3, [r7, #11]
 80022de:	b21b      	sxth	r3, r3
 80022e0:	4313      	orrs	r3, r2
 80022e2:	b21b      	sxth	r3, r3
 80022e4:	461a      	mov	r2, r3
 80022e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e8:	4413      	add	r3, r2
 80022ea:	633b      	str	r3, [r7, #48]	@ 0x30
        	accelZ_sum += (int16_t)((rawData[4] << 8) | rawData[5]) - 16384;
 80022ec:	7b3b      	ldrb	r3, [r7, #12]
 80022ee:	021b      	lsls	r3, r3, #8
 80022f0:	b21a      	sxth	r2, r3
 80022f2:	7b7b      	ldrb	r3, [r7, #13]
 80022f4:	b21b      	sxth	r3, r3
 80022f6:	4313      	orrs	r3, r2
 80022f8:	b21b      	sxth	r3, r3
 80022fa:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80022fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002300:	4413      	add	r3, r2
 8002302:	62fb      	str	r3, [r7, #44]	@ 0x2c
        	gyroX_sum  += (int16_t)((rawData[8] << 8) | rawData[9]);
 8002304:	7c3b      	ldrb	r3, [r7, #16]
 8002306:	021b      	lsls	r3, r3, #8
 8002308:	b21a      	sxth	r2, r3
 800230a:	7c7b      	ldrb	r3, [r7, #17]
 800230c:	b21b      	sxth	r3, r3
 800230e:	4313      	orrs	r3, r2
 8002310:	b21b      	sxth	r3, r3
 8002312:	461a      	mov	r2, r3
 8002314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002316:	4413      	add	r3, r2
 8002318:	62bb      	str	r3, [r7, #40]	@ 0x28
        	gyroY_sum  += (int16_t)((rawData[10] << 8) | rawData[11]);
 800231a:	7cbb      	ldrb	r3, [r7, #18]
 800231c:	021b      	lsls	r3, r3, #8
 800231e:	b21a      	sxth	r2, r3
 8002320:	7cfb      	ldrb	r3, [r7, #19]
 8002322:	b21b      	sxth	r3, r3
 8002324:	4313      	orrs	r3, r2
 8002326:	b21b      	sxth	r3, r3
 8002328:	461a      	mov	r2, r3
 800232a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232c:	4413      	add	r3, r2
 800232e:	627b      	str	r3, [r7, #36]	@ 0x24
        	gyroZ_sum  += (int16_t)((rawData[12] << 8) | rawData[13]);
 8002330:	7d3b      	ldrb	r3, [r7, #20]
 8002332:	021b      	lsls	r3, r3, #8
 8002334:	b21a      	sxth	r2, r3
 8002336:	7d7b      	ldrb	r3, [r7, #21]
 8002338:	b21b      	sxth	r3, r3
 800233a:	4313      	orrs	r3, r2
 800233c:	b21b      	sxth	r3, r3
 800233e:	461a      	mov	r2, r3
 8002340:	6a3b      	ldr	r3, [r7, #32]
 8002342:	4413      	add	r3, r2
 8002344:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < n; i++) {
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	3301      	adds	r3, #1
 800234a:	61fb      	str	r3, [r7, #28]
 800234c:	69fa      	ldr	r2, [r7, #28]
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	429a      	cmp	r2, r3
 8002352:	dba4      	blt.n	800229e <MPU6050_CalculateOffsets+0x2e>
        	//Error handle
        }
    }

    // Calculate average offsets
    accelOffsets[0] = (accelX_sum / n);
 8002354:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	fb92 f3f3 	sdiv	r3, r2, r3
 800235c:	b21a      	sxth	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	801a      	strh	r2, [r3, #0]
    accelOffsets[1] = (accelY_sum / n);
 8002362:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	fb92 f2f3 	sdiv	r2, r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3302      	adds	r3, #2
 800236e:	b212      	sxth	r2, r2
 8002370:	801a      	strh	r2, [r3, #0]
    accelOffsets[2] = (accelZ_sum / n);
 8002372:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	fb92 f2f3 	sdiv	r2, r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3304      	adds	r3, #4
 800237e:	b212      	sxth	r2, r2
 8002380:	801a      	strh	r2, [r3, #0]

    gyroOffsets[0] = (gyroX_sum / n);
 8002382:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	fb92 f3f3 	sdiv	r3, r2, r3
 800238a:	b21a      	sxth	r2, r3
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	801a      	strh	r2, [r3, #0]
    gyroOffsets[1] = (gyroY_sum / n);
 8002390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	fb92 f2f3 	sdiv	r2, r2, r3
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	3302      	adds	r3, #2
 800239c:	b212      	sxth	r2, r2
 800239e:	801a      	strh	r2, [r3, #0]
    gyroOffsets[2] = (gyroZ_sum / n);
 80023a0:	6a3a      	ldr	r2, [r7, #32]
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	fb92 f2f3 	sdiv	r2, r2, r3
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	3304      	adds	r3, #4
 80023ac:	b212      	sxth	r2, r2
 80023ae:	801a      	strh	r2, [r3, #0]
}
 80023b0:	bf00      	nop
 80023b2:	3738      	adds	r7, #56	@ 0x38
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	2000026c 	.word	0x2000026c

080023bc <mpu6050_ReadData>:
extern osMessageQueueId_t MPU6050DataHandle;
extern osMessageQueueId_t KalmanAngleHandle;
extern osMutexId_t uartMutexHandle;
extern osSemaphoreId_t dmaTxCompleteSemaphoreHandle;

void mpu6050_ReadData(void *argument) {
 80023bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023c0:	b0ce      	sub	sp, #312	@ 0x138
 80023c2:	af0c      	add	r7, sp, #48	@ 0x30
 80023c4:	6178      	str	r0, [r7, #20]
	uint8_t transmitViaUART = 0;
 80023c6:	2300      	movs	r3, #0
 80023c8:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
    MPU6050_Data dataToProcess;
    char buffer[200];

	printf("OLED initialization...\r\n");
 80023cc:	4857      	ldr	r0, [pc, #348]	@ (800252c <mpu6050_ReadData+0x170>)
 80023ce:	f00a fbe5 	bl	800cb9c <puts>
    SSD1306_Init();
 80023d2:	f000 fab5 	bl	8002940 <SSD1306_Init>
	printf("OLED initialized\r\n");
 80023d6:	4856      	ldr	r0, [pc, #344]	@ (8002530 <mpu6050_ReadData+0x174>)
 80023d8:	f00a fbe0 	bl	800cb9c <puts>

	SSD1306_DrawString(14, 28, "MPU6050 loading...", 1);
 80023dc:	2301      	movs	r3, #1
 80023de:	4a55      	ldr	r2, [pc, #340]	@ (8002534 <mpu6050_ReadData+0x178>)
 80023e0:	211c      	movs	r1, #28
 80023e2:	200e      	movs	r0, #14
 80023e4:	f000 fc7e 	bl	8002ce4 <SSD1306_DrawString>
	SSD1306_UpdateScreen();
 80023e8:	f000 fb8a 	bl	8002b00 <SSD1306_UpdateScreen>

    MPU6050_Init();
 80023ec:	f7ff fd68 	bl	8001ec0 <MPU6050_Init>
    printf("MPU6050 initialized\r\n");
 80023f0:	4851      	ldr	r0, [pc, #324]	@ (8002538 <mpu6050_ReadData+0x17c>)
 80023f2:	f00a fbd3 	bl	800cb9c <puts>

    printf("MPU6050 calibrating...\r\n");
 80023f6:	4851      	ldr	r0, [pc, #324]	@ (800253c <mpu6050_ReadData+0x180>)
 80023f8:	f00a fbd0 	bl	800cb9c <puts>
    //MPU6050_CalibrateInternal(&dataToProcess);
    MPU6050_CalibrateExternal(&dataToProcess);
 80023fc:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff feff 	bl	8002204 <MPU6050_CalibrateExternal>
    printf("MPU6050 calibrated\r\n");
 8002406:	484e      	ldr	r0, [pc, #312]	@ (8002540 <mpu6050_ReadData+0x184>)
 8002408:	f00a fbc8 	bl	800cb9c <puts>

    SSD1306_Clear();
 800240c:	f000 fb38 	bl	8002a80 <SSD1306_Clear>

    while (1) {
        // Read sensor data
        MPU6050_ReadAll(&dataToProcess);
 8002410:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fe2d 	bl	8002074 <MPU6050_ReadAll>

        if (transmitViaUART) {
 800241a:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800241e:	2b00      	cmp	r3, #0
 8002420:	d071      	beq.n	8002506 <mpu6050_ReadData+0x14a>
			//Format sensor data
			snprintf(buffer, sizeof(buffer),
					 "Xa=%6.2f Xg=%6.2f Ya=%6.2f Yg=%6.2f Za=%6.2f Zg=%6.2f\r\n",
					 dataToProcess.accelX, dataToProcess.gyroX, dataToProcess.accelY,
 8002422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
			snprintf(buffer, sizeof(buffer),
 8002426:	4618      	mov	r0, r3
 8002428:	f7fe f8ae 	bl	8000588 <__aeabi_f2d>
 800242c:	4604      	mov	r4, r0
 800242e:	460d      	mov	r5, r1
					 dataToProcess.accelX, dataToProcess.gyroX, dataToProcess.accelY,
 8002430:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
			snprintf(buffer, sizeof(buffer),
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe f8a7 	bl	8000588 <__aeabi_f2d>
 800243a:	4680      	mov	r8, r0
 800243c:	4689      	mov	r9, r1
					 dataToProcess.accelX, dataToProcess.gyroX, dataToProcess.accelY,
 800243e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
			snprintf(buffer, sizeof(buffer),
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe f8a0 	bl	8000588 <__aeabi_f2d>
 8002448:	4682      	mov	sl, r0
 800244a:	468b      	mov	fp, r1
					 dataToProcess.gyroY, dataToProcess.accelZ, dataToProcess.gyroZ);
 800244c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
			snprintf(buffer, sizeof(buffer),
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe f899 	bl	8000588 <__aeabi_f2d>
 8002456:	e9c7 0102 	strd	r0, r1, [r7, #8]
					 dataToProcess.gyroY, dataToProcess.accelZ, dataToProcess.gyroZ);
 800245a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
			snprintf(buffer, sizeof(buffer),
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe f892 	bl	8000588 <__aeabi_f2d>
 8002464:	e9c7 0100 	strd	r0, r1, [r7]
					 dataToProcess.gyroY, dataToProcess.accelZ, dataToProcess.gyroZ);
 8002468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
			snprintf(buffer, sizeof(buffer),
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe f88b 	bl	8000588 <__aeabi_f2d>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	f107 0018 	add.w	r0, r7, #24
 800247a:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800247e:	ed97 7b00 	vldr	d7, [r7]
 8002482:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002486:	ed97 7b02 	vldr	d7, [r7, #8]
 800248a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800248e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002492:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002496:	e9cd 4500 	strd	r4, r5, [sp]
 800249a:	4a2a      	ldr	r2, [pc, #168]	@ (8002544 <mpu6050_ReadData+0x188>)
 800249c:	21c8      	movs	r1, #200	@ 0xc8
 800249e:	f00a fb85 	bl	800cbac <sniprintf>

			//Transmit data over UART
			if (osMutexAcquire(uartMutexHandle, 100) == osOK) {  // Use timeout to avoid deadlocks
 80024a2:	4b29      	ldr	r3, [pc, #164]	@ (8002548 <mpu6050_ReadData+0x18c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2164      	movs	r1, #100	@ 0x64
 80024a8:	4618      	mov	r0, r3
 80024aa:	f006 f962 	bl	8008772 <osMutexAcquire>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d125      	bne.n	8002500 <mpu6050_ReadData+0x144>
				if (HAL_UART_Transmit_DMA(&huart2, (uint8_t *)buffer, strlen(buffer)) == HAL_OK) {
 80024b4:	f107 0318 	add.w	r3, r7, #24
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fd fef9 	bl	80002b0 <strlen>
 80024be:	4603      	mov	r3, r0
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	f107 0318 	add.w	r3, r7, #24
 80024c6:	4619      	mov	r1, r3
 80024c8:	4820      	ldr	r0, [pc, #128]	@ (800254c <mpu6050_ReadData+0x190>)
 80024ca:	f005 faf7 	bl	8007abc <HAL_UART_Transmit_DMA>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10c      	bne.n	80024ee <mpu6050_ReadData+0x132>
					if (osSemaphoreAcquire(dmaTxCompleteSemaphoreHandle, 100) != osOK) {
 80024d4:	4b1e      	ldr	r3, [pc, #120]	@ (8002550 <mpu6050_ReadData+0x194>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2164      	movs	r1, #100	@ 0x64
 80024da:	4618      	mov	r0, r3
 80024dc:	f006 fa5a 	bl	8008994 <osSemaphoreAcquire>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d006      	beq.n	80024f4 <mpu6050_ReadData+0x138>
						printf("UART DMA timeout\r\n");
 80024e6:	481b      	ldr	r0, [pc, #108]	@ (8002554 <mpu6050_ReadData+0x198>)
 80024e8:	f00a fb58 	bl	800cb9c <puts>
 80024ec:	e002      	b.n	80024f4 <mpu6050_ReadData+0x138>
					}
				} else {
					printf("UART DMA transmission failed\r\n");
 80024ee:	481a      	ldr	r0, [pc, #104]	@ (8002558 <mpu6050_ReadData+0x19c>)
 80024f0:	f00a fb54 	bl	800cb9c <puts>
				}
				osMutexRelease(uartMutexHandle);  // Release mutex
 80024f4:	4b14      	ldr	r3, [pc, #80]	@ (8002548 <mpu6050_ReadData+0x18c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f006 f985 	bl	8008808 <osMutexRelease>
 80024fe:	e002      	b.n	8002506 <mpu6050_ReadData+0x14a>
			} else {
				printf("UART mutex acquire failed\r\n");
 8002500:	4816      	ldr	r0, [pc, #88]	@ (800255c <mpu6050_ReadData+0x1a0>)
 8002502:	f00a fb4b 	bl	800cb9c <puts>
			}
        }

        // Send data to the queue
        if (osMessageQueuePut(MPU6050DataHandle, &dataToProcess, 0, 200) != osOK) {
 8002506:	4b16      	ldr	r3, [pc, #88]	@ (8002560 <mpu6050_ReadData+0x1a4>)
 8002508:	6818      	ldr	r0, [r3, #0]
 800250a:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 800250e:	23c8      	movs	r3, #200	@ 0xc8
 8002510:	2200      	movs	r2, #0
 8002512:	f006 fb05 	bl	8008b20 <osMessageQueuePut>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <mpu6050_ReadData+0x166>
            printf("Queue is full\r\n");
 800251c:	4811      	ldr	r0, [pc, #68]	@ (8002564 <mpu6050_ReadData+0x1a8>)
 800251e:	f00a fb3d 	bl	800cb9c <puts>
        }

        osDelay(10);  // Prevent rapid polling
 8002522:	200a      	movs	r0, #10
 8002524:	f006 f884 	bl	8008630 <osDelay>
        MPU6050_ReadAll(&dataToProcess);
 8002528:	e772      	b.n	8002410 <mpu6050_ReadData+0x54>
 800252a:	bf00      	nop
 800252c:	0801027c 	.word	0x0801027c
 8002530:	08010294 	.word	0x08010294
 8002534:	080102a8 	.word	0x080102a8
 8002538:	080102bc 	.word	0x080102bc
 800253c:	080102d4 	.word	0x080102d4
 8002540:	080102ec 	.word	0x080102ec
 8002544:	08010300 	.word	0x08010300
 8002548:	200005b4 	.word	0x200005b4
 800254c:	200004f8 	.word	0x200004f8
 8002550:	200005b8 	.word	0x200005b8
 8002554:	08010338 	.word	0x08010338
 8002558:	0801034c 	.word	0x0801034c
 800255c:	0801036c 	.word	0x0801036c
 8002560:	200005ac 	.word	0x200005ac
 8002564:	08010388 	.word	0x08010388

08002568 <DataProcessing>:
    }
}


void DataProcessing(void *argument) {
 8002568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800256c:	ed2d 8b02 	vpush	{d8}
 8002570:	b0ea      	sub	sp, #424	@ 0x1a8
 8002572:	af0c      	add	r7, sp, #48	@ 0x30
 8002574:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8002578:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800257c:	6018      	str	r0, [r3, #0]
    KalmanFilter resultKalmanFilterRoll;
    float kalmanRoll;
    float kalmanPitch;
    double dt;

    uint8_t transmitViaUART = 0;
 800257e:	2300      	movs	r3, #0
 8002580:	f887 3177 	strb.w	r3, [r7, #375]	@ 0x177
    uint8_t chooseFilter = 1;
 8002584:	2301      	movs	r3, #1
 8002586:	f887 3176 	strb.w	r3, [r7, #374]	@ 0x176

    char buffer[200];

    printf("DataProcessing task started\r\n");
 800258a:	48bd      	ldr	r0, [pc, #756]	@ (8002880 <DataProcessing+0x318>)
 800258c:	f00a fb06 	bl	800cb9c <puts>

    Kalman_Init(&resultKalmanFilterPitch, 0.006f, 0.003f, 0.000640f); // Initialize the Kalman filter with noise parameters
 8002590:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002594:	ed9f 1abb 	vldr	s2, [pc, #748]	@ 8002884 <DataProcessing+0x31c>
 8002598:	eddf 0abb 	vldr	s1, [pc, #748]	@ 8002888 <DataProcessing+0x320>
 800259c:	ed9f 0abb 	vldr	s0, [pc, #748]	@ 800288c <DataProcessing+0x324>
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fe fd51 	bl	8001048 <Kalman_Init>
    Kalman_Init(&resultKalmanFilterRoll, 0.006f, 0.003f, 0.000640f); // Initialize the Kalman filter with noise parameters
 80025a6:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 80025aa:	ed9f 1ab6 	vldr	s2, [pc, #728]	@ 8002884 <DataProcessing+0x31c>
 80025ae:	eddf 0ab6 	vldr	s1, [pc, #728]	@ 8002888 <DataProcessing+0x320>
 80025b2:	ed9f 0ab6 	vldr	s0, [pc, #728]	@ 800288c <DataProcessing+0x324>
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe fd46 	bl	8001048 <Kalman_Init>
    uint32_t prevTick = osKernelGetTickCount();  // Initialize previous tick
 80025bc:	f005 ff88 	bl	80084d0 <osKernelGetTickCount>
 80025c0:	4602      	mov	r2, r0
 80025c2:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80025c6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80025ca:	601a      	str	r2, [r3, #0]

    while (1) {

        // Get data from queue
        if (osMessageQueueGet(MPU6050DataHandle, &receivedData, NULL, 200) == osOK) {
 80025cc:	4bb0      	ldr	r3, [pc, #704]	@ (8002890 <DataProcessing+0x328>)
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80025d4:	23c8      	movs	r3, #200	@ 0xc8
 80025d6:	2200      	movs	r2, #0
 80025d8:	f006 fb02 	bl	8008be0 <osMessageQueueGet>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f4      	bne.n	80025cc <DataProcessing+0x64>
        	// Record the start time
            SSD1306_DrawString(34, 16, "Pitch", 1); // Label for pitch
 80025e2:	2301      	movs	r3, #1
 80025e4:	4aab      	ldr	r2, [pc, #684]	@ (8002894 <DataProcessing+0x32c>)
 80025e6:	2110      	movs	r1, #16
 80025e8:	2022      	movs	r0, #34	@ 0x22
 80025ea:	f000 fb7b 	bl	8002ce4 <SSD1306_DrawString>
            SSD1306_DrawString(74, 16, "Roll", 1); // Label for pitch
 80025ee:	2301      	movs	r3, #1
 80025f0:	4aa9      	ldr	r2, [pc, #676]	@ (8002898 <DataProcessing+0x330>)
 80025f2:	2110      	movs	r1, #16
 80025f4:	204a      	movs	r0, #74	@ 0x4a
 80025f6:	f000 fb75 	bl	8002ce4 <SSD1306_DrawString>

            //resultsCompFilter = complementary_filter(&resultsPRY, &receivedData, &prevTick);
            //resultsPRY = computeAnglesAcc(&receivedData);
            resultsPRY = computeAngles(&receivedData, &prevTick);
 80025fa:	f107 021c 	add.w	r2, r7, #28
 80025fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002602:	4611      	mov	r1, r2
 8002604:	4618      	mov	r0, r3
 8002606:	f7fe fe53 	bl	80012b0 <computeAngles>
 800260a:	f8c7 0170 	str.w	r0, [r7, #368]	@ 0x170
            // Clear regions where pitch and roll values are displayed
            SSD1306_ClearRegion(34, 28, 40, 8); // Clear the region for pitch value
 800260e:	2308      	movs	r3, #8
 8002610:	2228      	movs	r2, #40	@ 0x28
 8002612:	211c      	movs	r1, #28
 8002614:	2022      	movs	r0, #34	@ 0x22
 8002616:	f000 fa3f 	bl	8002a98 <SSD1306_ClearRegion>
            SSD1306_ClearRegion(74, 28, 40, 8); // Clear the region for roll value
 800261a:	2308      	movs	r3, #8
 800261c:	2228      	movs	r2, #40	@ 0x28
 800261e:	211c      	movs	r1, #28
 8002620:	204a      	movs	r0, #74	@ 0x4a
 8002622:	f000 fa39 	bl	8002a98 <SSD1306_ClearRegion>

            dt = computeDT(&prevTick);
 8002626:	f107 031c 	add.w	r3, r7, #28
 800262a:	4618      	mov	r0, r3
 800262c:	f7fe fca4 	bl	8000f78 <computeDT>
 8002630:	ed87 0b5a 	vstr	d0, [r7, #360]	@ 0x168
            kalmanPitch = Kalman_Update(&resultKalmanFilterPitch, resultsPRY->pitchAcc, receivedData.gyroX, (float)dt);
 8002634:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8002638:	ed93 8a00 	vldr	s16, [r3]
 800263c:	edd7 8a51 	vldr	s17, [r7, #324]	@ 0x144
 8002640:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 8002644:	f7fe fad0 	bl	8000be8 <__aeabi_d2f>
 8002648:	4602      	mov	r2, r0
 800264a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800264e:	ee01 2a10 	vmov	s2, r2
 8002652:	eef0 0a68 	vmov.f32	s1, s17
 8002656:	eeb0 0a48 	vmov.f32	s0, s16
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe fd29 	bl	80010b2 <Kalman_Update>
 8002660:	ed87 0a59 	vstr	s0, [r7, #356]	@ 0x164
            kalmanRoll = Kalman_Update(&resultKalmanFilterRoll, resultsPRY->rollAcc, receivedData.gyroY, (float)dt);
 8002664:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8002668:	ed93 8a01 	vldr	s16, [r3, #4]
 800266c:	edd7 8a52 	vldr	s17, [r7, #328]	@ 0x148
 8002670:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 8002674:	f7fe fab8 	bl	8000be8 <__aeabi_d2f>
 8002678:	4602      	mov	r2, r0
 800267a:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 800267e:	ee01 2a10 	vmov	s2, r2
 8002682:	eef0 0a68 	vmov.f32	s1, s17
 8002686:	eeb0 0a48 	vmov.f32	s0, s16
 800268a:	4618      	mov	r0, r3
 800268c:	f7fe fd11 	bl	80010b2 <Kalman_Update>
 8002690:	ed87 0a58 	vstr	s0, [r7, #352]	@ 0x160
             //SSD1306_DrawFloat(29, 28, resultsCompFilter->pitch, 1, 1);
            SSD1306_DrawFloat(34, 28, kalmanPitch, 1, 1);
 8002694:	2301      	movs	r3, #1
 8002696:	2201      	movs	r2, #1
 8002698:	ed97 0a59 	vldr	s0, [r7, #356]	@ 0x164
 800269c:	211c      	movs	r1, #28
 800269e:	2022      	movs	r0, #34	@ 0x22
 80026a0:	f000 fb46 	bl	8002d30 <SSD1306_DrawFloat>

            //SSD1306_DrawFloat(69, 28, resultsCompFilter->roll, 1, 1);
            SSD1306_DrawFloat(74, 28, kalmanRoll, 1, 1);
 80026a4:	2301      	movs	r3, #1
 80026a6:	2201      	movs	r2, #1
 80026a8:	ed97 0a58 	vldr	s0, [r7, #352]	@ 0x160
 80026ac:	211c      	movs	r1, #28
 80026ae:	204a      	movs	r0, #74	@ 0x4a
 80026b0:	f000 fb3e 	bl	8002d30 <SSD1306_DrawFloat>

            SSD1306_UpdateScreen();
 80026b4:	f000 fa24 	bl	8002b00 <SSD1306_UpdateScreen>

            //Format processed data for computeAngles()


            if (transmitViaUART) {
 80026b8:	f897 3177 	ldrb.w	r3, [r7, #375]	@ 0x177
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 80da 	beq.w	8002876 <DataProcessing+0x30e>
            	if (chooseFilter == 0) {
 80026c2:	f897 3176 	ldrb.w	r3, [r7, #374]	@ 0x176
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d13a      	bne.n	8002740 <DataProcessing+0x1d8>
					snprintf(buffer, sizeof(buffer), "Acc | Pitch=%6.2f Roll=%6.2f | Gyro | Pitch=%6.2f Roll=%6.2f"
							"Yaw=%6.2f\r\n", resultsPRY->pitchAcc, resultsPRY->rollAcc, resultsPRY->pitchGyro,
 80026ca:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80026ce:	681b      	ldr	r3, [r3, #0]
					snprintf(buffer, sizeof(buffer), "Acc | Pitch=%6.2f Roll=%6.2f | Gyro | Pitch=%6.2f Roll=%6.2f"
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fd ff59 	bl	8000588 <__aeabi_f2d>
 80026d6:	4604      	mov	r4, r0
 80026d8:	460d      	mov	r5, r1
							"Yaw=%6.2f\r\n", resultsPRY->pitchAcc, resultsPRY->rollAcc, resultsPRY->pitchGyro,
 80026da:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80026de:	685b      	ldr	r3, [r3, #4]
					snprintf(buffer, sizeof(buffer), "Acc | Pitch=%6.2f Roll=%6.2f | Gyro | Pitch=%6.2f Roll=%6.2f"
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fd ff51 	bl	8000588 <__aeabi_f2d>
 80026e6:	4680      	mov	r8, r0
 80026e8:	4689      	mov	r9, r1
							"Yaw=%6.2f\r\n", resultsPRY->pitchAcc, resultsPRY->rollAcc, resultsPRY->pitchGyro,
 80026ea:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80026ee:	689b      	ldr	r3, [r3, #8]
					snprintf(buffer, sizeof(buffer), "Acc | Pitch=%6.2f Roll=%6.2f | Gyro | Pitch=%6.2f Roll=%6.2f"
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fd ff49 	bl	8000588 <__aeabi_f2d>
 80026f6:	4682      	mov	sl, r0
 80026f8:	468b      	mov	fp, r1
							resultsPRY->rollGyro, resultsPRY->yawGyro);
 80026fa:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80026fe:	68db      	ldr	r3, [r3, #12]
					snprintf(buffer, sizeof(buffer), "Acc | Pitch=%6.2f Roll=%6.2f | Gyro | Pitch=%6.2f Roll=%6.2f"
 8002700:	4618      	mov	r0, r3
 8002702:	f7fd ff41 	bl	8000588 <__aeabi_f2d>
 8002706:	e9c7 0102 	strd	r0, r1, [r7, #8]
							resultsPRY->rollGyro, resultsPRY->yawGyro);
 800270a:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800270e:	691b      	ldr	r3, [r3, #16]
					snprintf(buffer, sizeof(buffer), "Acc | Pitch=%6.2f Roll=%6.2f | Gyro | Pitch=%6.2f Roll=%6.2f"
 8002710:	4618      	mov	r0, r3
 8002712:	f7fd ff39 	bl	8000588 <__aeabi_f2d>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	f107 0020 	add.w	r0, r7, #32
 800271e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002722:	ed97 7b02 	vldr	d7, [r7, #8]
 8002726:	ed8d 7b06 	vstr	d7, [sp, #24]
 800272a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800272e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002732:	e9cd 4500 	strd	r4, r5, [sp]
 8002736:	4a59      	ldr	r2, [pc, #356]	@ (800289c <DataProcessing+0x334>)
 8002738:	21c8      	movs	r1, #200	@ 0xc8
 800273a:	f00a fa37 	bl	800cbac <sniprintf>
 800273e:	e068      	b.n	8002812 <DataProcessing+0x2aa>
            	} else if (chooseFilter == 1) {
 8002740:	f897 3176 	ldrb.w	r3, [r7, #374]	@ 0x176
 8002744:	2b01      	cmp	r3, #1
 8002746:	d11a      	bne.n	800277e <DataProcessing+0x216>
					//Format processed data for filters
					snprintf(buffer, sizeof(buffer), "CompFilter | Pitch=%6.2f Roll=%6.2f\r\n",
							resultsCompFilter->pitch, resultsCompFilter->roll);
 8002748:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800274c:	685b      	ldr	r3, [r3, #4]
					snprintf(buffer, sizeof(buffer), "CompFilter | Pitch=%6.2f Roll=%6.2f\r\n",
 800274e:	4618      	mov	r0, r3
 8002750:	f7fd ff1a 	bl	8000588 <__aeabi_f2d>
 8002754:	4604      	mov	r4, r0
 8002756:	460d      	mov	r5, r1
							resultsCompFilter->pitch, resultsCompFilter->roll);
 8002758:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800275c:	689b      	ldr	r3, [r3, #8]
					snprintf(buffer, sizeof(buffer), "CompFilter | Pitch=%6.2f Roll=%6.2f\r\n",
 800275e:	4618      	mov	r0, r3
 8002760:	f7fd ff12 	bl	8000588 <__aeabi_f2d>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	f107 0020 	add.w	r0, r7, #32
 800276c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002770:	e9cd 4500 	strd	r4, r5, [sp]
 8002774:	4a4a      	ldr	r2, [pc, #296]	@ (80028a0 <DataProcessing+0x338>)
 8002776:	21c8      	movs	r1, #200	@ 0xc8
 8002778:	f00a fa18 	bl	800cbac <sniprintf>
 800277c:	e049      	b.n	8002812 <DataProcessing+0x2aa>
            	} else if (chooseFilter == 2) {
 800277e:	f897 3176 	ldrb.w	r3, [r7, #374]	@ 0x176
 8002782:	2b02      	cmp	r3, #2
 8002784:	d142      	bne.n	800280c <DataProcessing+0x2a4>
					//Format processed data for filters
					snprintf(buffer, sizeof(buffer), "%6.2f|%6.2f|%6.2f|%6.2f|%6.2f|%6.2f\r\n",
 8002786:	f8d7 0164 	ldr.w	r0, [r7, #356]	@ 0x164
 800278a:	f7fd fefd 	bl	8000588 <__aeabi_f2d>
 800278e:	4604      	mov	r4, r0
 8002790:	460d      	mov	r5, r1
 8002792:	f8d7 0160 	ldr.w	r0, [r7, #352]	@ 0x160
 8002796:	f7fd fef7 	bl	8000588 <__aeabi_f2d>
 800279a:	4680      	mov	r8, r0
 800279c:	4689      	mov	r9, r1
							kalmanPitch, kalmanRoll, resultsPRY->pitchAcc, resultsPRY->rollAcc,
 800279e:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80027a2:	681b      	ldr	r3, [r3, #0]
					snprintf(buffer, sizeof(buffer), "%6.2f|%6.2f|%6.2f|%6.2f|%6.2f|%6.2f\r\n",
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fd feef 	bl	8000588 <__aeabi_f2d>
 80027aa:	4682      	mov	sl, r0
 80027ac:	468b      	mov	fp, r1
							kalmanPitch, kalmanRoll, resultsPRY->pitchAcc, resultsPRY->rollAcc,
 80027ae:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80027b2:	685b      	ldr	r3, [r3, #4]
					snprintf(buffer, sizeof(buffer), "%6.2f|%6.2f|%6.2f|%6.2f|%6.2f|%6.2f\r\n",
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fd fee7 	bl	8000588 <__aeabi_f2d>
 80027ba:	e9c7 0102 	strd	r0, r1, [r7, #8]
							resultsPRY->pitchGyro, resultsPRY->rollGyro);
 80027be:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80027c2:	689b      	ldr	r3, [r3, #8]
					snprintf(buffer, sizeof(buffer), "%6.2f|%6.2f|%6.2f|%6.2f|%6.2f|%6.2f\r\n",
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fd fedf 	bl	8000588 <__aeabi_f2d>
 80027ca:	e9c7 0100 	strd	r0, r1, [r7]
							resultsPRY->pitchGyro, resultsPRY->rollGyro);
 80027ce:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80027d2:	68db      	ldr	r3, [r3, #12]
					snprintf(buffer, sizeof(buffer), "%6.2f|%6.2f|%6.2f|%6.2f|%6.2f|%6.2f\r\n",
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fd fed7 	bl	8000588 <__aeabi_f2d>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	f107 0020 	add.w	r0, r7, #32
 80027e2:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80027e6:	ed97 7b00 	vldr	d7, [r7]
 80027ea:	ed8d 7b08 	vstr	d7, [sp, #32]
 80027ee:	ed97 7b02 	vldr	d7, [r7, #8]
 80027f2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80027f6:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80027fa:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80027fe:	e9cd 4500 	strd	r4, r5, [sp]
 8002802:	4a28      	ldr	r2, [pc, #160]	@ (80028a4 <DataProcessing+0x33c>)
 8002804:	21c8      	movs	r1, #200	@ 0xc8
 8002806:	f00a f9d1 	bl	800cbac <sniprintf>
 800280a:	e002      	b.n	8002812 <DataProcessing+0x2aa>
            	} else {
            		printf("No filter chosen!");
 800280c:	4826      	ldr	r0, [pc, #152]	@ (80028a8 <DataProcessing+0x340>)
 800280e:	f00a f95d 	bl	800cacc <iprintf>
            	}
				//Transmit processed data over UART
				if (osMutexAcquire(uartMutexHandle, 100) == osOK) {  // Use timeout to avoid deadlocks
 8002812:	4b26      	ldr	r3, [pc, #152]	@ (80028ac <DataProcessing+0x344>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2164      	movs	r1, #100	@ 0x64
 8002818:	4618      	mov	r0, r3
 800281a:	f005 ffaa 	bl	8008772 <osMutexAcquire>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d125      	bne.n	8002870 <DataProcessing+0x308>
					if (HAL_UART_Transmit_DMA(&huart2, (uint8_t *)buffer, strlen(buffer)) == HAL_OK) {
 8002824:	f107 0320 	add.w	r3, r7, #32
 8002828:	4618      	mov	r0, r3
 800282a:	f7fd fd41 	bl	80002b0 <strlen>
 800282e:	4603      	mov	r3, r0
 8002830:	b29a      	uxth	r2, r3
 8002832:	f107 0320 	add.w	r3, r7, #32
 8002836:	4619      	mov	r1, r3
 8002838:	481d      	ldr	r0, [pc, #116]	@ (80028b0 <DataProcessing+0x348>)
 800283a:	f005 f93f 	bl	8007abc <HAL_UART_Transmit_DMA>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10c      	bne.n	800285e <DataProcessing+0x2f6>
						if (osSemaphoreAcquire(dmaTxCompleteSemaphoreHandle, 100) != osOK) {
 8002844:	4b1b      	ldr	r3, [pc, #108]	@ (80028b4 <DataProcessing+0x34c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2164      	movs	r1, #100	@ 0x64
 800284a:	4618      	mov	r0, r3
 800284c:	f006 f8a2 	bl	8008994 <osSemaphoreAcquire>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d006      	beq.n	8002864 <DataProcessing+0x2fc>
							printf("UART DMA timeout\r\n");
 8002856:	4818      	ldr	r0, [pc, #96]	@ (80028b8 <DataProcessing+0x350>)
 8002858:	f00a f9a0 	bl	800cb9c <puts>
 800285c:	e002      	b.n	8002864 <DataProcessing+0x2fc>
						}
					} else {
						printf("UART DMA transmission failed\r\n");
 800285e:	4817      	ldr	r0, [pc, #92]	@ (80028bc <DataProcessing+0x354>)
 8002860:	f00a f99c 	bl	800cb9c <puts>
					}
					osMutexRelease(uartMutexHandle);  // Release mutex
 8002864:	4b11      	ldr	r3, [pc, #68]	@ (80028ac <DataProcessing+0x344>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f005 ffcd 	bl	8008808 <osMutexRelease>
 800286e:	e002      	b.n	8002876 <DataProcessing+0x30e>
				} else {
					printf("UART mutex acquire failed\r\n");
 8002870:	4813      	ldr	r0, [pc, #76]	@ (80028c0 <DataProcessing+0x358>)
 8002872:	f00a f993 	bl	800cb9c <puts>
				}
            }
    		osDelay(5);  // Prevent rapid polling
 8002876:	2005      	movs	r0, #5
 8002878:	f005 feda 	bl	8008630 <osDelay>
        if (osMessageQueueGet(MPU6050DataHandle, &receivedData, NULL, 200) == osOK) {
 800287c:	e6a6      	b.n	80025cc <DataProcessing+0x64>
 800287e:	bf00      	nop
 8002880:	08010398 	.word	0x08010398
 8002884:	3a27c5ac 	.word	0x3a27c5ac
 8002888:	3b449ba6 	.word	0x3b449ba6
 800288c:	3bc49ba6 	.word	0x3bc49ba6
 8002890:	200005ac 	.word	0x200005ac
 8002894:	080103b8 	.word	0x080103b8
 8002898:	080103c0 	.word	0x080103c0
 800289c:	080103c8 	.word	0x080103c8
 80028a0:	08010410 	.word	0x08010410
 80028a4:	08010438 	.word	0x08010438
 80028a8:	08010460 	.word	0x08010460
 80028ac:	200005b4 	.word	0x200005b4
 80028b0:	200004f8 	.word	0x200004f8
 80028b4:	200005b8 	.word	0x200005b8
 80028b8:	08010338 	.word	0x08010338
 80028bc:	0801034c 	.word	0x0801034c
 80028c0:	0801036c 	.word	0x0801036c

080028c4 <motorRun>:
        	//printf("Queue is empty\r\n");
        }
    }
}

void motorRun(void *argument) {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
		// set_pwm_duty_cycle(phase, motor_speed);
		// delay_us(&htim4, 170); // 1 ms delay for ~1 kHz update rate
		// Calculate error

		// Check user button
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 80028cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80028d0:	4809      	ldr	r0, [pc, #36]	@ (80028f8 <motorRun+0x34>)
 80028d2:	f001 ffad 	bl	8004830 <HAL_GPIO_ReadPin>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d108      	bne.n	80028ee <motorRun+0x2a>
			// Increment target position by 1.57 rad (90 degrees)


			// Wait until button is released (debounce)
			while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET);
 80028dc:	bf00      	nop
 80028de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80028e2:	4805      	ldr	r0, [pc, #20]	@ (80028f8 <motorRun+0x34>)
 80028e4:	f001 ffa4 	bl	8004830 <HAL_GPIO_ReadPin>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0f7      	beq.n	80028de <motorRun+0x1a>
		}
		// Continue control loop
//		controlLoop(motorControlPID, 0);

		// Delay for loop timing
		osDelay(5);
 80028ee:	2005      	movs	r0, #5
 80028f0:	f005 fe9e 	bl	8008630 <osDelay>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 80028f4:	e7ea      	b.n	80028cc <motorRun+0x8>
 80028f6:	bf00      	nop
 80028f8:	40020800 	.word	0x40020800

080028fc <SSD1306_Write>:
    HAL_GPIO_WritePin(SSD1306_RESET_GPIO, SSD1306_RESET_PIN, GPIO_PIN_RESET);
    HAL_Delay(10);
    HAL_GPIO_WritePin(SSD1306_RESET_GPIO, SSD1306_RESET_PIN, GPIO_PIN_SET);
}

void SSD1306_Write(uint8_t data, uint8_t cmd) {
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	460a      	mov	r2, r1
 8002906:	71fb      	strb	r3, [r7, #7]
 8002908:	4613      	mov	r3, r2
 800290a:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(SSD1306_DC_GPIO, SSD1306_DC_PIN, cmd == SSD1306_DATA ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800290c:	79bb      	ldrb	r3, [r7, #6]
 800290e:	2b01      	cmp	r3, #1
 8002910:	bf0c      	ite	eq
 8002912:	2301      	moveq	r3, #1
 8002914:	2300      	movne	r3, #0
 8002916:	b2db      	uxtb	r3, r3
 8002918:	461a      	mov	r2, r3
 800291a:	2104      	movs	r1, #4
 800291c:	4806      	ldr	r0, [pc, #24]	@ (8002938 <SSD1306_Write+0x3c>)
 800291e:	f001 ff9f 	bl	8004860 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(SSD1306_SPI, &data, 1, HAL_MAX_DELAY);
 8002922:	1df9      	adds	r1, r7, #7
 8002924:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002928:	2201      	movs	r2, #1
 800292a:	4804      	ldr	r0, [pc, #16]	@ (800293c <SSD1306_Write+0x40>)
 800292c:	f003 ffd3 	bl	80068d6 <HAL_SPI_Transmit>
}
 8002930:	bf00      	nop
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40020400 	.word	0x40020400
 800293c:	20000380 	.word	0x20000380

08002940 <SSD1306_Init>:

void SSD1306_Init(void) {
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
	uint8_t init_cmd = 0xAA;
 8002946:	23aa      	movs	r3, #170	@ 0xaa
 8002948:	71fb      	strb	r3, [r7, #7]
	if (HAL_SPI_Transmit(SSD1306_SPI, &init_cmd, 1, HAL_MAX_DELAY) != HAL_OK) {
 800294a:	1df9      	adds	r1, r7, #7
 800294c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002950:	2201      	movs	r2, #1
 8002952:	4848      	ldr	r0, [pc, #288]	@ (8002a74 <SSD1306_Init+0x134>)
 8002954:	f003 ffbf 	bl	80068d6 <HAL_SPI_Transmit>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d002      	beq.n	8002964 <SSD1306_Init+0x24>
		printf("SPI transmission error\r\n");
 800295e:	4846      	ldr	r0, [pc, #280]	@ (8002a78 <SSD1306_Init+0x138>)
 8002960:	f00a f91c 	bl	800cb9c <puts>
	}

    // Reset the OLED (if the RESET pin is connected)
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // Replace GPIOB and PIN_2 with your RESET pin
 8002964:	2200      	movs	r2, #0
 8002966:	2102      	movs	r1, #2
 8002968:	4844      	ldr	r0, [pc, #272]	@ (8002a7c <SSD1306_Init+0x13c>)
 800296a:	f001 ff79 	bl	8004860 <HAL_GPIO_WritePin>
    HAL_Delay(10);                                        // Wait 10ms
 800296e:	200a      	movs	r0, #10
 8002970:	f000 feb2 	bl	80036d8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8002974:	2201      	movs	r2, #1
 8002976:	2102      	movs	r1, #2
 8002978:	4840      	ldr	r0, [pc, #256]	@ (8002a7c <SSD1306_Init+0x13c>)
 800297a:	f001 ff71 	bl	8004860 <HAL_GPIO_WritePin>

    // Initialization commands for SSD1306
    SSD1306_Write(0xAE, SSD1306_COMMAND); // Display OFF
 800297e:	2100      	movs	r1, #0
 8002980:	20ae      	movs	r0, #174	@ 0xae
 8002982:	f7ff ffbb 	bl	80028fc <SSD1306_Write>
    SSD1306_Write(0x20, SSD1306_COMMAND); // Set Memory Addressing Mode
 8002986:	2100      	movs	r1, #0
 8002988:	2020      	movs	r0, #32
 800298a:	f7ff ffb7 	bl	80028fc <SSD1306_Write>
    SSD1306_Write(0x00, SSD1306_COMMAND); // Horizontal Addressing Mode
 800298e:	2100      	movs	r1, #0
 8002990:	2000      	movs	r0, #0
 8002992:	f7ff ffb3 	bl	80028fc <SSD1306_Write>
    SSD1306_Write(0xB0, SSD1306_COMMAND); // Set Page Start Address
 8002996:	2100      	movs	r1, #0
 8002998:	20b0      	movs	r0, #176	@ 0xb0
 800299a:	f7ff ffaf 	bl	80028fc <SSD1306_Write>
    SSD1306_Write(0xC8, SSD1306_COMMAND); // COM Output Scan Direction
 800299e:	2100      	movs	r1, #0
 80029a0:	20c8      	movs	r0, #200	@ 0xc8
 80029a2:	f7ff ffab 	bl	80028fc <SSD1306_Write>
    SSD1306_Write(0x00, SSD1306_COMMAND); // Set Low Column Address
 80029a6:	2100      	movs	r1, #0
 80029a8:	2000      	movs	r0, #0
 80029aa:	f7ff ffa7 	bl	80028fc <SSD1306_Write>
    SSD1306_Write(0x10, SSD1306_COMMAND); // Set High Column Address
 80029ae:	2100      	movs	r1, #0
 80029b0:	2010      	movs	r0, #16
 80029b2:	f7ff ffa3 	bl	80028fc <SSD1306_Write>
    SSD1306_Write(0x40, SSD1306_COMMAND); // Set Start Line Address
 80029b6:	2100      	movs	r1, #0
 80029b8:	2040      	movs	r0, #64	@ 0x40
 80029ba:	f7ff ff9f 	bl	80028fc <SSD1306_Write>
    SSD1306_Write(0x81, SSD1306_COMMAND); // Set Contrast Control
 80029be:	2100      	movs	r1, #0
 80029c0:	2081      	movs	r0, #129	@ 0x81
 80029c2:	f7ff ff9b 	bl	80028fc <SSD1306_Write>
    SSD1306_Write(0xFF, SSD1306_COMMAND); // Max contrast
 80029c6:	2100      	movs	r1, #0
 80029c8:	20ff      	movs	r0, #255	@ 0xff
 80029ca:	f7ff ff97 	bl	80028fc <SSD1306_Write>
    SSD1306_Write(0xA1, SSD1306_COMMAND); // Set Segment Re-map
 80029ce:	2100      	movs	r1, #0
 80029d0:	20a1      	movs	r0, #161	@ 0xa1
 80029d2:	f7ff ff93 	bl	80028fc <SSD1306_Write>
    SSD1306_Write(0xA6, SSD1306_COMMAND); // Set Normal Display
 80029d6:	2100      	movs	r1, #0
 80029d8:	20a6      	movs	r0, #166	@ 0xa6
 80029da:	f7ff ff8f 	bl	80028fc <SSD1306_Write>
    SSD1306_Write(0xA8, SSD1306_COMMAND); // Set Multiplex Ratio
 80029de:	2100      	movs	r1, #0
 80029e0:	20a8      	movs	r0, #168	@ 0xa8
 80029e2:	f7ff ff8b 	bl	80028fc <SSD1306_Write>
    SSD1306_Write(0x3F, SSD1306_COMMAND); // 1/64 Duty
 80029e6:	2100      	movs	r1, #0
 80029e8:	203f      	movs	r0, #63	@ 0x3f
 80029ea:	f7ff ff87 	bl	80028fc <SSD1306_Write>
    SSD1306_Write(0xA4, SSD1306_COMMAND); // Disable Entire Display ON
 80029ee:	2100      	movs	r1, #0
 80029f0:	20a4      	movs	r0, #164	@ 0xa4
 80029f2:	f7ff ff83 	bl	80028fc <SSD1306_Write>
    SSD1306_Write(0xD3, SSD1306_COMMAND); // Set Display Offset
 80029f6:	2100      	movs	r1, #0
 80029f8:	20d3      	movs	r0, #211	@ 0xd3
 80029fa:	f7ff ff7f 	bl	80028fc <SSD1306_Write>
    SSD1306_Write(0x00, SSD1306_COMMAND); // No offset
 80029fe:	2100      	movs	r1, #0
 8002a00:	2000      	movs	r0, #0
 8002a02:	f7ff ff7b 	bl	80028fc <SSD1306_Write>
    SSD1306_Write(0xD5, SSD1306_COMMAND); // Set Display Clock Divide Ratio
 8002a06:	2100      	movs	r1, #0
 8002a08:	20d5      	movs	r0, #213	@ 0xd5
 8002a0a:	f7ff ff77 	bl	80028fc <SSD1306_Write>
    SSD1306_Write(0x80, SSD1306_COMMAND); // Default clock ratio
 8002a0e:	2100      	movs	r1, #0
 8002a10:	2080      	movs	r0, #128	@ 0x80
 8002a12:	f7ff ff73 	bl	80028fc <SSD1306_Write>
    SSD1306_Write(0xD9, SSD1306_COMMAND); // Set Pre-charge Period
 8002a16:	2100      	movs	r1, #0
 8002a18:	20d9      	movs	r0, #217	@ 0xd9
 8002a1a:	f7ff ff6f 	bl	80028fc <SSD1306_Write>
    SSD1306_Write(0xF1, SSD1306_COMMAND); // Default pre-charge
 8002a1e:	2100      	movs	r1, #0
 8002a20:	20f1      	movs	r0, #241	@ 0xf1
 8002a22:	f7ff ff6b 	bl	80028fc <SSD1306_Write>
    SSD1306_Write(0xDA, SSD1306_COMMAND); // Set COM Pins Hardware Configuration
 8002a26:	2100      	movs	r1, #0
 8002a28:	20da      	movs	r0, #218	@ 0xda
 8002a2a:	f7ff ff67 	bl	80028fc <SSD1306_Write>
    SSD1306_Write(0x12, SSD1306_COMMAND); // Alternative COM pins
 8002a2e:	2100      	movs	r1, #0
 8002a30:	2012      	movs	r0, #18
 8002a32:	f7ff ff63 	bl	80028fc <SSD1306_Write>
    SSD1306_Write(0xDB, SSD1306_COMMAND); // Set VCOMH Deselect Level
 8002a36:	2100      	movs	r1, #0
 8002a38:	20db      	movs	r0, #219	@ 0xdb
 8002a3a:	f7ff ff5f 	bl	80028fc <SSD1306_Write>
    SSD1306_Write(0x40, SSD1306_COMMAND); // Default VCOMH
 8002a3e:	2100      	movs	r1, #0
 8002a40:	2040      	movs	r0, #64	@ 0x40
 8002a42:	f7ff ff5b 	bl	80028fc <SSD1306_Write>
    SSD1306_Write(0x8D, SSD1306_COMMAND); // Enable charge pump
 8002a46:	2100      	movs	r1, #0
 8002a48:	208d      	movs	r0, #141	@ 0x8d
 8002a4a:	f7ff ff57 	bl	80028fc <SSD1306_Write>
    SSD1306_Write(0x14, SSD1306_COMMAND);
 8002a4e:	2100      	movs	r1, #0
 8002a50:	2014      	movs	r0, #20
 8002a52:	f7ff ff53 	bl	80028fc <SSD1306_Write>
    SSD1306_Write(0xAF, SSD1306_COMMAND); // Display ON
 8002a56:	2100      	movs	r1, #0
 8002a58:	20af      	movs	r0, #175	@ 0xaf
 8002a5a:	f7ff ff4f 	bl	80028fc <SSD1306_Write>

    SSD1306_Clear();
 8002a5e:	f000 f80f 	bl	8002a80 <SSD1306_Clear>
    SSD1306_UpdateScreen();
 8002a62:	f000 f84d 	bl	8002b00 <SSD1306_UpdateScreen>

    HAL_Delay(10);                                        // Wait 10ms
 8002a66:	200a      	movs	r0, #10
 8002a68:	f000 fe36 	bl	80036d8 <HAL_Delay>
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20000380 	.word	0x20000380
 8002a78:	08010474 	.word	0x08010474
 8002a7c:	40020400 	.word	0x40020400

08002a80 <SSD1306_Clear>:

void SSD1306_Clear(void) {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
    memset(SSD1306_Buffer, 0x00, sizeof(SSD1306_Buffer));
 8002a84:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a88:	2100      	movs	r1, #0
 8002a8a:	4802      	ldr	r0, [pc, #8]	@ (8002a94 <SSD1306_Clear+0x14>)
 8002a8c:	f00a f99a 	bl	800cdc4 <memset>
}
 8002a90:	bf00      	nop
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	200005bc 	.word	0x200005bc

08002a98 <SSD1306_ClearRegion>:

void SSD1306_ClearRegion(uint8_t x, uint8_t y, uint8_t width, uint8_t height) {
 8002a98:	b590      	push	{r4, r7, lr}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4604      	mov	r4, r0
 8002aa0:	4608      	mov	r0, r1
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4623      	mov	r3, r4
 8002aa8:	71fb      	strb	r3, [r7, #7]
 8002aaa:	4603      	mov	r3, r0
 8002aac:	71bb      	strb	r3, [r7, #6]
 8002aae:	460b      	mov	r3, r1
 8002ab0:	717b      	strb	r3, [r7, #5]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	713b      	strb	r3, [r7, #4]
    for (uint8_t i = 0; i < width; i++) {
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	73fb      	strb	r3, [r7, #15]
 8002aba:	e018      	b.n	8002aee <SSD1306_ClearRegion+0x56>
        for (uint8_t j = 0; j < height; j++) {
 8002abc:	2300      	movs	r3, #0
 8002abe:	73bb      	strb	r3, [r7, #14]
 8002ac0:	e00e      	b.n	8002ae0 <SSD1306_ClearRegion+0x48>
            SSD1306_DrawPixel(x + i, y + j, 0); // Draw black pixels
 8002ac2:	79fa      	ldrb	r2, [r7, #7]
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	b2d8      	uxtb	r0, r3
 8002aca:	79ba      	ldrb	r2, [r7, #6]
 8002acc:	7bbb      	ldrb	r3, [r7, #14]
 8002ace:	4413      	add	r3, r2
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	f000 f849 	bl	8002b6c <SSD1306_DrawPixel>
        for (uint8_t j = 0; j < height; j++) {
 8002ada:	7bbb      	ldrb	r3, [r7, #14]
 8002adc:	3301      	adds	r3, #1
 8002ade:	73bb      	strb	r3, [r7, #14]
 8002ae0:	7bba      	ldrb	r2, [r7, #14]
 8002ae2:	793b      	ldrb	r3, [r7, #4]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d3ec      	bcc.n	8002ac2 <SSD1306_ClearRegion+0x2a>
    for (uint8_t i = 0; i < width; i++) {
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
 8002aea:	3301      	adds	r3, #1
 8002aec:	73fb      	strb	r3, [r7, #15]
 8002aee:	7bfa      	ldrb	r2, [r7, #15]
 8002af0:	797b      	ldrb	r3, [r7, #5]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d3e2      	bcc.n	8002abc <SSD1306_ClearRegion+0x24>
        }
    }
}
 8002af6:	bf00      	nop
 8002af8:	bf00      	nop
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd90      	pop	{r4, r7, pc}

08002b00 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
    for (uint8_t page = 0; page < 8; page++) {
 8002b06:	2300      	movs	r3, #0
 8002b08:	71fb      	strb	r3, [r7, #7]
 8002b0a:	e020      	b.n	8002b4e <SSD1306_UpdateScreen+0x4e>
        SSD1306_Write(0xB0 + page, SSD1306_COMMAND);
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	3b50      	subs	r3, #80	@ 0x50
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2100      	movs	r1, #0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fef1 	bl	80028fc <SSD1306_Write>
        SSD1306_Write(0x00, SSD1306_COMMAND);
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	f7ff feed 	bl	80028fc <SSD1306_Write>
        SSD1306_Write(0x10, SSD1306_COMMAND);
 8002b22:	2100      	movs	r1, #0
 8002b24:	2010      	movs	r0, #16
 8002b26:	f7ff fee9 	bl	80028fc <SSD1306_Write>
        HAL_GPIO_WritePin(SSD1306_DC_GPIO, SSD1306_DC_PIN, GPIO_PIN_SET);
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	2104      	movs	r1, #4
 8002b2e:	480c      	ldr	r0, [pc, #48]	@ (8002b60 <SSD1306_UpdateScreen+0x60>)
 8002b30:	f001 fe96 	bl	8004860 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(SSD1306_SPI, &SSD1306_Buffer[page * SSD1306_WIDTH], SSD1306_WIDTH, HAL_MAX_DELAY);
 8002b34:	79fb      	ldrb	r3, [r7, #7]
 8002b36:	01db      	lsls	r3, r3, #7
 8002b38:	4a0a      	ldr	r2, [pc, #40]	@ (8002b64 <SSD1306_UpdateScreen+0x64>)
 8002b3a:	1899      	adds	r1, r3, r2
 8002b3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b40:	2280      	movs	r2, #128	@ 0x80
 8002b42:	4809      	ldr	r0, [pc, #36]	@ (8002b68 <SSD1306_UpdateScreen+0x68>)
 8002b44:	f003 fec7 	bl	80068d6 <HAL_SPI_Transmit>
    for (uint8_t page = 0; page < 8; page++) {
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	71fb      	strb	r3, [r7, #7]
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	2b07      	cmp	r3, #7
 8002b52:	d9db      	bls.n	8002b0c <SSD1306_UpdateScreen+0xc>
    }
}
 8002b54:	bf00      	nop
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40020400 	.word	0x40020400
 8002b64:	200005bc 	.word	0x200005bc
 8002b68:	20000380 	.word	0x20000380

08002b6c <SSD1306_DrawPixel>:
        }
    }
}


void SSD1306_DrawPixel(uint8_t x, uint8_t y, uint8_t color) {
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	71fb      	strb	r3, [r7, #7]
 8002b76:	460b      	mov	r3, r1
 8002b78:	71bb      	strb	r3, [r7, #6]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) return;
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	db3d      	blt.n	8002c02 <SSD1306_DrawPixel+0x96>
 8002b86:	79bb      	ldrb	r3, [r7, #6]
 8002b88:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b8a:	d83a      	bhi.n	8002c02 <SSD1306_DrawPixel+0x96>

    if (color) {
 8002b8c:	797b      	ldrb	r3, [r7, #5]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d01a      	beq.n	8002bc8 <SSD1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= (1 << (y % 8));
 8002b92:	79fa      	ldrb	r2, [r7, #7]
 8002b94:	79bb      	ldrb	r3, [r7, #6]
 8002b96:	08db      	lsrs	r3, r3, #3
 8002b98:	b2d8      	uxtb	r0, r3
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	01db      	lsls	r3, r3, #7
 8002b9e:	4413      	add	r3, r2
 8002ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8002c10 <SSD1306_DrawPixel+0xa4>)
 8002ba2:	5cd3      	ldrb	r3, [r2, r3]
 8002ba4:	b25a      	sxtb	r2, r3
 8002ba6:	79bb      	ldrb	r3, [r7, #6]
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	2101      	movs	r1, #1
 8002bae:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb2:	b25b      	sxtb	r3, r3
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	b259      	sxtb	r1, r3
 8002bb8:	79fa      	ldrb	r2, [r7, #7]
 8002bba:	4603      	mov	r3, r0
 8002bbc:	01db      	lsls	r3, r3, #7
 8002bbe:	4413      	add	r3, r2
 8002bc0:	b2c9      	uxtb	r1, r1
 8002bc2:	4a13      	ldr	r2, [pc, #76]	@ (8002c10 <SSD1306_DrawPixel+0xa4>)
 8002bc4:	54d1      	strb	r1, [r2, r3]
 8002bc6:	e01d      	b.n	8002c04 <SSD1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002bc8:	79fa      	ldrb	r2, [r7, #7]
 8002bca:	79bb      	ldrb	r3, [r7, #6]
 8002bcc:	08db      	lsrs	r3, r3, #3
 8002bce:	b2d8      	uxtb	r0, r3
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	01db      	lsls	r3, r3, #7
 8002bd4:	4413      	add	r3, r2
 8002bd6:	4a0e      	ldr	r2, [pc, #56]	@ (8002c10 <SSD1306_DrawPixel+0xa4>)
 8002bd8:	5cd3      	ldrb	r3, [r2, r3]
 8002bda:	b25a      	sxtb	r2, r3
 8002bdc:	79bb      	ldrb	r3, [r7, #6]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	2101      	movs	r1, #1
 8002be4:	fa01 f303 	lsl.w	r3, r1, r3
 8002be8:	b25b      	sxtb	r3, r3
 8002bea:	43db      	mvns	r3, r3
 8002bec:	b25b      	sxtb	r3, r3
 8002bee:	4013      	ands	r3, r2
 8002bf0:	b259      	sxtb	r1, r3
 8002bf2:	79fa      	ldrb	r2, [r7, #7]
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	01db      	lsls	r3, r3, #7
 8002bf8:	4413      	add	r3, r2
 8002bfa:	b2c9      	uxtb	r1, r1
 8002bfc:	4a04      	ldr	r2, [pc, #16]	@ (8002c10 <SSD1306_DrawPixel+0xa4>)
 8002bfe:	54d1      	strb	r1, [r2, r3]
 8002c00:	e000      	b.n	8002c04 <SSD1306_DrawPixel+0x98>
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) return;
 8002c02:	bf00      	nop
    }
}
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	200005bc 	.word	0x200005bc

08002c14 <SSD1306_DrawChar>:

void SSD1306_DrawChar(uint8_t x, uint8_t y, char c, uint8_t color) {
 8002c14:	b590      	push	{r4, r7, lr}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4604      	mov	r4, r0
 8002c1c:	4608      	mov	r0, r1
 8002c1e:	4611      	mov	r1, r2
 8002c20:	461a      	mov	r2, r3
 8002c22:	4623      	mov	r3, r4
 8002c24:	71fb      	strb	r3, [r7, #7]
 8002c26:	4603      	mov	r3, r0
 8002c28:	71bb      	strb	r3, [r7, #6]
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	717b      	strb	r3, [r7, #5]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	713b      	strb	r3, [r7, #4]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) return;
 8002c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	db4e      	blt.n	8002cd8 <SSD1306_DrawChar+0xc4>
 8002c3a:	79bb      	ldrb	r3, [r7, #6]
 8002c3c:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c3e:	d84b      	bhi.n	8002cd8 <SSD1306_DrawChar+0xc4>

    if (c < 32 || c > 126) c = '?'; // Replace unsupported characters with '?'
 8002c40:	797b      	ldrb	r3, [r7, #5]
 8002c42:	2b1f      	cmp	r3, #31
 8002c44:	d902      	bls.n	8002c4c <SSD1306_DrawChar+0x38>
 8002c46:	797b      	ldrb	r3, [r7, #5]
 8002c48:	2b7e      	cmp	r3, #126	@ 0x7e
 8002c4a:	d901      	bls.n	8002c50 <SSD1306_DrawChar+0x3c>
 8002c4c:	233f      	movs	r3, #63	@ 0x3f
 8002c4e:	717b      	strb	r3, [r7, #5]

    for (uint8_t i = 0; i < 5; i++) { // Each character is 5 pixels wide
 8002c50:	2300      	movs	r3, #0
 8002c52:	73fb      	strb	r3, [r7, #15]
 8002c54:	e03c      	b.n	8002cd0 <SSD1306_DrawChar+0xbc>
        uint8_t line = Font5x7[(c - 32) * 5 + i];
 8002c56:	797b      	ldrb	r3, [r7, #5]
 8002c58:	f1a3 0220 	sub.w	r2, r3, #32
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	441a      	add	r2, r3
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
 8002c64:	4413      	add	r3, r2
 8002c66:	4a1e      	ldr	r2, [pc, #120]	@ (8002ce0 <SSD1306_DrawChar+0xcc>)
 8002c68:	5cd3      	ldrb	r3, [r2, r3]
 8002c6a:	737b      	strb	r3, [r7, #13]
        for (uint8_t j = 0; j < 8; j++) { // Each character is 7 pixels tall
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	73bb      	strb	r3, [r7, #14]
 8002c70:	e028      	b.n	8002cc4 <SSD1306_DrawChar+0xb0>
            if (line & (1 << j)) {
 8002c72:	7b7a      	ldrb	r2, [r7, #13]
 8002c74:	7bbb      	ldrb	r3, [r7, #14]
 8002c76:	fa42 f303 	asr.w	r3, r2, r3
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00c      	beq.n	8002c9c <SSD1306_DrawChar+0x88>
                SSD1306_DrawPixel(x + i, y + j, color);
 8002c82:	79fa      	ldrb	r2, [r7, #7]
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
 8002c86:	4413      	add	r3, r2
 8002c88:	b2d8      	uxtb	r0, r3
 8002c8a:	79ba      	ldrb	r2, [r7, #6]
 8002c8c:	7bbb      	ldrb	r3, [r7, #14]
 8002c8e:	4413      	add	r3, r2
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	793a      	ldrb	r2, [r7, #4]
 8002c94:	4619      	mov	r1, r3
 8002c96:	f7ff ff69 	bl	8002b6c <SSD1306_DrawPixel>
 8002c9a:	e010      	b.n	8002cbe <SSD1306_DrawChar+0xaa>
            } else {
                SSD1306_DrawPixel(x + i, y + j, !color);
 8002c9c:	79fa      	ldrb	r2, [r7, #7]
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	b2d8      	uxtb	r0, r3
 8002ca4:	79ba      	ldrb	r2, [r7, #6]
 8002ca6:	7bbb      	ldrb	r3, [r7, #14]
 8002ca8:	4413      	add	r3, r2
 8002caa:	b2d9      	uxtb	r1, r3
 8002cac:	793b      	ldrb	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	bf0c      	ite	eq
 8002cb2:	2301      	moveq	r3, #1
 8002cb4:	2300      	movne	r3, #0
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	461a      	mov	r2, r3
 8002cba:	f7ff ff57 	bl	8002b6c <SSD1306_DrawPixel>
        for (uint8_t j = 0; j < 8; j++) { // Each character is 7 pixels tall
 8002cbe:	7bbb      	ldrb	r3, [r7, #14]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	73bb      	strb	r3, [r7, #14]
 8002cc4:	7bbb      	ldrb	r3, [r7, #14]
 8002cc6:	2b07      	cmp	r3, #7
 8002cc8:	d9d3      	bls.n	8002c72 <SSD1306_DrawChar+0x5e>
    for (uint8_t i = 0; i < 5; i++) { // Each character is 5 pixels wide
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d9bf      	bls.n	8002c56 <SSD1306_DrawChar+0x42>
 8002cd6:	e000      	b.n	8002cda <SSD1306_DrawChar+0xc6>
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) return;
 8002cd8:	bf00      	nop
            }
        }
    }
}
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd90      	pop	{r4, r7, pc}
 8002ce0:	0801056c 	.word	0x0801056c

08002ce4 <SSD1306_DrawString>:

void SSD1306_DrawString(uint8_t x, uint8_t y, const char* str, uint8_t color) {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	603a      	str	r2, [r7, #0]
 8002cec:	461a      	mov	r2, r3
 8002cee:	4603      	mov	r3, r0
 8002cf0:	71fb      	strb	r3, [r7, #7]
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	71bb      	strb	r3, [r7, #6]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	717b      	strb	r3, [r7, #5]
    while (*str) {
 8002cfa:	e00f      	b.n	8002d1c <SSD1306_DrawString+0x38>
        SSD1306_DrawChar(x, y, *str, color);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	781a      	ldrb	r2, [r3, #0]
 8002d00:	797b      	ldrb	r3, [r7, #5]
 8002d02:	79b9      	ldrb	r1, [r7, #6]
 8002d04:	79f8      	ldrb	r0, [r7, #7]
 8002d06:	f7ff ff85 	bl	8002c14 <SSD1306_DrawChar>
        x += 6; // Move to the next character (5 pixels + 1 space)
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
 8002d0c:	3306      	adds	r3, #6
 8002d0e:	71fb      	strb	r3, [r7, #7]
        str++;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	3301      	adds	r3, #1
 8002d14:	603b      	str	r3, [r7, #0]
        if (x + 5 >= SSD1306_WIDTH) break; // Stop if the string goes off-screen
 8002d16:	79fb      	ldrb	r3, [r7, #7]
 8002d18:	2b7a      	cmp	r3, #122	@ 0x7a
 8002d1a:	d804      	bhi.n	8002d26 <SSD1306_DrawString+0x42>
    while (*str) {
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1eb      	bne.n	8002cfc <SSD1306_DrawString+0x18>
    }
}
 8002d24:	e000      	b.n	8002d28 <SSD1306_DrawString+0x44>
        if (x + 5 >= SSD1306_WIDTH) break; // Stop if the string goes off-screen
 8002d26:	bf00      	nop
}
 8002d28:	bf00      	nop
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <SSD1306_DrawFloat>:
    char buffer[12]; // Buffer to hold the number as a string
    snprintf(buffer, sizeof(buffer), "%d", number); // Convert number to string
    SSD1306_DrawString(x, y, buffer, color);
}

void SSD1306_DrawFloat(uint8_t x, uint8_t y, float number, uint8_t decimal_places, uint8_t color) {
 8002d30:	b590      	push	{r4, r7, lr}
 8002d32:	b08b      	sub	sp, #44	@ 0x2c
 8002d34:	af02      	add	r7, sp, #8
 8002d36:	4604      	mov	r4, r0
 8002d38:	4608      	mov	r0, r1
 8002d3a:	ed87 0a00 	vstr	s0, [r7]
 8002d3e:	4611      	mov	r1, r2
 8002d40:	461a      	mov	r2, r3
 8002d42:	4623      	mov	r3, r4
 8002d44:	71fb      	strb	r3, [r7, #7]
 8002d46:	4603      	mov	r3, r0
 8002d48:	71bb      	strb	r3, [r7, #6]
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	717b      	strb	r3, [r7, #5]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	713b      	strb	r3, [r7, #4]
    char buffer[20]; // Buffer to hold the converted float as a string
    snprintf(buffer, sizeof(buffer), "%.*f", decimal_places, number); // Convert float to string
 8002d52:	797c      	ldrb	r4, [r7, #5]
 8002d54:	6838      	ldr	r0, [r7, #0]
 8002d56:	f7fd fc17 	bl	8000588 <__aeabi_f2d>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	f107 000c 	add.w	r0, r7, #12
 8002d62:	e9cd 2300 	strd	r2, r3, [sp]
 8002d66:	4623      	mov	r3, r4
 8002d68:	4a07      	ldr	r2, [pc, #28]	@ (8002d88 <SSD1306_DrawFloat+0x58>)
 8002d6a:	2114      	movs	r1, #20
 8002d6c:	f009 ff1e 	bl	800cbac <sniprintf>
    SSD1306_DrawString(x, y, buffer, color); // Use the existing string drawing function
 8002d70:	793b      	ldrb	r3, [r7, #4]
 8002d72:	f107 020c 	add.w	r2, r7, #12
 8002d76:	79b9      	ldrb	r1, [r7, #6]
 8002d78:	79f8      	ldrb	r0, [r7, #7]
 8002d7a:	f7ff ffb3 	bl	8002ce4 <SSD1306_DrawString>
}
 8002d7e:	bf00      	nop
 8002d80:	3724      	adds	r7, #36	@ 0x24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd90      	pop	{r4, r7, pc}
 8002d86:	bf00      	nop
 8002d88:	08010490 	.word	0x08010490

08002d8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	607b      	str	r3, [r7, #4]
 8002d96:	4b12      	ldr	r3, [pc, #72]	@ (8002de0 <HAL_MspInit+0x54>)
 8002d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9a:	4a11      	ldr	r2, [pc, #68]	@ (8002de0 <HAL_MspInit+0x54>)
 8002d9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002da0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002da2:	4b0f      	ldr	r3, [pc, #60]	@ (8002de0 <HAL_MspInit+0x54>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002daa:	607b      	str	r3, [r7, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	603b      	str	r3, [r7, #0]
 8002db2:	4b0b      	ldr	r3, [pc, #44]	@ (8002de0 <HAL_MspInit+0x54>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db6:	4a0a      	ldr	r2, [pc, #40]	@ (8002de0 <HAL_MspInit+0x54>)
 8002db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dbe:	4b08      	ldr	r3, [pc, #32]	@ (8002de0 <HAL_MspInit+0x54>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc6:	603b      	str	r3, [r7, #0]
 8002dc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002dca:	2200      	movs	r2, #0
 8002dcc:	210f      	movs	r1, #15
 8002dce:	f06f 0001 	mvn.w	r0, #1
 8002dd2:	f000 fff2 	bl	8003dba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800

08002de4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08a      	sub	sp, #40	@ 0x28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dec:	f107 0314 	add.w	r3, r7, #20
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	60da      	str	r2, [r3, #12]
 8002dfa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a17      	ldr	r2, [pc, #92]	@ (8002e60 <HAL_ADC_MspInit+0x7c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d127      	bne.n	8002e56 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	4b16      	ldr	r3, [pc, #88]	@ (8002e64 <HAL_ADC_MspInit+0x80>)
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e0e:	4a15      	ldr	r2, [pc, #84]	@ (8002e64 <HAL_ADC_MspInit+0x80>)
 8002e10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e14:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e16:	4b13      	ldr	r3, [pc, #76]	@ (8002e64 <HAL_ADC_MspInit+0x80>)
 8002e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	4b0f      	ldr	r3, [pc, #60]	@ (8002e64 <HAL_ADC_MspInit+0x80>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2a:	4a0e      	ldr	r2, [pc, #56]	@ (8002e64 <HAL_ADC_MspInit+0x80>)
 8002e2c:	f043 0304 	orr.w	r3, r3, #4
 8002e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e32:	4b0c      	ldr	r3, [pc, #48]	@ (8002e64 <HAL_ADC_MspInit+0x80>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e36:	f003 0304 	and.w	r3, r3, #4
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e42:	2303      	movs	r3, #3
 8002e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e4a:	f107 0314 	add.w	r3, r7, #20
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4805      	ldr	r0, [pc, #20]	@ (8002e68 <HAL_ADC_MspInit+0x84>)
 8002e52:	f001 fb59 	bl	8004508 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002e56:	bf00      	nop
 8002e58:	3728      	adds	r7, #40	@ 0x28
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40012000 	.word	0x40012000
 8002e64:	40023800 	.word	0x40023800
 8002e68:	40020800 	.word	0x40020800

08002e6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08a      	sub	sp, #40	@ 0x28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e74:	f107 0314 	add.w	r3, r7, #20
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	60da      	str	r2, [r3, #12]
 8002e82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a48      	ldr	r2, [pc, #288]	@ (8002fac <HAL_I2C_MspInit+0x140>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	f040 808a 	bne.w	8002fa4 <HAL_I2C_MspInit+0x138>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e90:	2300      	movs	r3, #0
 8002e92:	613b      	str	r3, [r7, #16]
 8002e94:	4b46      	ldr	r3, [pc, #280]	@ (8002fb0 <HAL_I2C_MspInit+0x144>)
 8002e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e98:	4a45      	ldr	r2, [pc, #276]	@ (8002fb0 <HAL_I2C_MspInit+0x144>)
 8002e9a:	f043 0302 	orr.w	r3, r3, #2
 8002e9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ea0:	4b43      	ldr	r3, [pc, #268]	@ (8002fb0 <HAL_I2C_MspInit+0x144>)
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002eac:	23c0      	movs	r3, #192	@ 0xc0
 8002eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002eb0:	2312      	movs	r3, #18
 8002eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ebc:	2304      	movs	r3, #4
 8002ebe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec0:	f107 0314 	add.w	r3, r7, #20
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	483b      	ldr	r0, [pc, #236]	@ (8002fb4 <HAL_I2C_MspInit+0x148>)
 8002ec8:	f001 fb1e 	bl	8004508 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	4b37      	ldr	r3, [pc, #220]	@ (8002fb0 <HAL_I2C_MspInit+0x144>)
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed4:	4a36      	ldr	r2, [pc, #216]	@ (8002fb0 <HAL_I2C_MspInit+0x144>)
 8002ed6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002eda:	6413      	str	r3, [r2, #64]	@ 0x40
 8002edc:	4b34      	ldr	r3, [pc, #208]	@ (8002fb0 <HAL_I2C_MspInit+0x144>)
 8002ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8002ee8:	4b33      	ldr	r3, [pc, #204]	@ (8002fb8 <HAL_I2C_MspInit+0x14c>)
 8002eea:	4a34      	ldr	r2, [pc, #208]	@ (8002fbc <HAL_I2C_MspInit+0x150>)
 8002eec:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8002eee:	4b32      	ldr	r3, [pc, #200]	@ (8002fb8 <HAL_I2C_MspInit+0x14c>)
 8002ef0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ef4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ef6:	4b30      	ldr	r3, [pc, #192]	@ (8002fb8 <HAL_I2C_MspInit+0x14c>)
 8002ef8:	2240      	movs	r2, #64	@ 0x40
 8002efa:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002efc:	4b2e      	ldr	r3, [pc, #184]	@ (8002fb8 <HAL_I2C_MspInit+0x14c>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f02:	4b2d      	ldr	r3, [pc, #180]	@ (8002fb8 <HAL_I2C_MspInit+0x14c>)
 8002f04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f08:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f0a:	4b2b      	ldr	r3, [pc, #172]	@ (8002fb8 <HAL_I2C_MspInit+0x14c>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f10:	4b29      	ldr	r3, [pc, #164]	@ (8002fb8 <HAL_I2C_MspInit+0x14c>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002f16:	4b28      	ldr	r3, [pc, #160]	@ (8002fb8 <HAL_I2C_MspInit+0x14c>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002f1c:	4b26      	ldr	r3, [pc, #152]	@ (8002fb8 <HAL_I2C_MspInit+0x14c>)
 8002f1e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002f22:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f24:	4b24      	ldr	r3, [pc, #144]	@ (8002fb8 <HAL_I2C_MspInit+0x14c>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002f2a:	4823      	ldr	r0, [pc, #140]	@ (8002fb8 <HAL_I2C_MspInit+0x14c>)
 8002f2c:	f000 ff7c 	bl	8003e28 <HAL_DMA_Init>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8002f36:	f7fe ffbd 	bl	8001eb4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a1e      	ldr	r2, [pc, #120]	@ (8002fb8 <HAL_I2C_MspInit+0x14c>)
 8002f3e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f40:	4a1d      	ldr	r2, [pc, #116]	@ (8002fb8 <HAL_I2C_MspInit+0x14c>)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002f46:	4b1e      	ldr	r3, [pc, #120]	@ (8002fc0 <HAL_I2C_MspInit+0x154>)
 8002f48:	4a1e      	ldr	r2, [pc, #120]	@ (8002fc4 <HAL_I2C_MspInit+0x158>)
 8002f4a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002f4c:	4b1c      	ldr	r3, [pc, #112]	@ (8002fc0 <HAL_I2C_MspInit+0x154>)
 8002f4e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f52:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f54:	4b1a      	ldr	r3, [pc, #104]	@ (8002fc0 <HAL_I2C_MspInit+0x154>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f5a:	4b19      	ldr	r3, [pc, #100]	@ (8002fc0 <HAL_I2C_MspInit+0x154>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f60:	4b17      	ldr	r3, [pc, #92]	@ (8002fc0 <HAL_I2C_MspInit+0x154>)
 8002f62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f66:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f68:	4b15      	ldr	r3, [pc, #84]	@ (8002fc0 <HAL_I2C_MspInit+0x154>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f6e:	4b14      	ldr	r3, [pc, #80]	@ (8002fc0 <HAL_I2C_MspInit+0x154>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002f74:	4b12      	ldr	r3, [pc, #72]	@ (8002fc0 <HAL_I2C_MspInit+0x154>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002f7a:	4b11      	ldr	r3, [pc, #68]	@ (8002fc0 <HAL_I2C_MspInit+0x154>)
 8002f7c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002f80:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f82:	4b0f      	ldr	r3, [pc, #60]	@ (8002fc0 <HAL_I2C_MspInit+0x154>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002f88:	480d      	ldr	r0, [pc, #52]	@ (8002fc0 <HAL_I2C_MspInit+0x154>)
 8002f8a:	f000 ff4d 	bl	8003e28 <HAL_DMA_Init>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 8002f94:	f7fe ff8e 	bl	8001eb4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a09      	ldr	r2, [pc, #36]	@ (8002fc0 <HAL_I2C_MspInit+0x154>)
 8002f9c:	639a      	str	r2, [r3, #56]	@ 0x38
 8002f9e:	4a08      	ldr	r2, [pc, #32]	@ (8002fc0 <HAL_I2C_MspInit+0x154>)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002fa4:	bf00      	nop
 8002fa6:	3728      	adds	r7, #40	@ 0x28
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40005400 	.word	0x40005400
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	40020400 	.word	0x40020400
 8002fb8:	200002c0 	.word	0x200002c0
 8002fbc:	400260b8 	.word	0x400260b8
 8002fc0:	20000320 	.word	0x20000320
 8002fc4:	40026010 	.word	0x40026010

08002fc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08a      	sub	sp, #40	@ 0x28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd0:	f107 0314 	add.w	r3, r7, #20
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	605a      	str	r2, [r3, #4]
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	60da      	str	r2, [r3, #12]
 8002fde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a19      	ldr	r2, [pc, #100]	@ (800304c <HAL_SPI_MspInit+0x84>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d12b      	bne.n	8003042 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	4b18      	ldr	r3, [pc, #96]	@ (8003050 <HAL_SPI_MspInit+0x88>)
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff2:	4a17      	ldr	r2, [pc, #92]	@ (8003050 <HAL_SPI_MspInit+0x88>)
 8002ff4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ff8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ffa:	4b15      	ldr	r3, [pc, #84]	@ (8003050 <HAL_SPI_MspInit+0x88>)
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ffe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003002:	613b      	str	r3, [r7, #16]
 8003004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003006:	2300      	movs	r3, #0
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	4b11      	ldr	r3, [pc, #68]	@ (8003050 <HAL_SPI_MspInit+0x88>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300e:	4a10      	ldr	r2, [pc, #64]	@ (8003050 <HAL_SPI_MspInit+0x88>)
 8003010:	f043 0301 	orr.w	r3, r3, #1
 8003014:	6313      	str	r3, [r2, #48]	@ 0x30
 8003016:	4b0e      	ldr	r3, [pc, #56]	@ (8003050 <HAL_SPI_MspInit+0x88>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003022:	23e0      	movs	r3, #224	@ 0xe0
 8003024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003026:	2302      	movs	r3, #2
 8003028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800302e:	2303      	movs	r3, #3
 8003030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003032:	2305      	movs	r3, #5
 8003034:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003036:	f107 0314 	add.w	r3, r7, #20
 800303a:	4619      	mov	r1, r3
 800303c:	4805      	ldr	r0, [pc, #20]	@ (8003054 <HAL_SPI_MspInit+0x8c>)
 800303e:	f001 fa63 	bl	8004508 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003042:	bf00      	nop
 8003044:	3728      	adds	r7, #40	@ 0x28
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40013000 	.word	0x40013000
 8003050:	40023800 	.word	0x40023800
 8003054:	40020000 	.word	0x40020000

08003058 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003058:	b480      	push	{r7}
 800305a:	b087      	sub	sp, #28
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a29      	ldr	r2, [pc, #164]	@ (800310c <HAL_TIM_Base_MspInit+0xb4>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d10e      	bne.n	8003088 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800306a:	2300      	movs	r3, #0
 800306c:	617b      	str	r3, [r7, #20]
 800306e:	4b28      	ldr	r3, [pc, #160]	@ (8003110 <HAL_TIM_Base_MspInit+0xb8>)
 8003070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003072:	4a27      	ldr	r2, [pc, #156]	@ (8003110 <HAL_TIM_Base_MspInit+0xb8>)
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	6453      	str	r3, [r2, #68]	@ 0x44
 800307a:	4b25      	ldr	r3, [pc, #148]	@ (8003110 <HAL_TIM_Base_MspInit+0xb8>)
 800307c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	617b      	str	r3, [r7, #20]
 8003084:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003086:	e03a      	b.n	80030fe <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003090:	d10e      	bne.n	80030b0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	4b1e      	ldr	r3, [pc, #120]	@ (8003110 <HAL_TIM_Base_MspInit+0xb8>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309a:	4a1d      	ldr	r2, [pc, #116]	@ (8003110 <HAL_TIM_Base_MspInit+0xb8>)
 800309c:	f043 0301 	orr.w	r3, r3, #1
 80030a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80030a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003110 <HAL_TIM_Base_MspInit+0xb8>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	693b      	ldr	r3, [r7, #16]
}
 80030ae:	e026      	b.n	80030fe <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a17      	ldr	r2, [pc, #92]	@ (8003114 <HAL_TIM_Base_MspInit+0xbc>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d10e      	bne.n	80030d8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
 80030be:	4b14      	ldr	r3, [pc, #80]	@ (8003110 <HAL_TIM_Base_MspInit+0xb8>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c2:	4a13      	ldr	r2, [pc, #76]	@ (8003110 <HAL_TIM_Base_MspInit+0xb8>)
 80030c4:	f043 0302 	orr.w	r3, r3, #2
 80030c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80030ca:	4b11      	ldr	r3, [pc, #68]	@ (8003110 <HAL_TIM_Base_MspInit+0xb8>)
 80030cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	68fb      	ldr	r3, [r7, #12]
}
 80030d6:	e012      	b.n	80030fe <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM8)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a0e      	ldr	r2, [pc, #56]	@ (8003118 <HAL_TIM_Base_MspInit+0xc0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d10d      	bne.n	80030fe <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003110 <HAL_TIM_Base_MspInit+0xb8>)
 80030e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ea:	4a09      	ldr	r2, [pc, #36]	@ (8003110 <HAL_TIM_Base_MspInit+0xb8>)
 80030ec:	f043 0302 	orr.w	r3, r3, #2
 80030f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80030f2:	4b07      	ldr	r3, [pc, #28]	@ (8003110 <HAL_TIM_Base_MspInit+0xb8>)
 80030f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	60bb      	str	r3, [r7, #8]
 80030fc:	68bb      	ldr	r3, [r7, #8]
}
 80030fe:	bf00      	nop
 8003100:	371c      	adds	r7, #28
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40010000 	.word	0x40010000
 8003110:	40023800 	.word	0x40023800
 8003114:	40000400 	.word	0x40000400
 8003118:	40010400 	.word	0x40010400

0800311c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08c      	sub	sp, #48	@ 0x30
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003124:	f107 031c 	add.w	r3, r7, #28
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	605a      	str	r2, [r3, #4]
 800312e:	609a      	str	r2, [r3, #8]
 8003130:	60da      	str	r2, [r3, #12]
 8003132:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a49      	ldr	r2, [pc, #292]	@ (8003260 <HAL_TIM_MspPostInit+0x144>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d11f      	bne.n	800317e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	61bb      	str	r3, [r7, #24]
 8003142:	4b48      	ldr	r3, [pc, #288]	@ (8003264 <HAL_TIM_MspPostInit+0x148>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003146:	4a47      	ldr	r2, [pc, #284]	@ (8003264 <HAL_TIM_MspPostInit+0x148>)
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	6313      	str	r3, [r2, #48]	@ 0x30
 800314e:	4b45      	ldr	r3, [pc, #276]	@ (8003264 <HAL_TIM_MspPostInit+0x148>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	61bb      	str	r3, [r7, #24]
 8003158:	69bb      	ldr	r3, [r7, #24]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800315a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800315e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003160:	2302      	movs	r3, #2
 8003162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003164:	2300      	movs	r3, #0
 8003166:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003168:	2301      	movs	r3, #1
 800316a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800316c:	2301      	movs	r3, #1
 800316e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003170:	f107 031c 	add.w	r3, r7, #28
 8003174:	4619      	mov	r1, r3
 8003176:	483c      	ldr	r0, [pc, #240]	@ (8003268 <HAL_TIM_MspPostInit+0x14c>)
 8003178:	f001 f9c6 	bl	8004508 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800317c:	e06b      	b.n	8003256 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM2)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003186:	d11e      	bne.n	80031c6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003188:	2300      	movs	r3, #0
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	4b35      	ldr	r3, [pc, #212]	@ (8003264 <HAL_TIM_MspPostInit+0x148>)
 800318e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003190:	4a34      	ldr	r2, [pc, #208]	@ (8003264 <HAL_TIM_MspPostInit+0x148>)
 8003192:	f043 0301 	orr.w	r3, r3, #1
 8003196:	6313      	str	r3, [r2, #48]	@ 0x30
 8003198:	4b32      	ldr	r3, [pc, #200]	@ (8003264 <HAL_TIM_MspPostInit+0x148>)
 800319a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80031a4:	2303      	movs	r3, #3
 80031a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a8:	2302      	movs	r3, #2
 80031aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80031b0:	2301      	movs	r3, #1
 80031b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80031b4:	2301      	movs	r3, #1
 80031b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b8:	f107 031c 	add.w	r3, r7, #28
 80031bc:	4619      	mov	r1, r3
 80031be:	482a      	ldr	r0, [pc, #168]	@ (8003268 <HAL_TIM_MspPostInit+0x14c>)
 80031c0:	f001 f9a2 	bl	8004508 <HAL_GPIO_Init>
}
 80031c4:	e047      	b.n	8003256 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a28      	ldr	r2, [pc, #160]	@ (800326c <HAL_TIM_MspPostInit+0x150>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d11e      	bne.n	800320e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031d0:	2300      	movs	r3, #0
 80031d2:	613b      	str	r3, [r7, #16]
 80031d4:	4b23      	ldr	r3, [pc, #140]	@ (8003264 <HAL_TIM_MspPostInit+0x148>)
 80031d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d8:	4a22      	ldr	r2, [pc, #136]	@ (8003264 <HAL_TIM_MspPostInit+0x148>)
 80031da:	f043 0302 	orr.w	r3, r3, #2
 80031de:	6313      	str	r3, [r2, #48]	@ 0x30
 80031e0:	4b20      	ldr	r3, [pc, #128]	@ (8003264 <HAL_TIM_MspPostInit+0x148>)
 80031e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80031ec:	2330      	movs	r3, #48	@ 0x30
 80031ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f0:	2302      	movs	r3, #2
 80031f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f4:	2300      	movs	r3, #0
 80031f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80031f8:	2301      	movs	r3, #1
 80031fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031fc:	2302      	movs	r3, #2
 80031fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003200:	f107 031c 	add.w	r3, r7, #28
 8003204:	4619      	mov	r1, r3
 8003206:	481a      	ldr	r0, [pc, #104]	@ (8003270 <HAL_TIM_MspPostInit+0x154>)
 8003208:	f001 f97e 	bl	8004508 <HAL_GPIO_Init>
}
 800320c:	e023      	b.n	8003256 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM8)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a18      	ldr	r2, [pc, #96]	@ (8003274 <HAL_TIM_MspPostInit+0x158>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d11e      	bne.n	8003256 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003218:	2300      	movs	r3, #0
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	4b11      	ldr	r3, [pc, #68]	@ (8003264 <HAL_TIM_MspPostInit+0x148>)
 800321e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003220:	4a10      	ldr	r2, [pc, #64]	@ (8003264 <HAL_TIM_MspPostInit+0x148>)
 8003222:	f043 0304 	orr.w	r3, r3, #4
 8003226:	6313      	str	r3, [r2, #48]	@ 0x30
 8003228:	4b0e      	ldr	r3, [pc, #56]	@ (8003264 <HAL_TIM_MspPostInit+0x148>)
 800322a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003234:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323a:	2302      	movs	r3, #2
 800323c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323e:	2300      	movs	r3, #0
 8003240:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003242:	2301      	movs	r3, #1
 8003244:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003246:	2303      	movs	r3, #3
 8003248:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800324a:	f107 031c 	add.w	r3, r7, #28
 800324e:	4619      	mov	r1, r3
 8003250:	4809      	ldr	r0, [pc, #36]	@ (8003278 <HAL_TIM_MspPostInit+0x15c>)
 8003252:	f001 f959 	bl	8004508 <HAL_GPIO_Init>
}
 8003256:	bf00      	nop
 8003258:	3730      	adds	r7, #48	@ 0x30
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40010000 	.word	0x40010000
 8003264:	40023800 	.word	0x40023800
 8003268:	40020000 	.word	0x40020000
 800326c:	40000400 	.word	0x40000400
 8003270:	40020400 	.word	0x40020400
 8003274:	40010400 	.word	0x40010400
 8003278:	40020800 	.word	0x40020800

0800327c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b08a      	sub	sp, #40	@ 0x28
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003284:	f107 0314 	add.w	r3, r7, #20
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	605a      	str	r2, [r3, #4]
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	60da      	str	r2, [r3, #12]
 8003292:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a30      	ldr	r2, [pc, #192]	@ (800335c <HAL_UART_MspInit+0xe0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d159      	bne.n	8003352 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	613b      	str	r3, [r7, #16]
 80032a2:	4b2f      	ldr	r3, [pc, #188]	@ (8003360 <HAL_UART_MspInit+0xe4>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a6:	4a2e      	ldr	r2, [pc, #184]	@ (8003360 <HAL_UART_MspInit+0xe4>)
 80032a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80032ae:	4b2c      	ldr	r3, [pc, #176]	@ (8003360 <HAL_UART_MspInit+0xe4>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b6:	613b      	str	r3, [r7, #16]
 80032b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	4b28      	ldr	r3, [pc, #160]	@ (8003360 <HAL_UART_MspInit+0xe4>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c2:	4a27      	ldr	r2, [pc, #156]	@ (8003360 <HAL_UART_MspInit+0xe4>)
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ca:	4b25      	ldr	r3, [pc, #148]	@ (8003360 <HAL_UART_MspInit+0xe4>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80032d6:	230c      	movs	r3, #12
 80032d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032da:	2302      	movs	r3, #2
 80032dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e2:	2303      	movs	r3, #3
 80032e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032e6:	2307      	movs	r3, #7
 80032e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ea:	f107 0314 	add.w	r3, r7, #20
 80032ee:	4619      	mov	r1, r3
 80032f0:	481c      	ldr	r0, [pc, #112]	@ (8003364 <HAL_UART_MspInit+0xe8>)
 80032f2:	f001 f909 	bl	8004508 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80032f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003368 <HAL_UART_MspInit+0xec>)
 80032f8:	4a1c      	ldr	r2, [pc, #112]	@ (800336c <HAL_UART_MspInit+0xf0>)
 80032fa:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80032fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003368 <HAL_UART_MspInit+0xec>)
 80032fe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003302:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003304:	4b18      	ldr	r3, [pc, #96]	@ (8003368 <HAL_UART_MspInit+0xec>)
 8003306:	2240      	movs	r2, #64	@ 0x40
 8003308:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800330a:	4b17      	ldr	r3, [pc, #92]	@ (8003368 <HAL_UART_MspInit+0xec>)
 800330c:	2200      	movs	r2, #0
 800330e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003310:	4b15      	ldr	r3, [pc, #84]	@ (8003368 <HAL_UART_MspInit+0xec>)
 8003312:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003316:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003318:	4b13      	ldr	r3, [pc, #76]	@ (8003368 <HAL_UART_MspInit+0xec>)
 800331a:	2200      	movs	r2, #0
 800331c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800331e:	4b12      	ldr	r3, [pc, #72]	@ (8003368 <HAL_UART_MspInit+0xec>)
 8003320:	2200      	movs	r2, #0
 8003322:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003324:	4b10      	ldr	r3, [pc, #64]	@ (8003368 <HAL_UART_MspInit+0xec>)
 8003326:	2200      	movs	r2, #0
 8003328:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800332a:	4b0f      	ldr	r3, [pc, #60]	@ (8003368 <HAL_UART_MspInit+0xec>)
 800332c:	2200      	movs	r2, #0
 800332e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003330:	4b0d      	ldr	r3, [pc, #52]	@ (8003368 <HAL_UART_MspInit+0xec>)
 8003332:	2200      	movs	r2, #0
 8003334:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003336:	480c      	ldr	r0, [pc, #48]	@ (8003368 <HAL_UART_MspInit+0xec>)
 8003338:	f000 fd76 	bl	8003e28 <HAL_DMA_Init>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8003342:	f7fe fdb7 	bl	8001eb4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a07      	ldr	r2, [pc, #28]	@ (8003368 <HAL_UART_MspInit+0xec>)
 800334a:	639a      	str	r2, [r3, #56]	@ 0x38
 800334c:	4a06      	ldr	r2, [pc, #24]	@ (8003368 <HAL_UART_MspInit+0xec>)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8003352:	bf00      	nop
 8003354:	3728      	adds	r7, #40	@ 0x28
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	40004400 	.word	0x40004400
 8003360:	40023800 	.word	0x40023800
 8003364:	40020000 	.word	0x40020000
 8003368:	20000540 	.word	0x20000540
 800336c:	400260a0 	.word	0x400260a0

08003370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003374:	bf00      	nop
 8003376:	e7fd      	b.n	8003374 <NMI_Handler+0x4>

08003378 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800337c:	bf00      	nop
 800337e:	e7fd      	b.n	800337c <HardFault_Handler+0x4>

08003380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003384:	bf00      	nop
 8003386:	e7fd      	b.n	8003384 <MemManage_Handler+0x4>

08003388 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800338c:	bf00      	nop
 800338e:	e7fd      	b.n	800338c <BusFault_Handler+0x4>

08003390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003394:	bf00      	nop
 8003396:	e7fd      	b.n	8003394 <UsageFault_Handler+0x4>

08003398 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800339c:	bf00      	nop
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033aa:	f000 f975 	bl	8003698 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80033ae:	f007 fbfd 	bl	800abac <xTaskGetSchedulerState>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d001      	beq.n	80033bc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80033b8:	f008 faf6 	bl	800b9a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033bc:	bf00      	nop
 80033be:	bd80      	pop	{r7, pc}

080033c0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80033c4:	4802      	ldr	r0, [pc, #8]	@ (80033d0 <DMA1_Stream0_IRQHandler+0x10>)
 80033c6:	f000 fe35 	bl	8004034 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20000320 	.word	0x20000320

080033d4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80033d8:	4802      	ldr	r0, [pc, #8]	@ (80033e4 <DMA1_Stream6_IRQHandler+0x10>)
 80033da:	f000 fe2b 	bl	8004034 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80033de:	bf00      	nop
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20000540 	.word	0x20000540

080033e8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80033ec:	4802      	ldr	r0, [pc, #8]	@ (80033f8 <DMA1_Stream7_IRQHandler+0x10>)
 80033ee:	f000 fe21 	bl	8004034 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	200002c0 	.word	0x200002c0

080033fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  return 1;
 8003400:	2301      	movs	r3, #1
}
 8003402:	4618      	mov	r0, r3
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <_kill>:

int _kill(int pid, int sig)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003416:	f009 fd37 	bl	800ce88 <__errno>
 800341a:	4603      	mov	r3, r0
 800341c:	2216      	movs	r2, #22
 800341e:	601a      	str	r2, [r3, #0]
  return -1;
 8003420:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003424:	4618      	mov	r0, r3
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <_exit>:

void _exit (int status)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003434:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7ff ffe7 	bl	800340c <_kill>
  while (1) {}    /* Make sure we hang here */
 800343e:	bf00      	nop
 8003440:	e7fd      	b.n	800343e <_exit+0x12>

08003442 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b086      	sub	sp, #24
 8003446:	af00      	add	r7, sp, #0
 8003448:	60f8      	str	r0, [r7, #12]
 800344a:	60b9      	str	r1, [r7, #8]
 800344c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800344e:	2300      	movs	r3, #0
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	e00a      	b.n	800346a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003454:	f3af 8000 	nop.w
 8003458:	4601      	mov	r1, r0
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	60ba      	str	r2, [r7, #8]
 8003460:	b2ca      	uxtb	r2, r1
 8003462:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	3301      	adds	r3, #1
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	429a      	cmp	r2, r3
 8003470:	dbf0      	blt.n	8003454 <_read+0x12>
  }

  return len;
 8003472:	687b      	ldr	r3, [r7, #4]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <_close>:
  }
  return len;
}

int _close(int file)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003484:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003488:	4618      	mov	r0, r3
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034a4:	605a      	str	r2, [r3, #4]
  return 0;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <_isatty>:

int _isatty(int file)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034bc:	2301      	movs	r3, #1
}
 80034be:	4618      	mov	r0, r3
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b085      	sub	sp, #20
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	60f8      	str	r0, [r7, #12]
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034ec:	4a14      	ldr	r2, [pc, #80]	@ (8003540 <_sbrk+0x5c>)
 80034ee:	4b15      	ldr	r3, [pc, #84]	@ (8003544 <_sbrk+0x60>)
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034f8:	4b13      	ldr	r3, [pc, #76]	@ (8003548 <_sbrk+0x64>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d102      	bne.n	8003506 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003500:	4b11      	ldr	r3, [pc, #68]	@ (8003548 <_sbrk+0x64>)
 8003502:	4a12      	ldr	r2, [pc, #72]	@ (800354c <_sbrk+0x68>)
 8003504:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003506:	4b10      	ldr	r3, [pc, #64]	@ (8003548 <_sbrk+0x64>)
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4413      	add	r3, r2
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	429a      	cmp	r2, r3
 8003512:	d207      	bcs.n	8003524 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003514:	f009 fcb8 	bl	800ce88 <__errno>
 8003518:	4603      	mov	r3, r0
 800351a:	220c      	movs	r2, #12
 800351c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800351e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003522:	e009      	b.n	8003538 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003524:	4b08      	ldr	r3, [pc, #32]	@ (8003548 <_sbrk+0x64>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800352a:	4b07      	ldr	r3, [pc, #28]	@ (8003548 <_sbrk+0x64>)
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4413      	add	r3, r2
 8003532:	4a05      	ldr	r2, [pc, #20]	@ (8003548 <_sbrk+0x64>)
 8003534:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003536:	68fb      	ldr	r3, [r7, #12]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	20020000 	.word	0x20020000
 8003544:	00000400 	.word	0x00000400
 8003548:	200009bc 	.word	0x200009bc
 800354c:	2000b860 	.word	0x2000b860

08003550 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003554:	4b06      	ldr	r3, [pc, #24]	@ (8003570 <SystemInit+0x20>)
 8003556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800355a:	4a05      	ldr	r2, [pc, #20]	@ (8003570 <SystemInit+0x20>)
 800355c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003560:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003564:	bf00      	nop
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	e000ed00 	.word	0xe000ed00

08003574 <_write>:
 *      Author: patryk
 */

#include "write_printf.h"

int _write(int file, char *data, int len) {
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)data, len, HAL_MAX_DELAY);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	b29a      	uxth	r2, r3
 8003584:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003588:	68b9      	ldr	r1, [r7, #8]
 800358a:	4804      	ldr	r0, [pc, #16]	@ (800359c <_write+0x28>)
 800358c:	f004 fa0a 	bl	80079a4 <HAL_UART_Transmit>
    return len;
 8003590:	687b      	ldr	r3, [r7, #4]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	200004f8 	.word	0x200004f8

080035a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80035a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80035d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80035a4:	f7ff ffd4 	bl	8003550 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035a8:	480c      	ldr	r0, [pc, #48]	@ (80035dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80035aa:	490d      	ldr	r1, [pc, #52]	@ (80035e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80035ac:	4a0d      	ldr	r2, [pc, #52]	@ (80035e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80035ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035b0:	e002      	b.n	80035b8 <LoopCopyDataInit>

080035b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035b6:	3304      	adds	r3, #4

080035b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035bc:	d3f9      	bcc.n	80035b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035be:	4a0a      	ldr	r2, [pc, #40]	@ (80035e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80035c0:	4c0a      	ldr	r4, [pc, #40]	@ (80035ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80035c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035c4:	e001      	b.n	80035ca <LoopFillZerobss>

080035c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035c8:	3204      	adds	r2, #4

080035ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035cc:	d3fb      	bcc.n	80035c6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80035ce:	f009 fc61 	bl	800ce94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035d2:	f7fd ff83 	bl	80014dc <main>
  bx  lr    
 80035d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80035d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80035dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035e0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80035e4:	08010b88 	.word	0x08010b88
  ldr r2, =_sbss
 80035e8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80035ec:	2000b860 	.word	0x2000b860

080035f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035f0:	e7fe      	b.n	80035f0 <ADC_IRQHandler>
	...

080035f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003634 <HAL_Init+0x40>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003634 <HAL_Init+0x40>)
 80035fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003602:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003604:	4b0b      	ldr	r3, [pc, #44]	@ (8003634 <HAL_Init+0x40>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a0a      	ldr	r2, [pc, #40]	@ (8003634 <HAL_Init+0x40>)
 800360a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800360e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003610:	4b08      	ldr	r3, [pc, #32]	@ (8003634 <HAL_Init+0x40>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a07      	ldr	r2, [pc, #28]	@ (8003634 <HAL_Init+0x40>)
 8003616:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800361a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800361c:	2003      	movs	r0, #3
 800361e:	f000 fbc1 	bl	8003da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003622:	200f      	movs	r0, #15
 8003624:	f000 f808 	bl	8003638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003628:	f7ff fbb0 	bl	8002d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40023c00 	.word	0x40023c00

08003638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003640:	4b12      	ldr	r3, [pc, #72]	@ (800368c <HAL_InitTick+0x54>)
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	4b12      	ldr	r3, [pc, #72]	@ (8003690 <HAL_InitTick+0x58>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	4619      	mov	r1, r3
 800364a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800364e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003652:	fbb2 f3f3 	udiv	r3, r2, r3
 8003656:	4618      	mov	r0, r3
 8003658:	f000 fbd9 	bl	8003e0e <HAL_SYSTICK_Config>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e00e      	b.n	8003684 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b0f      	cmp	r3, #15
 800366a:	d80a      	bhi.n	8003682 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800366c:	2200      	movs	r2, #0
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003674:	f000 fba1 	bl	8003dba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003678:	4a06      	ldr	r2, [pc, #24]	@ (8003694 <HAL_InitTick+0x5c>)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	e000      	b.n	8003684 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
}
 8003684:	4618      	mov	r0, r3
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20000000 	.word	0x20000000
 8003690:	20000008 	.word	0x20000008
 8003694:	20000004 	.word	0x20000004

08003698 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800369c:	4b06      	ldr	r3, [pc, #24]	@ (80036b8 <HAL_IncTick+0x20>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	461a      	mov	r2, r3
 80036a2:	4b06      	ldr	r3, [pc, #24]	@ (80036bc <HAL_IncTick+0x24>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4413      	add	r3, r2
 80036a8:	4a04      	ldr	r2, [pc, #16]	@ (80036bc <HAL_IncTick+0x24>)
 80036aa:	6013      	str	r3, [r2, #0]
}
 80036ac:	bf00      	nop
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	20000008 	.word	0x20000008
 80036bc:	200009c0 	.word	0x200009c0

080036c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
  return uwTick;
 80036c4:	4b03      	ldr	r3, [pc, #12]	@ (80036d4 <HAL_GetTick+0x14>)
 80036c6:	681b      	ldr	r3, [r3, #0]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	200009c0 	.word	0x200009c0

080036d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036e0:	f7ff ffee 	bl	80036c0 <HAL_GetTick>
 80036e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036f0:	d005      	beq.n	80036fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036f2:	4b0a      	ldr	r3, [pc, #40]	@ (800371c <HAL_Delay+0x44>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4413      	add	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036fe:	bf00      	nop
 8003700:	f7ff ffde 	bl	80036c0 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	429a      	cmp	r2, r3
 800370e:	d8f7      	bhi.n	8003700 <HAL_Delay+0x28>
  {
  }
}
 8003710:	bf00      	nop
 8003712:	bf00      	nop
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	20000008 	.word	0x20000008

08003720 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e033      	b.n	800379e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373a:	2b00      	cmp	r3, #0
 800373c:	d109      	bne.n	8003752 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff fb50 	bl	8002de4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003756:	f003 0310 	and.w	r3, r3, #16
 800375a:	2b00      	cmp	r3, #0
 800375c:	d118      	bne.n	8003790 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003762:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003766:	f023 0302 	bic.w	r3, r3, #2
 800376a:	f043 0202 	orr.w	r2, r3, #2
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f94a 	bl	8003a0c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003782:	f023 0303 	bic.w	r3, r3, #3
 8003786:	f043 0201 	orr.w	r2, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	641a      	str	r2, [r3, #64]	@ 0x40
 800378e:	e001      	b.n	8003794 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800379c:	7bfb      	ldrb	r3, [r7, #15]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
	...

080037a8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_ADC_ConfigChannel+0x1c>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e113      	b.n	80039ec <HAL_ADC_ConfigChannel+0x244>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b09      	cmp	r3, #9
 80037d2:	d925      	bls.n	8003820 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68d9      	ldr	r1, [r3, #12]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	b29b      	uxth	r3, r3
 80037e0:	461a      	mov	r2, r3
 80037e2:	4613      	mov	r3, r2
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	4413      	add	r3, r2
 80037e8:	3b1e      	subs	r3, #30
 80037ea:	2207      	movs	r2, #7
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	43da      	mvns	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	400a      	ands	r2, r1
 80037f8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68d9      	ldr	r1, [r3, #12]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	b29b      	uxth	r3, r3
 800380a:	4618      	mov	r0, r3
 800380c:	4603      	mov	r3, r0
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	4403      	add	r3, r0
 8003812:	3b1e      	subs	r3, #30
 8003814:	409a      	lsls	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	60da      	str	r2, [r3, #12]
 800381e:	e022      	b.n	8003866 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6919      	ldr	r1, [r3, #16]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	b29b      	uxth	r3, r3
 800382c:	461a      	mov	r2, r3
 800382e:	4613      	mov	r3, r2
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	4413      	add	r3, r2
 8003834:	2207      	movs	r2, #7
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	43da      	mvns	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	400a      	ands	r2, r1
 8003842:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6919      	ldr	r1, [r3, #16]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	689a      	ldr	r2, [r3, #8]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	b29b      	uxth	r3, r3
 8003854:	4618      	mov	r0, r3
 8003856:	4603      	mov	r3, r0
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	4403      	add	r3, r0
 800385c:	409a      	lsls	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2b06      	cmp	r3, #6
 800386c:	d824      	bhi.n	80038b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	4613      	mov	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	3b05      	subs	r3, #5
 8003880:	221f      	movs	r2, #31
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	43da      	mvns	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	400a      	ands	r2, r1
 800388e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	b29b      	uxth	r3, r3
 800389c:	4618      	mov	r0, r3
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	4613      	mov	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	3b05      	subs	r3, #5
 80038aa:	fa00 f203 	lsl.w	r2, r0, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80038b6:	e04c      	b.n	8003952 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b0c      	cmp	r3, #12
 80038be:	d824      	bhi.n	800390a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	4613      	mov	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	3b23      	subs	r3, #35	@ 0x23
 80038d2:	221f      	movs	r2, #31
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	43da      	mvns	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	400a      	ands	r2, r1
 80038e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	4618      	mov	r0, r3
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	3b23      	subs	r3, #35	@ 0x23
 80038fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	631a      	str	r2, [r3, #48]	@ 0x30
 8003908:	e023      	b.n	8003952 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	4613      	mov	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	3b41      	subs	r3, #65	@ 0x41
 800391c:	221f      	movs	r2, #31
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	43da      	mvns	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	400a      	ands	r2, r1
 800392a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	b29b      	uxth	r3, r3
 8003938:	4618      	mov	r0, r3
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	4613      	mov	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4413      	add	r3, r2
 8003944:	3b41      	subs	r3, #65	@ 0x41
 8003946:	fa00 f203 	lsl.w	r2, r0, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003952:	4b29      	ldr	r3, [pc, #164]	@ (80039f8 <HAL_ADC_ConfigChannel+0x250>)
 8003954:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a28      	ldr	r2, [pc, #160]	@ (80039fc <HAL_ADC_ConfigChannel+0x254>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d10f      	bne.n	8003980 <HAL_ADC_ConfigChannel+0x1d8>
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b12      	cmp	r3, #18
 8003966:	d10b      	bne.n	8003980 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a1d      	ldr	r2, [pc, #116]	@ (80039fc <HAL_ADC_ConfigChannel+0x254>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d12b      	bne.n	80039e2 <HAL_ADC_ConfigChannel+0x23a>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a1c      	ldr	r2, [pc, #112]	@ (8003a00 <HAL_ADC_ConfigChannel+0x258>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d003      	beq.n	800399c <HAL_ADC_ConfigChannel+0x1f4>
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b11      	cmp	r3, #17
 800399a:	d122      	bne.n	80039e2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a11      	ldr	r2, [pc, #68]	@ (8003a00 <HAL_ADC_ConfigChannel+0x258>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d111      	bne.n	80039e2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039be:	4b11      	ldr	r3, [pc, #68]	@ (8003a04 <HAL_ADC_ConfigChannel+0x25c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a11      	ldr	r2, [pc, #68]	@ (8003a08 <HAL_ADC_ConfigChannel+0x260>)
 80039c4:	fba2 2303 	umull	r2, r3, r2, r3
 80039c8:	0c9a      	lsrs	r2, r3, #18
 80039ca:	4613      	mov	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80039d4:	e002      	b.n	80039dc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	3b01      	subs	r3, #1
 80039da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f9      	bne.n	80039d6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	40012300 	.word	0x40012300
 80039fc:	40012000 	.word	0x40012000
 8003a00:	10000012 	.word	0x10000012
 8003a04:	20000000 	.word	0x20000000
 8003a08:	431bde83 	.word	0x431bde83

08003a0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a14:	4b79      	ldr	r3, [pc, #484]	@ (8003bfc <ADC_Init+0x1f0>)
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6859      	ldr	r1, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	021a      	lsls	r2, r3, #8
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003a64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6859      	ldr	r1, [r3, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6899      	ldr	r1, [r3, #8]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a9e:	4a58      	ldr	r2, [pc, #352]	@ (8003c00 <ADC_Init+0x1f4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d022      	beq.n	8003aea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ab2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6899      	ldr	r1, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003ad4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6899      	ldr	r1, [r3, #8]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	609a      	str	r2, [r3, #8]
 8003ae8:	e00f      	b.n	8003b0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003af8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003b08:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0202 	bic.w	r2, r2, #2
 8003b18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6899      	ldr	r1, [r3, #8]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	7e1b      	ldrb	r3, [r3, #24]
 8003b24:	005a      	lsls	r2, r3, #1
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d01b      	beq.n	8003b70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b46:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003b56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6859      	ldr	r1, [r3, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b62:	3b01      	subs	r3, #1
 8003b64:	035a      	lsls	r2, r3, #13
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	605a      	str	r2, [r3, #4]
 8003b6e:	e007      	b.n	8003b80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b7e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	051a      	lsls	r2, r3, #20
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003bb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6899      	ldr	r1, [r3, #8]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003bc2:	025a      	lsls	r2, r3, #9
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689a      	ldr	r2, [r3, #8]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6899      	ldr	r1, [r3, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	029a      	lsls	r2, r3, #10
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	609a      	str	r2, [r3, #8]
}
 8003bf0:	bf00      	nop
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	40012300 	.word	0x40012300
 8003c00:	0f000001 	.word	0x0f000001

08003c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c14:	4b0c      	ldr	r3, [pc, #48]	@ (8003c48 <__NVIC_SetPriorityGrouping+0x44>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c20:	4013      	ands	r3, r2
 8003c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c36:	4a04      	ldr	r2, [pc, #16]	@ (8003c48 <__NVIC_SetPriorityGrouping+0x44>)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	60d3      	str	r3, [r2, #12]
}
 8003c3c:	bf00      	nop
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	e000ed00 	.word	0xe000ed00

08003c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c50:	4b04      	ldr	r3, [pc, #16]	@ (8003c64 <__NVIC_GetPriorityGrouping+0x18>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	0a1b      	lsrs	r3, r3, #8
 8003c56:	f003 0307 	and.w	r3, r3, #7
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	e000ed00 	.word	0xe000ed00

08003c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	db0b      	blt.n	8003c92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c7a:	79fb      	ldrb	r3, [r7, #7]
 8003c7c:	f003 021f 	and.w	r2, r3, #31
 8003c80:	4907      	ldr	r1, [pc, #28]	@ (8003ca0 <__NVIC_EnableIRQ+0x38>)
 8003c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	2001      	movs	r0, #1
 8003c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	e000e100 	.word	0xe000e100

08003ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	4603      	mov	r3, r0
 8003cac:	6039      	str	r1, [r7, #0]
 8003cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	db0a      	blt.n	8003cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	490c      	ldr	r1, [pc, #48]	@ (8003cf0 <__NVIC_SetPriority+0x4c>)
 8003cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc2:	0112      	lsls	r2, r2, #4
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ccc:	e00a      	b.n	8003ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	4908      	ldr	r1, [pc, #32]	@ (8003cf4 <__NVIC_SetPriority+0x50>)
 8003cd4:	79fb      	ldrb	r3, [r7, #7]
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	3b04      	subs	r3, #4
 8003cdc:	0112      	lsls	r2, r2, #4
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	761a      	strb	r2, [r3, #24]
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	e000e100 	.word	0xe000e100
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b089      	sub	sp, #36	@ 0x24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f1c3 0307 	rsb	r3, r3, #7
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	bf28      	it	cs
 8003d16:	2304      	movcs	r3, #4
 8003d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	2b06      	cmp	r3, #6
 8003d20:	d902      	bls.n	8003d28 <NVIC_EncodePriority+0x30>
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	3b03      	subs	r3, #3
 8003d26:	e000      	b.n	8003d2a <NVIC_EncodePriority+0x32>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	43da      	mvns	r2, r3
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	401a      	ands	r2, r3
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d40:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	fa01 f303 	lsl.w	r3, r1, r3
 8003d4a:	43d9      	mvns	r1, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d50:	4313      	orrs	r3, r2
         );
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3724      	adds	r7, #36	@ 0x24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
	...

08003d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d70:	d301      	bcc.n	8003d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d72:	2301      	movs	r3, #1
 8003d74:	e00f      	b.n	8003d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d76:	4a0a      	ldr	r2, [pc, #40]	@ (8003da0 <SysTick_Config+0x40>)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d7e:	210f      	movs	r1, #15
 8003d80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d84:	f7ff ff8e 	bl	8003ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d88:	4b05      	ldr	r3, [pc, #20]	@ (8003da0 <SysTick_Config+0x40>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d8e:	4b04      	ldr	r3, [pc, #16]	@ (8003da0 <SysTick_Config+0x40>)
 8003d90:	2207      	movs	r2, #7
 8003d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	e000e010 	.word	0xe000e010

08003da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff ff29 	bl	8003c04 <__NVIC_SetPriorityGrouping>
}
 8003db2:	bf00      	nop
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b086      	sub	sp, #24
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	60b9      	str	r1, [r7, #8]
 8003dc4:	607a      	str	r2, [r7, #4]
 8003dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dcc:	f7ff ff3e 	bl	8003c4c <__NVIC_GetPriorityGrouping>
 8003dd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	68b9      	ldr	r1, [r7, #8]
 8003dd6:	6978      	ldr	r0, [r7, #20]
 8003dd8:	f7ff ff8e 	bl	8003cf8 <NVIC_EncodePriority>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003de2:	4611      	mov	r1, r2
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff ff5d 	bl	8003ca4 <__NVIC_SetPriority>
}
 8003dea:	bf00      	nop
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b082      	sub	sp, #8
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	4603      	mov	r3, r0
 8003dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff ff31 	bl	8003c68 <__NVIC_EnableIRQ>
}
 8003e06:	bf00      	nop
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b082      	sub	sp, #8
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7ff ffa2 	bl	8003d60 <SysTick_Config>
 8003e1c:	4603      	mov	r3, r0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
	...

08003e28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e34:	f7ff fc44 	bl	80036c0 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e099      	b.n	8003f78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0201 	bic.w	r2, r2, #1
 8003e62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e64:	e00f      	b.n	8003e86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e66:	f7ff fc2b 	bl	80036c0 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b05      	cmp	r3, #5
 8003e72:	d908      	bls.n	8003e86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2220      	movs	r2, #32
 8003e78:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2203      	movs	r2, #3
 8003e7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e078      	b.n	8003f78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1e8      	bne.n	8003e66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	4b38      	ldr	r3, [pc, #224]	@ (8003f80 <HAL_DMA_Init+0x158>)
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ebe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003edc:	2b04      	cmp	r3, #4
 8003ede:	d107      	bne.n	8003ef0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f023 0307 	bic.w	r3, r3, #7
 8003f06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d117      	bne.n	8003f4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00e      	beq.n	8003f4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 fa6f 	bl	8004410 <DMA_CheckFifoParam>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d008      	beq.n	8003f4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2240      	movs	r2, #64	@ 0x40
 8003f3c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003f46:	2301      	movs	r3, #1
 8003f48:	e016      	b.n	8003f78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fa26 	bl	80043a4 <DMA_CalcBaseAndBitshift>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f60:	223f      	movs	r2, #63	@ 0x3f
 8003f62:	409a      	lsls	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	f010803f 	.word	0xf010803f

08003f84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
 8003f90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f92:	2300      	movs	r3, #0
 8003f94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d101      	bne.n	8003faa <HAL_DMA_Start_IT+0x26>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	e040      	b.n	800402c <HAL_DMA_Start_IT+0xa8>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d12f      	bne.n	800401e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	68b9      	ldr	r1, [r7, #8]
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 f9b8 	bl	8004348 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fdc:	223f      	movs	r2, #63	@ 0x3f
 8003fde:	409a      	lsls	r2, r3
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0216 	orr.w	r2, r2, #22
 8003ff2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d007      	beq.n	800400c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0208 	orr.w	r2, r2, #8
 800400a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0201 	orr.w	r2, r2, #1
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	e005      	b.n	800402a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004026:	2302      	movs	r3, #2
 8004028:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800402a:	7dfb      	ldrb	r3, [r7, #23]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004040:	4b8e      	ldr	r3, [pc, #568]	@ (800427c <HAL_DMA_IRQHandler+0x248>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a8e      	ldr	r2, [pc, #568]	@ (8004280 <HAL_DMA_IRQHandler+0x24c>)
 8004046:	fba2 2303 	umull	r2, r3, r2, r3
 800404a:	0a9b      	lsrs	r3, r3, #10
 800404c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004052:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800405e:	2208      	movs	r2, #8
 8004060:	409a      	lsls	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	4013      	ands	r3, r2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d01a      	beq.n	80040a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b00      	cmp	r3, #0
 8004076:	d013      	beq.n	80040a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0204 	bic.w	r2, r2, #4
 8004086:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800408c:	2208      	movs	r2, #8
 800408e:	409a      	lsls	r2, r3
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004098:	f043 0201 	orr.w	r2, r3, #1
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a4:	2201      	movs	r2, #1
 80040a6:	409a      	lsls	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4013      	ands	r3, r2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d012      	beq.n	80040d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00b      	beq.n	80040d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040c2:	2201      	movs	r2, #1
 80040c4:	409a      	lsls	r2, r3
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ce:	f043 0202 	orr.w	r2, r3, #2
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040da:	2204      	movs	r2, #4
 80040dc:	409a      	lsls	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	4013      	ands	r3, r2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d012      	beq.n	800410c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00b      	beq.n	800410c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040f8:	2204      	movs	r2, #4
 80040fa:	409a      	lsls	r2, r3
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004104:	f043 0204 	orr.w	r2, r3, #4
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004110:	2210      	movs	r2, #16
 8004112:	409a      	lsls	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4013      	ands	r3, r2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d043      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d03c      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800412e:	2210      	movs	r2, #16
 8004130:	409a      	lsls	r2, r3
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d018      	beq.n	8004176 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d108      	bne.n	8004164 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004156:	2b00      	cmp	r3, #0
 8004158:	d024      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	4798      	blx	r3
 8004162:	e01f      	b.n	80041a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004168:	2b00      	cmp	r3, #0
 800416a:	d01b      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	4798      	blx	r3
 8004174:	e016      	b.n	80041a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004180:	2b00      	cmp	r3, #0
 8004182:	d107      	bne.n	8004194 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0208 	bic.w	r2, r2, #8
 8004192:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041a8:	2220      	movs	r2, #32
 80041aa:	409a      	lsls	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 808f 	beq.w	80042d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 8087 	beq.w	80042d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ca:	2220      	movs	r2, #32
 80041cc:	409a      	lsls	r2, r3
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b05      	cmp	r3, #5
 80041dc:	d136      	bne.n	800424c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0216 	bic.w	r2, r2, #22
 80041ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695a      	ldr	r2, [r3, #20]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004202:	2b00      	cmp	r3, #0
 8004204:	d103      	bne.n	800420e <HAL_DMA_IRQHandler+0x1da>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800420a:	2b00      	cmp	r3, #0
 800420c:	d007      	beq.n	800421e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0208 	bic.w	r2, r2, #8
 800421c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004222:	223f      	movs	r2, #63	@ 0x3f
 8004224:	409a      	lsls	r2, r3
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800423e:	2b00      	cmp	r3, #0
 8004240:	d07e      	beq.n	8004340 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	4798      	blx	r3
        }
        return;
 800424a:	e079      	b.n	8004340 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d01d      	beq.n	8004296 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10d      	bne.n	8004284 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800426c:	2b00      	cmp	r3, #0
 800426e:	d031      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	4798      	blx	r3
 8004278:	e02c      	b.n	80042d4 <HAL_DMA_IRQHandler+0x2a0>
 800427a:	bf00      	nop
 800427c:	20000000 	.word	0x20000000
 8004280:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004288:	2b00      	cmp	r3, #0
 800428a:	d023      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	4798      	blx	r3
 8004294:	e01e      	b.n	80042d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10f      	bne.n	80042c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0210 	bic.w	r2, r2, #16
 80042b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d032      	beq.n	8004342 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d022      	beq.n	800432e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2205      	movs	r2, #5
 80042ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0201 	bic.w	r2, r2, #1
 80042fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	3301      	adds	r3, #1
 8004304:	60bb      	str	r3, [r7, #8]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	429a      	cmp	r2, r3
 800430a:	d307      	bcc.n	800431c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1f2      	bne.n	8004300 <HAL_DMA_IRQHandler+0x2cc>
 800431a:	e000      	b.n	800431e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800431c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004332:	2b00      	cmp	r3, #0
 8004334:	d005      	beq.n	8004342 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	4798      	blx	r3
 800433e:	e000      	b.n	8004342 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004340:	bf00      	nop
    }
  }
}
 8004342:	3718      	adds	r7, #24
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004364:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	2b40      	cmp	r3, #64	@ 0x40
 8004374:	d108      	bne.n	8004388 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004386:	e007      	b.n	8004398 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	60da      	str	r2, [r3, #12]
}
 8004398:	bf00      	nop
 800439a:	3714      	adds	r7, #20
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	3b10      	subs	r3, #16
 80043b4:	4a14      	ldr	r2, [pc, #80]	@ (8004408 <DMA_CalcBaseAndBitshift+0x64>)
 80043b6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ba:	091b      	lsrs	r3, r3, #4
 80043bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80043be:	4a13      	ldr	r2, [pc, #76]	@ (800440c <DMA_CalcBaseAndBitshift+0x68>)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4413      	add	r3, r2
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	461a      	mov	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2b03      	cmp	r3, #3
 80043d0:	d909      	bls.n	80043e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80043da:	f023 0303 	bic.w	r3, r3, #3
 80043de:	1d1a      	adds	r2, r3, #4
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80043e4:	e007      	b.n	80043f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80043ee:	f023 0303 	bic.w	r3, r3, #3
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	aaaaaaab 	.word	0xaaaaaaab
 800440c:	08010760 	.word	0x08010760

08004410 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004418:	2300      	movs	r3, #0
 800441a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004420:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d11f      	bne.n	800446a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	2b03      	cmp	r3, #3
 800442e:	d856      	bhi.n	80044de <DMA_CheckFifoParam+0xce>
 8004430:	a201      	add	r2, pc, #4	@ (adr r2, 8004438 <DMA_CheckFifoParam+0x28>)
 8004432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004436:	bf00      	nop
 8004438:	08004449 	.word	0x08004449
 800443c:	0800445b 	.word	0x0800445b
 8004440:	08004449 	.word	0x08004449
 8004444:	080044df 	.word	0x080044df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d046      	beq.n	80044e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004458:	e043      	b.n	80044e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004462:	d140      	bne.n	80044e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004468:	e03d      	b.n	80044e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004472:	d121      	bne.n	80044b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2b03      	cmp	r3, #3
 8004478:	d837      	bhi.n	80044ea <DMA_CheckFifoParam+0xda>
 800447a:	a201      	add	r2, pc, #4	@ (adr r2, 8004480 <DMA_CheckFifoParam+0x70>)
 800447c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004480:	08004491 	.word	0x08004491
 8004484:	08004497 	.word	0x08004497
 8004488:	08004491 	.word	0x08004491
 800448c:	080044a9 	.word	0x080044a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	73fb      	strb	r3, [r7, #15]
      break;
 8004494:	e030      	b.n	80044f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800449a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d025      	beq.n	80044ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044a6:	e022      	b.n	80044ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80044b0:	d11f      	bne.n	80044f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80044b6:	e01c      	b.n	80044f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d903      	bls.n	80044c6 <DMA_CheckFifoParam+0xb6>
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	2b03      	cmp	r3, #3
 80044c2:	d003      	beq.n	80044cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80044c4:	e018      	b.n	80044f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	73fb      	strb	r3, [r7, #15]
      break;
 80044ca:	e015      	b.n	80044f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00e      	beq.n	80044f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	73fb      	strb	r3, [r7, #15]
      break;
 80044dc:	e00b      	b.n	80044f6 <DMA_CheckFifoParam+0xe6>
      break;
 80044de:	bf00      	nop
 80044e0:	e00a      	b.n	80044f8 <DMA_CheckFifoParam+0xe8>
      break;
 80044e2:	bf00      	nop
 80044e4:	e008      	b.n	80044f8 <DMA_CheckFifoParam+0xe8>
      break;
 80044e6:	bf00      	nop
 80044e8:	e006      	b.n	80044f8 <DMA_CheckFifoParam+0xe8>
      break;
 80044ea:	bf00      	nop
 80044ec:	e004      	b.n	80044f8 <DMA_CheckFifoParam+0xe8>
      break;
 80044ee:	bf00      	nop
 80044f0:	e002      	b.n	80044f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80044f2:	bf00      	nop
 80044f4:	e000      	b.n	80044f8 <DMA_CheckFifoParam+0xe8>
      break;
 80044f6:	bf00      	nop
    }
  } 
  
  return status; 
 80044f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop

08004508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004508:	b480      	push	{r7}
 800450a:	b089      	sub	sp, #36	@ 0x24
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004512:	2300      	movs	r3, #0
 8004514:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004516:	2300      	movs	r3, #0
 8004518:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800451a:	2300      	movs	r3, #0
 800451c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800451e:	2300      	movs	r3, #0
 8004520:	61fb      	str	r3, [r7, #28]
 8004522:	e165      	b.n	80047f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004524:	2201      	movs	r2, #1
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	fa02 f303 	lsl.w	r3, r2, r3
 800452c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	4013      	ands	r3, r2
 8004536:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	429a      	cmp	r2, r3
 800453e:	f040 8154 	bne.w	80047ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	2b01      	cmp	r3, #1
 800454c:	d005      	beq.n	800455a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004556:	2b02      	cmp	r3, #2
 8004558:	d130      	bne.n	80045bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	2203      	movs	r2, #3
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	43db      	mvns	r3, r3
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	4013      	ands	r3, r2
 8004570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	4313      	orrs	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004590:	2201      	movs	r2, #1
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	43db      	mvns	r3, r3
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	4013      	ands	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	091b      	lsrs	r3, r3, #4
 80045a6:	f003 0201 	and.w	r2, r3, #1
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f003 0303 	and.w	r3, r3, #3
 80045c4:	2b03      	cmp	r3, #3
 80045c6:	d017      	beq.n	80045f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	2203      	movs	r2, #3
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	43db      	mvns	r3, r3
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	4013      	ands	r3, r2
 80045de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f003 0303 	and.w	r3, r3, #3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d123      	bne.n	800464c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	08da      	lsrs	r2, r3, #3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3208      	adds	r2, #8
 800460c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004610:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	220f      	movs	r2, #15
 800461c:	fa02 f303 	lsl.w	r3, r2, r3
 8004620:	43db      	mvns	r3, r3
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	4013      	ands	r3, r2
 8004626:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	f003 0307 	and.w	r3, r3, #7
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	fa02 f303 	lsl.w	r3, r2, r3
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	4313      	orrs	r3, r2
 800463c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	08da      	lsrs	r2, r3, #3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	3208      	adds	r2, #8
 8004646:	69b9      	ldr	r1, [r7, #24]
 8004648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	2203      	movs	r2, #3
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	43db      	mvns	r3, r3
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	4013      	ands	r3, r2
 8004662:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f003 0203 	and.w	r2, r3, #3
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	4313      	orrs	r3, r2
 8004678:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 80ae 	beq.w	80047ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800468e:	2300      	movs	r3, #0
 8004690:	60fb      	str	r3, [r7, #12]
 8004692:	4b5d      	ldr	r3, [pc, #372]	@ (8004808 <HAL_GPIO_Init+0x300>)
 8004694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004696:	4a5c      	ldr	r2, [pc, #368]	@ (8004808 <HAL_GPIO_Init+0x300>)
 8004698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800469c:	6453      	str	r3, [r2, #68]	@ 0x44
 800469e:	4b5a      	ldr	r3, [pc, #360]	@ (8004808 <HAL_GPIO_Init+0x300>)
 80046a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046aa:	4a58      	ldr	r2, [pc, #352]	@ (800480c <HAL_GPIO_Init+0x304>)
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	089b      	lsrs	r3, r3, #2
 80046b0:	3302      	adds	r3, #2
 80046b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	f003 0303 	and.w	r3, r3, #3
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	220f      	movs	r2, #15
 80046c2:	fa02 f303 	lsl.w	r3, r2, r3
 80046c6:	43db      	mvns	r3, r3
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	4013      	ands	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a4f      	ldr	r2, [pc, #316]	@ (8004810 <HAL_GPIO_Init+0x308>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d025      	beq.n	8004722 <HAL_GPIO_Init+0x21a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a4e      	ldr	r2, [pc, #312]	@ (8004814 <HAL_GPIO_Init+0x30c>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d01f      	beq.n	800471e <HAL_GPIO_Init+0x216>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a4d      	ldr	r2, [pc, #308]	@ (8004818 <HAL_GPIO_Init+0x310>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d019      	beq.n	800471a <HAL_GPIO_Init+0x212>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a4c      	ldr	r2, [pc, #304]	@ (800481c <HAL_GPIO_Init+0x314>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d013      	beq.n	8004716 <HAL_GPIO_Init+0x20e>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a4b      	ldr	r2, [pc, #300]	@ (8004820 <HAL_GPIO_Init+0x318>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d00d      	beq.n	8004712 <HAL_GPIO_Init+0x20a>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a4a      	ldr	r2, [pc, #296]	@ (8004824 <HAL_GPIO_Init+0x31c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d007      	beq.n	800470e <HAL_GPIO_Init+0x206>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a49      	ldr	r2, [pc, #292]	@ (8004828 <HAL_GPIO_Init+0x320>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d101      	bne.n	800470a <HAL_GPIO_Init+0x202>
 8004706:	2306      	movs	r3, #6
 8004708:	e00c      	b.n	8004724 <HAL_GPIO_Init+0x21c>
 800470a:	2307      	movs	r3, #7
 800470c:	e00a      	b.n	8004724 <HAL_GPIO_Init+0x21c>
 800470e:	2305      	movs	r3, #5
 8004710:	e008      	b.n	8004724 <HAL_GPIO_Init+0x21c>
 8004712:	2304      	movs	r3, #4
 8004714:	e006      	b.n	8004724 <HAL_GPIO_Init+0x21c>
 8004716:	2303      	movs	r3, #3
 8004718:	e004      	b.n	8004724 <HAL_GPIO_Init+0x21c>
 800471a:	2302      	movs	r3, #2
 800471c:	e002      	b.n	8004724 <HAL_GPIO_Init+0x21c>
 800471e:	2301      	movs	r3, #1
 8004720:	e000      	b.n	8004724 <HAL_GPIO_Init+0x21c>
 8004722:	2300      	movs	r3, #0
 8004724:	69fa      	ldr	r2, [r7, #28]
 8004726:	f002 0203 	and.w	r2, r2, #3
 800472a:	0092      	lsls	r2, r2, #2
 800472c:	4093      	lsls	r3, r2
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	4313      	orrs	r3, r2
 8004732:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004734:	4935      	ldr	r1, [pc, #212]	@ (800480c <HAL_GPIO_Init+0x304>)
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	089b      	lsrs	r3, r3, #2
 800473a:	3302      	adds	r3, #2
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004742:	4b3a      	ldr	r3, [pc, #232]	@ (800482c <HAL_GPIO_Init+0x324>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	43db      	mvns	r3, r3
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	4013      	ands	r3, r2
 8004750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	4313      	orrs	r3, r2
 8004764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004766:	4a31      	ldr	r2, [pc, #196]	@ (800482c <HAL_GPIO_Init+0x324>)
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800476c:	4b2f      	ldr	r3, [pc, #188]	@ (800482c <HAL_GPIO_Init+0x324>)
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	43db      	mvns	r3, r3
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	4013      	ands	r3, r2
 800477a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d003      	beq.n	8004790 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	4313      	orrs	r3, r2
 800478e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004790:	4a26      	ldr	r2, [pc, #152]	@ (800482c <HAL_GPIO_Init+0x324>)
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004796:	4b25      	ldr	r3, [pc, #148]	@ (800482c <HAL_GPIO_Init+0x324>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	43db      	mvns	r3, r3
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	4013      	ands	r3, r2
 80047a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047ba:	4a1c      	ldr	r2, [pc, #112]	@ (800482c <HAL_GPIO_Init+0x324>)
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047c0:	4b1a      	ldr	r3, [pc, #104]	@ (800482c <HAL_GPIO_Init+0x324>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	43db      	mvns	r3, r3
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	4013      	ands	r3, r2
 80047ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d003      	beq.n	80047e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047e4:	4a11      	ldr	r2, [pc, #68]	@ (800482c <HAL_GPIO_Init+0x324>)
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	3301      	adds	r3, #1
 80047ee:	61fb      	str	r3, [r7, #28]
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	2b0f      	cmp	r3, #15
 80047f4:	f67f ae96 	bls.w	8004524 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047f8:	bf00      	nop
 80047fa:	bf00      	nop
 80047fc:	3724      	adds	r7, #36	@ 0x24
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	40023800 	.word	0x40023800
 800480c:	40013800 	.word	0x40013800
 8004810:	40020000 	.word	0x40020000
 8004814:	40020400 	.word	0x40020400
 8004818:	40020800 	.word	0x40020800
 800481c:	40020c00 	.word	0x40020c00
 8004820:	40021000 	.word	0x40021000
 8004824:	40021400 	.word	0x40021400
 8004828:	40021800 	.word	0x40021800
 800482c:	40013c00 	.word	0x40013c00

08004830 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691a      	ldr	r2, [r3, #16]
 8004840:	887b      	ldrh	r3, [r7, #2]
 8004842:	4013      	ands	r3, r2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004848:	2301      	movs	r3, #1
 800484a:	73fb      	strb	r3, [r7, #15]
 800484c:	e001      	b.n	8004852 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800484e:	2300      	movs	r3, #0
 8004850:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004852:	7bfb      	ldrb	r3, [r7, #15]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	460b      	mov	r3, r1
 800486a:	807b      	strh	r3, [r7, #2]
 800486c:	4613      	mov	r3, r2
 800486e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004870:	787b      	ldrb	r3, [r7, #1]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004876:	887a      	ldrh	r2, [r7, #2]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800487c:	e003      	b.n	8004886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800487e:	887b      	ldrh	r3, [r7, #2]
 8004880:	041a      	lsls	r2, r3, #16
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	619a      	str	r2, [r3, #24]
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
	...

08004894 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e12b      	b.n	8004afe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d106      	bne.n	80048c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7fe fad6 	bl	8002e6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2224      	movs	r2, #36	@ 0x24
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0201 	bic.w	r2, r2, #1
 80048d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80048f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80048f8:	f001 fa6e 	bl	8005dd8 <HAL_RCC_GetPCLK1Freq>
 80048fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	4a81      	ldr	r2, [pc, #516]	@ (8004b08 <HAL_I2C_Init+0x274>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d807      	bhi.n	8004918 <HAL_I2C_Init+0x84>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4a80      	ldr	r2, [pc, #512]	@ (8004b0c <HAL_I2C_Init+0x278>)
 800490c:	4293      	cmp	r3, r2
 800490e:	bf94      	ite	ls
 8004910:	2301      	movls	r3, #1
 8004912:	2300      	movhi	r3, #0
 8004914:	b2db      	uxtb	r3, r3
 8004916:	e006      	b.n	8004926 <HAL_I2C_Init+0x92>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4a7d      	ldr	r2, [pc, #500]	@ (8004b10 <HAL_I2C_Init+0x27c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	bf94      	ite	ls
 8004920:	2301      	movls	r3, #1
 8004922:	2300      	movhi	r3, #0
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e0e7      	b.n	8004afe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4a78      	ldr	r2, [pc, #480]	@ (8004b14 <HAL_I2C_Init+0x280>)
 8004932:	fba2 2303 	umull	r2, r3, r2, r3
 8004936:	0c9b      	lsrs	r3, r3, #18
 8004938:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	430a      	orrs	r2, r1
 800494c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	4a6a      	ldr	r2, [pc, #424]	@ (8004b08 <HAL_I2C_Init+0x274>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d802      	bhi.n	8004968 <HAL_I2C_Init+0xd4>
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	3301      	adds	r3, #1
 8004966:	e009      	b.n	800497c <HAL_I2C_Init+0xe8>
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800496e:	fb02 f303 	mul.w	r3, r2, r3
 8004972:	4a69      	ldr	r2, [pc, #420]	@ (8004b18 <HAL_I2C_Init+0x284>)
 8004974:	fba2 2303 	umull	r2, r3, r2, r3
 8004978:	099b      	lsrs	r3, r3, #6
 800497a:	3301      	adds	r3, #1
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6812      	ldr	r2, [r2, #0]
 8004980:	430b      	orrs	r3, r1
 8004982:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800498e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	495c      	ldr	r1, [pc, #368]	@ (8004b08 <HAL_I2C_Init+0x274>)
 8004998:	428b      	cmp	r3, r1
 800499a:	d819      	bhi.n	80049d0 <HAL_I2C_Init+0x13c>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	1e59      	subs	r1, r3, #1
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80049aa:	1c59      	adds	r1, r3, #1
 80049ac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80049b0:	400b      	ands	r3, r1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <HAL_I2C_Init+0x138>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	1e59      	subs	r1, r3, #1
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80049c4:	3301      	adds	r3, #1
 80049c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ca:	e051      	b.n	8004a70 <HAL_I2C_Init+0x1dc>
 80049cc:	2304      	movs	r3, #4
 80049ce:	e04f      	b.n	8004a70 <HAL_I2C_Init+0x1dc>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d111      	bne.n	80049fc <HAL_I2C_Init+0x168>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	1e58      	subs	r0, r3, #1
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6859      	ldr	r1, [r3, #4]
 80049e0:	460b      	mov	r3, r1
 80049e2:	005b      	lsls	r3, r3, #1
 80049e4:	440b      	add	r3, r1
 80049e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80049ea:	3301      	adds	r3, #1
 80049ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	bf0c      	ite	eq
 80049f4:	2301      	moveq	r3, #1
 80049f6:	2300      	movne	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	e012      	b.n	8004a22 <HAL_I2C_Init+0x18e>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	1e58      	subs	r0, r3, #1
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6859      	ldr	r1, [r3, #4]
 8004a04:	460b      	mov	r3, r1
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	440b      	add	r3, r1
 8004a0a:	0099      	lsls	r1, r3, #2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a12:	3301      	adds	r3, #1
 8004a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	bf0c      	ite	eq
 8004a1c:	2301      	moveq	r3, #1
 8004a1e:	2300      	movne	r3, #0
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <HAL_I2C_Init+0x196>
 8004a26:	2301      	movs	r3, #1
 8004a28:	e022      	b.n	8004a70 <HAL_I2C_Init+0x1dc>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10e      	bne.n	8004a50 <HAL_I2C_Init+0x1bc>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	1e58      	subs	r0, r3, #1
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6859      	ldr	r1, [r3, #4]
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	440b      	add	r3, r1
 8004a40:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a44:	3301      	adds	r3, #1
 8004a46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a4e:	e00f      	b.n	8004a70 <HAL_I2C_Init+0x1dc>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	1e58      	subs	r0, r3, #1
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6859      	ldr	r1, [r3, #4]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	0099      	lsls	r1, r3, #2
 8004a60:	440b      	add	r3, r1
 8004a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a66:	3301      	adds	r3, #1
 8004a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	6809      	ldr	r1, [r1, #0]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69da      	ldr	r2, [r3, #28]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004a9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6911      	ldr	r1, [r2, #16]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	68d2      	ldr	r2, [r2, #12]
 8004aaa:	4311      	orrs	r1, r2
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6812      	ldr	r2, [r2, #0]
 8004ab0:	430b      	orrs	r3, r1
 8004ab2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	695a      	ldr	r2, [r3, #20]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0201 	orr.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	000186a0 	.word	0x000186a0
 8004b0c:	001e847f 	.word	0x001e847f
 8004b10:	003d08ff 	.word	0x003d08ff
 8004b14:	431bde83 	.word	0x431bde83
 8004b18:	10624dd3 	.word	0x10624dd3

08004b1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b088      	sub	sp, #32
 8004b20:	af02      	add	r7, sp, #8
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	607a      	str	r2, [r7, #4]
 8004b26:	461a      	mov	r2, r3
 8004b28:	460b      	mov	r3, r1
 8004b2a:	817b      	strh	r3, [r7, #10]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b30:	f7fe fdc6 	bl	80036c0 <HAL_GetTick>
 8004b34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b20      	cmp	r3, #32
 8004b40:	f040 80e0 	bne.w	8004d04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	2319      	movs	r3, #25
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	4970      	ldr	r1, [pc, #448]	@ (8004d10 <HAL_I2C_Master_Transmit+0x1f4>)
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	f000 fe1a 	bl	8005788 <I2C_WaitOnFlagUntilTimeout>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	e0d3      	b.n	8004d06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d101      	bne.n	8004b6c <HAL_I2C_Master_Transmit+0x50>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	e0cc      	b.n	8004d06 <HAL_I2C_Master_Transmit+0x1ea>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d007      	beq.n	8004b92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f042 0201 	orr.w	r2, r2, #1
 8004b90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ba0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2221      	movs	r2, #33	@ 0x21
 8004ba6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2210      	movs	r2, #16
 8004bae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	893a      	ldrh	r2, [r7, #8]
 8004bc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	4a50      	ldr	r2, [pc, #320]	@ (8004d14 <HAL_I2C_Master_Transmit+0x1f8>)
 8004bd2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004bd4:	8979      	ldrh	r1, [r7, #10]
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	6a3a      	ldr	r2, [r7, #32]
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 fbd4 	bl	8005388 <I2C_MasterRequestWrite>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e08d      	b.n	8004d06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bea:	2300      	movs	r3, #0
 8004bec:	613b      	str	r3, [r7, #16]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	613b      	str	r3, [r7, #16]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	613b      	str	r3, [r7, #16]
 8004bfe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004c00:	e066      	b.n	8004cd0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	6a39      	ldr	r1, [r7, #32]
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 fed8 	bl	80059bc <I2C_WaitOnTXEFlagUntilTimeout>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00d      	beq.n	8004c2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c16:	2b04      	cmp	r3, #4
 8004c18:	d107      	bne.n	8004c2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e06b      	b.n	8004d06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c32:	781a      	ldrb	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c56:	3b01      	subs	r3, #1
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	f003 0304 	and.w	r3, r3, #4
 8004c68:	2b04      	cmp	r3, #4
 8004c6a:	d11b      	bne.n	8004ca4 <HAL_I2C_Master_Transmit+0x188>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d017      	beq.n	8004ca4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c78:	781a      	ldrb	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c84:	1c5a      	adds	r2, r3, #1
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	3b01      	subs	r3, #1
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	6a39      	ldr	r1, [r7, #32]
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 fecf 	bl	8005a4c <I2C_WaitOnBTFFlagUntilTimeout>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00d      	beq.n	8004cd0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	d107      	bne.n	8004ccc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e01a      	b.n	8004d06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d194      	bne.n	8004c02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ce6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2220      	movs	r2, #32
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004d00:	2300      	movs	r3, #0
 8004d02:	e000      	b.n	8004d06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004d04:	2302      	movs	r3, #2
  }
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3718      	adds	r7, #24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	00100002 	.word	0x00100002
 8004d14:	ffff0000 	.word	0xffff0000

08004d18 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b088      	sub	sp, #32
 8004d1c:	af02      	add	r7, sp, #8
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	4608      	mov	r0, r1
 8004d22:	4611      	mov	r1, r2
 8004d24:	461a      	mov	r2, r3
 8004d26:	4603      	mov	r3, r0
 8004d28:	817b      	strh	r3, [r7, #10]
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	813b      	strh	r3, [r7, #8]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d32:	f7fe fcc5 	bl	80036c0 <HAL_GetTick>
 8004d36:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b20      	cmp	r3, #32
 8004d42:	f040 80d9 	bne.w	8004ef8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	2319      	movs	r3, #25
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	496d      	ldr	r1, [pc, #436]	@ (8004f04 <HAL_I2C_Mem_Write+0x1ec>)
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 fd19 	bl	8005788 <I2C_WaitOnFlagUntilTimeout>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	e0cc      	b.n	8004efa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d101      	bne.n	8004d6e <HAL_I2C_Mem_Write+0x56>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	e0c5      	b.n	8004efa <HAL_I2C_Mem_Write+0x1e2>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d007      	beq.n	8004d94 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0201 	orr.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004da2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2221      	movs	r2, #33	@ 0x21
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2240      	movs	r2, #64	@ 0x40
 8004db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a3a      	ldr	r2, [r7, #32]
 8004dbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004dc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4a4d      	ldr	r2, [pc, #308]	@ (8004f08 <HAL_I2C_Mem_Write+0x1f0>)
 8004dd4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004dd6:	88f8      	ldrh	r0, [r7, #6]
 8004dd8:	893a      	ldrh	r2, [r7, #8]
 8004dda:	8979      	ldrh	r1, [r7, #10]
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	9301      	str	r3, [sp, #4]
 8004de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	4603      	mov	r3, r0
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 fb50 	bl	800548c <I2C_RequestMemoryWrite>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d052      	beq.n	8004e98 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e081      	b.n	8004efa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f000 fdde 	bl	80059bc <I2C_WaitOnTXEFlagUntilTimeout>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00d      	beq.n	8004e22 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0a:	2b04      	cmp	r3, #4
 8004e0c:	d107      	bne.n	8004e1e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e06b      	b.n	8004efa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e26:	781a      	ldrb	r2, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	d11b      	bne.n	8004e98 <HAL_I2C_Mem_Write+0x180>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d017      	beq.n	8004e98 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6c:	781a      	ldrb	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	3b01      	subs	r3, #1
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1aa      	bne.n	8004df6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f000 fdd1 	bl	8005a4c <I2C_WaitOnBTFFlagUntilTimeout>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00d      	beq.n	8004ecc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d107      	bne.n	8004ec8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ec6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e016      	b.n	8004efa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004eda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	e000      	b.n	8004efa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004ef8:	2302      	movs	r3, #2
  }
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	00100002 	.word	0x00100002
 8004f08:	ffff0000 	.word	0xffff0000

08004f0c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b08c      	sub	sp, #48	@ 0x30
 8004f10:	af02      	add	r7, sp, #8
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	4608      	mov	r0, r1
 8004f16:	4611      	mov	r1, r2
 8004f18:	461a      	mov	r2, r3
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	817b      	strh	r3, [r7, #10]
 8004f1e:	460b      	mov	r3, r1
 8004f20:	813b      	strh	r3, [r7, #8]
 8004f22:	4613      	mov	r3, r2
 8004f24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f26:	f7fe fbcb 	bl	80036c0 <HAL_GetTick>
 8004f2a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b20      	cmp	r3, #32
 8004f36:	f040 8214 	bne.w	8005362 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	2319      	movs	r3, #25
 8004f40:	2201      	movs	r2, #1
 8004f42:	497b      	ldr	r1, [pc, #492]	@ (8005130 <HAL_I2C_Mem_Read+0x224>)
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f000 fc1f 	bl	8005788 <I2C_WaitOnFlagUntilTimeout>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004f50:	2302      	movs	r3, #2
 8004f52:	e207      	b.n	8005364 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d101      	bne.n	8004f62 <HAL_I2C_Mem_Read+0x56>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	e200      	b.n	8005364 <HAL_I2C_Mem_Read+0x458>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d007      	beq.n	8004f88 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f042 0201 	orr.w	r2, r2, #1
 8004f86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2222      	movs	r2, #34	@ 0x22
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2240      	movs	r2, #64	@ 0x40
 8004fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fb2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004fb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	4a5b      	ldr	r2, [pc, #364]	@ (8005134 <HAL_I2C_Mem_Read+0x228>)
 8004fc8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fca:	88f8      	ldrh	r0, [r7, #6]
 8004fcc:	893a      	ldrh	r2, [r7, #8]
 8004fce:	8979      	ldrh	r1, [r7, #10]
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd2:	9301      	str	r3, [sp, #4]
 8004fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	4603      	mov	r3, r0
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 faec 	bl	80055b8 <I2C_RequestMemoryRead>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e1bc      	b.n	8005364 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d113      	bne.n	800501a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	623b      	str	r3, [r7, #32]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	623b      	str	r3, [r7, #32]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	623b      	str	r3, [r7, #32]
 8005006:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005016:	601a      	str	r2, [r3, #0]
 8005018:	e190      	b.n	800533c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800501e:	2b01      	cmp	r3, #1
 8005020:	d11b      	bne.n	800505a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005030:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005032:	2300      	movs	r3, #0
 8005034:	61fb      	str	r3, [r7, #28]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	61fb      	str	r3, [r7, #28]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	61fb      	str	r3, [r7, #28]
 8005046:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	e170      	b.n	800533c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800505e:	2b02      	cmp	r3, #2
 8005060:	d11b      	bne.n	800509a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005070:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005080:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005082:	2300      	movs	r3, #0
 8005084:	61bb      	str	r3, [r7, #24]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	61bb      	str	r3, [r7, #24]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	61bb      	str	r3, [r7, #24]
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	e150      	b.n	800533c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800509a:	2300      	movs	r3, #0
 800509c:	617b      	str	r3, [r7, #20]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	617b      	str	r3, [r7, #20]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	617b      	str	r3, [r7, #20]
 80050ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80050b0:	e144      	b.n	800533c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050b6:	2b03      	cmp	r3, #3
 80050b8:	f200 80f1 	bhi.w	800529e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d123      	bne.n	800510c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050c6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f000 fd07 	bl	8005adc <I2C_WaitOnRXNEFlagUntilTimeout>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e145      	b.n	8005364 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	691a      	ldr	r2, [r3, #16]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ea:	1c5a      	adds	r2, r3, #1
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050f4:	3b01      	subs	r3, #1
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005100:	b29b      	uxth	r3, r3
 8005102:	3b01      	subs	r3, #1
 8005104:	b29a      	uxth	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800510a:	e117      	b.n	800533c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005110:	2b02      	cmp	r3, #2
 8005112:	d14e      	bne.n	80051b2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800511a:	2200      	movs	r2, #0
 800511c:	4906      	ldr	r1, [pc, #24]	@ (8005138 <HAL_I2C_Mem_Read+0x22c>)
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 fb32 	bl	8005788 <I2C_WaitOnFlagUntilTimeout>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d008      	beq.n	800513c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e11a      	b.n	8005364 <HAL_I2C_Mem_Read+0x458>
 800512e:	bf00      	nop
 8005130:	00100002 	.word	0x00100002
 8005134:	ffff0000 	.word	0xffff0000
 8005138:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800514a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	691a      	ldr	r2, [r3, #16]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005168:	3b01      	subs	r3, #1
 800516a:	b29a      	uxth	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005174:	b29b      	uxth	r3, r3
 8005176:	3b01      	subs	r3, #1
 8005178:	b29a      	uxth	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	691a      	ldr	r2, [r3, #16]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005188:	b2d2      	uxtb	r2, r2
 800518a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800519a:	3b01      	subs	r3, #1
 800519c:	b29a      	uxth	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80051b0:	e0c4      	b.n	800533c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b8:	2200      	movs	r2, #0
 80051ba:	496c      	ldr	r1, [pc, #432]	@ (800536c <HAL_I2C_Mem_Read+0x460>)
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 fae3 	bl	8005788 <I2C_WaitOnFlagUntilTimeout>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e0cb      	b.n	8005364 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	691a      	ldr	r2, [r3, #16]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051f8:	3b01      	subs	r3, #1
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005204:	b29b      	uxth	r3, r3
 8005206:	3b01      	subs	r3, #1
 8005208:	b29a      	uxth	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800520e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005214:	2200      	movs	r2, #0
 8005216:	4955      	ldr	r1, [pc, #340]	@ (800536c <HAL_I2C_Mem_Read+0x460>)
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 fab5 	bl	8005788 <I2C_WaitOnFlagUntilTimeout>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e09d      	b.n	8005364 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005236:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	691a      	ldr	r2, [r3, #16]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005242:	b2d2      	uxtb	r2, r2
 8005244:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524a:	1c5a      	adds	r2, r3, #1
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005254:	3b01      	subs	r3, #1
 8005256:	b29a      	uxth	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005260:	b29b      	uxth	r3, r3
 8005262:	3b01      	subs	r3, #1
 8005264:	b29a      	uxth	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	691a      	ldr	r2, [r3, #16]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005274:	b2d2      	uxtb	r2, r2
 8005276:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005286:	3b01      	subs	r3, #1
 8005288:	b29a      	uxth	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005292:	b29b      	uxth	r3, r3
 8005294:	3b01      	subs	r3, #1
 8005296:	b29a      	uxth	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800529c:	e04e      	b.n	800533c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800529e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052a0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 fc1a 	bl	8005adc <I2C_WaitOnRXNEFlagUntilTimeout>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e058      	b.n	8005364 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	691a      	ldr	r2, [r3, #16]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052bc:	b2d2      	uxtb	r2, r2
 80052be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c4:	1c5a      	adds	r2, r3, #1
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ce:	3b01      	subs	r3, #1
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052da:	b29b      	uxth	r3, r3
 80052dc:	3b01      	subs	r3, #1
 80052de:	b29a      	uxth	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	f003 0304 	and.w	r3, r3, #4
 80052ee:	2b04      	cmp	r3, #4
 80052f0:	d124      	bne.n	800533c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052f6:	2b03      	cmp	r3, #3
 80052f8:	d107      	bne.n	800530a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005308:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	691a      	ldr	r2, [r3, #16]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005314:	b2d2      	uxtb	r2, r2
 8005316:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005326:	3b01      	subs	r3, #1
 8005328:	b29a      	uxth	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005332:	b29b      	uxth	r3, r3
 8005334:	3b01      	subs	r3, #1
 8005336:	b29a      	uxth	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005340:	2b00      	cmp	r3, #0
 8005342:	f47f aeb6 	bne.w	80050b2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2220      	movs	r2, #32
 800534a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	e000      	b.n	8005364 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005362:	2302      	movs	r3, #2
  }
}
 8005364:	4618      	mov	r0, r3
 8005366:	3728      	adds	r7, #40	@ 0x28
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	00010004 	.word	0x00010004

08005370 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800537c:	4618      	mov	r0, r3
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b088      	sub	sp, #32
 800538c:	af02      	add	r7, sp, #8
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	607a      	str	r2, [r7, #4]
 8005392:	603b      	str	r3, [r7, #0]
 8005394:	460b      	mov	r3, r1
 8005396:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	d006      	beq.n	80053b2 <I2C_MasterRequestWrite+0x2a>
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d003      	beq.n	80053b2 <I2C_MasterRequestWrite+0x2a>
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80053b0:	d108      	bne.n	80053c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053c0:	601a      	str	r2, [r3, #0]
 80053c2:	e00b      	b.n	80053dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c8:	2b12      	cmp	r3, #18
 80053ca:	d107      	bne.n	80053dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 f9cd 	bl	8005788 <I2C_WaitOnFlagUntilTimeout>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00d      	beq.n	8005410 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005402:	d103      	bne.n	800540c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800540a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e035      	b.n	800547c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005418:	d108      	bne.n	800542c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800541a:	897b      	ldrh	r3, [r7, #10]
 800541c:	b2db      	uxtb	r3, r3
 800541e:	461a      	mov	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005428:	611a      	str	r2, [r3, #16]
 800542a:	e01b      	b.n	8005464 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800542c:	897b      	ldrh	r3, [r7, #10]
 800542e:	11db      	asrs	r3, r3, #7
 8005430:	b2db      	uxtb	r3, r3
 8005432:	f003 0306 	and.w	r3, r3, #6
 8005436:	b2db      	uxtb	r3, r3
 8005438:	f063 030f 	orn	r3, r3, #15
 800543c:	b2da      	uxtb	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	490e      	ldr	r1, [pc, #56]	@ (8005484 <I2C_MasterRequestWrite+0xfc>)
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f000 fa16 	bl	800587c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d001      	beq.n	800545a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e010      	b.n	800547c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800545a:	897b      	ldrh	r3, [r7, #10]
 800545c:	b2da      	uxtb	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	4907      	ldr	r1, [pc, #28]	@ (8005488 <I2C_MasterRequestWrite+0x100>)
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f000 fa06 	bl	800587c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e000      	b.n	800547c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3718      	adds	r7, #24
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	00010008 	.word	0x00010008
 8005488:	00010002 	.word	0x00010002

0800548c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b088      	sub	sp, #32
 8005490:	af02      	add	r7, sp, #8
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	4608      	mov	r0, r1
 8005496:	4611      	mov	r1, r2
 8005498:	461a      	mov	r2, r3
 800549a:	4603      	mov	r3, r0
 800549c:	817b      	strh	r3, [r7, #10]
 800549e:	460b      	mov	r3, r1
 80054a0:	813b      	strh	r3, [r7, #8]
 80054a2:	4613      	mov	r3, r2
 80054a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	6a3b      	ldr	r3, [r7, #32]
 80054bc:	2200      	movs	r2, #0
 80054be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f000 f960 	bl	8005788 <I2C_WaitOnFlagUntilTimeout>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00d      	beq.n	80054ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054dc:	d103      	bne.n	80054e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e05f      	b.n	80055aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054ea:	897b      	ldrh	r3, [r7, #10]
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	461a      	mov	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80054f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fc:	6a3a      	ldr	r2, [r7, #32]
 80054fe:	492d      	ldr	r1, [pc, #180]	@ (80055b4 <I2C_RequestMemoryWrite+0x128>)
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 f9bb 	bl	800587c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e04c      	b.n	80055aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005510:	2300      	movs	r3, #0
 8005512:	617b      	str	r3, [r7, #20]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	617b      	str	r3, [r7, #20]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	617b      	str	r3, [r7, #20]
 8005524:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005528:	6a39      	ldr	r1, [r7, #32]
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f000 fa46 	bl	80059bc <I2C_WaitOnTXEFlagUntilTimeout>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00d      	beq.n	8005552 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553a:	2b04      	cmp	r3, #4
 800553c:	d107      	bne.n	800554e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800554c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e02b      	b.n	80055aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005552:	88fb      	ldrh	r3, [r7, #6]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d105      	bne.n	8005564 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005558:	893b      	ldrh	r3, [r7, #8]
 800555a:	b2da      	uxtb	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	611a      	str	r2, [r3, #16]
 8005562:	e021      	b.n	80055a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005564:	893b      	ldrh	r3, [r7, #8]
 8005566:	0a1b      	lsrs	r3, r3, #8
 8005568:	b29b      	uxth	r3, r3
 800556a:	b2da      	uxtb	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005574:	6a39      	ldr	r1, [r7, #32]
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f000 fa20 	bl	80059bc <I2C_WaitOnTXEFlagUntilTimeout>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00d      	beq.n	800559e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005586:	2b04      	cmp	r3, #4
 8005588:	d107      	bne.n	800559a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005598:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e005      	b.n	80055aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800559e:	893b      	ldrh	r3, [r7, #8]
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3718      	adds	r7, #24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	00010002 	.word	0x00010002

080055b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b088      	sub	sp, #32
 80055bc:	af02      	add	r7, sp, #8
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	4608      	mov	r0, r1
 80055c2:	4611      	mov	r1, r2
 80055c4:	461a      	mov	r2, r3
 80055c6:	4603      	mov	r3, r0
 80055c8:	817b      	strh	r3, [r7, #10]
 80055ca:	460b      	mov	r3, r1
 80055cc:	813b      	strh	r3, [r7, #8]
 80055ce:	4613      	mov	r3, r2
 80055d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80055e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	6a3b      	ldr	r3, [r7, #32]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f000 f8c2 	bl	8005788 <I2C_WaitOnFlagUntilTimeout>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00d      	beq.n	8005626 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005614:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005618:	d103      	bne.n	8005622 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005620:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e0aa      	b.n	800577c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005626:	897b      	ldrh	r3, [r7, #10]
 8005628:	b2db      	uxtb	r3, r3
 800562a:	461a      	mov	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005634:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005638:	6a3a      	ldr	r2, [r7, #32]
 800563a:	4952      	ldr	r1, [pc, #328]	@ (8005784 <I2C_RequestMemoryRead+0x1cc>)
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 f91d 	bl	800587c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e097      	b.n	800577c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800564c:	2300      	movs	r3, #0
 800564e:	617b      	str	r3, [r7, #20]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	617b      	str	r3, [r7, #20]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	617b      	str	r3, [r7, #20]
 8005660:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005662:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005664:	6a39      	ldr	r1, [r7, #32]
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 f9a8 	bl	80059bc <I2C_WaitOnTXEFlagUntilTimeout>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00d      	beq.n	800568e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005676:	2b04      	cmp	r3, #4
 8005678:	d107      	bne.n	800568a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005688:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e076      	b.n	800577c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800568e:	88fb      	ldrh	r3, [r7, #6]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d105      	bne.n	80056a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005694:	893b      	ldrh	r3, [r7, #8]
 8005696:	b2da      	uxtb	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	611a      	str	r2, [r3, #16]
 800569e:	e021      	b.n	80056e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80056a0:	893b      	ldrh	r3, [r7, #8]
 80056a2:	0a1b      	lsrs	r3, r3, #8
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056b0:	6a39      	ldr	r1, [r7, #32]
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 f982 	bl	80059bc <I2C_WaitOnTXEFlagUntilTimeout>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00d      	beq.n	80056da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	d107      	bne.n	80056d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e050      	b.n	800577c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056da:	893b      	ldrh	r3, [r7, #8]
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056e6:	6a39      	ldr	r1, [r7, #32]
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f000 f967 	bl	80059bc <I2C_WaitOnTXEFlagUntilTimeout>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00d      	beq.n	8005710 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f8:	2b04      	cmp	r3, #4
 80056fa:	d107      	bne.n	800570c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800570a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e035      	b.n	800577c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800571e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	2200      	movs	r2, #0
 8005728:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 f82b 	bl	8005788 <I2C_WaitOnFlagUntilTimeout>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00d      	beq.n	8005754 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005742:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005746:	d103      	bne.n	8005750 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800574e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e013      	b.n	800577c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005754:	897b      	ldrh	r3, [r7, #10]
 8005756:	b2db      	uxtb	r3, r3
 8005758:	f043 0301 	orr.w	r3, r3, #1
 800575c:	b2da      	uxtb	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005766:	6a3a      	ldr	r2, [r7, #32]
 8005768:	4906      	ldr	r1, [pc, #24]	@ (8005784 <I2C_RequestMemoryRead+0x1cc>)
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 f886 	bl	800587c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e000      	b.n	800577c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3718      	adds	r7, #24
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	00010002 	.word	0x00010002

08005788 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	603b      	str	r3, [r7, #0]
 8005794:	4613      	mov	r3, r2
 8005796:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005798:	e048      	b.n	800582c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057a0:	d044      	beq.n	800582c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057a2:	f7fd ff8d 	bl	80036c0 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d302      	bcc.n	80057b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d139      	bne.n	800582c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	0c1b      	lsrs	r3, r3, #16
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d10d      	bne.n	80057de <I2C_WaitOnFlagUntilTimeout+0x56>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	43da      	mvns	r2, r3
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	4013      	ands	r3, r2
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	bf0c      	ite	eq
 80057d4:	2301      	moveq	r3, #1
 80057d6:	2300      	movne	r3, #0
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	461a      	mov	r2, r3
 80057dc:	e00c      	b.n	80057f8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	43da      	mvns	r2, r3
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	4013      	ands	r3, r2
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	bf0c      	ite	eq
 80057f0:	2301      	moveq	r3, #1
 80057f2:	2300      	movne	r3, #0
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	461a      	mov	r2, r3
 80057f8:	79fb      	ldrb	r3, [r7, #7]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d116      	bne.n	800582c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2220      	movs	r2, #32
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005818:	f043 0220 	orr.w	r2, r3, #32
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e023      	b.n	8005874 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	0c1b      	lsrs	r3, r3, #16
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b01      	cmp	r3, #1
 8005834:	d10d      	bne.n	8005852 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	43da      	mvns	r2, r3
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	4013      	ands	r3, r2
 8005842:	b29b      	uxth	r3, r3
 8005844:	2b00      	cmp	r3, #0
 8005846:	bf0c      	ite	eq
 8005848:	2301      	moveq	r3, #1
 800584a:	2300      	movne	r3, #0
 800584c:	b2db      	uxtb	r3, r3
 800584e:	461a      	mov	r2, r3
 8005850:	e00c      	b.n	800586c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	43da      	mvns	r2, r3
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	4013      	ands	r3, r2
 800585e:	b29b      	uxth	r3, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	bf0c      	ite	eq
 8005864:	2301      	moveq	r3, #1
 8005866:	2300      	movne	r3, #0
 8005868:	b2db      	uxtb	r3, r3
 800586a:	461a      	mov	r2, r3
 800586c:	79fb      	ldrb	r3, [r7, #7]
 800586e:	429a      	cmp	r2, r3
 8005870:	d093      	beq.n	800579a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
 8005888:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800588a:	e071      	b.n	8005970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005896:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800589a:	d123      	bne.n	80058e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80058b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2220      	movs	r2, #32
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d0:	f043 0204 	orr.w	r2, r3, #4
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e067      	b.n	80059b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058ea:	d041      	beq.n	8005970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ec:	f7fd fee8 	bl	80036c0 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d302      	bcc.n	8005902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d136      	bne.n	8005970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	0c1b      	lsrs	r3, r3, #16
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b01      	cmp	r3, #1
 800590a:	d10c      	bne.n	8005926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	43da      	mvns	r2, r3
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	4013      	ands	r3, r2
 8005918:	b29b      	uxth	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	bf14      	ite	ne
 800591e:	2301      	movne	r3, #1
 8005920:	2300      	moveq	r3, #0
 8005922:	b2db      	uxtb	r3, r3
 8005924:	e00b      	b.n	800593e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	43da      	mvns	r2, r3
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	4013      	ands	r3, r2
 8005932:	b29b      	uxth	r3, r3
 8005934:	2b00      	cmp	r3, #0
 8005936:	bf14      	ite	ne
 8005938:	2301      	movne	r3, #1
 800593a:	2300      	moveq	r3, #0
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d016      	beq.n	8005970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2220      	movs	r2, #32
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595c:	f043 0220 	orr.w	r2, r3, #32
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e021      	b.n	80059b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	0c1b      	lsrs	r3, r3, #16
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b01      	cmp	r3, #1
 8005978:	d10c      	bne.n	8005994 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	695b      	ldr	r3, [r3, #20]
 8005980:	43da      	mvns	r2, r3
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	4013      	ands	r3, r2
 8005986:	b29b      	uxth	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	bf14      	ite	ne
 800598c:	2301      	movne	r3, #1
 800598e:	2300      	moveq	r3, #0
 8005990:	b2db      	uxtb	r3, r3
 8005992:	e00b      	b.n	80059ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	43da      	mvns	r2, r3
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	4013      	ands	r3, r2
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	bf14      	ite	ne
 80059a6:	2301      	movne	r3, #1
 80059a8:	2300      	moveq	r3, #0
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f47f af6d 	bne.w	800588c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059c8:	e034      	b.n	8005a34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f000 f8e3 	bl	8005b96 <I2C_IsAcknowledgeFailed>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e034      	b.n	8005a44 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059e0:	d028      	beq.n	8005a34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059e2:	f7fd fe6d 	bl	80036c0 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d302      	bcc.n	80059f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d11d      	bne.n	8005a34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a02:	2b80      	cmp	r3, #128	@ 0x80
 8005a04:	d016      	beq.n	8005a34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a20:	f043 0220 	orr.w	r2, r3, #32
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e007      	b.n	8005a44 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a3e:	2b80      	cmp	r3, #128	@ 0x80
 8005a40:	d1c3      	bne.n	80059ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a58:	e034      	b.n	8005ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f000 f89b 	bl	8005b96 <I2C_IsAcknowledgeFailed>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d001      	beq.n	8005a6a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e034      	b.n	8005ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a70:	d028      	beq.n	8005ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a72:	f7fd fe25 	bl	80036c0 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d302      	bcc.n	8005a88 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d11d      	bne.n	8005ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	f003 0304 	and.w	r3, r3, #4
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	d016      	beq.n	8005ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab0:	f043 0220 	orr.w	r2, r3, #32
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e007      	b.n	8005ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	f003 0304 	and.w	r3, r3, #4
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d1c3      	bne.n	8005a5a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ae8:	e049      	b.n	8005b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	f003 0310 	and.w	r3, r3, #16
 8005af4:	2b10      	cmp	r3, #16
 8005af6:	d119      	bne.n	8005b2c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f06f 0210 	mvn.w	r2, #16
 8005b00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2220      	movs	r2, #32
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e030      	b.n	8005b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b2c:	f7fd fdc8 	bl	80036c0 <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d302      	bcc.n	8005b42 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d11d      	bne.n	8005b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b4c:	2b40      	cmp	r3, #64	@ 0x40
 8005b4e:	d016      	beq.n	8005b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6a:	f043 0220 	orr.w	r2, r3, #32
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e007      	b.n	8005b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b88:	2b40      	cmp	r3, #64	@ 0x40
 8005b8a:	d1ae      	bne.n	8005aea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b083      	sub	sp, #12
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ba8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bac:	d11b      	bne.n	8005be6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005bb6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd2:	f043 0204 	orr.w	r2, r3, #4
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e000      	b.n	8005be8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e0cc      	b.n	8005da2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c08:	4b68      	ldr	r3, [pc, #416]	@ (8005dac <HAL_RCC_ClockConfig+0x1b8>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 030f 	and.w	r3, r3, #15
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d90c      	bls.n	8005c30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c16:	4b65      	ldr	r3, [pc, #404]	@ (8005dac <HAL_RCC_ClockConfig+0x1b8>)
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	b2d2      	uxtb	r2, r2
 8005c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c1e:	4b63      	ldr	r3, [pc, #396]	@ (8005dac <HAL_RCC_ClockConfig+0x1b8>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 030f 	and.w	r3, r3, #15
 8005c26:	683a      	ldr	r2, [r7, #0]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d001      	beq.n	8005c30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e0b8      	b.n	8005da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0302 	and.w	r3, r3, #2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d020      	beq.n	8005c7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0304 	and.w	r3, r3, #4
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d005      	beq.n	8005c54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c48:	4b59      	ldr	r3, [pc, #356]	@ (8005db0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	4a58      	ldr	r2, [pc, #352]	@ (8005db0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c4e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005c52:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0308 	and.w	r3, r3, #8
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d005      	beq.n	8005c6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c60:	4b53      	ldr	r3, [pc, #332]	@ (8005db0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	4a52      	ldr	r2, [pc, #328]	@ (8005db0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c66:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005c6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c6c:	4b50      	ldr	r3, [pc, #320]	@ (8005db0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	494d      	ldr	r1, [pc, #308]	@ (8005db0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d044      	beq.n	8005d14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d107      	bne.n	8005ca2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c92:	4b47      	ldr	r3, [pc, #284]	@ (8005db0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d119      	bne.n	8005cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e07f      	b.n	8005da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d003      	beq.n	8005cb2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cae:	2b03      	cmp	r3, #3
 8005cb0:	d107      	bne.n	8005cc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cb2:	4b3f      	ldr	r3, [pc, #252]	@ (8005db0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d109      	bne.n	8005cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e06f      	b.n	8005da2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cc2:	4b3b      	ldr	r3, [pc, #236]	@ (8005db0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0302 	and.w	r3, r3, #2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e067      	b.n	8005da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cd2:	4b37      	ldr	r3, [pc, #220]	@ (8005db0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f023 0203 	bic.w	r2, r3, #3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	4934      	ldr	r1, [pc, #208]	@ (8005db0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ce4:	f7fd fcec 	bl	80036c0 <HAL_GetTick>
 8005ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cea:	e00a      	b.n	8005d02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cec:	f7fd fce8 	bl	80036c0 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e04f      	b.n	8005da2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d02:	4b2b      	ldr	r3, [pc, #172]	@ (8005db0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f003 020c 	and.w	r2, r3, #12
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d1eb      	bne.n	8005cec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d14:	4b25      	ldr	r3, [pc, #148]	@ (8005dac <HAL_RCC_ClockConfig+0x1b8>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 030f 	and.w	r3, r3, #15
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d20c      	bcs.n	8005d3c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d22:	4b22      	ldr	r3, [pc, #136]	@ (8005dac <HAL_RCC_ClockConfig+0x1b8>)
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	b2d2      	uxtb	r2, r2
 8005d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d2a:	4b20      	ldr	r3, [pc, #128]	@ (8005dac <HAL_RCC_ClockConfig+0x1b8>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 030f 	and.w	r3, r3, #15
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d001      	beq.n	8005d3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e032      	b.n	8005da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0304 	and.w	r3, r3, #4
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d008      	beq.n	8005d5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d48:	4b19      	ldr	r3, [pc, #100]	@ (8005db0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	4916      	ldr	r1, [pc, #88]	@ (8005db0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0308 	and.w	r3, r3, #8
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d009      	beq.n	8005d7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d66:	4b12      	ldr	r3, [pc, #72]	@ (8005db0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	00db      	lsls	r3, r3, #3
 8005d74:	490e      	ldr	r1, [pc, #56]	@ (8005db0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d7a:	f000 f855 	bl	8005e28 <HAL_RCC_GetSysClockFreq>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	4b0b      	ldr	r3, [pc, #44]	@ (8005db0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	091b      	lsrs	r3, r3, #4
 8005d86:	f003 030f 	and.w	r3, r3, #15
 8005d8a:	490a      	ldr	r1, [pc, #40]	@ (8005db4 <HAL_RCC_ClockConfig+0x1c0>)
 8005d8c:	5ccb      	ldrb	r3, [r1, r3]
 8005d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d92:	4a09      	ldr	r2, [pc, #36]	@ (8005db8 <HAL_RCC_ClockConfig+0x1c4>)
 8005d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005d96:	4b09      	ldr	r3, [pc, #36]	@ (8005dbc <HAL_RCC_ClockConfig+0x1c8>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7fd fc4c 	bl	8003638 <HAL_InitTick>

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	40023c00 	.word	0x40023c00
 8005db0:	40023800 	.word	0x40023800
 8005db4:	08010748 	.word	0x08010748
 8005db8:	20000000 	.word	0x20000000
 8005dbc:	20000004 	.word	0x20000004

08005dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dc4:	4b03      	ldr	r3, [pc, #12]	@ (8005dd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	20000000 	.word	0x20000000

08005dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ddc:	f7ff fff0 	bl	8005dc0 <HAL_RCC_GetHCLKFreq>
 8005de0:	4602      	mov	r2, r0
 8005de2:	4b05      	ldr	r3, [pc, #20]	@ (8005df8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	0a9b      	lsrs	r3, r3, #10
 8005de8:	f003 0307 	and.w	r3, r3, #7
 8005dec:	4903      	ldr	r1, [pc, #12]	@ (8005dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dee:	5ccb      	ldrb	r3, [r1, r3]
 8005df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	40023800 	.word	0x40023800
 8005dfc:	08010758 	.word	0x08010758

08005e00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e04:	f7ff ffdc 	bl	8005dc0 <HAL_RCC_GetHCLKFreq>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	4b05      	ldr	r3, [pc, #20]	@ (8005e20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	0b5b      	lsrs	r3, r3, #13
 8005e10:	f003 0307 	and.w	r3, r3, #7
 8005e14:	4903      	ldr	r1, [pc, #12]	@ (8005e24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e16:	5ccb      	ldrb	r3, [r1, r3]
 8005e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	40023800 	.word	0x40023800
 8005e24:	08010758 	.word	0x08010758

08005e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e2c:	b0ae      	sub	sp, #184	@ 0xb8
 8005e2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005e36:	2300      	movs	r3, #0
 8005e38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005e42:	2300      	movs	r3, #0
 8005e44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e4e:	4bcb      	ldr	r3, [pc, #812]	@ (800617c <HAL_RCC_GetSysClockFreq+0x354>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f003 030c 	and.w	r3, r3, #12
 8005e56:	2b0c      	cmp	r3, #12
 8005e58:	f200 8206 	bhi.w	8006268 <HAL_RCC_GetSysClockFreq+0x440>
 8005e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8005e64 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e62:	bf00      	nop
 8005e64:	08005e99 	.word	0x08005e99
 8005e68:	08006269 	.word	0x08006269
 8005e6c:	08006269 	.word	0x08006269
 8005e70:	08006269 	.word	0x08006269
 8005e74:	08005ea1 	.word	0x08005ea1
 8005e78:	08006269 	.word	0x08006269
 8005e7c:	08006269 	.word	0x08006269
 8005e80:	08006269 	.word	0x08006269
 8005e84:	08005ea9 	.word	0x08005ea9
 8005e88:	08006269 	.word	0x08006269
 8005e8c:	08006269 	.word	0x08006269
 8005e90:	08006269 	.word	0x08006269
 8005e94:	08006099 	.word	0x08006099
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e98:	4bb9      	ldr	r3, [pc, #740]	@ (8006180 <HAL_RCC_GetSysClockFreq+0x358>)
 8005e9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005e9e:	e1e7      	b.n	8006270 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ea0:	4bb8      	ldr	r3, [pc, #736]	@ (8006184 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005ea2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005ea6:	e1e3      	b.n	8006270 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ea8:	4bb4      	ldr	r3, [pc, #720]	@ (800617c <HAL_RCC_GetSysClockFreq+0x354>)
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005eb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005eb4:	4bb1      	ldr	r3, [pc, #708]	@ (800617c <HAL_RCC_GetSysClockFreq+0x354>)
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d071      	beq.n	8005fa4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ec0:	4bae      	ldr	r3, [pc, #696]	@ (800617c <HAL_RCC_GetSysClockFreq+0x354>)
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	099b      	lsrs	r3, r3, #6
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ecc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005ed0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ed8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005edc:	2300      	movs	r3, #0
 8005ede:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005ee2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005ee6:	4622      	mov	r2, r4
 8005ee8:	462b      	mov	r3, r5
 8005eea:	f04f 0000 	mov.w	r0, #0
 8005eee:	f04f 0100 	mov.w	r1, #0
 8005ef2:	0159      	lsls	r1, r3, #5
 8005ef4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ef8:	0150      	lsls	r0, r2, #5
 8005efa:	4602      	mov	r2, r0
 8005efc:	460b      	mov	r3, r1
 8005efe:	4621      	mov	r1, r4
 8005f00:	1a51      	subs	r1, r2, r1
 8005f02:	6439      	str	r1, [r7, #64]	@ 0x40
 8005f04:	4629      	mov	r1, r5
 8005f06:	eb63 0301 	sbc.w	r3, r3, r1
 8005f0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f0c:	f04f 0200 	mov.w	r2, #0
 8005f10:	f04f 0300 	mov.w	r3, #0
 8005f14:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005f18:	4649      	mov	r1, r9
 8005f1a:	018b      	lsls	r3, r1, #6
 8005f1c:	4641      	mov	r1, r8
 8005f1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f22:	4641      	mov	r1, r8
 8005f24:	018a      	lsls	r2, r1, #6
 8005f26:	4641      	mov	r1, r8
 8005f28:	1a51      	subs	r1, r2, r1
 8005f2a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f2c:	4649      	mov	r1, r9
 8005f2e:	eb63 0301 	sbc.w	r3, r3, r1
 8005f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f34:	f04f 0200 	mov.w	r2, #0
 8005f38:	f04f 0300 	mov.w	r3, #0
 8005f3c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005f40:	4649      	mov	r1, r9
 8005f42:	00cb      	lsls	r3, r1, #3
 8005f44:	4641      	mov	r1, r8
 8005f46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f4a:	4641      	mov	r1, r8
 8005f4c:	00ca      	lsls	r2, r1, #3
 8005f4e:	4610      	mov	r0, r2
 8005f50:	4619      	mov	r1, r3
 8005f52:	4603      	mov	r3, r0
 8005f54:	4622      	mov	r2, r4
 8005f56:	189b      	adds	r3, r3, r2
 8005f58:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f5a:	462b      	mov	r3, r5
 8005f5c:	460a      	mov	r2, r1
 8005f5e:	eb42 0303 	adc.w	r3, r2, r3
 8005f62:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f64:	f04f 0200 	mov.w	r2, #0
 8005f68:	f04f 0300 	mov.w	r3, #0
 8005f6c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005f70:	4629      	mov	r1, r5
 8005f72:	024b      	lsls	r3, r1, #9
 8005f74:	4621      	mov	r1, r4
 8005f76:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f7a:	4621      	mov	r1, r4
 8005f7c:	024a      	lsls	r2, r1, #9
 8005f7e:	4610      	mov	r0, r2
 8005f80:	4619      	mov	r1, r3
 8005f82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f86:	2200      	movs	r2, #0
 8005f88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005f90:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005f94:	f7fa fe78 	bl	8000c88 <__aeabi_uldivmod>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fa2:	e067      	b.n	8006074 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fa4:	4b75      	ldr	r3, [pc, #468]	@ (800617c <HAL_RCC_GetSysClockFreq+0x354>)
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	099b      	lsrs	r3, r3, #6
 8005faa:	2200      	movs	r2, #0
 8005fac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005fb0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005fb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005fc2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005fc6:	4622      	mov	r2, r4
 8005fc8:	462b      	mov	r3, r5
 8005fca:	f04f 0000 	mov.w	r0, #0
 8005fce:	f04f 0100 	mov.w	r1, #0
 8005fd2:	0159      	lsls	r1, r3, #5
 8005fd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fd8:	0150      	lsls	r0, r2, #5
 8005fda:	4602      	mov	r2, r0
 8005fdc:	460b      	mov	r3, r1
 8005fde:	4621      	mov	r1, r4
 8005fe0:	1a51      	subs	r1, r2, r1
 8005fe2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005fe4:	4629      	mov	r1, r5
 8005fe6:	eb63 0301 	sbc.w	r3, r3, r1
 8005fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fec:	f04f 0200 	mov.w	r2, #0
 8005ff0:	f04f 0300 	mov.w	r3, #0
 8005ff4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005ff8:	4649      	mov	r1, r9
 8005ffa:	018b      	lsls	r3, r1, #6
 8005ffc:	4641      	mov	r1, r8
 8005ffe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006002:	4641      	mov	r1, r8
 8006004:	018a      	lsls	r2, r1, #6
 8006006:	4641      	mov	r1, r8
 8006008:	ebb2 0a01 	subs.w	sl, r2, r1
 800600c:	4649      	mov	r1, r9
 800600e:	eb63 0b01 	sbc.w	fp, r3, r1
 8006012:	f04f 0200 	mov.w	r2, #0
 8006016:	f04f 0300 	mov.w	r3, #0
 800601a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800601e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006022:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006026:	4692      	mov	sl, r2
 8006028:	469b      	mov	fp, r3
 800602a:	4623      	mov	r3, r4
 800602c:	eb1a 0303 	adds.w	r3, sl, r3
 8006030:	623b      	str	r3, [r7, #32]
 8006032:	462b      	mov	r3, r5
 8006034:	eb4b 0303 	adc.w	r3, fp, r3
 8006038:	627b      	str	r3, [r7, #36]	@ 0x24
 800603a:	f04f 0200 	mov.w	r2, #0
 800603e:	f04f 0300 	mov.w	r3, #0
 8006042:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006046:	4629      	mov	r1, r5
 8006048:	028b      	lsls	r3, r1, #10
 800604a:	4621      	mov	r1, r4
 800604c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006050:	4621      	mov	r1, r4
 8006052:	028a      	lsls	r2, r1, #10
 8006054:	4610      	mov	r0, r2
 8006056:	4619      	mov	r1, r3
 8006058:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800605c:	2200      	movs	r2, #0
 800605e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006060:	677a      	str	r2, [r7, #116]	@ 0x74
 8006062:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006066:	f7fa fe0f 	bl	8000c88 <__aeabi_uldivmod>
 800606a:	4602      	mov	r2, r0
 800606c:	460b      	mov	r3, r1
 800606e:	4613      	mov	r3, r2
 8006070:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006074:	4b41      	ldr	r3, [pc, #260]	@ (800617c <HAL_RCC_GetSysClockFreq+0x354>)
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	0c1b      	lsrs	r3, r3, #16
 800607a:	f003 0303 	and.w	r3, r3, #3
 800607e:	3301      	adds	r3, #1
 8006080:	005b      	lsls	r3, r3, #1
 8006082:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8006086:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800608a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800608e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006092:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006096:	e0eb      	b.n	8006270 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006098:	4b38      	ldr	r3, [pc, #224]	@ (800617c <HAL_RCC_GetSysClockFreq+0x354>)
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060a4:	4b35      	ldr	r3, [pc, #212]	@ (800617c <HAL_RCC_GetSysClockFreq+0x354>)
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d06b      	beq.n	8006188 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060b0:	4b32      	ldr	r3, [pc, #200]	@ (800617c <HAL_RCC_GetSysClockFreq+0x354>)
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	099b      	lsrs	r3, r3, #6
 80060b6:	2200      	movs	r2, #0
 80060b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80060bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80060c4:	2300      	movs	r3, #0
 80060c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80060c8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80060cc:	4622      	mov	r2, r4
 80060ce:	462b      	mov	r3, r5
 80060d0:	f04f 0000 	mov.w	r0, #0
 80060d4:	f04f 0100 	mov.w	r1, #0
 80060d8:	0159      	lsls	r1, r3, #5
 80060da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060de:	0150      	lsls	r0, r2, #5
 80060e0:	4602      	mov	r2, r0
 80060e2:	460b      	mov	r3, r1
 80060e4:	4621      	mov	r1, r4
 80060e6:	1a51      	subs	r1, r2, r1
 80060e8:	61b9      	str	r1, [r7, #24]
 80060ea:	4629      	mov	r1, r5
 80060ec:	eb63 0301 	sbc.w	r3, r3, r1
 80060f0:	61fb      	str	r3, [r7, #28]
 80060f2:	f04f 0200 	mov.w	r2, #0
 80060f6:	f04f 0300 	mov.w	r3, #0
 80060fa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80060fe:	4659      	mov	r1, fp
 8006100:	018b      	lsls	r3, r1, #6
 8006102:	4651      	mov	r1, sl
 8006104:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006108:	4651      	mov	r1, sl
 800610a:	018a      	lsls	r2, r1, #6
 800610c:	4651      	mov	r1, sl
 800610e:	ebb2 0801 	subs.w	r8, r2, r1
 8006112:	4659      	mov	r1, fp
 8006114:	eb63 0901 	sbc.w	r9, r3, r1
 8006118:	f04f 0200 	mov.w	r2, #0
 800611c:	f04f 0300 	mov.w	r3, #0
 8006120:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006124:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006128:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800612c:	4690      	mov	r8, r2
 800612e:	4699      	mov	r9, r3
 8006130:	4623      	mov	r3, r4
 8006132:	eb18 0303 	adds.w	r3, r8, r3
 8006136:	613b      	str	r3, [r7, #16]
 8006138:	462b      	mov	r3, r5
 800613a:	eb49 0303 	adc.w	r3, r9, r3
 800613e:	617b      	str	r3, [r7, #20]
 8006140:	f04f 0200 	mov.w	r2, #0
 8006144:	f04f 0300 	mov.w	r3, #0
 8006148:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800614c:	4629      	mov	r1, r5
 800614e:	024b      	lsls	r3, r1, #9
 8006150:	4621      	mov	r1, r4
 8006152:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006156:	4621      	mov	r1, r4
 8006158:	024a      	lsls	r2, r1, #9
 800615a:	4610      	mov	r0, r2
 800615c:	4619      	mov	r1, r3
 800615e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006162:	2200      	movs	r2, #0
 8006164:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006166:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006168:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800616c:	f7fa fd8c 	bl	8000c88 <__aeabi_uldivmod>
 8006170:	4602      	mov	r2, r0
 8006172:	460b      	mov	r3, r1
 8006174:	4613      	mov	r3, r2
 8006176:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800617a:	e065      	b.n	8006248 <HAL_RCC_GetSysClockFreq+0x420>
 800617c:	40023800 	.word	0x40023800
 8006180:	00f42400 	.word	0x00f42400
 8006184:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006188:	4b3d      	ldr	r3, [pc, #244]	@ (8006280 <HAL_RCC_GetSysClockFreq+0x458>)
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	099b      	lsrs	r3, r3, #6
 800618e:	2200      	movs	r2, #0
 8006190:	4618      	mov	r0, r3
 8006192:	4611      	mov	r1, r2
 8006194:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006198:	653b      	str	r3, [r7, #80]	@ 0x50
 800619a:	2300      	movs	r3, #0
 800619c:	657b      	str	r3, [r7, #84]	@ 0x54
 800619e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80061a2:	4642      	mov	r2, r8
 80061a4:	464b      	mov	r3, r9
 80061a6:	f04f 0000 	mov.w	r0, #0
 80061aa:	f04f 0100 	mov.w	r1, #0
 80061ae:	0159      	lsls	r1, r3, #5
 80061b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061b4:	0150      	lsls	r0, r2, #5
 80061b6:	4602      	mov	r2, r0
 80061b8:	460b      	mov	r3, r1
 80061ba:	4641      	mov	r1, r8
 80061bc:	1a51      	subs	r1, r2, r1
 80061be:	60b9      	str	r1, [r7, #8]
 80061c0:	4649      	mov	r1, r9
 80061c2:	eb63 0301 	sbc.w	r3, r3, r1
 80061c6:	60fb      	str	r3, [r7, #12]
 80061c8:	f04f 0200 	mov.w	r2, #0
 80061cc:	f04f 0300 	mov.w	r3, #0
 80061d0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80061d4:	4659      	mov	r1, fp
 80061d6:	018b      	lsls	r3, r1, #6
 80061d8:	4651      	mov	r1, sl
 80061da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80061de:	4651      	mov	r1, sl
 80061e0:	018a      	lsls	r2, r1, #6
 80061e2:	4651      	mov	r1, sl
 80061e4:	1a54      	subs	r4, r2, r1
 80061e6:	4659      	mov	r1, fp
 80061e8:	eb63 0501 	sbc.w	r5, r3, r1
 80061ec:	f04f 0200 	mov.w	r2, #0
 80061f0:	f04f 0300 	mov.w	r3, #0
 80061f4:	00eb      	lsls	r3, r5, #3
 80061f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061fa:	00e2      	lsls	r2, r4, #3
 80061fc:	4614      	mov	r4, r2
 80061fe:	461d      	mov	r5, r3
 8006200:	4643      	mov	r3, r8
 8006202:	18e3      	adds	r3, r4, r3
 8006204:	603b      	str	r3, [r7, #0]
 8006206:	464b      	mov	r3, r9
 8006208:	eb45 0303 	adc.w	r3, r5, r3
 800620c:	607b      	str	r3, [r7, #4]
 800620e:	f04f 0200 	mov.w	r2, #0
 8006212:	f04f 0300 	mov.w	r3, #0
 8006216:	e9d7 4500 	ldrd	r4, r5, [r7]
 800621a:	4629      	mov	r1, r5
 800621c:	028b      	lsls	r3, r1, #10
 800621e:	4621      	mov	r1, r4
 8006220:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006224:	4621      	mov	r1, r4
 8006226:	028a      	lsls	r2, r1, #10
 8006228:	4610      	mov	r0, r2
 800622a:	4619      	mov	r1, r3
 800622c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006230:	2200      	movs	r2, #0
 8006232:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006234:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006236:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800623a:	f7fa fd25 	bl	8000c88 <__aeabi_uldivmod>
 800623e:	4602      	mov	r2, r0
 8006240:	460b      	mov	r3, r1
 8006242:	4613      	mov	r3, r2
 8006244:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006248:	4b0d      	ldr	r3, [pc, #52]	@ (8006280 <HAL_RCC_GetSysClockFreq+0x458>)
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	0f1b      	lsrs	r3, r3, #28
 800624e:	f003 0307 	and.w	r3, r3, #7
 8006252:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8006256:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800625a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800625e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006262:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006266:	e003      	b.n	8006270 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006268:	4b06      	ldr	r3, [pc, #24]	@ (8006284 <HAL_RCC_GetSysClockFreq+0x45c>)
 800626a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800626e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006270:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8006274:	4618      	mov	r0, r3
 8006276:	37b8      	adds	r7, #184	@ 0xb8
 8006278:	46bd      	mov	sp, r7
 800627a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800627e:	bf00      	nop
 8006280:	40023800 	.word	0x40023800
 8006284:	00f42400 	.word	0x00f42400

08006288 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e28d      	b.n	80067b6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 8083 	beq.w	80063ae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80062a8:	4b94      	ldr	r3, [pc, #592]	@ (80064fc <HAL_RCC_OscConfig+0x274>)
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f003 030c 	and.w	r3, r3, #12
 80062b0:	2b04      	cmp	r3, #4
 80062b2:	d019      	beq.n	80062e8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80062b4:	4b91      	ldr	r3, [pc, #580]	@ (80064fc <HAL_RCC_OscConfig+0x274>)
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f003 030c 	and.w	r3, r3, #12
        || \
 80062bc:	2b08      	cmp	r3, #8
 80062be:	d106      	bne.n	80062ce <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80062c0:	4b8e      	ldr	r3, [pc, #568]	@ (80064fc <HAL_RCC_OscConfig+0x274>)
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062cc:	d00c      	beq.n	80062e8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062ce:	4b8b      	ldr	r3, [pc, #556]	@ (80064fc <HAL_RCC_OscConfig+0x274>)
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80062d6:	2b0c      	cmp	r3, #12
 80062d8:	d112      	bne.n	8006300 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062da:	4b88      	ldr	r3, [pc, #544]	@ (80064fc <HAL_RCC_OscConfig+0x274>)
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062e6:	d10b      	bne.n	8006300 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062e8:	4b84      	ldr	r3, [pc, #528]	@ (80064fc <HAL_RCC_OscConfig+0x274>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d05b      	beq.n	80063ac <HAL_RCC_OscConfig+0x124>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d157      	bne.n	80063ac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e25a      	b.n	80067b6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006308:	d106      	bne.n	8006318 <HAL_RCC_OscConfig+0x90>
 800630a:	4b7c      	ldr	r3, [pc, #496]	@ (80064fc <HAL_RCC_OscConfig+0x274>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a7b      	ldr	r2, [pc, #492]	@ (80064fc <HAL_RCC_OscConfig+0x274>)
 8006310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006314:	6013      	str	r3, [r2, #0]
 8006316:	e01d      	b.n	8006354 <HAL_RCC_OscConfig+0xcc>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006320:	d10c      	bne.n	800633c <HAL_RCC_OscConfig+0xb4>
 8006322:	4b76      	ldr	r3, [pc, #472]	@ (80064fc <HAL_RCC_OscConfig+0x274>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a75      	ldr	r2, [pc, #468]	@ (80064fc <HAL_RCC_OscConfig+0x274>)
 8006328:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800632c:	6013      	str	r3, [r2, #0]
 800632e:	4b73      	ldr	r3, [pc, #460]	@ (80064fc <HAL_RCC_OscConfig+0x274>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a72      	ldr	r2, [pc, #456]	@ (80064fc <HAL_RCC_OscConfig+0x274>)
 8006334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006338:	6013      	str	r3, [r2, #0]
 800633a:	e00b      	b.n	8006354 <HAL_RCC_OscConfig+0xcc>
 800633c:	4b6f      	ldr	r3, [pc, #444]	@ (80064fc <HAL_RCC_OscConfig+0x274>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a6e      	ldr	r2, [pc, #440]	@ (80064fc <HAL_RCC_OscConfig+0x274>)
 8006342:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006346:	6013      	str	r3, [r2, #0]
 8006348:	4b6c      	ldr	r3, [pc, #432]	@ (80064fc <HAL_RCC_OscConfig+0x274>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a6b      	ldr	r2, [pc, #428]	@ (80064fc <HAL_RCC_OscConfig+0x274>)
 800634e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d013      	beq.n	8006384 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800635c:	f7fd f9b0 	bl	80036c0 <HAL_GetTick>
 8006360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006362:	e008      	b.n	8006376 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006364:	f7fd f9ac 	bl	80036c0 <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	2b64      	cmp	r3, #100	@ 0x64
 8006370:	d901      	bls.n	8006376 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e21f      	b.n	80067b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006376:	4b61      	ldr	r3, [pc, #388]	@ (80064fc <HAL_RCC_OscConfig+0x274>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d0f0      	beq.n	8006364 <HAL_RCC_OscConfig+0xdc>
 8006382:	e014      	b.n	80063ae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006384:	f7fd f99c 	bl	80036c0 <HAL_GetTick>
 8006388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800638a:	e008      	b.n	800639e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800638c:	f7fd f998 	bl	80036c0 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	2b64      	cmp	r3, #100	@ 0x64
 8006398:	d901      	bls.n	800639e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e20b      	b.n	80067b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800639e:	4b57      	ldr	r3, [pc, #348]	@ (80064fc <HAL_RCC_OscConfig+0x274>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1f0      	bne.n	800638c <HAL_RCC_OscConfig+0x104>
 80063aa:	e000      	b.n	80063ae <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0302 	and.w	r3, r3, #2
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d06f      	beq.n	800649a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80063ba:	4b50      	ldr	r3, [pc, #320]	@ (80064fc <HAL_RCC_OscConfig+0x274>)
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f003 030c 	and.w	r3, r3, #12
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d017      	beq.n	80063f6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80063c6:	4b4d      	ldr	r3, [pc, #308]	@ (80064fc <HAL_RCC_OscConfig+0x274>)
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f003 030c 	and.w	r3, r3, #12
        || \
 80063ce:	2b08      	cmp	r3, #8
 80063d0:	d105      	bne.n	80063de <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80063d2:	4b4a      	ldr	r3, [pc, #296]	@ (80064fc <HAL_RCC_OscConfig+0x274>)
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00b      	beq.n	80063f6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063de:	4b47      	ldr	r3, [pc, #284]	@ (80064fc <HAL_RCC_OscConfig+0x274>)
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80063e6:	2b0c      	cmp	r3, #12
 80063e8:	d11c      	bne.n	8006424 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063ea:	4b44      	ldr	r3, [pc, #272]	@ (80064fc <HAL_RCC_OscConfig+0x274>)
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d116      	bne.n	8006424 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063f6:	4b41      	ldr	r3, [pc, #260]	@ (80064fc <HAL_RCC_OscConfig+0x274>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0302 	and.w	r3, r3, #2
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d005      	beq.n	800640e <HAL_RCC_OscConfig+0x186>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d001      	beq.n	800640e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e1d3      	b.n	80067b6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800640e:	4b3b      	ldr	r3, [pc, #236]	@ (80064fc <HAL_RCC_OscConfig+0x274>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	00db      	lsls	r3, r3, #3
 800641c:	4937      	ldr	r1, [pc, #220]	@ (80064fc <HAL_RCC_OscConfig+0x274>)
 800641e:	4313      	orrs	r3, r2
 8006420:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006422:	e03a      	b.n	800649a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d020      	beq.n	800646e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800642c:	4b34      	ldr	r3, [pc, #208]	@ (8006500 <HAL_RCC_OscConfig+0x278>)
 800642e:	2201      	movs	r2, #1
 8006430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006432:	f7fd f945 	bl	80036c0 <HAL_GetTick>
 8006436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006438:	e008      	b.n	800644c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800643a:	f7fd f941 	bl	80036c0 <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	2b02      	cmp	r3, #2
 8006446:	d901      	bls.n	800644c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e1b4      	b.n	80067b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800644c:	4b2b      	ldr	r3, [pc, #172]	@ (80064fc <HAL_RCC_OscConfig+0x274>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0302 	and.w	r3, r3, #2
 8006454:	2b00      	cmp	r3, #0
 8006456:	d0f0      	beq.n	800643a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006458:	4b28      	ldr	r3, [pc, #160]	@ (80064fc <HAL_RCC_OscConfig+0x274>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	00db      	lsls	r3, r3, #3
 8006466:	4925      	ldr	r1, [pc, #148]	@ (80064fc <HAL_RCC_OscConfig+0x274>)
 8006468:	4313      	orrs	r3, r2
 800646a:	600b      	str	r3, [r1, #0]
 800646c:	e015      	b.n	800649a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800646e:	4b24      	ldr	r3, [pc, #144]	@ (8006500 <HAL_RCC_OscConfig+0x278>)
 8006470:	2200      	movs	r2, #0
 8006472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006474:	f7fd f924 	bl	80036c0 <HAL_GetTick>
 8006478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800647a:	e008      	b.n	800648e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800647c:	f7fd f920 	bl	80036c0 <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	2b02      	cmp	r3, #2
 8006488:	d901      	bls.n	800648e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e193      	b.n	80067b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800648e:	4b1b      	ldr	r3, [pc, #108]	@ (80064fc <HAL_RCC_OscConfig+0x274>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0302 	and.w	r3, r3, #2
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1f0      	bne.n	800647c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0308 	and.w	r3, r3, #8
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d036      	beq.n	8006514 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d016      	beq.n	80064dc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064ae:	4b15      	ldr	r3, [pc, #84]	@ (8006504 <HAL_RCC_OscConfig+0x27c>)
 80064b0:	2201      	movs	r2, #1
 80064b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064b4:	f7fd f904 	bl	80036c0 <HAL_GetTick>
 80064b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064ba:	e008      	b.n	80064ce <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064bc:	f7fd f900 	bl	80036c0 <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d901      	bls.n	80064ce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e173      	b.n	80067b6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064ce:	4b0b      	ldr	r3, [pc, #44]	@ (80064fc <HAL_RCC_OscConfig+0x274>)
 80064d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064d2:	f003 0302 	and.w	r3, r3, #2
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d0f0      	beq.n	80064bc <HAL_RCC_OscConfig+0x234>
 80064da:	e01b      	b.n	8006514 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064dc:	4b09      	ldr	r3, [pc, #36]	@ (8006504 <HAL_RCC_OscConfig+0x27c>)
 80064de:	2200      	movs	r2, #0
 80064e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064e2:	f7fd f8ed 	bl	80036c0 <HAL_GetTick>
 80064e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064e8:	e00e      	b.n	8006508 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064ea:	f7fd f8e9 	bl	80036c0 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d907      	bls.n	8006508 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e15c      	b.n	80067b6 <HAL_RCC_OscConfig+0x52e>
 80064fc:	40023800 	.word	0x40023800
 8006500:	42470000 	.word	0x42470000
 8006504:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006508:	4b8a      	ldr	r3, [pc, #552]	@ (8006734 <HAL_RCC_OscConfig+0x4ac>)
 800650a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800650c:	f003 0302 	and.w	r3, r3, #2
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1ea      	bne.n	80064ea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0304 	and.w	r3, r3, #4
 800651c:	2b00      	cmp	r3, #0
 800651e:	f000 8097 	beq.w	8006650 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006522:	2300      	movs	r3, #0
 8006524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006526:	4b83      	ldr	r3, [pc, #524]	@ (8006734 <HAL_RCC_OscConfig+0x4ac>)
 8006528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800652a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10f      	bne.n	8006552 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006532:	2300      	movs	r3, #0
 8006534:	60bb      	str	r3, [r7, #8]
 8006536:	4b7f      	ldr	r3, [pc, #508]	@ (8006734 <HAL_RCC_OscConfig+0x4ac>)
 8006538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800653a:	4a7e      	ldr	r2, [pc, #504]	@ (8006734 <HAL_RCC_OscConfig+0x4ac>)
 800653c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006540:	6413      	str	r3, [r2, #64]	@ 0x40
 8006542:	4b7c      	ldr	r3, [pc, #496]	@ (8006734 <HAL_RCC_OscConfig+0x4ac>)
 8006544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800654a:	60bb      	str	r3, [r7, #8]
 800654c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800654e:	2301      	movs	r3, #1
 8006550:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006552:	4b79      	ldr	r3, [pc, #484]	@ (8006738 <HAL_RCC_OscConfig+0x4b0>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800655a:	2b00      	cmp	r3, #0
 800655c:	d118      	bne.n	8006590 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800655e:	4b76      	ldr	r3, [pc, #472]	@ (8006738 <HAL_RCC_OscConfig+0x4b0>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a75      	ldr	r2, [pc, #468]	@ (8006738 <HAL_RCC_OscConfig+0x4b0>)
 8006564:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800656a:	f7fd f8a9 	bl	80036c0 <HAL_GetTick>
 800656e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006570:	e008      	b.n	8006584 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006572:	f7fd f8a5 	bl	80036c0 <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	2b02      	cmp	r3, #2
 800657e:	d901      	bls.n	8006584 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e118      	b.n	80067b6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006584:	4b6c      	ldr	r3, [pc, #432]	@ (8006738 <HAL_RCC_OscConfig+0x4b0>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800658c:	2b00      	cmp	r3, #0
 800658e:	d0f0      	beq.n	8006572 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d106      	bne.n	80065a6 <HAL_RCC_OscConfig+0x31e>
 8006598:	4b66      	ldr	r3, [pc, #408]	@ (8006734 <HAL_RCC_OscConfig+0x4ac>)
 800659a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800659c:	4a65      	ldr	r2, [pc, #404]	@ (8006734 <HAL_RCC_OscConfig+0x4ac>)
 800659e:	f043 0301 	orr.w	r3, r3, #1
 80065a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80065a4:	e01c      	b.n	80065e0 <HAL_RCC_OscConfig+0x358>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	2b05      	cmp	r3, #5
 80065ac:	d10c      	bne.n	80065c8 <HAL_RCC_OscConfig+0x340>
 80065ae:	4b61      	ldr	r3, [pc, #388]	@ (8006734 <HAL_RCC_OscConfig+0x4ac>)
 80065b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065b2:	4a60      	ldr	r2, [pc, #384]	@ (8006734 <HAL_RCC_OscConfig+0x4ac>)
 80065b4:	f043 0304 	orr.w	r3, r3, #4
 80065b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80065ba:	4b5e      	ldr	r3, [pc, #376]	@ (8006734 <HAL_RCC_OscConfig+0x4ac>)
 80065bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065be:	4a5d      	ldr	r2, [pc, #372]	@ (8006734 <HAL_RCC_OscConfig+0x4ac>)
 80065c0:	f043 0301 	orr.w	r3, r3, #1
 80065c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80065c6:	e00b      	b.n	80065e0 <HAL_RCC_OscConfig+0x358>
 80065c8:	4b5a      	ldr	r3, [pc, #360]	@ (8006734 <HAL_RCC_OscConfig+0x4ac>)
 80065ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065cc:	4a59      	ldr	r2, [pc, #356]	@ (8006734 <HAL_RCC_OscConfig+0x4ac>)
 80065ce:	f023 0301 	bic.w	r3, r3, #1
 80065d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80065d4:	4b57      	ldr	r3, [pc, #348]	@ (8006734 <HAL_RCC_OscConfig+0x4ac>)
 80065d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065d8:	4a56      	ldr	r2, [pc, #344]	@ (8006734 <HAL_RCC_OscConfig+0x4ac>)
 80065da:	f023 0304 	bic.w	r3, r3, #4
 80065de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d015      	beq.n	8006614 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065e8:	f7fd f86a 	bl	80036c0 <HAL_GetTick>
 80065ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065ee:	e00a      	b.n	8006606 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065f0:	f7fd f866 	bl	80036c0 <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065fe:	4293      	cmp	r3, r2
 8006600:	d901      	bls.n	8006606 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e0d7      	b.n	80067b6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006606:	4b4b      	ldr	r3, [pc, #300]	@ (8006734 <HAL_RCC_OscConfig+0x4ac>)
 8006608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800660a:	f003 0302 	and.w	r3, r3, #2
 800660e:	2b00      	cmp	r3, #0
 8006610:	d0ee      	beq.n	80065f0 <HAL_RCC_OscConfig+0x368>
 8006612:	e014      	b.n	800663e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006614:	f7fd f854 	bl	80036c0 <HAL_GetTick>
 8006618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800661a:	e00a      	b.n	8006632 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800661c:	f7fd f850 	bl	80036c0 <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800662a:	4293      	cmp	r3, r2
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e0c1      	b.n	80067b6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006632:	4b40      	ldr	r3, [pc, #256]	@ (8006734 <HAL_RCC_OscConfig+0x4ac>)
 8006634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1ee      	bne.n	800661c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800663e:	7dfb      	ldrb	r3, [r7, #23]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d105      	bne.n	8006650 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006644:	4b3b      	ldr	r3, [pc, #236]	@ (8006734 <HAL_RCC_OscConfig+0x4ac>)
 8006646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006648:	4a3a      	ldr	r2, [pc, #232]	@ (8006734 <HAL_RCC_OscConfig+0x4ac>)
 800664a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800664e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	2b00      	cmp	r3, #0
 8006656:	f000 80ad 	beq.w	80067b4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800665a:	4b36      	ldr	r3, [pc, #216]	@ (8006734 <HAL_RCC_OscConfig+0x4ac>)
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f003 030c 	and.w	r3, r3, #12
 8006662:	2b08      	cmp	r3, #8
 8006664:	d060      	beq.n	8006728 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	2b02      	cmp	r3, #2
 800666c:	d145      	bne.n	80066fa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800666e:	4b33      	ldr	r3, [pc, #204]	@ (800673c <HAL_RCC_OscConfig+0x4b4>)
 8006670:	2200      	movs	r2, #0
 8006672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006674:	f7fd f824 	bl	80036c0 <HAL_GetTick>
 8006678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800667a:	e008      	b.n	800668e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800667c:	f7fd f820 	bl	80036c0 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	2b02      	cmp	r3, #2
 8006688:	d901      	bls.n	800668e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e093      	b.n	80067b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800668e:	4b29      	ldr	r3, [pc, #164]	@ (8006734 <HAL_RCC_OscConfig+0x4ac>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1f0      	bne.n	800667c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	69da      	ldr	r2, [r3, #28]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	431a      	orrs	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a8:	019b      	lsls	r3, r3, #6
 80066aa:	431a      	orrs	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b0:	085b      	lsrs	r3, r3, #1
 80066b2:	3b01      	subs	r3, #1
 80066b4:	041b      	lsls	r3, r3, #16
 80066b6:	431a      	orrs	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066bc:	061b      	lsls	r3, r3, #24
 80066be:	431a      	orrs	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c4:	071b      	lsls	r3, r3, #28
 80066c6:	491b      	ldr	r1, [pc, #108]	@ (8006734 <HAL_RCC_OscConfig+0x4ac>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066cc:	4b1b      	ldr	r3, [pc, #108]	@ (800673c <HAL_RCC_OscConfig+0x4b4>)
 80066ce:	2201      	movs	r2, #1
 80066d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d2:	f7fc fff5 	bl	80036c0 <HAL_GetTick>
 80066d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066d8:	e008      	b.n	80066ec <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066da:	f7fc fff1 	bl	80036c0 <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d901      	bls.n	80066ec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e064      	b.n	80067b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066ec:	4b11      	ldr	r3, [pc, #68]	@ (8006734 <HAL_RCC_OscConfig+0x4ac>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d0f0      	beq.n	80066da <HAL_RCC_OscConfig+0x452>
 80066f8:	e05c      	b.n	80067b4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066fa:	4b10      	ldr	r3, [pc, #64]	@ (800673c <HAL_RCC_OscConfig+0x4b4>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006700:	f7fc ffde 	bl	80036c0 <HAL_GetTick>
 8006704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006706:	e008      	b.n	800671a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006708:	f7fc ffda 	bl	80036c0 <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	2b02      	cmp	r3, #2
 8006714:	d901      	bls.n	800671a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e04d      	b.n	80067b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800671a:	4b06      	ldr	r3, [pc, #24]	@ (8006734 <HAL_RCC_OscConfig+0x4ac>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1f0      	bne.n	8006708 <HAL_RCC_OscConfig+0x480>
 8006726:	e045      	b.n	80067b4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d107      	bne.n	8006740 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e040      	b.n	80067b6 <HAL_RCC_OscConfig+0x52e>
 8006734:	40023800 	.word	0x40023800
 8006738:	40007000 	.word	0x40007000
 800673c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006740:	4b1f      	ldr	r3, [pc, #124]	@ (80067c0 <HAL_RCC_OscConfig+0x538>)
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d030      	beq.n	80067b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006758:	429a      	cmp	r2, r3
 800675a:	d129      	bne.n	80067b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006766:	429a      	cmp	r2, r3
 8006768:	d122      	bne.n	80067b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006770:	4013      	ands	r3, r2
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006776:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006778:	4293      	cmp	r3, r2
 800677a:	d119      	bne.n	80067b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006786:	085b      	lsrs	r3, r3, #1
 8006788:	3b01      	subs	r3, #1
 800678a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800678c:	429a      	cmp	r2, r3
 800678e:	d10f      	bne.n	80067b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800679c:	429a      	cmp	r2, r3
 800679e:	d107      	bne.n	80067b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d001      	beq.n	80067b4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e000      	b.n	80067b6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3718      	adds	r7, #24
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	40023800 	.word	0x40023800

080067c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e07b      	b.n	80068ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d108      	bne.n	80067f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067e6:	d009      	beq.n	80067fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	61da      	str	r2, [r3, #28]
 80067ee:	e005      	b.n	80067fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	d106      	bne.n	800681c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7fc fbd6 	bl	8002fc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2202      	movs	r2, #2
 8006820:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006832:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006844:	431a      	orrs	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800684e:	431a      	orrs	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	431a      	orrs	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	431a      	orrs	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800686c:	431a      	orrs	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006876:	431a      	orrs	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a1b      	ldr	r3, [r3, #32]
 800687c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006880:	ea42 0103 	orr.w	r1, r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006888:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	430a      	orrs	r2, r1
 8006892:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	0c1b      	lsrs	r3, r3, #16
 800689a:	f003 0104 	and.w	r1, r3, #4
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a2:	f003 0210 	and.w	r2, r3, #16
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	430a      	orrs	r2, r1
 80068ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	69da      	ldr	r2, [r3, #28]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80068bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b088      	sub	sp, #32
 80068da:	af00      	add	r7, sp, #0
 80068dc:	60f8      	str	r0, [r7, #12]
 80068de:	60b9      	str	r1, [r7, #8]
 80068e0:	603b      	str	r3, [r7, #0]
 80068e2:	4613      	mov	r3, r2
 80068e4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068e6:	f7fc feeb 	bl	80036c0 <HAL_GetTick>
 80068ea:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80068ec:	88fb      	ldrh	r3, [r7, #6]
 80068ee:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d001      	beq.n	8006900 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80068fc:	2302      	movs	r3, #2
 80068fe:	e12a      	b.n	8006b56 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d002      	beq.n	800690c <HAL_SPI_Transmit+0x36>
 8006906:	88fb      	ldrh	r3, [r7, #6]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d101      	bne.n	8006910 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e122      	b.n	8006b56 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006916:	2b01      	cmp	r3, #1
 8006918:	d101      	bne.n	800691e <HAL_SPI_Transmit+0x48>
 800691a:	2302      	movs	r3, #2
 800691c:	e11b      	b.n	8006b56 <HAL_SPI_Transmit+0x280>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2203      	movs	r2, #3
 800692a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	68ba      	ldr	r2, [r7, #8]
 8006938:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	88fa      	ldrh	r2, [r7, #6]
 800693e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	88fa      	ldrh	r2, [r7, #6]
 8006944:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800696c:	d10f      	bne.n	800698e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800697c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800698c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006998:	2b40      	cmp	r3, #64	@ 0x40
 800699a:	d007      	beq.n	80069ac <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069b4:	d152      	bne.n	8006a5c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d002      	beq.n	80069c4 <HAL_SPI_Transmit+0xee>
 80069be:	8b7b      	ldrh	r3, [r7, #26]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d145      	bne.n	8006a50 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069c8:	881a      	ldrh	r2, [r3, #0]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069d4:	1c9a      	adds	r2, r3, #2
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069de:	b29b      	uxth	r3, r3
 80069e0:	3b01      	subs	r3, #1
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80069e8:	e032      	b.n	8006a50 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	f003 0302 	and.w	r3, r3, #2
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d112      	bne.n	8006a1e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069fc:	881a      	ldrh	r2, [r3, #0]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a08:	1c9a      	adds	r2, r3, #2
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	3b01      	subs	r3, #1
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006a1c:	e018      	b.n	8006a50 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a1e:	f7fc fe4f 	bl	80036c0 <HAL_GetTick>
 8006a22:	4602      	mov	r2, r0
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	683a      	ldr	r2, [r7, #0]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d803      	bhi.n	8006a36 <HAL_SPI_Transmit+0x160>
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a34:	d102      	bne.n	8006a3c <HAL_SPI_Transmit+0x166>
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d109      	bne.n	8006a50 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e082      	b.n	8006b56 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1c7      	bne.n	80069ea <HAL_SPI_Transmit+0x114>
 8006a5a:	e053      	b.n	8006b04 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d002      	beq.n	8006a6a <HAL_SPI_Transmit+0x194>
 8006a64:	8b7b      	ldrh	r3, [r7, #26]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d147      	bne.n	8006afa <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	330c      	adds	r3, #12
 8006a74:	7812      	ldrb	r2, [r2, #0]
 8006a76:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006a90:	e033      	b.n	8006afa <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	f003 0302 	and.w	r3, r3, #2
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d113      	bne.n	8006ac8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	330c      	adds	r3, #12
 8006aaa:	7812      	ldrb	r2, [r2, #0]
 8006aac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab2:	1c5a      	adds	r2, r3, #1
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006ac6:	e018      	b.n	8006afa <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ac8:	f7fc fdfa 	bl	80036c0 <HAL_GetTick>
 8006acc:	4602      	mov	r2, r0
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	683a      	ldr	r2, [r7, #0]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d803      	bhi.n	8006ae0 <HAL_SPI_Transmit+0x20a>
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ade:	d102      	bne.n	8006ae6 <HAL_SPI_Transmit+0x210>
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d109      	bne.n	8006afa <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e02d      	b.n	8006b56 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1c6      	bne.n	8006a92 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b04:	69fa      	ldr	r2, [r7, #28]
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f000 f8b1 	bl	8006c70 <SPI_EndRxTxTransaction>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d002      	beq.n	8006b1a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2220      	movs	r2, #32
 8006b18:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d10a      	bne.n	8006b38 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b22:	2300      	movs	r3, #0
 8006b24:	617b      	str	r3, [r7, #20]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	617b      	str	r3, [r7, #20]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	617b      	str	r3, [r7, #20]
 8006b36:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d001      	beq.n	8006b54 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e000      	b.n	8006b56 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006b54:	2300      	movs	r3, #0
  }
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3720      	adds	r7, #32
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
	...

08006b60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b088      	sub	sp, #32
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	603b      	str	r3, [r7, #0]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b70:	f7fc fda6 	bl	80036c0 <HAL_GetTick>
 8006b74:	4602      	mov	r2, r0
 8006b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b78:	1a9b      	subs	r3, r3, r2
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b80:	f7fc fd9e 	bl	80036c0 <HAL_GetTick>
 8006b84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b86:	4b39      	ldr	r3, [pc, #228]	@ (8006c6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	015b      	lsls	r3, r3, #5
 8006b8c:	0d1b      	lsrs	r3, r3, #20
 8006b8e:	69fa      	ldr	r2, [r7, #28]
 8006b90:	fb02 f303 	mul.w	r3, r2, r3
 8006b94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b96:	e054      	b.n	8006c42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b9e:	d050      	beq.n	8006c42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ba0:	f7fc fd8e 	bl	80036c0 <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	69fa      	ldr	r2, [r7, #28]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d902      	bls.n	8006bb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d13d      	bne.n	8006c32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006bc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006bce:	d111      	bne.n	8006bf4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bd8:	d004      	beq.n	8006be4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006be2:	d107      	bne.n	8006bf4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bf2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bfc:	d10f      	bne.n	8006c1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c0c:	601a      	str	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e017      	b.n	8006c62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d101      	bne.n	8006c3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	689a      	ldr	r2, [r3, #8]
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	bf0c      	ite	eq
 8006c52:	2301      	moveq	r3, #1
 8006c54:	2300      	movne	r3, #0
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	461a      	mov	r2, r3
 8006c5a:	79fb      	ldrb	r3, [r7, #7]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d19b      	bne.n	8006b98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3720      	adds	r7, #32
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	20000000 	.word	0x20000000

08006c70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b088      	sub	sp, #32
 8006c74:	af02      	add	r7, sp, #8
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	9300      	str	r3, [sp, #0]
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	2201      	movs	r2, #1
 8006c84:	2102      	movs	r1, #2
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f7ff ff6a 	bl	8006b60 <SPI_WaitFlagStateUntilTimeout>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d007      	beq.n	8006ca2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c96:	f043 0220 	orr.w	r2, r3, #32
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e032      	b.n	8006d08 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8006d10 <SPI_EndRxTxTransaction+0xa0>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a1b      	ldr	r2, [pc, #108]	@ (8006d14 <SPI_EndRxTxTransaction+0xa4>)
 8006ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cac:	0d5b      	lsrs	r3, r3, #21
 8006cae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006cb2:	fb02 f303 	mul.w	r3, r2, r3
 8006cb6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cc0:	d112      	bne.n	8006ce8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	9300      	str	r3, [sp, #0]
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	2180      	movs	r1, #128	@ 0x80
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f7ff ff47 	bl	8006b60 <SPI_WaitFlagStateUntilTimeout>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d016      	beq.n	8006d06 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cdc:	f043 0220 	orr.w	r2, r3, #32
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e00f      	b.n	8006d08 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00a      	beq.n	8006d04 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cfe:	2b80      	cmp	r3, #128	@ 0x80
 8006d00:	d0f2      	beq.n	8006ce8 <SPI_EndRxTxTransaction+0x78>
 8006d02:	e000      	b.n	8006d06 <SPI_EndRxTxTransaction+0x96>
        break;
 8006d04:	bf00      	nop
  }

  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3718      	adds	r7, #24
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	20000000 	.word	0x20000000
 8006d14:	165e9f81 	.word	0x165e9f81

08006d18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e041      	b.n	8006dae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d106      	bne.n	8006d44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7fc f98a 	bl	8003058 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2202      	movs	r2, #2
 8006d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	3304      	adds	r3, #4
 8006d54:	4619      	mov	r1, r3
 8006d56:	4610      	mov	r0, r2
 8006d58:	f000 fa10 	bl	800717c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b082      	sub	sp, #8
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e041      	b.n	8006e4c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d106      	bne.n	8006de2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 f839 	bl	8006e54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2202      	movs	r2, #2
 8006de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	3304      	adds	r3, #4
 8006df2:	4619      	mov	r1, r3
 8006df4:	4610      	mov	r0, r2
 8006df6:	f000 f9c1 	bl	800717c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2201      	movs	r2, #1
 8006e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3708      	adds	r7, #8
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e74:	2300      	movs	r3, #0
 8006e76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d101      	bne.n	8006e86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e82:	2302      	movs	r3, #2
 8006e84:	e0ae      	b.n	8006fe4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2b0c      	cmp	r3, #12
 8006e92:	f200 809f 	bhi.w	8006fd4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006e96:	a201      	add	r2, pc, #4	@ (adr r2, 8006e9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e9c:	08006ed1 	.word	0x08006ed1
 8006ea0:	08006fd5 	.word	0x08006fd5
 8006ea4:	08006fd5 	.word	0x08006fd5
 8006ea8:	08006fd5 	.word	0x08006fd5
 8006eac:	08006f11 	.word	0x08006f11
 8006eb0:	08006fd5 	.word	0x08006fd5
 8006eb4:	08006fd5 	.word	0x08006fd5
 8006eb8:	08006fd5 	.word	0x08006fd5
 8006ebc:	08006f53 	.word	0x08006f53
 8006ec0:	08006fd5 	.word	0x08006fd5
 8006ec4:	08006fd5 	.word	0x08006fd5
 8006ec8:	08006fd5 	.word	0x08006fd5
 8006ecc:	08006f93 	.word	0x08006f93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68b9      	ldr	r1, [r7, #8]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f000 f9fc 	bl	80072d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	699a      	ldr	r2, [r3, #24]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f042 0208 	orr.w	r2, r2, #8
 8006eea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	699a      	ldr	r2, [r3, #24]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f022 0204 	bic.w	r2, r2, #4
 8006efa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6999      	ldr	r1, [r3, #24]
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	691a      	ldr	r2, [r3, #16]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	430a      	orrs	r2, r1
 8006f0c:	619a      	str	r2, [r3, #24]
      break;
 8006f0e:	e064      	b.n	8006fda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68b9      	ldr	r1, [r7, #8]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f000 fa4c 	bl	80073b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	699a      	ldr	r2, [r3, #24]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	699a      	ldr	r2, [r3, #24]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	6999      	ldr	r1, [r3, #24]
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	021a      	lsls	r2, r3, #8
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	430a      	orrs	r2, r1
 8006f4e:	619a      	str	r2, [r3, #24]
      break;
 8006f50:	e043      	b.n	8006fda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68b9      	ldr	r1, [r7, #8]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f000 faa1 	bl	80074a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	69da      	ldr	r2, [r3, #28]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f042 0208 	orr.w	r2, r2, #8
 8006f6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	69da      	ldr	r2, [r3, #28]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f022 0204 	bic.w	r2, r2, #4
 8006f7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	69d9      	ldr	r1, [r3, #28]
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	691a      	ldr	r2, [r3, #16]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	61da      	str	r2, [r3, #28]
      break;
 8006f90:	e023      	b.n	8006fda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68b9      	ldr	r1, [r7, #8]
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f000 faf5 	bl	8007588 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	69da      	ldr	r2, [r3, #28]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006fac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	69da      	ldr	r2, [r3, #28]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	69d9      	ldr	r1, [r3, #28]
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	021a      	lsls	r2, r3, #8
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	61da      	str	r2, [r3, #28]
      break;
 8006fd2:	e002      	b.n	8006fda <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8006fd8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3718      	adds	r7, #24
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007000:	2b01      	cmp	r3, #1
 8007002:	d101      	bne.n	8007008 <HAL_TIM_ConfigClockSource+0x1c>
 8007004:	2302      	movs	r3, #2
 8007006:	e0b4      	b.n	8007172 <HAL_TIM_ConfigClockSource+0x186>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2202      	movs	r2, #2
 8007014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007026:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800702e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007040:	d03e      	beq.n	80070c0 <HAL_TIM_ConfigClockSource+0xd4>
 8007042:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007046:	f200 8087 	bhi.w	8007158 <HAL_TIM_ConfigClockSource+0x16c>
 800704a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800704e:	f000 8086 	beq.w	800715e <HAL_TIM_ConfigClockSource+0x172>
 8007052:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007056:	d87f      	bhi.n	8007158 <HAL_TIM_ConfigClockSource+0x16c>
 8007058:	2b70      	cmp	r3, #112	@ 0x70
 800705a:	d01a      	beq.n	8007092 <HAL_TIM_ConfigClockSource+0xa6>
 800705c:	2b70      	cmp	r3, #112	@ 0x70
 800705e:	d87b      	bhi.n	8007158 <HAL_TIM_ConfigClockSource+0x16c>
 8007060:	2b60      	cmp	r3, #96	@ 0x60
 8007062:	d050      	beq.n	8007106 <HAL_TIM_ConfigClockSource+0x11a>
 8007064:	2b60      	cmp	r3, #96	@ 0x60
 8007066:	d877      	bhi.n	8007158 <HAL_TIM_ConfigClockSource+0x16c>
 8007068:	2b50      	cmp	r3, #80	@ 0x50
 800706a:	d03c      	beq.n	80070e6 <HAL_TIM_ConfigClockSource+0xfa>
 800706c:	2b50      	cmp	r3, #80	@ 0x50
 800706e:	d873      	bhi.n	8007158 <HAL_TIM_ConfigClockSource+0x16c>
 8007070:	2b40      	cmp	r3, #64	@ 0x40
 8007072:	d058      	beq.n	8007126 <HAL_TIM_ConfigClockSource+0x13a>
 8007074:	2b40      	cmp	r3, #64	@ 0x40
 8007076:	d86f      	bhi.n	8007158 <HAL_TIM_ConfigClockSource+0x16c>
 8007078:	2b30      	cmp	r3, #48	@ 0x30
 800707a:	d064      	beq.n	8007146 <HAL_TIM_ConfigClockSource+0x15a>
 800707c:	2b30      	cmp	r3, #48	@ 0x30
 800707e:	d86b      	bhi.n	8007158 <HAL_TIM_ConfigClockSource+0x16c>
 8007080:	2b20      	cmp	r3, #32
 8007082:	d060      	beq.n	8007146 <HAL_TIM_ConfigClockSource+0x15a>
 8007084:	2b20      	cmp	r3, #32
 8007086:	d867      	bhi.n	8007158 <HAL_TIM_ConfigClockSource+0x16c>
 8007088:	2b00      	cmp	r3, #0
 800708a:	d05c      	beq.n	8007146 <HAL_TIM_ConfigClockSource+0x15a>
 800708c:	2b10      	cmp	r3, #16
 800708e:	d05a      	beq.n	8007146 <HAL_TIM_ConfigClockSource+0x15a>
 8007090:	e062      	b.n	8007158 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80070a2:	f000 fb41 	bl	8007728 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80070b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	609a      	str	r2, [r3, #8]
      break;
 80070be:	e04f      	b.n	8007160 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80070d0:	f000 fb2a 	bl	8007728 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	689a      	ldr	r2, [r3, #8]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80070e2:	609a      	str	r2, [r3, #8]
      break;
 80070e4:	e03c      	b.n	8007160 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070f2:	461a      	mov	r2, r3
 80070f4:	f000 fa9e 	bl	8007634 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2150      	movs	r1, #80	@ 0x50
 80070fe:	4618      	mov	r0, r3
 8007100:	f000 faf7 	bl	80076f2 <TIM_ITRx_SetConfig>
      break;
 8007104:	e02c      	b.n	8007160 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007112:	461a      	mov	r2, r3
 8007114:	f000 fabd 	bl	8007692 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2160      	movs	r1, #96	@ 0x60
 800711e:	4618      	mov	r0, r3
 8007120:	f000 fae7 	bl	80076f2 <TIM_ITRx_SetConfig>
      break;
 8007124:	e01c      	b.n	8007160 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007132:	461a      	mov	r2, r3
 8007134:	f000 fa7e 	bl	8007634 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2140      	movs	r1, #64	@ 0x40
 800713e:	4618      	mov	r0, r3
 8007140:	f000 fad7 	bl	80076f2 <TIM_ITRx_SetConfig>
      break;
 8007144:	e00c      	b.n	8007160 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4619      	mov	r1, r3
 8007150:	4610      	mov	r0, r2
 8007152:	f000 face 	bl	80076f2 <TIM_ITRx_SetConfig>
      break;
 8007156:	e003      	b.n	8007160 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	73fb      	strb	r3, [r7, #15]
      break;
 800715c:	e000      	b.n	8007160 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800715e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007170:	7bfb      	ldrb	r3, [r7, #15]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
	...

0800717c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a46      	ldr	r2, [pc, #280]	@ (80072a8 <TIM_Base_SetConfig+0x12c>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d013      	beq.n	80071bc <TIM_Base_SetConfig+0x40>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800719a:	d00f      	beq.n	80071bc <TIM_Base_SetConfig+0x40>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a43      	ldr	r2, [pc, #268]	@ (80072ac <TIM_Base_SetConfig+0x130>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d00b      	beq.n	80071bc <TIM_Base_SetConfig+0x40>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a42      	ldr	r2, [pc, #264]	@ (80072b0 <TIM_Base_SetConfig+0x134>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d007      	beq.n	80071bc <TIM_Base_SetConfig+0x40>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a41      	ldr	r2, [pc, #260]	@ (80072b4 <TIM_Base_SetConfig+0x138>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d003      	beq.n	80071bc <TIM_Base_SetConfig+0x40>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a40      	ldr	r2, [pc, #256]	@ (80072b8 <TIM_Base_SetConfig+0x13c>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d108      	bne.n	80071ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a35      	ldr	r2, [pc, #212]	@ (80072a8 <TIM_Base_SetConfig+0x12c>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d02b      	beq.n	800722e <TIM_Base_SetConfig+0xb2>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071dc:	d027      	beq.n	800722e <TIM_Base_SetConfig+0xb2>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a32      	ldr	r2, [pc, #200]	@ (80072ac <TIM_Base_SetConfig+0x130>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d023      	beq.n	800722e <TIM_Base_SetConfig+0xb2>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a31      	ldr	r2, [pc, #196]	@ (80072b0 <TIM_Base_SetConfig+0x134>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d01f      	beq.n	800722e <TIM_Base_SetConfig+0xb2>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a30      	ldr	r2, [pc, #192]	@ (80072b4 <TIM_Base_SetConfig+0x138>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d01b      	beq.n	800722e <TIM_Base_SetConfig+0xb2>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a2f      	ldr	r2, [pc, #188]	@ (80072b8 <TIM_Base_SetConfig+0x13c>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d017      	beq.n	800722e <TIM_Base_SetConfig+0xb2>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a2e      	ldr	r2, [pc, #184]	@ (80072bc <TIM_Base_SetConfig+0x140>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d013      	beq.n	800722e <TIM_Base_SetConfig+0xb2>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a2d      	ldr	r2, [pc, #180]	@ (80072c0 <TIM_Base_SetConfig+0x144>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d00f      	beq.n	800722e <TIM_Base_SetConfig+0xb2>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a2c      	ldr	r2, [pc, #176]	@ (80072c4 <TIM_Base_SetConfig+0x148>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d00b      	beq.n	800722e <TIM_Base_SetConfig+0xb2>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a2b      	ldr	r2, [pc, #172]	@ (80072c8 <TIM_Base_SetConfig+0x14c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d007      	beq.n	800722e <TIM_Base_SetConfig+0xb2>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a2a      	ldr	r2, [pc, #168]	@ (80072cc <TIM_Base_SetConfig+0x150>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d003      	beq.n	800722e <TIM_Base_SetConfig+0xb2>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a29      	ldr	r2, [pc, #164]	@ (80072d0 <TIM_Base_SetConfig+0x154>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d108      	bne.n	8007240 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007234:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	4313      	orrs	r3, r2
 800723e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	4313      	orrs	r3, r2
 800724c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	689a      	ldr	r2, [r3, #8]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a10      	ldr	r2, [pc, #64]	@ (80072a8 <TIM_Base_SetConfig+0x12c>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d003      	beq.n	8007274 <TIM_Base_SetConfig+0xf8>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a12      	ldr	r2, [pc, #72]	@ (80072b8 <TIM_Base_SetConfig+0x13c>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d103      	bne.n	800727c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	691a      	ldr	r2, [r3, #16]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	f003 0301 	and.w	r3, r3, #1
 800728a:	2b01      	cmp	r3, #1
 800728c:	d105      	bne.n	800729a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	f023 0201 	bic.w	r2, r3, #1
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	611a      	str	r2, [r3, #16]
  }
}
 800729a:	bf00      	nop
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	40010000 	.word	0x40010000
 80072ac:	40000400 	.word	0x40000400
 80072b0:	40000800 	.word	0x40000800
 80072b4:	40000c00 	.word	0x40000c00
 80072b8:	40010400 	.word	0x40010400
 80072bc:	40014000 	.word	0x40014000
 80072c0:	40014400 	.word	0x40014400
 80072c4:	40014800 	.word	0x40014800
 80072c8:	40001800 	.word	0x40001800
 80072cc:	40001c00 	.word	0x40001c00
 80072d0:	40002000 	.word	0x40002000

080072d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b087      	sub	sp, #28
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a1b      	ldr	r3, [r3, #32]
 80072e8:	f023 0201 	bic.w	r2, r3, #1
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f023 0303 	bic.w	r3, r3, #3
 800730a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	4313      	orrs	r3, r2
 8007314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	f023 0302 	bic.w	r3, r3, #2
 800731c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	4313      	orrs	r3, r2
 8007326:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a20      	ldr	r2, [pc, #128]	@ (80073ac <TIM_OC1_SetConfig+0xd8>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d003      	beq.n	8007338 <TIM_OC1_SetConfig+0x64>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a1f      	ldr	r2, [pc, #124]	@ (80073b0 <TIM_OC1_SetConfig+0xdc>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d10c      	bne.n	8007352 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	f023 0308 	bic.w	r3, r3, #8
 800733e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	4313      	orrs	r3, r2
 8007348:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	f023 0304 	bic.w	r3, r3, #4
 8007350:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a15      	ldr	r2, [pc, #84]	@ (80073ac <TIM_OC1_SetConfig+0xd8>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d003      	beq.n	8007362 <TIM_OC1_SetConfig+0x8e>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a14      	ldr	r2, [pc, #80]	@ (80073b0 <TIM_OC1_SetConfig+0xdc>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d111      	bne.n	8007386 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007368:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007370:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	693a      	ldr	r2, [r7, #16]
 8007378:	4313      	orrs	r3, r2
 800737a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	4313      	orrs	r3, r2
 8007384:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	685a      	ldr	r2, [r3, #4]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	697a      	ldr	r2, [r7, #20]
 800739e:	621a      	str	r2, [r3, #32]
}
 80073a0:	bf00      	nop
 80073a2:	371c      	adds	r7, #28
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr
 80073ac:	40010000 	.word	0x40010000
 80073b0:	40010400 	.word	0x40010400

080073b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b087      	sub	sp, #28
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a1b      	ldr	r3, [r3, #32]
 80073c8:	f023 0210 	bic.w	r2, r3, #16
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	021b      	lsls	r3, r3, #8
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	f023 0320 	bic.w	r3, r3, #32
 80073fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	011b      	lsls	r3, r3, #4
 8007406:	697a      	ldr	r2, [r7, #20]
 8007408:	4313      	orrs	r3, r2
 800740a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a22      	ldr	r2, [pc, #136]	@ (8007498 <TIM_OC2_SetConfig+0xe4>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d003      	beq.n	800741c <TIM_OC2_SetConfig+0x68>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a21      	ldr	r2, [pc, #132]	@ (800749c <TIM_OC2_SetConfig+0xe8>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d10d      	bne.n	8007438 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007422:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	011b      	lsls	r3, r3, #4
 800742a:	697a      	ldr	r2, [r7, #20]
 800742c:	4313      	orrs	r3, r2
 800742e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007436:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a17      	ldr	r2, [pc, #92]	@ (8007498 <TIM_OC2_SetConfig+0xe4>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d003      	beq.n	8007448 <TIM_OC2_SetConfig+0x94>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a16      	ldr	r2, [pc, #88]	@ (800749c <TIM_OC2_SetConfig+0xe8>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d113      	bne.n	8007470 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800744e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007456:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	695b      	ldr	r3, [r3, #20]
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	4313      	orrs	r3, r2
 8007462:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	693a      	ldr	r2, [r7, #16]
 800746c:	4313      	orrs	r3, r2
 800746e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	685a      	ldr	r2, [r3, #4]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	621a      	str	r2, [r3, #32]
}
 800748a:	bf00      	nop
 800748c:	371c      	adds	r7, #28
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	40010000 	.word	0x40010000
 800749c:	40010400 	.word	0x40010400

080074a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b087      	sub	sp, #28
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a1b      	ldr	r3, [r3, #32]
 80074ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a1b      	ldr	r3, [r3, #32]
 80074b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	69db      	ldr	r3, [r3, #28]
 80074c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f023 0303 	bic.w	r3, r3, #3
 80074d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	4313      	orrs	r3, r2
 80074e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80074e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	021b      	lsls	r3, r3, #8
 80074f0:	697a      	ldr	r2, [r7, #20]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a21      	ldr	r2, [pc, #132]	@ (8007580 <TIM_OC3_SetConfig+0xe0>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d003      	beq.n	8007506 <TIM_OC3_SetConfig+0x66>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a20      	ldr	r2, [pc, #128]	@ (8007584 <TIM_OC3_SetConfig+0xe4>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d10d      	bne.n	8007522 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800750c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	021b      	lsls	r3, r3, #8
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	4313      	orrs	r3, r2
 8007518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a16      	ldr	r2, [pc, #88]	@ (8007580 <TIM_OC3_SetConfig+0xe0>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d003      	beq.n	8007532 <TIM_OC3_SetConfig+0x92>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a15      	ldr	r2, [pc, #84]	@ (8007584 <TIM_OC3_SetConfig+0xe4>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d113      	bne.n	800755a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	011b      	lsls	r3, r3, #4
 8007548:	693a      	ldr	r2, [r7, #16]
 800754a:	4313      	orrs	r3, r2
 800754c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	699b      	ldr	r3, [r3, #24]
 8007552:	011b      	lsls	r3, r3, #4
 8007554:	693a      	ldr	r2, [r7, #16]
 8007556:	4313      	orrs	r3, r2
 8007558:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	685a      	ldr	r2, [r3, #4]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	697a      	ldr	r2, [r7, #20]
 8007572:	621a      	str	r2, [r3, #32]
}
 8007574:	bf00      	nop
 8007576:	371c      	adds	r7, #28
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr
 8007580:	40010000 	.word	0x40010000
 8007584:	40010400 	.word	0x40010400

08007588 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007588:	b480      	push	{r7}
 800758a:	b087      	sub	sp, #28
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a1b      	ldr	r3, [r3, #32]
 8007596:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a1b      	ldr	r3, [r3, #32]
 800759c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	69db      	ldr	r3, [r3, #28]
 80075ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	021b      	lsls	r3, r3, #8
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80075d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	031b      	lsls	r3, r3, #12
 80075da:	693a      	ldr	r2, [r7, #16]
 80075dc:	4313      	orrs	r3, r2
 80075de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a12      	ldr	r2, [pc, #72]	@ (800762c <TIM_OC4_SetConfig+0xa4>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d003      	beq.n	80075f0 <TIM_OC4_SetConfig+0x68>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a11      	ldr	r2, [pc, #68]	@ (8007630 <TIM_OC4_SetConfig+0xa8>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d109      	bne.n	8007604 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80075f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	695b      	ldr	r3, [r3, #20]
 80075fc:	019b      	lsls	r3, r3, #6
 80075fe:	697a      	ldr	r2, [r7, #20]
 8007600:	4313      	orrs	r3, r2
 8007602:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	685a      	ldr	r2, [r3, #4]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	693a      	ldr	r2, [r7, #16]
 800761c:	621a      	str	r2, [r3, #32]
}
 800761e:	bf00      	nop
 8007620:	371c      	adds	r7, #28
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	40010000 	.word	0x40010000
 8007630:	40010400 	.word	0x40010400

08007634 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007634:	b480      	push	{r7}
 8007636:	b087      	sub	sp, #28
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6a1b      	ldr	r3, [r3, #32]
 8007644:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6a1b      	ldr	r3, [r3, #32]
 800764a:	f023 0201 	bic.w	r2, r3, #1
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800765e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	011b      	lsls	r3, r3, #4
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	4313      	orrs	r3, r2
 8007668:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	f023 030a 	bic.w	r3, r3, #10
 8007670:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	4313      	orrs	r3, r2
 8007678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	693a      	ldr	r2, [r7, #16]
 800767e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	621a      	str	r2, [r3, #32]
}
 8007686:	bf00      	nop
 8007688:	371c      	adds	r7, #28
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr

08007692 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007692:	b480      	push	{r7}
 8007694:	b087      	sub	sp, #28
 8007696:	af00      	add	r7, sp, #0
 8007698:	60f8      	str	r0, [r7, #12]
 800769a:	60b9      	str	r1, [r7, #8]
 800769c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6a1b      	ldr	r3, [r3, #32]
 80076a8:	f023 0210 	bic.w	r2, r3, #16
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	699b      	ldr	r3, [r3, #24]
 80076b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80076bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	031b      	lsls	r3, r3, #12
 80076c2:	693a      	ldr	r2, [r7, #16]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80076ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	011b      	lsls	r3, r3, #4
 80076d4:	697a      	ldr	r2, [r7, #20]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	693a      	ldr	r2, [r7, #16]
 80076de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	621a      	str	r2, [r3, #32]
}
 80076e6:	bf00      	nop
 80076e8:	371c      	adds	r7, #28
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b085      	sub	sp, #20
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
 80076fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007708:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	4313      	orrs	r3, r2
 8007710:	f043 0307 	orr.w	r3, r3, #7
 8007714:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	609a      	str	r2, [r3, #8]
}
 800771c:	bf00      	nop
 800771e:	3714      	adds	r7, #20
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007728:	b480      	push	{r7}
 800772a:	b087      	sub	sp, #28
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
 8007734:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007742:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	021a      	lsls	r2, r3, #8
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	431a      	orrs	r2, r3
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	4313      	orrs	r3, r2
 8007750:	697a      	ldr	r2, [r7, #20]
 8007752:	4313      	orrs	r3, r2
 8007754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	697a      	ldr	r2, [r7, #20]
 800775a:	609a      	str	r2, [r3, #8]
}
 800775c:	bf00      	nop
 800775e:	371c      	adds	r7, #28
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007768:	b480      	push	{r7}
 800776a:	b085      	sub	sp, #20
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007778:	2b01      	cmp	r3, #1
 800777a:	d101      	bne.n	8007780 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800777c:	2302      	movs	r3, #2
 800777e:	e05a      	b.n	8007836 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2202      	movs	r2, #2
 800778c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a21      	ldr	r2, [pc, #132]	@ (8007844 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d022      	beq.n	800780a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077cc:	d01d      	beq.n	800780a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a1d      	ldr	r2, [pc, #116]	@ (8007848 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d018      	beq.n	800780a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a1b      	ldr	r2, [pc, #108]	@ (800784c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d013      	beq.n	800780a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a1a      	ldr	r2, [pc, #104]	@ (8007850 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d00e      	beq.n	800780a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a18      	ldr	r2, [pc, #96]	@ (8007854 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d009      	beq.n	800780a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a17      	ldr	r2, [pc, #92]	@ (8007858 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d004      	beq.n	800780a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a15      	ldr	r2, [pc, #84]	@ (800785c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d10c      	bne.n	8007824 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007810:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	4313      	orrs	r3, r2
 800781a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	68ba      	ldr	r2, [r7, #8]
 8007822:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3714      	adds	r7, #20
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	40010000 	.word	0x40010000
 8007848:	40000400 	.word	0x40000400
 800784c:	40000800 	.word	0x40000800
 8007850:	40000c00 	.word	0x40000c00
 8007854:	40010400 	.word	0x40010400
 8007858:	40014000 	.word	0x40014000
 800785c:	40001800 	.word	0x40001800

08007860 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800786a:	2300      	movs	r3, #0
 800786c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007874:	2b01      	cmp	r3, #1
 8007876:	d101      	bne.n	800787c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007878:	2302      	movs	r3, #2
 800787a:	e03d      	b.n	80078f8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	4313      	orrs	r3, r2
 8007890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	4313      	orrs	r3, r2
 800789e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	695b      	ldr	r3, [r3, #20]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	69db      	ldr	r3, [r3, #28]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3714      	adds	r7, #20
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d101      	bne.n	8007916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e042      	b.n	800799c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b00      	cmp	r3, #0
 8007920:	d106      	bne.n	8007930 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7fb fca6 	bl	800327c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2224      	movs	r2, #36	@ 0x24
 8007934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68da      	ldr	r2, [r3, #12]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007946:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 facf 	bl	8007eec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	691a      	ldr	r2, [r3, #16]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800795c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	695a      	ldr	r2, [r3, #20]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800796c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68da      	ldr	r2, [r3, #12]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800797c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2220      	movs	r2, #32
 8007988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2220      	movs	r2, #32
 8007990:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3708      	adds	r7, #8
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b08a      	sub	sp, #40	@ 0x28
 80079a8:	af02      	add	r7, sp, #8
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	603b      	str	r3, [r7, #0]
 80079b0:	4613      	mov	r3, r2
 80079b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80079b4:	2300      	movs	r3, #0
 80079b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	2b20      	cmp	r3, #32
 80079c2:	d175      	bne.n	8007ab0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d002      	beq.n	80079d0 <HAL_UART_Transmit+0x2c>
 80079ca:	88fb      	ldrh	r3, [r7, #6]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e06e      	b.n	8007ab2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2221      	movs	r2, #33	@ 0x21
 80079de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079e2:	f7fb fe6d 	bl	80036c0 <HAL_GetTick>
 80079e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	88fa      	ldrh	r2, [r7, #6]
 80079ec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	88fa      	ldrh	r2, [r7, #6]
 80079f2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079fc:	d108      	bne.n	8007a10 <HAL_UART_Transmit+0x6c>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d104      	bne.n	8007a10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007a06:	2300      	movs	r3, #0
 8007a08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	61bb      	str	r3, [r7, #24]
 8007a0e:	e003      	b.n	8007a18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a14:	2300      	movs	r3, #0
 8007a16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007a18:	e02e      	b.n	8007a78 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	2200      	movs	r2, #0
 8007a22:	2180      	movs	r1, #128	@ 0x80
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f000 f97c 	bl	8007d22 <UART_WaitOnFlagUntilTimeout>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d005      	beq.n	8007a3c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2220      	movs	r2, #32
 8007a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	e03a      	b.n	8007ab2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10b      	bne.n	8007a5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	461a      	mov	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	3302      	adds	r3, #2
 8007a56:	61bb      	str	r3, [r7, #24]
 8007a58:	e007      	b.n	8007a6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	781a      	ldrb	r2, [r3, #0]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	3301      	adds	r3, #1
 8007a68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	3b01      	subs	r3, #1
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1cb      	bne.n	8007a1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	9300      	str	r3, [sp, #0]
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	2140      	movs	r1, #64	@ 0x40
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f000 f948 	bl	8007d22 <UART_WaitOnFlagUntilTimeout>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d005      	beq.n	8007aa4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2220      	movs	r2, #32
 8007a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e006      	b.n	8007ab2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2220      	movs	r2, #32
 8007aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007aac:	2300      	movs	r3, #0
 8007aae:	e000      	b.n	8007ab2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007ab0:	2302      	movs	r3, #2
  }
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3720      	adds	r7, #32
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
	...

08007abc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b08c      	sub	sp, #48	@ 0x30
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	2b20      	cmp	r3, #32
 8007ad4:	d156      	bne.n	8007b84 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <HAL_UART_Transmit_DMA+0x26>
 8007adc:	88fb      	ldrh	r3, [r7, #6]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d101      	bne.n	8007ae6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e04f      	b.n	8007b86 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8007ae6:	68ba      	ldr	r2, [r7, #8]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	88fa      	ldrh	r2, [r7, #6]
 8007af0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	88fa      	ldrh	r2, [r7, #6]
 8007af6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2221      	movs	r2, #33	@ 0x21
 8007b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b0a:	4a21      	ldr	r2, [pc, #132]	@ (8007b90 <HAL_UART_Transmit_DMA+0xd4>)
 8007b0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b12:	4a20      	ldr	r2, [pc, #128]	@ (8007b94 <HAL_UART_Transmit_DMA+0xd8>)
 8007b14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b1a:	4a1f      	ldr	r2, [pc, #124]	@ (8007b98 <HAL_UART_Transmit_DMA+0xdc>)
 8007b1c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b22:	2200      	movs	r2, #0
 8007b24:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007b26:	f107 0308 	add.w	r3, r7, #8
 8007b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b32:	6819      	ldr	r1, [r3, #0]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	3304      	adds	r3, #4
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	88fb      	ldrh	r3, [r7, #6]
 8007b3e:	f7fc fa21 	bl	8003f84 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007b4a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	3314      	adds	r3, #20
 8007b52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	e853 3f00 	ldrex	r3, [r3]
 8007b5a:	617b      	str	r3, [r7, #20]
   return(result);
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	3314      	adds	r3, #20
 8007b6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b6c:	627a      	str	r2, [r7, #36]	@ 0x24
 8007b6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b70:	6a39      	ldr	r1, [r7, #32]
 8007b72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b74:	e841 2300 	strex	r3, r2, [r1]
 8007b78:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d1e5      	bne.n	8007b4c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8007b80:	2300      	movs	r3, #0
 8007b82:	e000      	b.n	8007b86 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8007b84:	2302      	movs	r3, #2
  }
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3730      	adds	r7, #48	@ 0x30
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	08007bd9 	.word	0x08007bd9
 8007b94:	08007c73 	.word	0x08007c73
 8007b98:	08007c8f 	.word	0x08007c8f

08007b9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007ba4:	bf00      	nop
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007bcc:	bf00      	nop
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b090      	sub	sp, #64	@ 0x40
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d137      	bne.n	8007c64 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007bf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007bfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	3314      	adds	r3, #20
 8007c00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c04:	e853 3f00 	ldrex	r3, [r3]
 8007c08:	623b      	str	r3, [r7, #32]
   return(result);
 8007c0a:	6a3b      	ldr	r3, [r7, #32]
 8007c0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	3314      	adds	r3, #20
 8007c18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c1a:	633a      	str	r2, [r7, #48]	@ 0x30
 8007c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c22:	e841 2300 	strex	r3, r2, [r1]
 8007c26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d1e5      	bne.n	8007bfa <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	330c      	adds	r3, #12
 8007c34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	e853 3f00 	ldrex	r3, [r3]
 8007c3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c44:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	330c      	adds	r3, #12
 8007c4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c4e:	61fa      	str	r2, [r7, #28]
 8007c50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c52:	69b9      	ldr	r1, [r7, #24]
 8007c54:	69fa      	ldr	r2, [r7, #28]
 8007c56:	e841 2300 	strex	r3, r2, [r1]
 8007c5a:	617b      	str	r3, [r7, #20]
   return(result);
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1e5      	bne.n	8007c2e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c62:	e002      	b.n	8007c6a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007c64:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007c66:	f7ff ff99 	bl	8007b9c <HAL_UART_TxCpltCallback>
}
 8007c6a:	bf00      	nop
 8007c6c:	3740      	adds	r7, #64	@ 0x40
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b084      	sub	sp, #16
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c7e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	f7ff ff95 	bl	8007bb0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c86:	bf00      	nop
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b084      	sub	sp, #16
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007c96:	2300      	movs	r3, #0
 8007c98:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c9e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	695b      	ldr	r3, [r3, #20]
 8007ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007caa:	2b80      	cmp	r3, #128	@ 0x80
 8007cac:	bf0c      	ite	eq
 8007cae:	2301      	moveq	r3, #1
 8007cb0:	2300      	movne	r3, #0
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	2b21      	cmp	r3, #33	@ 0x21
 8007cc0:	d108      	bne.n	8007cd4 <UART_DMAError+0x46>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d005      	beq.n	8007cd4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007cce:	68b8      	ldr	r0, [r7, #8]
 8007cd0:	f000 f880 	bl	8007dd4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	695b      	ldr	r3, [r3, #20]
 8007cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cde:	2b40      	cmp	r3, #64	@ 0x40
 8007ce0:	bf0c      	ite	eq
 8007ce2:	2301      	moveq	r3, #1
 8007ce4:	2300      	movne	r3, #0
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	2b22      	cmp	r3, #34	@ 0x22
 8007cf4:	d108      	bne.n	8007d08 <UART_DMAError+0x7a>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d005      	beq.n	8007d08 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007d02:	68b8      	ldr	r0, [r7, #8]
 8007d04:	f000 f88e 	bl	8007e24 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d0c:	f043 0210 	orr.w	r2, r3, #16
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d14:	68b8      	ldr	r0, [r7, #8]
 8007d16:	f7ff ff55 	bl	8007bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d1a:	bf00      	nop
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b086      	sub	sp, #24
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	60f8      	str	r0, [r7, #12]
 8007d2a:	60b9      	str	r1, [r7, #8]
 8007d2c:	603b      	str	r3, [r7, #0]
 8007d2e:	4613      	mov	r3, r2
 8007d30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d32:	e03b      	b.n	8007dac <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d34:	6a3b      	ldr	r3, [r7, #32]
 8007d36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d3a:	d037      	beq.n	8007dac <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d3c:	f7fb fcc0 	bl	80036c0 <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	6a3a      	ldr	r2, [r7, #32]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d302      	bcc.n	8007d52 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d4c:	6a3b      	ldr	r3, [r7, #32]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d101      	bne.n	8007d56 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e03a      	b.n	8007dcc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	f003 0304 	and.w	r3, r3, #4
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d023      	beq.n	8007dac <UART_WaitOnFlagUntilTimeout+0x8a>
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	2b80      	cmp	r3, #128	@ 0x80
 8007d68:	d020      	beq.n	8007dac <UART_WaitOnFlagUntilTimeout+0x8a>
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	2b40      	cmp	r3, #64	@ 0x40
 8007d6e:	d01d      	beq.n	8007dac <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 0308 	and.w	r3, r3, #8
 8007d7a:	2b08      	cmp	r3, #8
 8007d7c:	d116      	bne.n	8007dac <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007d7e:	2300      	movs	r3, #0
 8007d80:	617b      	str	r3, [r7, #20]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	617b      	str	r3, [r7, #20]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	617b      	str	r3, [r7, #20]
 8007d92:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f000 f845 	bl	8007e24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2208      	movs	r2, #8
 8007d9e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e00f      	b.n	8007dcc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	4013      	ands	r3, r2
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	429a      	cmp	r2, r3
 8007dba:	bf0c      	ite	eq
 8007dbc:	2301      	moveq	r3, #1
 8007dbe:	2300      	movne	r3, #0
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	79fb      	ldrb	r3, [r7, #7]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d0b4      	beq.n	8007d34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3718      	adds	r7, #24
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b089      	sub	sp, #36	@ 0x24
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	330c      	adds	r3, #12
 8007de2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	e853 3f00 	ldrex	r3, [r3]
 8007dea:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007df2:	61fb      	str	r3, [r7, #28]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	330c      	adds	r3, #12
 8007dfa:	69fa      	ldr	r2, [r7, #28]
 8007dfc:	61ba      	str	r2, [r7, #24]
 8007dfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e00:	6979      	ldr	r1, [r7, #20]
 8007e02:	69ba      	ldr	r2, [r7, #24]
 8007e04:	e841 2300 	strex	r3, r2, [r1]
 8007e08:	613b      	str	r3, [r7, #16]
   return(result);
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1e5      	bne.n	8007ddc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2220      	movs	r2, #32
 8007e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007e18:	bf00      	nop
 8007e1a:	3724      	adds	r7, #36	@ 0x24
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b095      	sub	sp, #84	@ 0x54
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	330c      	adds	r3, #12
 8007e32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e36:	e853 3f00 	ldrex	r3, [r3]
 8007e3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	330c      	adds	r3, #12
 8007e4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007e4c:	643a      	str	r2, [r7, #64]	@ 0x40
 8007e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e54:	e841 2300 	strex	r3, r2, [r1]
 8007e58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d1e5      	bne.n	8007e2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	3314      	adds	r3, #20
 8007e66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e68:	6a3b      	ldr	r3, [r7, #32]
 8007e6a:	e853 3f00 	ldrex	r3, [r3]
 8007e6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	f023 0301 	bic.w	r3, r3, #1
 8007e76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	3314      	adds	r3, #20
 8007e7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e88:	e841 2300 	strex	r3, r2, [r1]
 8007e8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1e5      	bne.n	8007e60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d119      	bne.n	8007ed0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	330c      	adds	r3, #12
 8007ea2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	e853 3f00 	ldrex	r3, [r3]
 8007eaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	f023 0310 	bic.w	r3, r3, #16
 8007eb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	330c      	adds	r3, #12
 8007eba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ebc:	61ba      	str	r2, [r7, #24]
 8007ebe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec0:	6979      	ldr	r1, [r7, #20]
 8007ec2:	69ba      	ldr	r2, [r7, #24]
 8007ec4:	e841 2300 	strex	r3, r2, [r1]
 8007ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d1e5      	bne.n	8007e9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2220      	movs	r2, #32
 8007ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007ede:	bf00      	nop
 8007ee0:	3754      	adds	r7, #84	@ 0x54
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
	...

08007eec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007eec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ef0:	b0c0      	sub	sp, #256	@ 0x100
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f08:	68d9      	ldr	r1, [r3, #12]
 8007f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	ea40 0301 	orr.w	r3, r0, r1
 8007f14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f1a:	689a      	ldr	r2, [r3, #8]
 8007f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	431a      	orrs	r2, r3
 8007f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f28:	695b      	ldr	r3, [r3, #20]
 8007f2a:	431a      	orrs	r2, r3
 8007f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f30:	69db      	ldr	r3, [r3, #28]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007f44:	f021 010c 	bic.w	r1, r1, #12
 8007f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007f52:	430b      	orrs	r3, r1
 8007f54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	695b      	ldr	r3, [r3, #20]
 8007f5e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f66:	6999      	ldr	r1, [r3, #24]
 8007f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	ea40 0301 	orr.w	r3, r0, r1
 8007f72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	4b8f      	ldr	r3, [pc, #572]	@ (80081b8 <UART_SetConfig+0x2cc>)
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d005      	beq.n	8007f8c <UART_SetConfig+0xa0>
 8007f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	4b8d      	ldr	r3, [pc, #564]	@ (80081bc <UART_SetConfig+0x2d0>)
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d104      	bne.n	8007f96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f8c:	f7fd ff38 	bl	8005e00 <HAL_RCC_GetPCLK2Freq>
 8007f90:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007f94:	e003      	b.n	8007f9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f96:	f7fd ff1f 	bl	8005dd8 <HAL_RCC_GetPCLK1Freq>
 8007f9a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fa2:	69db      	ldr	r3, [r3, #28]
 8007fa4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fa8:	f040 810c 	bne.w	80081c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007fac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007fb6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007fba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007fbe:	4622      	mov	r2, r4
 8007fc0:	462b      	mov	r3, r5
 8007fc2:	1891      	adds	r1, r2, r2
 8007fc4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007fc6:	415b      	adcs	r3, r3
 8007fc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007fca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007fce:	4621      	mov	r1, r4
 8007fd0:	eb12 0801 	adds.w	r8, r2, r1
 8007fd4:	4629      	mov	r1, r5
 8007fd6:	eb43 0901 	adc.w	r9, r3, r1
 8007fda:	f04f 0200 	mov.w	r2, #0
 8007fde:	f04f 0300 	mov.w	r3, #0
 8007fe2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007fe6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007fea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007fee:	4690      	mov	r8, r2
 8007ff0:	4699      	mov	r9, r3
 8007ff2:	4623      	mov	r3, r4
 8007ff4:	eb18 0303 	adds.w	r3, r8, r3
 8007ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007ffc:	462b      	mov	r3, r5
 8007ffe:	eb49 0303 	adc.w	r3, r9, r3
 8008002:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008012:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008016:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800801a:	460b      	mov	r3, r1
 800801c:	18db      	adds	r3, r3, r3
 800801e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008020:	4613      	mov	r3, r2
 8008022:	eb42 0303 	adc.w	r3, r2, r3
 8008026:	657b      	str	r3, [r7, #84]	@ 0x54
 8008028:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800802c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008030:	f7f8 fe2a 	bl	8000c88 <__aeabi_uldivmod>
 8008034:	4602      	mov	r2, r0
 8008036:	460b      	mov	r3, r1
 8008038:	4b61      	ldr	r3, [pc, #388]	@ (80081c0 <UART_SetConfig+0x2d4>)
 800803a:	fba3 2302 	umull	r2, r3, r3, r2
 800803e:	095b      	lsrs	r3, r3, #5
 8008040:	011c      	lsls	r4, r3, #4
 8008042:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008046:	2200      	movs	r2, #0
 8008048:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800804c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008050:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008054:	4642      	mov	r2, r8
 8008056:	464b      	mov	r3, r9
 8008058:	1891      	adds	r1, r2, r2
 800805a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800805c:	415b      	adcs	r3, r3
 800805e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008060:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008064:	4641      	mov	r1, r8
 8008066:	eb12 0a01 	adds.w	sl, r2, r1
 800806a:	4649      	mov	r1, r9
 800806c:	eb43 0b01 	adc.w	fp, r3, r1
 8008070:	f04f 0200 	mov.w	r2, #0
 8008074:	f04f 0300 	mov.w	r3, #0
 8008078:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800807c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008080:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008084:	4692      	mov	sl, r2
 8008086:	469b      	mov	fp, r3
 8008088:	4643      	mov	r3, r8
 800808a:	eb1a 0303 	adds.w	r3, sl, r3
 800808e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008092:	464b      	mov	r3, r9
 8008094:	eb4b 0303 	adc.w	r3, fp, r3
 8008098:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800809c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80080a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80080ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80080b0:	460b      	mov	r3, r1
 80080b2:	18db      	adds	r3, r3, r3
 80080b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80080b6:	4613      	mov	r3, r2
 80080b8:	eb42 0303 	adc.w	r3, r2, r3
 80080bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80080be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80080c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80080c6:	f7f8 fddf 	bl	8000c88 <__aeabi_uldivmod>
 80080ca:	4602      	mov	r2, r0
 80080cc:	460b      	mov	r3, r1
 80080ce:	4611      	mov	r1, r2
 80080d0:	4b3b      	ldr	r3, [pc, #236]	@ (80081c0 <UART_SetConfig+0x2d4>)
 80080d2:	fba3 2301 	umull	r2, r3, r3, r1
 80080d6:	095b      	lsrs	r3, r3, #5
 80080d8:	2264      	movs	r2, #100	@ 0x64
 80080da:	fb02 f303 	mul.w	r3, r2, r3
 80080de:	1acb      	subs	r3, r1, r3
 80080e0:	00db      	lsls	r3, r3, #3
 80080e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80080e6:	4b36      	ldr	r3, [pc, #216]	@ (80081c0 <UART_SetConfig+0x2d4>)
 80080e8:	fba3 2302 	umull	r2, r3, r3, r2
 80080ec:	095b      	lsrs	r3, r3, #5
 80080ee:	005b      	lsls	r3, r3, #1
 80080f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80080f4:	441c      	add	r4, r3
 80080f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080fa:	2200      	movs	r2, #0
 80080fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008100:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008104:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008108:	4642      	mov	r2, r8
 800810a:	464b      	mov	r3, r9
 800810c:	1891      	adds	r1, r2, r2
 800810e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008110:	415b      	adcs	r3, r3
 8008112:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008114:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008118:	4641      	mov	r1, r8
 800811a:	1851      	adds	r1, r2, r1
 800811c:	6339      	str	r1, [r7, #48]	@ 0x30
 800811e:	4649      	mov	r1, r9
 8008120:	414b      	adcs	r3, r1
 8008122:	637b      	str	r3, [r7, #52]	@ 0x34
 8008124:	f04f 0200 	mov.w	r2, #0
 8008128:	f04f 0300 	mov.w	r3, #0
 800812c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008130:	4659      	mov	r1, fp
 8008132:	00cb      	lsls	r3, r1, #3
 8008134:	4651      	mov	r1, sl
 8008136:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800813a:	4651      	mov	r1, sl
 800813c:	00ca      	lsls	r2, r1, #3
 800813e:	4610      	mov	r0, r2
 8008140:	4619      	mov	r1, r3
 8008142:	4603      	mov	r3, r0
 8008144:	4642      	mov	r2, r8
 8008146:	189b      	adds	r3, r3, r2
 8008148:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800814c:	464b      	mov	r3, r9
 800814e:	460a      	mov	r2, r1
 8008150:	eb42 0303 	adc.w	r3, r2, r3
 8008154:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008164:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008168:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800816c:	460b      	mov	r3, r1
 800816e:	18db      	adds	r3, r3, r3
 8008170:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008172:	4613      	mov	r3, r2
 8008174:	eb42 0303 	adc.w	r3, r2, r3
 8008178:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800817a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800817e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008182:	f7f8 fd81 	bl	8000c88 <__aeabi_uldivmod>
 8008186:	4602      	mov	r2, r0
 8008188:	460b      	mov	r3, r1
 800818a:	4b0d      	ldr	r3, [pc, #52]	@ (80081c0 <UART_SetConfig+0x2d4>)
 800818c:	fba3 1302 	umull	r1, r3, r3, r2
 8008190:	095b      	lsrs	r3, r3, #5
 8008192:	2164      	movs	r1, #100	@ 0x64
 8008194:	fb01 f303 	mul.w	r3, r1, r3
 8008198:	1ad3      	subs	r3, r2, r3
 800819a:	00db      	lsls	r3, r3, #3
 800819c:	3332      	adds	r3, #50	@ 0x32
 800819e:	4a08      	ldr	r2, [pc, #32]	@ (80081c0 <UART_SetConfig+0x2d4>)
 80081a0:	fba2 2303 	umull	r2, r3, r2, r3
 80081a4:	095b      	lsrs	r3, r3, #5
 80081a6:	f003 0207 	and.w	r2, r3, #7
 80081aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4422      	add	r2, r4
 80081b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80081b4:	e106      	b.n	80083c4 <UART_SetConfig+0x4d8>
 80081b6:	bf00      	nop
 80081b8:	40011000 	.word	0x40011000
 80081bc:	40011400 	.word	0x40011400
 80081c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80081c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081c8:	2200      	movs	r2, #0
 80081ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80081ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80081d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80081d6:	4642      	mov	r2, r8
 80081d8:	464b      	mov	r3, r9
 80081da:	1891      	adds	r1, r2, r2
 80081dc:	6239      	str	r1, [r7, #32]
 80081de:	415b      	adcs	r3, r3
 80081e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80081e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80081e6:	4641      	mov	r1, r8
 80081e8:	1854      	adds	r4, r2, r1
 80081ea:	4649      	mov	r1, r9
 80081ec:	eb43 0501 	adc.w	r5, r3, r1
 80081f0:	f04f 0200 	mov.w	r2, #0
 80081f4:	f04f 0300 	mov.w	r3, #0
 80081f8:	00eb      	lsls	r3, r5, #3
 80081fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80081fe:	00e2      	lsls	r2, r4, #3
 8008200:	4614      	mov	r4, r2
 8008202:	461d      	mov	r5, r3
 8008204:	4643      	mov	r3, r8
 8008206:	18e3      	adds	r3, r4, r3
 8008208:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800820c:	464b      	mov	r3, r9
 800820e:	eb45 0303 	adc.w	r3, r5, r3
 8008212:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008222:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008226:	f04f 0200 	mov.w	r2, #0
 800822a:	f04f 0300 	mov.w	r3, #0
 800822e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008232:	4629      	mov	r1, r5
 8008234:	008b      	lsls	r3, r1, #2
 8008236:	4621      	mov	r1, r4
 8008238:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800823c:	4621      	mov	r1, r4
 800823e:	008a      	lsls	r2, r1, #2
 8008240:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008244:	f7f8 fd20 	bl	8000c88 <__aeabi_uldivmod>
 8008248:	4602      	mov	r2, r0
 800824a:	460b      	mov	r3, r1
 800824c:	4b60      	ldr	r3, [pc, #384]	@ (80083d0 <UART_SetConfig+0x4e4>)
 800824e:	fba3 2302 	umull	r2, r3, r3, r2
 8008252:	095b      	lsrs	r3, r3, #5
 8008254:	011c      	lsls	r4, r3, #4
 8008256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800825a:	2200      	movs	r2, #0
 800825c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008260:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008264:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008268:	4642      	mov	r2, r8
 800826a:	464b      	mov	r3, r9
 800826c:	1891      	adds	r1, r2, r2
 800826e:	61b9      	str	r1, [r7, #24]
 8008270:	415b      	adcs	r3, r3
 8008272:	61fb      	str	r3, [r7, #28]
 8008274:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008278:	4641      	mov	r1, r8
 800827a:	1851      	adds	r1, r2, r1
 800827c:	6139      	str	r1, [r7, #16]
 800827e:	4649      	mov	r1, r9
 8008280:	414b      	adcs	r3, r1
 8008282:	617b      	str	r3, [r7, #20]
 8008284:	f04f 0200 	mov.w	r2, #0
 8008288:	f04f 0300 	mov.w	r3, #0
 800828c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008290:	4659      	mov	r1, fp
 8008292:	00cb      	lsls	r3, r1, #3
 8008294:	4651      	mov	r1, sl
 8008296:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800829a:	4651      	mov	r1, sl
 800829c:	00ca      	lsls	r2, r1, #3
 800829e:	4610      	mov	r0, r2
 80082a0:	4619      	mov	r1, r3
 80082a2:	4603      	mov	r3, r0
 80082a4:	4642      	mov	r2, r8
 80082a6:	189b      	adds	r3, r3, r2
 80082a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80082ac:	464b      	mov	r3, r9
 80082ae:	460a      	mov	r2, r1
 80082b0:	eb42 0303 	adc.w	r3, r2, r3
 80082b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80082b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80082c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80082c4:	f04f 0200 	mov.w	r2, #0
 80082c8:	f04f 0300 	mov.w	r3, #0
 80082cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80082d0:	4649      	mov	r1, r9
 80082d2:	008b      	lsls	r3, r1, #2
 80082d4:	4641      	mov	r1, r8
 80082d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082da:	4641      	mov	r1, r8
 80082dc:	008a      	lsls	r2, r1, #2
 80082de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80082e2:	f7f8 fcd1 	bl	8000c88 <__aeabi_uldivmod>
 80082e6:	4602      	mov	r2, r0
 80082e8:	460b      	mov	r3, r1
 80082ea:	4611      	mov	r1, r2
 80082ec:	4b38      	ldr	r3, [pc, #224]	@ (80083d0 <UART_SetConfig+0x4e4>)
 80082ee:	fba3 2301 	umull	r2, r3, r3, r1
 80082f2:	095b      	lsrs	r3, r3, #5
 80082f4:	2264      	movs	r2, #100	@ 0x64
 80082f6:	fb02 f303 	mul.w	r3, r2, r3
 80082fa:	1acb      	subs	r3, r1, r3
 80082fc:	011b      	lsls	r3, r3, #4
 80082fe:	3332      	adds	r3, #50	@ 0x32
 8008300:	4a33      	ldr	r2, [pc, #204]	@ (80083d0 <UART_SetConfig+0x4e4>)
 8008302:	fba2 2303 	umull	r2, r3, r2, r3
 8008306:	095b      	lsrs	r3, r3, #5
 8008308:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800830c:	441c      	add	r4, r3
 800830e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008312:	2200      	movs	r2, #0
 8008314:	673b      	str	r3, [r7, #112]	@ 0x70
 8008316:	677a      	str	r2, [r7, #116]	@ 0x74
 8008318:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800831c:	4642      	mov	r2, r8
 800831e:	464b      	mov	r3, r9
 8008320:	1891      	adds	r1, r2, r2
 8008322:	60b9      	str	r1, [r7, #8]
 8008324:	415b      	adcs	r3, r3
 8008326:	60fb      	str	r3, [r7, #12]
 8008328:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800832c:	4641      	mov	r1, r8
 800832e:	1851      	adds	r1, r2, r1
 8008330:	6039      	str	r1, [r7, #0]
 8008332:	4649      	mov	r1, r9
 8008334:	414b      	adcs	r3, r1
 8008336:	607b      	str	r3, [r7, #4]
 8008338:	f04f 0200 	mov.w	r2, #0
 800833c:	f04f 0300 	mov.w	r3, #0
 8008340:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008344:	4659      	mov	r1, fp
 8008346:	00cb      	lsls	r3, r1, #3
 8008348:	4651      	mov	r1, sl
 800834a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800834e:	4651      	mov	r1, sl
 8008350:	00ca      	lsls	r2, r1, #3
 8008352:	4610      	mov	r0, r2
 8008354:	4619      	mov	r1, r3
 8008356:	4603      	mov	r3, r0
 8008358:	4642      	mov	r2, r8
 800835a:	189b      	adds	r3, r3, r2
 800835c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800835e:	464b      	mov	r3, r9
 8008360:	460a      	mov	r2, r1
 8008362:	eb42 0303 	adc.w	r3, r2, r3
 8008366:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	663b      	str	r3, [r7, #96]	@ 0x60
 8008372:	667a      	str	r2, [r7, #100]	@ 0x64
 8008374:	f04f 0200 	mov.w	r2, #0
 8008378:	f04f 0300 	mov.w	r3, #0
 800837c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008380:	4649      	mov	r1, r9
 8008382:	008b      	lsls	r3, r1, #2
 8008384:	4641      	mov	r1, r8
 8008386:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800838a:	4641      	mov	r1, r8
 800838c:	008a      	lsls	r2, r1, #2
 800838e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008392:	f7f8 fc79 	bl	8000c88 <__aeabi_uldivmod>
 8008396:	4602      	mov	r2, r0
 8008398:	460b      	mov	r3, r1
 800839a:	4b0d      	ldr	r3, [pc, #52]	@ (80083d0 <UART_SetConfig+0x4e4>)
 800839c:	fba3 1302 	umull	r1, r3, r3, r2
 80083a0:	095b      	lsrs	r3, r3, #5
 80083a2:	2164      	movs	r1, #100	@ 0x64
 80083a4:	fb01 f303 	mul.w	r3, r1, r3
 80083a8:	1ad3      	subs	r3, r2, r3
 80083aa:	011b      	lsls	r3, r3, #4
 80083ac:	3332      	adds	r3, #50	@ 0x32
 80083ae:	4a08      	ldr	r2, [pc, #32]	@ (80083d0 <UART_SetConfig+0x4e4>)
 80083b0:	fba2 2303 	umull	r2, r3, r2, r3
 80083b4:	095b      	lsrs	r3, r3, #5
 80083b6:	f003 020f 	and.w	r2, r3, #15
 80083ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4422      	add	r2, r4
 80083c2:	609a      	str	r2, [r3, #8]
}
 80083c4:	bf00      	nop
 80083c6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80083ca:	46bd      	mov	sp, r7
 80083cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083d0:	51eb851f 	.word	0x51eb851f

080083d4 <__NVIC_SetPriority>:
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	4603      	mov	r3, r0
 80083dc:	6039      	str	r1, [r7, #0]
 80083de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80083e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	db0a      	blt.n	80083fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	b2da      	uxtb	r2, r3
 80083ec:	490c      	ldr	r1, [pc, #48]	@ (8008420 <__NVIC_SetPriority+0x4c>)
 80083ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083f2:	0112      	lsls	r2, r2, #4
 80083f4:	b2d2      	uxtb	r2, r2
 80083f6:	440b      	add	r3, r1
 80083f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80083fc:	e00a      	b.n	8008414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	b2da      	uxtb	r2, r3
 8008402:	4908      	ldr	r1, [pc, #32]	@ (8008424 <__NVIC_SetPriority+0x50>)
 8008404:	79fb      	ldrb	r3, [r7, #7]
 8008406:	f003 030f 	and.w	r3, r3, #15
 800840a:	3b04      	subs	r3, #4
 800840c:	0112      	lsls	r2, r2, #4
 800840e:	b2d2      	uxtb	r2, r2
 8008410:	440b      	add	r3, r1
 8008412:	761a      	strb	r2, [r3, #24]
}
 8008414:	bf00      	nop
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr
 8008420:	e000e100 	.word	0xe000e100
 8008424:	e000ed00 	.word	0xe000ed00

08008428 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008428:	b580      	push	{r7, lr}
 800842a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800842c:	2100      	movs	r1, #0
 800842e:	f06f 0004 	mvn.w	r0, #4
 8008432:	f7ff ffcf 	bl	80083d4 <__NVIC_SetPriority>
#endif
}
 8008436:	bf00      	nop
 8008438:	bd80      	pop	{r7, pc}
	...

0800843c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008442:	f3ef 8305 	mrs	r3, IPSR
 8008446:	603b      	str	r3, [r7, #0]
  return(result);
 8008448:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800844a:	2b00      	cmp	r3, #0
 800844c:	d003      	beq.n	8008456 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800844e:	f06f 0305 	mvn.w	r3, #5
 8008452:	607b      	str	r3, [r7, #4]
 8008454:	e00c      	b.n	8008470 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008456:	4b0a      	ldr	r3, [pc, #40]	@ (8008480 <osKernelInitialize+0x44>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d105      	bne.n	800846a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800845e:	4b08      	ldr	r3, [pc, #32]	@ (8008480 <osKernelInitialize+0x44>)
 8008460:	2201      	movs	r2, #1
 8008462:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008464:	2300      	movs	r3, #0
 8008466:	607b      	str	r3, [r7, #4]
 8008468:	e002      	b.n	8008470 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800846a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800846e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008470:	687b      	ldr	r3, [r7, #4]
}
 8008472:	4618      	mov	r0, r3
 8008474:	370c      	adds	r7, #12
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	200009c4 	.word	0x200009c4

08008484 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800848a:	f3ef 8305 	mrs	r3, IPSR
 800848e:	603b      	str	r3, [r7, #0]
  return(result);
 8008490:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008492:	2b00      	cmp	r3, #0
 8008494:	d003      	beq.n	800849e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008496:	f06f 0305 	mvn.w	r3, #5
 800849a:	607b      	str	r3, [r7, #4]
 800849c:	e010      	b.n	80084c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800849e:	4b0b      	ldr	r3, [pc, #44]	@ (80084cc <osKernelStart+0x48>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d109      	bne.n	80084ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80084a6:	f7ff ffbf 	bl	8008428 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80084aa:	4b08      	ldr	r3, [pc, #32]	@ (80084cc <osKernelStart+0x48>)
 80084ac:	2202      	movs	r2, #2
 80084ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80084b0:	f001 ff0c 	bl	800a2cc <vTaskStartScheduler>
      stat = osOK;
 80084b4:	2300      	movs	r3, #0
 80084b6:	607b      	str	r3, [r7, #4]
 80084b8:	e002      	b.n	80084c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80084ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80084be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80084c0:	687b      	ldr	r3, [r7, #4]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3708      	adds	r7, #8
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	200009c4 	.word	0x200009c4

080084d0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084d6:	f3ef 8305 	mrs	r3, IPSR
 80084da:	603b      	str	r3, [r7, #0]
  return(result);
 80084dc:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d003      	beq.n	80084ea <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80084e2:	f002 f817 	bl	800a514 <xTaskGetTickCountFromISR>
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	e002      	b.n	80084f0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80084ea:	f002 f803 	bl	800a4f4 <xTaskGetTickCount>
 80084ee:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80084f0:	687b      	ldr	r3, [r7, #4]
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 80084fa:	b480      	push	{r7}
 80084fc:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 80084fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 8008502:	4618      	mov	r0, r3
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800850c:	b580      	push	{r7, lr}
 800850e:	b08e      	sub	sp, #56	@ 0x38
 8008510:	af04      	add	r7, sp, #16
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008518:	2300      	movs	r3, #0
 800851a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800851c:	f3ef 8305 	mrs	r3, IPSR
 8008520:	617b      	str	r3, [r7, #20]
  return(result);
 8008522:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008524:	2b00      	cmp	r3, #0
 8008526:	d17e      	bne.n	8008626 <osThreadNew+0x11a>
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d07b      	beq.n	8008626 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800852e:	2380      	movs	r3, #128	@ 0x80
 8008530:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008532:	2318      	movs	r3, #24
 8008534:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008536:	2300      	movs	r3, #0
 8008538:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800853a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800853e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d045      	beq.n	80085d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d002      	beq.n	8008554 <osThreadNew+0x48>
        name = attr->name;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	699b      	ldr	r3, [r3, #24]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d002      	beq.n	8008562 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	699b      	ldr	r3, [r3, #24]
 8008560:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d008      	beq.n	800857a <osThreadNew+0x6e>
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	2b38      	cmp	r3, #56	@ 0x38
 800856c:	d805      	bhi.n	800857a <osThreadNew+0x6e>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	f003 0301 	and.w	r3, r3, #1
 8008576:	2b00      	cmp	r3, #0
 8008578:	d001      	beq.n	800857e <osThreadNew+0x72>
        return (NULL);
 800857a:	2300      	movs	r3, #0
 800857c:	e054      	b.n	8008628 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	695b      	ldr	r3, [r3, #20]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d003      	beq.n	800858e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	695b      	ldr	r3, [r3, #20]
 800858a:	089b      	lsrs	r3, r3, #2
 800858c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00e      	beq.n	80085b4 <osThreadNew+0xa8>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	2b5b      	cmp	r3, #91	@ 0x5b
 800859c:	d90a      	bls.n	80085b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d006      	beq.n	80085b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	695b      	ldr	r3, [r3, #20]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d002      	beq.n	80085b4 <osThreadNew+0xa8>
        mem = 1;
 80085ae:	2301      	movs	r3, #1
 80085b0:	61bb      	str	r3, [r7, #24]
 80085b2:	e010      	b.n	80085d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d10c      	bne.n	80085d6 <osThreadNew+0xca>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d108      	bne.n	80085d6 <osThreadNew+0xca>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d104      	bne.n	80085d6 <osThreadNew+0xca>
          mem = 0;
 80085cc:	2300      	movs	r3, #0
 80085ce:	61bb      	str	r3, [r7, #24]
 80085d0:	e001      	b.n	80085d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80085d2:	2300      	movs	r3, #0
 80085d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d110      	bne.n	80085fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80085e4:	9202      	str	r2, [sp, #8]
 80085e6:	9301      	str	r3, [sp, #4]
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	6a3a      	ldr	r2, [r7, #32]
 80085f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	f001 fc8e 	bl	8009f14 <xTaskCreateStatic>
 80085f8:	4603      	mov	r3, r0
 80085fa:	613b      	str	r3, [r7, #16]
 80085fc:	e013      	b.n	8008626 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d110      	bne.n	8008626 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008604:	6a3b      	ldr	r3, [r7, #32]
 8008606:	b29a      	uxth	r2, r3
 8008608:	f107 0310 	add.w	r3, r7, #16
 800860c:	9301      	str	r3, [sp, #4]
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	f001 fcdc 	bl	8009fd4 <xTaskCreate>
 800861c:	4603      	mov	r3, r0
 800861e:	2b01      	cmp	r3, #1
 8008620:	d001      	beq.n	8008626 <osThreadNew+0x11a>
            hTask = NULL;
 8008622:	2300      	movs	r3, #0
 8008624:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008626:	693b      	ldr	r3, [r7, #16]
}
 8008628:	4618      	mov	r0, r3
 800862a:	3728      	adds	r7, #40	@ 0x28
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008638:	f3ef 8305 	mrs	r3, IPSR
 800863c:	60bb      	str	r3, [r7, #8]
  return(result);
 800863e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008640:	2b00      	cmp	r3, #0
 8008642:	d003      	beq.n	800864c <osDelay+0x1c>
    stat = osErrorISR;
 8008644:	f06f 0305 	mvn.w	r3, #5
 8008648:	60fb      	str	r3, [r7, #12]
 800864a:	e007      	b.n	800865c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800864c:	2300      	movs	r3, #0
 800864e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d002      	beq.n	800865c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f001 fe02 	bl	800a260 <vTaskDelay>
    }
  }

  return (stat);
 800865c:	68fb      	ldr	r3, [r7, #12]
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008666:	b580      	push	{r7, lr}
 8008668:	b088      	sub	sp, #32
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800866e:	2300      	movs	r3, #0
 8008670:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008672:	f3ef 8305 	mrs	r3, IPSR
 8008676:	60bb      	str	r3, [r7, #8]
  return(result);
 8008678:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800867a:	2b00      	cmp	r3, #0
 800867c:	d174      	bne.n	8008768 <osMutexNew+0x102>
    if (attr != NULL) {
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d003      	beq.n	800868c <osMutexNew+0x26>
      type = attr->attr_bits;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	61bb      	str	r3, [r7, #24]
 800868a:	e001      	b.n	8008690 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800868c:	2300      	movs	r3, #0
 800868e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	f003 0301 	and.w	r3, r3, #1
 8008696:	2b00      	cmp	r3, #0
 8008698:	d002      	beq.n	80086a0 <osMutexNew+0x3a>
      rmtx = 1U;
 800869a:	2301      	movs	r3, #1
 800869c:	617b      	str	r3, [r7, #20]
 800869e:	e001      	b.n	80086a4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80086a0:	2300      	movs	r3, #0
 80086a2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	f003 0308 	and.w	r3, r3, #8
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d15c      	bne.n	8008768 <osMutexNew+0x102>
      mem = -1;
 80086ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80086b2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d015      	beq.n	80086e6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d006      	beq.n	80086d0 <osMutexNew+0x6a>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	2b4f      	cmp	r3, #79	@ 0x4f
 80086c8:	d902      	bls.n	80086d0 <osMutexNew+0x6a>
          mem = 1;
 80086ca:	2301      	movs	r3, #1
 80086cc:	613b      	str	r3, [r7, #16]
 80086ce:	e00c      	b.n	80086ea <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d108      	bne.n	80086ea <osMutexNew+0x84>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d104      	bne.n	80086ea <osMutexNew+0x84>
            mem = 0;
 80086e0:	2300      	movs	r3, #0
 80086e2:	613b      	str	r3, [r7, #16]
 80086e4:	e001      	b.n	80086ea <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80086e6:	2300      	movs	r3, #0
 80086e8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d112      	bne.n	8008716 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d007      	beq.n	8008706 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	4619      	mov	r1, r3
 80086fc:	2004      	movs	r0, #4
 80086fe:	f000 fd2c 	bl	800915a <xQueueCreateMutexStatic>
 8008702:	61f8      	str	r0, [r7, #28]
 8008704:	e016      	b.n	8008734 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	4619      	mov	r1, r3
 800870c:	2001      	movs	r0, #1
 800870e:	f000 fd24 	bl	800915a <xQueueCreateMutexStatic>
 8008712:	61f8      	str	r0, [r7, #28]
 8008714:	e00e      	b.n	8008734 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d10b      	bne.n	8008734 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d004      	beq.n	800872c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008722:	2004      	movs	r0, #4
 8008724:	f000 fd01 	bl	800912a <xQueueCreateMutex>
 8008728:	61f8      	str	r0, [r7, #28]
 800872a:	e003      	b.n	8008734 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800872c:	2001      	movs	r0, #1
 800872e:	f000 fcfc 	bl	800912a <xQueueCreateMutex>
 8008732:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00c      	beq.n	8008754 <osMutexNew+0xee>
        if (attr != NULL) {
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d003      	beq.n	8008748 <osMutexNew+0xe2>
          name = attr->name;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	60fb      	str	r3, [r7, #12]
 8008746:	e001      	b.n	800874c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008748:	2300      	movs	r3, #0
 800874a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800874c:	68f9      	ldr	r1, [r7, #12]
 800874e:	69f8      	ldr	r0, [r7, #28]
 8008750:	f001 fb58 	bl	8009e04 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d006      	beq.n	8008768 <osMutexNew+0x102>
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d003      	beq.n	8008768 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	f043 0301 	orr.w	r3, r3, #1
 8008766:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008768:	69fb      	ldr	r3, [r7, #28]
}
 800876a:	4618      	mov	r0, r3
 800876c:	3720      	adds	r7, #32
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008772:	b580      	push	{r7, lr}
 8008774:	b086      	sub	sp, #24
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
 800877a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f023 0301 	bic.w	r3, r3, #1
 8008782:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f003 0301 	and.w	r3, r3, #1
 800878a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800878c:	2300      	movs	r3, #0
 800878e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008790:	f3ef 8305 	mrs	r3, IPSR
 8008794:	60bb      	str	r3, [r7, #8]
  return(result);
 8008796:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008798:	2b00      	cmp	r3, #0
 800879a:	d003      	beq.n	80087a4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800879c:	f06f 0305 	mvn.w	r3, #5
 80087a0:	617b      	str	r3, [r7, #20]
 80087a2:	e02c      	b.n	80087fe <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d103      	bne.n	80087b2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80087aa:	f06f 0303 	mvn.w	r3, #3
 80087ae:	617b      	str	r3, [r7, #20]
 80087b0:	e025      	b.n	80087fe <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d011      	beq.n	80087dc <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80087b8:	6839      	ldr	r1, [r7, #0]
 80087ba:	6938      	ldr	r0, [r7, #16]
 80087bc:	f000 fd1d 	bl	80091fa <xQueueTakeMutexRecursive>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d01b      	beq.n	80087fe <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d003      	beq.n	80087d4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80087cc:	f06f 0301 	mvn.w	r3, #1
 80087d0:	617b      	str	r3, [r7, #20]
 80087d2:	e014      	b.n	80087fe <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80087d4:	f06f 0302 	mvn.w	r3, #2
 80087d8:	617b      	str	r3, [r7, #20]
 80087da:	e010      	b.n	80087fe <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80087dc:	6839      	ldr	r1, [r7, #0]
 80087de:	6938      	ldr	r0, [r7, #16]
 80087e0:	f001 f832 	bl	8009848 <xQueueSemaphoreTake>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d009      	beq.n	80087fe <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d003      	beq.n	80087f8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80087f0:	f06f 0301 	mvn.w	r3, #1
 80087f4:	617b      	str	r3, [r7, #20]
 80087f6:	e002      	b.n	80087fe <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80087f8:	f06f 0302 	mvn.w	r3, #2
 80087fc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80087fe:	697b      	ldr	r3, [r7, #20]
}
 8008800:	4618      	mov	r0, r3
 8008802:	3718      	adds	r7, #24
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008808:	b580      	push	{r7, lr}
 800880a:	b086      	sub	sp, #24
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f023 0301 	bic.w	r3, r3, #1
 8008816:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f003 0301 	and.w	r3, r3, #1
 800881e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008820:	2300      	movs	r3, #0
 8008822:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008824:	f3ef 8305 	mrs	r3, IPSR
 8008828:	60bb      	str	r3, [r7, #8]
  return(result);
 800882a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800882c:	2b00      	cmp	r3, #0
 800882e:	d003      	beq.n	8008838 <osMutexRelease+0x30>
    stat = osErrorISR;
 8008830:	f06f 0305 	mvn.w	r3, #5
 8008834:	617b      	str	r3, [r7, #20]
 8008836:	e01f      	b.n	8008878 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d103      	bne.n	8008846 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800883e:	f06f 0303 	mvn.w	r3, #3
 8008842:	617b      	str	r3, [r7, #20]
 8008844:	e018      	b.n	8008878 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d009      	beq.n	8008860 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800884c:	6938      	ldr	r0, [r7, #16]
 800884e:	f000 fc9f 	bl	8009190 <xQueueGiveMutexRecursive>
 8008852:	4603      	mov	r3, r0
 8008854:	2b01      	cmp	r3, #1
 8008856:	d00f      	beq.n	8008878 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008858:	f06f 0302 	mvn.w	r3, #2
 800885c:	617b      	str	r3, [r7, #20]
 800885e:	e00b      	b.n	8008878 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008860:	2300      	movs	r3, #0
 8008862:	2200      	movs	r2, #0
 8008864:	2100      	movs	r1, #0
 8008866:	6938      	ldr	r0, [r7, #16]
 8008868:	f000 fd6c 	bl	8009344 <xQueueGenericSend>
 800886c:	4603      	mov	r3, r0
 800886e:	2b01      	cmp	r3, #1
 8008870:	d002      	beq.n	8008878 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008872:	f06f 0302 	mvn.w	r3, #2
 8008876:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008878:	697b      	ldr	r3, [r7, #20]
}
 800887a:	4618      	mov	r0, r3
 800887c:	3718      	adds	r7, #24
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008882:	b580      	push	{r7, lr}
 8008884:	b08a      	sub	sp, #40	@ 0x28
 8008886:	af02      	add	r7, sp, #8
 8008888:	60f8      	str	r0, [r7, #12]
 800888a:	60b9      	str	r1, [r7, #8]
 800888c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800888e:	2300      	movs	r3, #0
 8008890:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008892:	f3ef 8305 	mrs	r3, IPSR
 8008896:	613b      	str	r3, [r7, #16]
  return(result);
 8008898:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800889a:	2b00      	cmp	r3, #0
 800889c:	d175      	bne.n	800898a <osSemaphoreNew+0x108>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d072      	beq.n	800898a <osSemaphoreNew+0x108>
 80088a4:	68ba      	ldr	r2, [r7, #8]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d86e      	bhi.n	800898a <osSemaphoreNew+0x108>
    mem = -1;
 80088ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80088b0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d015      	beq.n	80088e4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d006      	beq.n	80088ce <osSemaphoreNew+0x4c>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	2b4f      	cmp	r3, #79	@ 0x4f
 80088c6:	d902      	bls.n	80088ce <osSemaphoreNew+0x4c>
        mem = 1;
 80088c8:	2301      	movs	r3, #1
 80088ca:	61bb      	str	r3, [r7, #24]
 80088cc:	e00c      	b.n	80088e8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d108      	bne.n	80088e8 <osSemaphoreNew+0x66>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d104      	bne.n	80088e8 <osSemaphoreNew+0x66>
          mem = 0;
 80088de:	2300      	movs	r3, #0
 80088e0:	61bb      	str	r3, [r7, #24]
 80088e2:	e001      	b.n	80088e8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80088e4:	2300      	movs	r3, #0
 80088e6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088ee:	d04c      	beq.n	800898a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d128      	bne.n	8008948 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d10a      	bne.n	8008912 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	2203      	movs	r2, #3
 8008902:	9200      	str	r2, [sp, #0]
 8008904:	2200      	movs	r2, #0
 8008906:	2100      	movs	r1, #0
 8008908:	2001      	movs	r0, #1
 800890a:	f000 fb19 	bl	8008f40 <xQueueGenericCreateStatic>
 800890e:	61f8      	str	r0, [r7, #28]
 8008910:	e005      	b.n	800891e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008912:	2203      	movs	r2, #3
 8008914:	2100      	movs	r1, #0
 8008916:	2001      	movs	r0, #1
 8008918:	f000 fb8f 	bl	800903a <xQueueGenericCreate>
 800891c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d022      	beq.n	800896a <osSemaphoreNew+0xe8>
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d01f      	beq.n	800896a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800892a:	2300      	movs	r3, #0
 800892c:	2200      	movs	r2, #0
 800892e:	2100      	movs	r1, #0
 8008930:	69f8      	ldr	r0, [r7, #28]
 8008932:	f000 fd07 	bl	8009344 <xQueueGenericSend>
 8008936:	4603      	mov	r3, r0
 8008938:	2b01      	cmp	r3, #1
 800893a:	d016      	beq.n	800896a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800893c:	69f8      	ldr	r0, [r7, #28]
 800893e:	f001 f915 	bl	8009b6c <vQueueDelete>
            hSemaphore = NULL;
 8008942:	2300      	movs	r3, #0
 8008944:	61fb      	str	r3, [r7, #28]
 8008946:	e010      	b.n	800896a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	2b01      	cmp	r3, #1
 800894c:	d108      	bne.n	8008960 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	461a      	mov	r2, r3
 8008954:	68b9      	ldr	r1, [r7, #8]
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	f000 fc86 	bl	8009268 <xQueueCreateCountingSemaphoreStatic>
 800895c:	61f8      	str	r0, [r7, #28]
 800895e:	e004      	b.n	800896a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008960:	68b9      	ldr	r1, [r7, #8]
 8008962:	68f8      	ldr	r0, [r7, #12]
 8008964:	f000 fcb9 	bl	80092da <xQueueCreateCountingSemaphore>
 8008968:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d00c      	beq.n	800898a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d003      	beq.n	800897e <osSemaphoreNew+0xfc>
          name = attr->name;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	617b      	str	r3, [r7, #20]
 800897c:	e001      	b.n	8008982 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800897e:	2300      	movs	r3, #0
 8008980:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008982:	6979      	ldr	r1, [r7, #20]
 8008984:	69f8      	ldr	r0, [r7, #28]
 8008986:	f001 fa3d 	bl	8009e04 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800898a:	69fb      	ldr	r3, [r7, #28]
}
 800898c:	4618      	mov	r0, r3
 800898e:	3720      	adds	r7, #32
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008994:	b580      	push	{r7, lr}
 8008996:	b086      	sub	sp, #24
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80089a2:	2300      	movs	r3, #0
 80089a4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d103      	bne.n	80089b4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80089ac:	f06f 0303 	mvn.w	r3, #3
 80089b0:	617b      	str	r3, [r7, #20]
 80089b2:	e039      	b.n	8008a28 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089b4:	f3ef 8305 	mrs	r3, IPSR
 80089b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80089ba:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d022      	beq.n	8008a06 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d003      	beq.n	80089ce <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80089c6:	f06f 0303 	mvn.w	r3, #3
 80089ca:	617b      	str	r3, [r7, #20]
 80089cc:	e02c      	b.n	8008a28 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80089ce:	2300      	movs	r3, #0
 80089d0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80089d2:	f107 0308 	add.w	r3, r7, #8
 80089d6:	461a      	mov	r2, r3
 80089d8:	2100      	movs	r1, #0
 80089da:	6938      	ldr	r0, [r7, #16]
 80089dc:	f001 f844 	bl	8009a68 <xQueueReceiveFromISR>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d003      	beq.n	80089ee <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80089e6:	f06f 0302 	mvn.w	r3, #2
 80089ea:	617b      	str	r3, [r7, #20]
 80089ec:	e01c      	b.n	8008a28 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d019      	beq.n	8008a28 <osSemaphoreAcquire+0x94>
 80089f4:	4b0f      	ldr	r3, [pc, #60]	@ (8008a34 <osSemaphoreAcquire+0xa0>)
 80089f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089fa:	601a      	str	r2, [r3, #0]
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	f3bf 8f6f 	isb	sy
 8008a04:	e010      	b.n	8008a28 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008a06:	6839      	ldr	r1, [r7, #0]
 8008a08:	6938      	ldr	r0, [r7, #16]
 8008a0a:	f000 ff1d 	bl	8009848 <xQueueSemaphoreTake>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d009      	beq.n	8008a28 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d003      	beq.n	8008a22 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8008a1a:	f06f 0301 	mvn.w	r3, #1
 8008a1e:	617b      	str	r3, [r7, #20]
 8008a20:	e002      	b.n	8008a28 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8008a22:	f06f 0302 	mvn.w	r3, #2
 8008a26:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008a28:	697b      	ldr	r3, [r7, #20]
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3718      	adds	r7, #24
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	e000ed04 	.word	0xe000ed04

08008a38 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b08a      	sub	sp, #40	@ 0x28
 8008a3c:	af02      	add	r7, sp, #8
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008a44:	2300      	movs	r3, #0
 8008a46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a48:	f3ef 8305 	mrs	r3, IPSR
 8008a4c:	613b      	str	r3, [r7, #16]
  return(result);
 8008a4e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d15f      	bne.n	8008b14 <osMessageQueueNew+0xdc>
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d05c      	beq.n	8008b14 <osMessageQueueNew+0xdc>
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d059      	beq.n	8008b14 <osMessageQueueNew+0xdc>
    mem = -1;
 8008a60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008a64:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d029      	beq.n	8008ac0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d012      	beq.n	8008a9a <osMessageQueueNew+0x62>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	2b4f      	cmp	r3, #79	@ 0x4f
 8008a7a:	d90e      	bls.n	8008a9a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00a      	beq.n	8008a9a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	695a      	ldr	r2, [r3, #20]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	68b9      	ldr	r1, [r7, #8]
 8008a8c:	fb01 f303 	mul.w	r3, r1, r3
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d302      	bcc.n	8008a9a <osMessageQueueNew+0x62>
        mem = 1;
 8008a94:	2301      	movs	r3, #1
 8008a96:	61bb      	str	r3, [r7, #24]
 8008a98:	e014      	b.n	8008ac4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d110      	bne.n	8008ac4 <osMessageQueueNew+0x8c>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d10c      	bne.n	8008ac4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d108      	bne.n	8008ac4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	695b      	ldr	r3, [r3, #20]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d104      	bne.n	8008ac4 <osMessageQueueNew+0x8c>
          mem = 0;
 8008aba:	2300      	movs	r3, #0
 8008abc:	61bb      	str	r3, [r7, #24]
 8008abe:	e001      	b.n	8008ac4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d10b      	bne.n	8008ae2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	691a      	ldr	r2, [r3, #16]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	2100      	movs	r1, #0
 8008ad4:	9100      	str	r1, [sp, #0]
 8008ad6:	68b9      	ldr	r1, [r7, #8]
 8008ad8:	68f8      	ldr	r0, [r7, #12]
 8008ada:	f000 fa31 	bl	8008f40 <xQueueGenericCreateStatic>
 8008ade:	61f8      	str	r0, [r7, #28]
 8008ae0:	e008      	b.n	8008af4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d105      	bne.n	8008af4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008ae8:	2200      	movs	r2, #0
 8008aea:	68b9      	ldr	r1, [r7, #8]
 8008aec:	68f8      	ldr	r0, [r7, #12]
 8008aee:	f000 faa4 	bl	800903a <xQueueGenericCreate>
 8008af2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00c      	beq.n	8008b14 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d003      	beq.n	8008b08 <osMessageQueueNew+0xd0>
        name = attr->name;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	617b      	str	r3, [r7, #20]
 8008b06:	e001      	b.n	8008b0c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008b0c:	6979      	ldr	r1, [r7, #20]
 8008b0e:	69f8      	ldr	r0, [r7, #28]
 8008b10:	f001 f978 	bl	8009e04 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008b14:	69fb      	ldr	r3, [r7, #28]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3720      	adds	r7, #32
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
	...

08008b20 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b088      	sub	sp, #32
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	603b      	str	r3, [r7, #0]
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008b34:	2300      	movs	r3, #0
 8008b36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b38:	f3ef 8305 	mrs	r3, IPSR
 8008b3c:	617b      	str	r3, [r7, #20]
  return(result);
 8008b3e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d028      	beq.n	8008b96 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d005      	beq.n	8008b56 <osMessageQueuePut+0x36>
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d002      	beq.n	8008b56 <osMessageQueuePut+0x36>
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d003      	beq.n	8008b5e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008b56:	f06f 0303 	mvn.w	r3, #3
 8008b5a:	61fb      	str	r3, [r7, #28]
 8008b5c:	e038      	b.n	8008bd0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008b62:	f107 0210 	add.w	r2, r7, #16
 8008b66:	2300      	movs	r3, #0
 8008b68:	68b9      	ldr	r1, [r7, #8]
 8008b6a:	69b8      	ldr	r0, [r7, #24]
 8008b6c:	f000 fcec 	bl	8009548 <xQueueGenericSendFromISR>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d003      	beq.n	8008b7e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008b76:	f06f 0302 	mvn.w	r3, #2
 8008b7a:	61fb      	str	r3, [r7, #28]
 8008b7c:	e028      	b.n	8008bd0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d025      	beq.n	8008bd0 <osMessageQueuePut+0xb0>
 8008b84:	4b15      	ldr	r3, [pc, #84]	@ (8008bdc <osMessageQueuePut+0xbc>)
 8008b86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b8a:	601a      	str	r2, [r3, #0]
 8008b8c:	f3bf 8f4f 	dsb	sy
 8008b90:	f3bf 8f6f 	isb	sy
 8008b94:	e01c      	b.n	8008bd0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d002      	beq.n	8008ba2 <osMessageQueuePut+0x82>
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d103      	bne.n	8008baa <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008ba2:	f06f 0303 	mvn.w	r3, #3
 8008ba6:	61fb      	str	r3, [r7, #28]
 8008ba8:	e012      	b.n	8008bd0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008baa:	2300      	movs	r3, #0
 8008bac:	683a      	ldr	r2, [r7, #0]
 8008bae:	68b9      	ldr	r1, [r7, #8]
 8008bb0:	69b8      	ldr	r0, [r7, #24]
 8008bb2:	f000 fbc7 	bl	8009344 <xQueueGenericSend>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d009      	beq.n	8008bd0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d003      	beq.n	8008bca <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008bc2:	f06f 0301 	mvn.w	r3, #1
 8008bc6:	61fb      	str	r3, [r7, #28]
 8008bc8:	e002      	b.n	8008bd0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008bca:	f06f 0302 	mvn.w	r3, #2
 8008bce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008bd0:	69fb      	ldr	r3, [r7, #28]
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3720      	adds	r7, #32
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	e000ed04 	.word	0xe000ed04

08008be0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b088      	sub	sp, #32
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	607a      	str	r2, [r7, #4]
 8008bec:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bf6:	f3ef 8305 	mrs	r3, IPSR
 8008bfa:	617b      	str	r3, [r7, #20]
  return(result);
 8008bfc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d028      	beq.n	8008c54 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d005      	beq.n	8008c14 <osMessageQueueGet+0x34>
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d002      	beq.n	8008c14 <osMessageQueueGet+0x34>
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d003      	beq.n	8008c1c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008c14:	f06f 0303 	mvn.w	r3, #3
 8008c18:	61fb      	str	r3, [r7, #28]
 8008c1a:	e037      	b.n	8008c8c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008c20:	f107 0310 	add.w	r3, r7, #16
 8008c24:	461a      	mov	r2, r3
 8008c26:	68b9      	ldr	r1, [r7, #8]
 8008c28:	69b8      	ldr	r0, [r7, #24]
 8008c2a:	f000 ff1d 	bl	8009a68 <xQueueReceiveFromISR>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d003      	beq.n	8008c3c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008c34:	f06f 0302 	mvn.w	r3, #2
 8008c38:	61fb      	str	r3, [r7, #28]
 8008c3a:	e027      	b.n	8008c8c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d024      	beq.n	8008c8c <osMessageQueueGet+0xac>
 8008c42:	4b15      	ldr	r3, [pc, #84]	@ (8008c98 <osMessageQueueGet+0xb8>)
 8008c44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c48:	601a      	str	r2, [r3, #0]
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	f3bf 8f6f 	isb	sy
 8008c52:	e01b      	b.n	8008c8c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d002      	beq.n	8008c60 <osMessageQueueGet+0x80>
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d103      	bne.n	8008c68 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008c60:	f06f 0303 	mvn.w	r3, #3
 8008c64:	61fb      	str	r3, [r7, #28]
 8008c66:	e011      	b.n	8008c8c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008c68:	683a      	ldr	r2, [r7, #0]
 8008c6a:	68b9      	ldr	r1, [r7, #8]
 8008c6c:	69b8      	ldr	r0, [r7, #24]
 8008c6e:	f000 fd09 	bl	8009684 <xQueueReceive>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d009      	beq.n	8008c8c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d003      	beq.n	8008c86 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008c7e:	f06f 0301 	mvn.w	r3, #1
 8008c82:	61fb      	str	r3, [r7, #28]
 8008c84:	e002      	b.n	8008c8c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008c86:	f06f 0302 	mvn.w	r3, #2
 8008c8a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008c8c:	69fb      	ldr	r3, [r7, #28]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3720      	adds	r7, #32
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	e000ed04 	.word	0xe000ed04

08008c9c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008c9c:	b480      	push	{r7}
 8008c9e:	b085      	sub	sp, #20
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	4a07      	ldr	r2, [pc, #28]	@ (8008cc8 <vApplicationGetIdleTaskMemory+0x2c>)
 8008cac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	4a06      	ldr	r2, [pc, #24]	@ (8008ccc <vApplicationGetIdleTaskMemory+0x30>)
 8008cb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2280      	movs	r2, #128	@ 0x80
 8008cb8:	601a      	str	r2, [r3, #0]
}
 8008cba:	bf00      	nop
 8008cbc:	3714      	adds	r7, #20
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr
 8008cc6:	bf00      	nop
 8008cc8:	200009c8 	.word	0x200009c8
 8008ccc:	20000a24 	.word	0x20000a24

08008cd0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008cd0:	b480      	push	{r7}
 8008cd2:	b085      	sub	sp, #20
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	4a07      	ldr	r2, [pc, #28]	@ (8008cfc <vApplicationGetTimerTaskMemory+0x2c>)
 8008ce0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	4a06      	ldr	r2, [pc, #24]	@ (8008d00 <vApplicationGetTimerTaskMemory+0x30>)
 8008ce6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008cee:	601a      	str	r2, [r3, #0]
}
 8008cf0:	bf00      	nop
 8008cf2:	3714      	adds	r7, #20
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr
 8008cfc:	20000c24 	.word	0x20000c24
 8008d00:	20000c80 	.word	0x20000c80

08008d04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f103 0208 	add.w	r2, r3, #8
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f103 0208 	add.w	r2, r3, #8
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f103 0208 	add.w	r2, r3, #8
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008d38:	bf00      	nop
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008d52:	bf00      	nop
 8008d54:	370c      	adds	r7, #12
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr

08008d5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d5e:	b480      	push	{r7}
 8008d60:	b085      	sub	sp, #20
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	689a      	ldr	r2, [r3, #8]
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	683a      	ldr	r2, [r7, #0]
 8008d82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	683a      	ldr	r2, [r7, #0]
 8008d88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	1c5a      	adds	r2, r3, #1
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	601a      	str	r2, [r3, #0]
}
 8008d9a:	bf00      	nop
 8008d9c:	3714      	adds	r7, #20
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr

08008da6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008da6:	b480      	push	{r7}
 8008da8:	b085      	sub	sp, #20
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
 8008dae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008dbc:	d103      	bne.n	8008dc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	60fb      	str	r3, [r7, #12]
 8008dc4:	e00c      	b.n	8008de0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	3308      	adds	r3, #8
 8008dca:	60fb      	str	r3, [r7, #12]
 8008dcc:	e002      	b.n	8008dd4 <vListInsert+0x2e>
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	60fb      	str	r3, [r7, #12]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	68ba      	ldr	r2, [r7, #8]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d2f6      	bcs.n	8008dce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	685a      	ldr	r2, [r3, #4]
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	683a      	ldr	r2, [r7, #0]
 8008dee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	68fa      	ldr	r2, [r7, #12]
 8008df4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	683a      	ldr	r2, [r7, #0]
 8008dfa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	1c5a      	adds	r2, r3, #1
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	601a      	str	r2, [r3, #0]
}
 8008e0c:	bf00      	nop
 8008e0e:	3714      	adds	r7, #20
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	6892      	ldr	r2, [r2, #8]
 8008e2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	6852      	ldr	r2, [r2, #4]
 8008e38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d103      	bne.n	8008e4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	689a      	ldr	r2, [r3, #8]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	1e5a      	subs	r2, r3, #1
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3714      	adds	r7, #20
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d10b      	bne.n	8008e98 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e84:	f383 8811 	msr	BASEPRI, r3
 8008e88:	f3bf 8f6f 	isb	sy
 8008e8c:	f3bf 8f4f 	dsb	sy
 8008e90:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008e92:	bf00      	nop
 8008e94:	bf00      	nop
 8008e96:	e7fd      	b.n	8008e94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008e98:	f002 fcf6 	bl	800b888 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ea4:	68f9      	ldr	r1, [r7, #12]
 8008ea6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008ea8:	fb01 f303 	mul.w	r3, r1, r3
 8008eac:	441a      	add	r2, r3
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ec8:	3b01      	subs	r3, #1
 8008eca:	68f9      	ldr	r1, [r7, #12]
 8008ecc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008ece:	fb01 f303 	mul.w	r3, r1, r3
 8008ed2:	441a      	add	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	22ff      	movs	r2, #255	@ 0xff
 8008edc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	22ff      	movs	r2, #255	@ 0xff
 8008ee4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d114      	bne.n	8008f18 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d01a      	beq.n	8008f2c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	3310      	adds	r3, #16
 8008efa:	4618      	mov	r0, r3
 8008efc:	f001 fc86 	bl	800a80c <xTaskRemoveFromEventList>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d012      	beq.n	8008f2c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008f06:	4b0d      	ldr	r3, [pc, #52]	@ (8008f3c <xQueueGenericReset+0xd0>)
 8008f08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f0c:	601a      	str	r2, [r3, #0]
 8008f0e:	f3bf 8f4f 	dsb	sy
 8008f12:	f3bf 8f6f 	isb	sy
 8008f16:	e009      	b.n	8008f2c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	3310      	adds	r3, #16
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f7ff fef1 	bl	8008d04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	3324      	adds	r3, #36	@ 0x24
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7ff feec 	bl	8008d04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008f2c:	f002 fcde 	bl	800b8ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008f30:	2301      	movs	r3, #1
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	e000ed04 	.word	0xe000ed04

08008f40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b08e      	sub	sp, #56	@ 0x38
 8008f44:	af02      	add	r7, sp, #8
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]
 8008f4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d10b      	bne.n	8008f6c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f58:	f383 8811 	msr	BASEPRI, r3
 8008f5c:	f3bf 8f6f 	isb	sy
 8008f60:	f3bf 8f4f 	dsb	sy
 8008f64:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008f66:	bf00      	nop
 8008f68:	bf00      	nop
 8008f6a:	e7fd      	b.n	8008f68 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d10b      	bne.n	8008f8a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f76:	f383 8811 	msr	BASEPRI, r3
 8008f7a:	f3bf 8f6f 	isb	sy
 8008f7e:	f3bf 8f4f 	dsb	sy
 8008f82:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008f84:	bf00      	nop
 8008f86:	bf00      	nop
 8008f88:	e7fd      	b.n	8008f86 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d002      	beq.n	8008f96 <xQueueGenericCreateStatic+0x56>
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d001      	beq.n	8008f9a <xQueueGenericCreateStatic+0x5a>
 8008f96:	2301      	movs	r3, #1
 8008f98:	e000      	b.n	8008f9c <xQueueGenericCreateStatic+0x5c>
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d10b      	bne.n	8008fb8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa4:	f383 8811 	msr	BASEPRI, r3
 8008fa8:	f3bf 8f6f 	isb	sy
 8008fac:	f3bf 8f4f 	dsb	sy
 8008fb0:	623b      	str	r3, [r7, #32]
}
 8008fb2:	bf00      	nop
 8008fb4:	bf00      	nop
 8008fb6:	e7fd      	b.n	8008fb4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d102      	bne.n	8008fc4 <xQueueGenericCreateStatic+0x84>
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d101      	bne.n	8008fc8 <xQueueGenericCreateStatic+0x88>
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e000      	b.n	8008fca <xQueueGenericCreateStatic+0x8a>
 8008fc8:	2300      	movs	r3, #0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10b      	bne.n	8008fe6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	61fb      	str	r3, [r7, #28]
}
 8008fe0:	bf00      	nop
 8008fe2:	bf00      	nop
 8008fe4:	e7fd      	b.n	8008fe2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008fe6:	2350      	movs	r3, #80	@ 0x50
 8008fe8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	2b50      	cmp	r3, #80	@ 0x50
 8008fee:	d00b      	beq.n	8009008 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ff4:	f383 8811 	msr	BASEPRI, r3
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	f3bf 8f4f 	dsb	sy
 8009000:	61bb      	str	r3, [r7, #24]
}
 8009002:	bf00      	nop
 8009004:	bf00      	nop
 8009006:	e7fd      	b.n	8009004 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009008:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800900e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00d      	beq.n	8009030 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009016:	2201      	movs	r2, #1
 8009018:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800901c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009022:	9300      	str	r3, [sp, #0]
 8009024:	4613      	mov	r3, r2
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	68b9      	ldr	r1, [r7, #8]
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f000 f840 	bl	80090b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009032:	4618      	mov	r0, r3
 8009034:	3730      	adds	r7, #48	@ 0x30
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800903a:	b580      	push	{r7, lr}
 800903c:	b08a      	sub	sp, #40	@ 0x28
 800903e:	af02      	add	r7, sp, #8
 8009040:	60f8      	str	r0, [r7, #12]
 8009042:	60b9      	str	r1, [r7, #8]
 8009044:	4613      	mov	r3, r2
 8009046:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d10b      	bne.n	8009066 <xQueueGenericCreate+0x2c>
	__asm volatile
 800904e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009052:	f383 8811 	msr	BASEPRI, r3
 8009056:	f3bf 8f6f 	isb	sy
 800905a:	f3bf 8f4f 	dsb	sy
 800905e:	613b      	str	r3, [r7, #16]
}
 8009060:	bf00      	nop
 8009062:	bf00      	nop
 8009064:	e7fd      	b.n	8009062 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	68ba      	ldr	r2, [r7, #8]
 800906a:	fb02 f303 	mul.w	r3, r2, r3
 800906e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	3350      	adds	r3, #80	@ 0x50
 8009074:	4618      	mov	r0, r3
 8009076:	f002 fd29 	bl	800bacc <pvPortMalloc>
 800907a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d011      	beq.n	80090a6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	3350      	adds	r3, #80	@ 0x50
 800908a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800908c:	69bb      	ldr	r3, [r7, #24]
 800908e:	2200      	movs	r2, #0
 8009090:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009094:	79fa      	ldrb	r2, [r7, #7]
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	9300      	str	r3, [sp, #0]
 800909a:	4613      	mov	r3, r2
 800909c:	697a      	ldr	r2, [r7, #20]
 800909e:	68b9      	ldr	r1, [r7, #8]
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f000 f805 	bl	80090b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80090a6:	69bb      	ldr	r3, [r7, #24]
	}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3720      	adds	r7, #32
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	607a      	str	r2, [r7, #4]
 80090bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d103      	bne.n	80090cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80090c4:	69bb      	ldr	r3, [r7, #24]
 80090c6:	69ba      	ldr	r2, [r7, #24]
 80090c8:	601a      	str	r2, [r3, #0]
 80090ca:	e002      	b.n	80090d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	68fa      	ldr	r2, [r7, #12]
 80090d6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80090d8:	69bb      	ldr	r3, [r7, #24]
 80090da:	68ba      	ldr	r2, [r7, #8]
 80090dc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80090de:	2101      	movs	r1, #1
 80090e0:	69b8      	ldr	r0, [r7, #24]
 80090e2:	f7ff fec3 	bl	8008e6c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	78fa      	ldrb	r2, [r7, #3]
 80090ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80090ee:	bf00      	nop
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b082      	sub	sp, #8
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d00e      	beq.n	8009122 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009116:	2300      	movs	r3, #0
 8009118:	2200      	movs	r2, #0
 800911a:	2100      	movs	r1, #0
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 f911 	bl	8009344 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009122:	bf00      	nop
 8009124:	3708      	adds	r7, #8
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800912a:	b580      	push	{r7, lr}
 800912c:	b086      	sub	sp, #24
 800912e:	af00      	add	r7, sp, #0
 8009130:	4603      	mov	r3, r0
 8009132:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009134:	2301      	movs	r3, #1
 8009136:	617b      	str	r3, [r7, #20]
 8009138:	2300      	movs	r3, #0
 800913a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800913c:	79fb      	ldrb	r3, [r7, #7]
 800913e:	461a      	mov	r2, r3
 8009140:	6939      	ldr	r1, [r7, #16]
 8009142:	6978      	ldr	r0, [r7, #20]
 8009144:	f7ff ff79 	bl	800903a <xQueueGenericCreate>
 8009148:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800914a:	68f8      	ldr	r0, [r7, #12]
 800914c:	f7ff ffd3 	bl	80090f6 <prvInitialiseMutex>

		return xNewQueue;
 8009150:	68fb      	ldr	r3, [r7, #12]
	}
 8009152:	4618      	mov	r0, r3
 8009154:	3718      	adds	r7, #24
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800915a:	b580      	push	{r7, lr}
 800915c:	b088      	sub	sp, #32
 800915e:	af02      	add	r7, sp, #8
 8009160:	4603      	mov	r3, r0
 8009162:	6039      	str	r1, [r7, #0]
 8009164:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009166:	2301      	movs	r3, #1
 8009168:	617b      	str	r3, [r7, #20]
 800916a:	2300      	movs	r3, #0
 800916c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800916e:	79fb      	ldrb	r3, [r7, #7]
 8009170:	9300      	str	r3, [sp, #0]
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	2200      	movs	r2, #0
 8009176:	6939      	ldr	r1, [r7, #16]
 8009178:	6978      	ldr	r0, [r7, #20]
 800917a:	f7ff fee1 	bl	8008f40 <xQueueGenericCreateStatic>
 800917e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009180:	68f8      	ldr	r0, [r7, #12]
 8009182:	f7ff ffb8 	bl	80090f6 <prvInitialiseMutex>

		return xNewQueue;
 8009186:	68fb      	ldr	r3, [r7, #12]
	}
 8009188:	4618      	mov	r0, r3
 800918a:	3718      	adds	r7, #24
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009190:	b590      	push	{r4, r7, lr}
 8009192:	b087      	sub	sp, #28
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d10b      	bne.n	80091ba <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80091a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091a6:	f383 8811 	msr	BASEPRI, r3
 80091aa:	f3bf 8f6f 	isb	sy
 80091ae:	f3bf 8f4f 	dsb	sy
 80091b2:	60fb      	str	r3, [r7, #12]
}
 80091b4:	bf00      	nop
 80091b6:	bf00      	nop
 80091b8:	e7fd      	b.n	80091b6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	689c      	ldr	r4, [r3, #8]
 80091be:	f001 fce5 	bl	800ab8c <xTaskGetCurrentTaskHandle>
 80091c2:	4603      	mov	r3, r0
 80091c4:	429c      	cmp	r4, r3
 80091c6:	d111      	bne.n	80091ec <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	1e5a      	subs	r2, r3, #1
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	68db      	ldr	r3, [r3, #12]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d105      	bne.n	80091e6 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80091da:	2300      	movs	r3, #0
 80091dc:	2200      	movs	r2, #0
 80091de:	2100      	movs	r1, #0
 80091e0:	6938      	ldr	r0, [r7, #16]
 80091e2:	f000 f8af 	bl	8009344 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80091e6:	2301      	movs	r3, #1
 80091e8:	617b      	str	r3, [r7, #20]
 80091ea:	e001      	b.n	80091f0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80091ec:	2300      	movs	r3, #0
 80091ee:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80091f0:	697b      	ldr	r3, [r7, #20]
	}
 80091f2:	4618      	mov	r0, r3
 80091f4:	371c      	adds	r7, #28
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd90      	pop	{r4, r7, pc}

080091fa <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80091fa:	b590      	push	{r4, r7, lr}
 80091fc:	b087      	sub	sp, #28
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
 8009202:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d10b      	bne.n	8009226 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800920e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009212:	f383 8811 	msr	BASEPRI, r3
 8009216:	f3bf 8f6f 	isb	sy
 800921a:	f3bf 8f4f 	dsb	sy
 800921e:	60fb      	str	r3, [r7, #12]
}
 8009220:	bf00      	nop
 8009222:	bf00      	nop
 8009224:	e7fd      	b.n	8009222 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	689c      	ldr	r4, [r3, #8]
 800922a:	f001 fcaf 	bl	800ab8c <xTaskGetCurrentTaskHandle>
 800922e:	4603      	mov	r3, r0
 8009230:	429c      	cmp	r4, r3
 8009232:	d107      	bne.n	8009244 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	1c5a      	adds	r2, r3, #1
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800923e:	2301      	movs	r3, #1
 8009240:	617b      	str	r3, [r7, #20]
 8009242:	e00c      	b.n	800925e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009244:	6839      	ldr	r1, [r7, #0]
 8009246:	6938      	ldr	r0, [r7, #16]
 8009248:	f000 fafe 	bl	8009848 <xQueueSemaphoreTake>
 800924c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d004      	beq.n	800925e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	1c5a      	adds	r2, r3, #1
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800925e:	697b      	ldr	r3, [r7, #20]
	}
 8009260:	4618      	mov	r0, r3
 8009262:	371c      	adds	r7, #28
 8009264:	46bd      	mov	sp, r7
 8009266:	bd90      	pop	{r4, r7, pc}

08009268 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009268:	b580      	push	{r7, lr}
 800926a:	b08a      	sub	sp, #40	@ 0x28
 800926c:	af02      	add	r7, sp, #8
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d10b      	bne.n	8009292 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800927a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800927e:	f383 8811 	msr	BASEPRI, r3
 8009282:	f3bf 8f6f 	isb	sy
 8009286:	f3bf 8f4f 	dsb	sy
 800928a:	61bb      	str	r3, [r7, #24]
}
 800928c:	bf00      	nop
 800928e:	bf00      	nop
 8009290:	e7fd      	b.n	800928e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009292:	68ba      	ldr	r2, [r7, #8]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	429a      	cmp	r2, r3
 8009298:	d90b      	bls.n	80092b2 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800929a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800929e:	f383 8811 	msr	BASEPRI, r3
 80092a2:	f3bf 8f6f 	isb	sy
 80092a6:	f3bf 8f4f 	dsb	sy
 80092aa:	617b      	str	r3, [r7, #20]
}
 80092ac:	bf00      	nop
 80092ae:	bf00      	nop
 80092b0:	e7fd      	b.n	80092ae <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80092b2:	2302      	movs	r3, #2
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2200      	movs	r2, #0
 80092ba:	2100      	movs	r1, #0
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f7ff fe3f 	bl	8008f40 <xQueueGenericCreateStatic>
 80092c2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d002      	beq.n	80092d0 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	68ba      	ldr	r2, [r7, #8]
 80092ce:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80092d0:	69fb      	ldr	r3, [r7, #28]
	}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3720      	adds	r7, #32
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}

080092da <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80092da:	b580      	push	{r7, lr}
 80092dc:	b086      	sub	sp, #24
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
 80092e2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d10b      	bne.n	8009302 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80092ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ee:	f383 8811 	msr	BASEPRI, r3
 80092f2:	f3bf 8f6f 	isb	sy
 80092f6:	f3bf 8f4f 	dsb	sy
 80092fa:	613b      	str	r3, [r7, #16]
}
 80092fc:	bf00      	nop
 80092fe:	bf00      	nop
 8009300:	e7fd      	b.n	80092fe <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009302:	683a      	ldr	r2, [r7, #0]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	429a      	cmp	r2, r3
 8009308:	d90b      	bls.n	8009322 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800930a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800930e:	f383 8811 	msr	BASEPRI, r3
 8009312:	f3bf 8f6f 	isb	sy
 8009316:	f3bf 8f4f 	dsb	sy
 800931a:	60fb      	str	r3, [r7, #12]
}
 800931c:	bf00      	nop
 800931e:	bf00      	nop
 8009320:	e7fd      	b.n	800931e <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009322:	2202      	movs	r2, #2
 8009324:	2100      	movs	r1, #0
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f7ff fe87 	bl	800903a <xQueueGenericCreate>
 800932c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d002      	beq.n	800933a <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	683a      	ldr	r2, [r7, #0]
 8009338:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800933a:	697b      	ldr	r3, [r7, #20]
	}
 800933c:	4618      	mov	r0, r3
 800933e:	3718      	adds	r7, #24
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b08e      	sub	sp, #56	@ 0x38
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	607a      	str	r2, [r7, #4]
 8009350:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009352:	2300      	movs	r3, #0
 8009354:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800935a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800935c:	2b00      	cmp	r3, #0
 800935e:	d10b      	bne.n	8009378 <xQueueGenericSend+0x34>
	__asm volatile
 8009360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009364:	f383 8811 	msr	BASEPRI, r3
 8009368:	f3bf 8f6f 	isb	sy
 800936c:	f3bf 8f4f 	dsb	sy
 8009370:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009372:	bf00      	nop
 8009374:	bf00      	nop
 8009376:	e7fd      	b.n	8009374 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d103      	bne.n	8009386 <xQueueGenericSend+0x42>
 800937e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009382:	2b00      	cmp	r3, #0
 8009384:	d101      	bne.n	800938a <xQueueGenericSend+0x46>
 8009386:	2301      	movs	r3, #1
 8009388:	e000      	b.n	800938c <xQueueGenericSend+0x48>
 800938a:	2300      	movs	r3, #0
 800938c:	2b00      	cmp	r3, #0
 800938e:	d10b      	bne.n	80093a8 <xQueueGenericSend+0x64>
	__asm volatile
 8009390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009394:	f383 8811 	msr	BASEPRI, r3
 8009398:	f3bf 8f6f 	isb	sy
 800939c:	f3bf 8f4f 	dsb	sy
 80093a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80093a2:	bf00      	nop
 80093a4:	bf00      	nop
 80093a6:	e7fd      	b.n	80093a4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	2b02      	cmp	r3, #2
 80093ac:	d103      	bne.n	80093b6 <xQueueGenericSend+0x72>
 80093ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d101      	bne.n	80093ba <xQueueGenericSend+0x76>
 80093b6:	2301      	movs	r3, #1
 80093b8:	e000      	b.n	80093bc <xQueueGenericSend+0x78>
 80093ba:	2300      	movs	r3, #0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d10b      	bne.n	80093d8 <xQueueGenericSend+0x94>
	__asm volatile
 80093c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093c4:	f383 8811 	msr	BASEPRI, r3
 80093c8:	f3bf 8f6f 	isb	sy
 80093cc:	f3bf 8f4f 	dsb	sy
 80093d0:	623b      	str	r3, [r7, #32]
}
 80093d2:	bf00      	nop
 80093d4:	bf00      	nop
 80093d6:	e7fd      	b.n	80093d4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80093d8:	f001 fbe8 	bl	800abac <xTaskGetSchedulerState>
 80093dc:	4603      	mov	r3, r0
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d102      	bne.n	80093e8 <xQueueGenericSend+0xa4>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d101      	bne.n	80093ec <xQueueGenericSend+0xa8>
 80093e8:	2301      	movs	r3, #1
 80093ea:	e000      	b.n	80093ee <xQueueGenericSend+0xaa>
 80093ec:	2300      	movs	r3, #0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d10b      	bne.n	800940a <xQueueGenericSend+0xc6>
	__asm volatile
 80093f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093f6:	f383 8811 	msr	BASEPRI, r3
 80093fa:	f3bf 8f6f 	isb	sy
 80093fe:	f3bf 8f4f 	dsb	sy
 8009402:	61fb      	str	r3, [r7, #28]
}
 8009404:	bf00      	nop
 8009406:	bf00      	nop
 8009408:	e7fd      	b.n	8009406 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800940a:	f002 fa3d 	bl	800b888 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800940e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009410:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009416:	429a      	cmp	r2, r3
 8009418:	d302      	bcc.n	8009420 <xQueueGenericSend+0xdc>
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	2b02      	cmp	r3, #2
 800941e:	d129      	bne.n	8009474 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009420:	683a      	ldr	r2, [r7, #0]
 8009422:	68b9      	ldr	r1, [r7, #8]
 8009424:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009426:	f000 fbdd 	bl	8009be4 <prvCopyDataToQueue>
 800942a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800942c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800942e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009430:	2b00      	cmp	r3, #0
 8009432:	d010      	beq.n	8009456 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009436:	3324      	adds	r3, #36	@ 0x24
 8009438:	4618      	mov	r0, r3
 800943a:	f001 f9e7 	bl	800a80c <xTaskRemoveFromEventList>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d013      	beq.n	800946c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009444:	4b3f      	ldr	r3, [pc, #252]	@ (8009544 <xQueueGenericSend+0x200>)
 8009446:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800944a:	601a      	str	r2, [r3, #0]
 800944c:	f3bf 8f4f 	dsb	sy
 8009450:	f3bf 8f6f 	isb	sy
 8009454:	e00a      	b.n	800946c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009458:	2b00      	cmp	r3, #0
 800945a:	d007      	beq.n	800946c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800945c:	4b39      	ldr	r3, [pc, #228]	@ (8009544 <xQueueGenericSend+0x200>)
 800945e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009462:	601a      	str	r2, [r3, #0]
 8009464:	f3bf 8f4f 	dsb	sy
 8009468:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800946c:	f002 fa3e 	bl	800b8ec <vPortExitCritical>
				return pdPASS;
 8009470:	2301      	movs	r3, #1
 8009472:	e063      	b.n	800953c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d103      	bne.n	8009482 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800947a:	f002 fa37 	bl	800b8ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800947e:	2300      	movs	r3, #0
 8009480:	e05c      	b.n	800953c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009484:	2b00      	cmp	r3, #0
 8009486:	d106      	bne.n	8009496 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009488:	f107 0314 	add.w	r3, r7, #20
 800948c:	4618      	mov	r0, r3
 800948e:	f001 fa21 	bl	800a8d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009492:	2301      	movs	r3, #1
 8009494:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009496:	f002 fa29 	bl	800b8ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800949a:	f000 ff7f 	bl	800a39c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800949e:	f002 f9f3 	bl	800b888 <vPortEnterCritical>
 80094a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80094a8:	b25b      	sxtb	r3, r3
 80094aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80094ae:	d103      	bne.n	80094b8 <xQueueGenericSend+0x174>
 80094b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b2:	2200      	movs	r2, #0
 80094b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80094b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80094be:	b25b      	sxtb	r3, r3
 80094c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80094c4:	d103      	bne.n	80094ce <xQueueGenericSend+0x18a>
 80094c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c8:	2200      	movs	r2, #0
 80094ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80094ce:	f002 fa0d 	bl	800b8ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80094d2:	1d3a      	adds	r2, r7, #4
 80094d4:	f107 0314 	add.w	r3, r7, #20
 80094d8:	4611      	mov	r1, r2
 80094da:	4618      	mov	r0, r3
 80094dc:	f001 fa10 	bl	800a900 <xTaskCheckForTimeOut>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d124      	bne.n	8009530 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80094e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80094e8:	f000 fc74 	bl	8009dd4 <prvIsQueueFull>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d018      	beq.n	8009524 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80094f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f4:	3310      	adds	r3, #16
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	4611      	mov	r1, r2
 80094fa:	4618      	mov	r0, r3
 80094fc:	f001 f934 	bl	800a768 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009500:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009502:	f000 fbff 	bl	8009d04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009506:	f000 ff57 	bl	800a3b8 <xTaskResumeAll>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	f47f af7c 	bne.w	800940a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009512:	4b0c      	ldr	r3, [pc, #48]	@ (8009544 <xQueueGenericSend+0x200>)
 8009514:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009518:	601a      	str	r2, [r3, #0]
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	f3bf 8f6f 	isb	sy
 8009522:	e772      	b.n	800940a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009524:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009526:	f000 fbed 	bl	8009d04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800952a:	f000 ff45 	bl	800a3b8 <xTaskResumeAll>
 800952e:	e76c      	b.n	800940a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009530:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009532:	f000 fbe7 	bl	8009d04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009536:	f000 ff3f 	bl	800a3b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800953a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800953c:	4618      	mov	r0, r3
 800953e:	3738      	adds	r7, #56	@ 0x38
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}
 8009544:	e000ed04 	.word	0xe000ed04

08009548 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b090      	sub	sp, #64	@ 0x40
 800954c:	af00      	add	r7, sp, #0
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	60b9      	str	r1, [r7, #8]
 8009552:	607a      	str	r2, [r7, #4]
 8009554:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800955a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800955c:	2b00      	cmp	r3, #0
 800955e:	d10b      	bne.n	8009578 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009572:	bf00      	nop
 8009574:	bf00      	nop
 8009576:	e7fd      	b.n	8009574 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d103      	bne.n	8009586 <xQueueGenericSendFromISR+0x3e>
 800957e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009582:	2b00      	cmp	r3, #0
 8009584:	d101      	bne.n	800958a <xQueueGenericSendFromISR+0x42>
 8009586:	2301      	movs	r3, #1
 8009588:	e000      	b.n	800958c <xQueueGenericSendFromISR+0x44>
 800958a:	2300      	movs	r3, #0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d10b      	bne.n	80095a8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009594:	f383 8811 	msr	BASEPRI, r3
 8009598:	f3bf 8f6f 	isb	sy
 800959c:	f3bf 8f4f 	dsb	sy
 80095a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80095a2:	bf00      	nop
 80095a4:	bf00      	nop
 80095a6:	e7fd      	b.n	80095a4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	d103      	bne.n	80095b6 <xQueueGenericSendFromISR+0x6e>
 80095ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d101      	bne.n	80095ba <xQueueGenericSendFromISR+0x72>
 80095b6:	2301      	movs	r3, #1
 80095b8:	e000      	b.n	80095bc <xQueueGenericSendFromISR+0x74>
 80095ba:	2300      	movs	r3, #0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d10b      	bne.n	80095d8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80095c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095c4:	f383 8811 	msr	BASEPRI, r3
 80095c8:	f3bf 8f6f 	isb	sy
 80095cc:	f3bf 8f4f 	dsb	sy
 80095d0:	623b      	str	r3, [r7, #32]
}
 80095d2:	bf00      	nop
 80095d4:	bf00      	nop
 80095d6:	e7fd      	b.n	80095d4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80095d8:	f002 fa36 	bl	800ba48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80095dc:	f3ef 8211 	mrs	r2, BASEPRI
 80095e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095e4:	f383 8811 	msr	BASEPRI, r3
 80095e8:	f3bf 8f6f 	isb	sy
 80095ec:	f3bf 8f4f 	dsb	sy
 80095f0:	61fa      	str	r2, [r7, #28]
 80095f2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80095f4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80095f6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80095f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009600:	429a      	cmp	r2, r3
 8009602:	d302      	bcc.n	800960a <xQueueGenericSendFromISR+0xc2>
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	2b02      	cmp	r3, #2
 8009608:	d12f      	bne.n	800966a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800960a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800960c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009610:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009618:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800961a:	683a      	ldr	r2, [r7, #0]
 800961c:	68b9      	ldr	r1, [r7, #8]
 800961e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009620:	f000 fae0 	bl	8009be4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009624:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009628:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800962c:	d112      	bne.n	8009654 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800962e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009632:	2b00      	cmp	r3, #0
 8009634:	d016      	beq.n	8009664 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009638:	3324      	adds	r3, #36	@ 0x24
 800963a:	4618      	mov	r0, r3
 800963c:	f001 f8e6 	bl	800a80c <xTaskRemoveFromEventList>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d00e      	beq.n	8009664 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d00b      	beq.n	8009664 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2201      	movs	r2, #1
 8009650:	601a      	str	r2, [r3, #0]
 8009652:	e007      	b.n	8009664 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009654:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009658:	3301      	adds	r3, #1
 800965a:	b2db      	uxtb	r3, r3
 800965c:	b25a      	sxtb	r2, r3
 800965e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009660:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009664:	2301      	movs	r3, #1
 8009666:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009668:	e001      	b.n	800966e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800966a:	2300      	movs	r3, #0
 800966c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800966e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009670:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009678:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800967a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800967c:	4618      	mov	r0, r3
 800967e:	3740      	adds	r7, #64	@ 0x40
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b08c      	sub	sp, #48	@ 0x30
 8009688:	af00      	add	r7, sp, #0
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	60b9      	str	r1, [r7, #8]
 800968e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009690:	2300      	movs	r3, #0
 8009692:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800969a:	2b00      	cmp	r3, #0
 800969c:	d10b      	bne.n	80096b6 <xQueueReceive+0x32>
	__asm volatile
 800969e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a2:	f383 8811 	msr	BASEPRI, r3
 80096a6:	f3bf 8f6f 	isb	sy
 80096aa:	f3bf 8f4f 	dsb	sy
 80096ae:	623b      	str	r3, [r7, #32]
}
 80096b0:	bf00      	nop
 80096b2:	bf00      	nop
 80096b4:	e7fd      	b.n	80096b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d103      	bne.n	80096c4 <xQueueReceive+0x40>
 80096bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d101      	bne.n	80096c8 <xQueueReceive+0x44>
 80096c4:	2301      	movs	r3, #1
 80096c6:	e000      	b.n	80096ca <xQueueReceive+0x46>
 80096c8:	2300      	movs	r3, #0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d10b      	bne.n	80096e6 <xQueueReceive+0x62>
	__asm volatile
 80096ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d2:	f383 8811 	msr	BASEPRI, r3
 80096d6:	f3bf 8f6f 	isb	sy
 80096da:	f3bf 8f4f 	dsb	sy
 80096de:	61fb      	str	r3, [r7, #28]
}
 80096e0:	bf00      	nop
 80096e2:	bf00      	nop
 80096e4:	e7fd      	b.n	80096e2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80096e6:	f001 fa61 	bl	800abac <xTaskGetSchedulerState>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d102      	bne.n	80096f6 <xQueueReceive+0x72>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d101      	bne.n	80096fa <xQueueReceive+0x76>
 80096f6:	2301      	movs	r3, #1
 80096f8:	e000      	b.n	80096fc <xQueueReceive+0x78>
 80096fa:	2300      	movs	r3, #0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d10b      	bne.n	8009718 <xQueueReceive+0x94>
	__asm volatile
 8009700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009704:	f383 8811 	msr	BASEPRI, r3
 8009708:	f3bf 8f6f 	isb	sy
 800970c:	f3bf 8f4f 	dsb	sy
 8009710:	61bb      	str	r3, [r7, #24]
}
 8009712:	bf00      	nop
 8009714:	bf00      	nop
 8009716:	e7fd      	b.n	8009714 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009718:	f002 f8b6 	bl	800b888 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800971c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800971e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009720:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009724:	2b00      	cmp	r3, #0
 8009726:	d01f      	beq.n	8009768 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009728:	68b9      	ldr	r1, [r7, #8]
 800972a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800972c:	f000 fac4 	bl	8009cb8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009732:	1e5a      	subs	r2, r3, #1
 8009734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009736:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800973a:	691b      	ldr	r3, [r3, #16]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d00f      	beq.n	8009760 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009742:	3310      	adds	r3, #16
 8009744:	4618      	mov	r0, r3
 8009746:	f001 f861 	bl	800a80c <xTaskRemoveFromEventList>
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	d007      	beq.n	8009760 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009750:	4b3c      	ldr	r3, [pc, #240]	@ (8009844 <xQueueReceive+0x1c0>)
 8009752:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009756:	601a      	str	r2, [r3, #0]
 8009758:	f3bf 8f4f 	dsb	sy
 800975c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009760:	f002 f8c4 	bl	800b8ec <vPortExitCritical>
				return pdPASS;
 8009764:	2301      	movs	r3, #1
 8009766:	e069      	b.n	800983c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d103      	bne.n	8009776 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800976e:	f002 f8bd 	bl	800b8ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009772:	2300      	movs	r3, #0
 8009774:	e062      	b.n	800983c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009778:	2b00      	cmp	r3, #0
 800977a:	d106      	bne.n	800978a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800977c:	f107 0310 	add.w	r3, r7, #16
 8009780:	4618      	mov	r0, r3
 8009782:	f001 f8a7 	bl	800a8d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009786:	2301      	movs	r3, #1
 8009788:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800978a:	f002 f8af 	bl	800b8ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800978e:	f000 fe05 	bl	800a39c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009792:	f002 f879 	bl	800b888 <vPortEnterCritical>
 8009796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009798:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800979c:	b25b      	sxtb	r3, r3
 800979e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80097a2:	d103      	bne.n	80097ac <xQueueReceive+0x128>
 80097a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097a6:	2200      	movs	r2, #0
 80097a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80097ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80097b2:	b25b      	sxtb	r3, r3
 80097b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80097b8:	d103      	bne.n	80097c2 <xQueueReceive+0x13e>
 80097ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097bc:	2200      	movs	r2, #0
 80097be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80097c2:	f002 f893 	bl	800b8ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80097c6:	1d3a      	adds	r2, r7, #4
 80097c8:	f107 0310 	add.w	r3, r7, #16
 80097cc:	4611      	mov	r1, r2
 80097ce:	4618      	mov	r0, r3
 80097d0:	f001 f896 	bl	800a900 <xTaskCheckForTimeOut>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d123      	bne.n	8009822 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80097da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097dc:	f000 fae4 	bl	8009da8 <prvIsQueueEmpty>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d017      	beq.n	8009816 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80097e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e8:	3324      	adds	r3, #36	@ 0x24
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	4611      	mov	r1, r2
 80097ee:	4618      	mov	r0, r3
 80097f0:	f000 ffba 	bl	800a768 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80097f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097f6:	f000 fa85 	bl	8009d04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80097fa:	f000 fddd 	bl	800a3b8 <xTaskResumeAll>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d189      	bne.n	8009718 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009804:	4b0f      	ldr	r3, [pc, #60]	@ (8009844 <xQueueReceive+0x1c0>)
 8009806:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800980a:	601a      	str	r2, [r3, #0]
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	f3bf 8f6f 	isb	sy
 8009814:	e780      	b.n	8009718 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009816:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009818:	f000 fa74 	bl	8009d04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800981c:	f000 fdcc 	bl	800a3b8 <xTaskResumeAll>
 8009820:	e77a      	b.n	8009718 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009822:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009824:	f000 fa6e 	bl	8009d04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009828:	f000 fdc6 	bl	800a3b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800982c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800982e:	f000 fabb 	bl	8009da8 <prvIsQueueEmpty>
 8009832:	4603      	mov	r3, r0
 8009834:	2b00      	cmp	r3, #0
 8009836:	f43f af6f 	beq.w	8009718 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800983a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800983c:	4618      	mov	r0, r3
 800983e:	3730      	adds	r7, #48	@ 0x30
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	e000ed04 	.word	0xe000ed04

08009848 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b08e      	sub	sp, #56	@ 0x38
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009852:	2300      	movs	r3, #0
 8009854:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800985a:	2300      	movs	r3, #0
 800985c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800985e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009860:	2b00      	cmp	r3, #0
 8009862:	d10b      	bne.n	800987c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8009864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009868:	f383 8811 	msr	BASEPRI, r3
 800986c:	f3bf 8f6f 	isb	sy
 8009870:	f3bf 8f4f 	dsb	sy
 8009874:	623b      	str	r3, [r7, #32]
}
 8009876:	bf00      	nop
 8009878:	bf00      	nop
 800987a:	e7fd      	b.n	8009878 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800987c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800987e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009880:	2b00      	cmp	r3, #0
 8009882:	d00b      	beq.n	800989c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8009884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009888:	f383 8811 	msr	BASEPRI, r3
 800988c:	f3bf 8f6f 	isb	sy
 8009890:	f3bf 8f4f 	dsb	sy
 8009894:	61fb      	str	r3, [r7, #28]
}
 8009896:	bf00      	nop
 8009898:	bf00      	nop
 800989a:	e7fd      	b.n	8009898 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800989c:	f001 f986 	bl	800abac <xTaskGetSchedulerState>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d102      	bne.n	80098ac <xQueueSemaphoreTake+0x64>
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d101      	bne.n	80098b0 <xQueueSemaphoreTake+0x68>
 80098ac:	2301      	movs	r3, #1
 80098ae:	e000      	b.n	80098b2 <xQueueSemaphoreTake+0x6a>
 80098b0:	2300      	movs	r3, #0
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d10b      	bne.n	80098ce <xQueueSemaphoreTake+0x86>
	__asm volatile
 80098b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ba:	f383 8811 	msr	BASEPRI, r3
 80098be:	f3bf 8f6f 	isb	sy
 80098c2:	f3bf 8f4f 	dsb	sy
 80098c6:	61bb      	str	r3, [r7, #24]
}
 80098c8:	bf00      	nop
 80098ca:	bf00      	nop
 80098cc:	e7fd      	b.n	80098ca <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80098ce:	f001 ffdb 	bl	800b888 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80098d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098d6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80098d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d024      	beq.n	8009928 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80098de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098e0:	1e5a      	subs	r2, r3, #1
 80098e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80098e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d104      	bne.n	80098f8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80098ee:	f001 fad7 	bl	800aea0 <pvTaskIncrementMutexHeldCount>
 80098f2:	4602      	mov	r2, r0
 80098f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098f6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098fa:	691b      	ldr	r3, [r3, #16]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d00f      	beq.n	8009920 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009902:	3310      	adds	r3, #16
 8009904:	4618      	mov	r0, r3
 8009906:	f000 ff81 	bl	800a80c <xTaskRemoveFromEventList>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d007      	beq.n	8009920 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009910:	4b54      	ldr	r3, [pc, #336]	@ (8009a64 <xQueueSemaphoreTake+0x21c>)
 8009912:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009916:	601a      	str	r2, [r3, #0]
 8009918:	f3bf 8f4f 	dsb	sy
 800991c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009920:	f001 ffe4 	bl	800b8ec <vPortExitCritical>
				return pdPASS;
 8009924:	2301      	movs	r3, #1
 8009926:	e098      	b.n	8009a5a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d112      	bne.n	8009954 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800992e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009930:	2b00      	cmp	r3, #0
 8009932:	d00b      	beq.n	800994c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8009934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009938:	f383 8811 	msr	BASEPRI, r3
 800993c:	f3bf 8f6f 	isb	sy
 8009940:	f3bf 8f4f 	dsb	sy
 8009944:	617b      	str	r3, [r7, #20]
}
 8009946:	bf00      	nop
 8009948:	bf00      	nop
 800994a:	e7fd      	b.n	8009948 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800994c:	f001 ffce 	bl	800b8ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009950:	2300      	movs	r3, #0
 8009952:	e082      	b.n	8009a5a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009956:	2b00      	cmp	r3, #0
 8009958:	d106      	bne.n	8009968 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800995a:	f107 030c 	add.w	r3, r7, #12
 800995e:	4618      	mov	r0, r3
 8009960:	f000 ffb8 	bl	800a8d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009964:	2301      	movs	r3, #1
 8009966:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009968:	f001 ffc0 	bl	800b8ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800996c:	f000 fd16 	bl	800a39c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009970:	f001 ff8a 	bl	800b888 <vPortEnterCritical>
 8009974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009976:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800997a:	b25b      	sxtb	r3, r3
 800997c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009980:	d103      	bne.n	800998a <xQueueSemaphoreTake+0x142>
 8009982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009984:	2200      	movs	r2, #0
 8009986:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800998a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800998c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009990:	b25b      	sxtb	r3, r3
 8009992:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009996:	d103      	bne.n	80099a0 <xQueueSemaphoreTake+0x158>
 8009998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800999a:	2200      	movs	r2, #0
 800999c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80099a0:	f001 ffa4 	bl	800b8ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80099a4:	463a      	mov	r2, r7
 80099a6:	f107 030c 	add.w	r3, r7, #12
 80099aa:	4611      	mov	r1, r2
 80099ac:	4618      	mov	r0, r3
 80099ae:	f000 ffa7 	bl	800a900 <xTaskCheckForTimeOut>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d132      	bne.n	8009a1e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80099ba:	f000 f9f5 	bl	8009da8 <prvIsQueueEmpty>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d026      	beq.n	8009a12 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d109      	bne.n	80099e0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80099cc:	f001 ff5c 	bl	800b888 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80099d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	4618      	mov	r0, r3
 80099d6:	f001 f907 	bl	800abe8 <xTaskPriorityInherit>
 80099da:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80099dc:	f001 ff86 	bl	800b8ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80099e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099e2:	3324      	adds	r3, #36	@ 0x24
 80099e4:	683a      	ldr	r2, [r7, #0]
 80099e6:	4611      	mov	r1, r2
 80099e8:	4618      	mov	r0, r3
 80099ea:	f000 febd 	bl	800a768 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80099ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80099f0:	f000 f988 	bl	8009d04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80099f4:	f000 fce0 	bl	800a3b8 <xTaskResumeAll>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	f47f af67 	bne.w	80098ce <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009a00:	4b18      	ldr	r3, [pc, #96]	@ (8009a64 <xQueueSemaphoreTake+0x21c>)
 8009a02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a06:	601a      	str	r2, [r3, #0]
 8009a08:	f3bf 8f4f 	dsb	sy
 8009a0c:	f3bf 8f6f 	isb	sy
 8009a10:	e75d      	b.n	80098ce <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009a12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009a14:	f000 f976 	bl	8009d04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a18:	f000 fcce 	bl	800a3b8 <xTaskResumeAll>
 8009a1c:	e757      	b.n	80098ce <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009a1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009a20:	f000 f970 	bl	8009d04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a24:	f000 fcc8 	bl	800a3b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a28:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009a2a:	f000 f9bd 	bl	8009da8 <prvIsQueueEmpty>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	f43f af4c 	beq.w	80098ce <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d00d      	beq.n	8009a58 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009a3c:	f001 ff24 	bl	800b888 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009a40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009a42:	f000 f8b7 	bl	8009bb4 <prvGetDisinheritPriorityAfterTimeout>
 8009a46:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f001 f9a2 	bl	800ad98 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009a54:	f001 ff4a 	bl	800b8ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009a58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3738      	adds	r7, #56	@ 0x38
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	e000ed04 	.word	0xe000ed04

08009a68 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b08e      	sub	sp, #56	@ 0x38
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	60b9      	str	r1, [r7, #8]
 8009a72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d10b      	bne.n	8009a96 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8009a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a82:	f383 8811 	msr	BASEPRI, r3
 8009a86:	f3bf 8f6f 	isb	sy
 8009a8a:	f3bf 8f4f 	dsb	sy
 8009a8e:	623b      	str	r3, [r7, #32]
}
 8009a90:	bf00      	nop
 8009a92:	bf00      	nop
 8009a94:	e7fd      	b.n	8009a92 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d103      	bne.n	8009aa4 <xQueueReceiveFromISR+0x3c>
 8009a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d101      	bne.n	8009aa8 <xQueueReceiveFromISR+0x40>
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	e000      	b.n	8009aaa <xQueueReceiveFromISR+0x42>
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d10b      	bne.n	8009ac6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ab2:	f383 8811 	msr	BASEPRI, r3
 8009ab6:	f3bf 8f6f 	isb	sy
 8009aba:	f3bf 8f4f 	dsb	sy
 8009abe:	61fb      	str	r3, [r7, #28]
}
 8009ac0:	bf00      	nop
 8009ac2:	bf00      	nop
 8009ac4:	e7fd      	b.n	8009ac2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ac6:	f001 ffbf 	bl	800ba48 <vPortValidateInterruptPriority>
	__asm volatile
 8009aca:	f3ef 8211 	mrs	r2, BASEPRI
 8009ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad2:	f383 8811 	msr	BASEPRI, r3
 8009ad6:	f3bf 8f6f 	isb	sy
 8009ada:	f3bf 8f4f 	dsb	sy
 8009ade:	61ba      	str	r2, [r7, #24]
 8009ae0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009ae2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aea:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d02f      	beq.n	8009b52 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009af4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009af8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009afc:	68b9      	ldr	r1, [r7, #8]
 8009afe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b00:	f000 f8da 	bl	8009cb8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b06:	1e5a      	subs	r2, r3, #1
 8009b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b0a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009b0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009b10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b14:	d112      	bne.n	8009b3c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b18:	691b      	ldr	r3, [r3, #16]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d016      	beq.n	8009b4c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b20:	3310      	adds	r3, #16
 8009b22:	4618      	mov	r0, r3
 8009b24:	f000 fe72 	bl	800a80c <xTaskRemoveFromEventList>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d00e      	beq.n	8009b4c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00b      	beq.n	8009b4c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	601a      	str	r2, [r3, #0]
 8009b3a:	e007      	b.n	8009b4c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b40:	3301      	adds	r3, #1
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	b25a      	sxtb	r2, r3
 8009b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b50:	e001      	b.n	8009b56 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8009b52:	2300      	movs	r3, #0
 8009b54:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b58:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	f383 8811 	msr	BASEPRI, r3
}
 8009b60:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3738      	adds	r7, #56	@ 0x38
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d10b      	bne.n	8009b96 <vQueueDelete+0x2a>
	__asm volatile
 8009b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b82:	f383 8811 	msr	BASEPRI, r3
 8009b86:	f3bf 8f6f 	isb	sy
 8009b8a:	f3bf 8f4f 	dsb	sy
 8009b8e:	60bb      	str	r3, [r7, #8]
}
 8009b90:	bf00      	nop
 8009b92:	bf00      	nop
 8009b94:	e7fd      	b.n	8009b92 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009b96:	68f8      	ldr	r0, [r7, #12]
 8009b98:	f000 f95e 	bl	8009e58 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d102      	bne.n	8009bac <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8009ba6:	68f8      	ldr	r0, [r7, #12]
 8009ba8:	f002 f85e 	bl	800bc68 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009bac:	bf00      	nop
 8009bae:	3710      	adds	r7, #16
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b085      	sub	sp, #20
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d006      	beq.n	8009bd2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8009bce:	60fb      	str	r3, [r7, #12]
 8009bd0:	e001      	b.n	8009bd6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
	}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3714      	adds	r7, #20
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b086      	sub	sp, #24
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	60b9      	str	r1, [r7, #8]
 8009bee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bf8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d10d      	bne.n	8009c1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d14d      	bne.n	8009ca6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f001 f852 	bl	800acb8 <xTaskPriorityDisinherit>
 8009c14:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	609a      	str	r2, [r3, #8]
 8009c1c:	e043      	b.n	8009ca6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d119      	bne.n	8009c58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	6858      	ldr	r0, [r3, #4]
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	68b9      	ldr	r1, [r7, #8]
 8009c30:	f003 f957 	bl	800cee2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	685a      	ldr	r2, [r3, #4]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c3c:	441a      	add	r2, r3
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	685a      	ldr	r2, [r3, #4]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	689b      	ldr	r3, [r3, #8]
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d32b      	bcc.n	8009ca6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	605a      	str	r2, [r3, #4]
 8009c56:	e026      	b.n	8009ca6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	68d8      	ldr	r0, [r3, #12]
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c60:	461a      	mov	r2, r3
 8009c62:	68b9      	ldr	r1, [r7, #8]
 8009c64:	f003 f93d 	bl	800cee2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	68da      	ldr	r2, [r3, #12]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c70:	425b      	negs	r3, r3
 8009c72:	441a      	add	r2, r3
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	68da      	ldr	r2, [r3, #12]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d207      	bcs.n	8009c94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	689a      	ldr	r2, [r3, #8]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c8c:	425b      	negs	r3, r3
 8009c8e:	441a      	add	r2, r3
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2b02      	cmp	r3, #2
 8009c98:	d105      	bne.n	8009ca6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d002      	beq.n	8009ca6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	3b01      	subs	r3, #1
 8009ca4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	1c5a      	adds	r2, r3, #1
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009cae:	697b      	ldr	r3, [r7, #20]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3718      	adds	r7, #24
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d018      	beq.n	8009cfc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	68da      	ldr	r2, [r3, #12]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cd2:	441a      	add	r2, r3
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	68da      	ldr	r2, [r3, #12]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d303      	bcc.n	8009cec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	68d9      	ldr	r1, [r3, #12]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	6838      	ldr	r0, [r7, #0]
 8009cf8:	f003 f8f3 	bl	800cee2 <memcpy>
	}
}
 8009cfc:	bf00      	nop
 8009cfe:	3708      	adds	r7, #8
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009d0c:	f001 fdbc 	bl	800b888 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009d16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d18:	e011      	b.n	8009d3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d012      	beq.n	8009d48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	3324      	adds	r3, #36	@ 0x24
 8009d26:	4618      	mov	r0, r3
 8009d28:	f000 fd70 	bl	800a80c <xTaskRemoveFromEventList>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d001      	beq.n	8009d36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009d32:	f000 fe49 	bl	800a9c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009d36:	7bfb      	ldrb	r3, [r7, #15]
 8009d38:	3b01      	subs	r3, #1
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	dce9      	bgt.n	8009d1a <prvUnlockQueue+0x16>
 8009d46:	e000      	b.n	8009d4a <prvUnlockQueue+0x46>
					break;
 8009d48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	22ff      	movs	r2, #255	@ 0xff
 8009d4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009d52:	f001 fdcb 	bl	800b8ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009d56:	f001 fd97 	bl	800b888 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009d60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d62:	e011      	b.n	8009d88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	691b      	ldr	r3, [r3, #16]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d012      	beq.n	8009d92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	3310      	adds	r3, #16
 8009d70:	4618      	mov	r0, r3
 8009d72:	f000 fd4b 	bl	800a80c <xTaskRemoveFromEventList>
 8009d76:	4603      	mov	r3, r0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d001      	beq.n	8009d80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009d7c:	f000 fe24 	bl	800a9c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009d80:	7bbb      	ldrb	r3, [r7, #14]
 8009d82:	3b01      	subs	r3, #1
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	dce9      	bgt.n	8009d64 <prvUnlockQueue+0x60>
 8009d90:	e000      	b.n	8009d94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009d92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	22ff      	movs	r2, #255	@ 0xff
 8009d98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009d9c:	f001 fda6 	bl	800b8ec <vPortExitCritical>
}
 8009da0:	bf00      	nop
 8009da2:	3710      	adds	r7, #16
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009db0:	f001 fd6a 	bl	800b888 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d102      	bne.n	8009dc2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	60fb      	str	r3, [r7, #12]
 8009dc0:	e001      	b.n	8009dc6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009dc6:	f001 fd91 	bl	800b8ec <vPortExitCritical>

	return xReturn;
 8009dca:	68fb      	ldr	r3, [r7, #12]
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ddc:	f001 fd54 	bl	800b888 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d102      	bne.n	8009df2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009dec:	2301      	movs	r3, #1
 8009dee:	60fb      	str	r3, [r7, #12]
 8009df0:	e001      	b.n	8009df6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009df2:	2300      	movs	r3, #0
 8009df4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009df6:	f001 fd79 	bl	800b8ec <vPortExitCritical>

	return xReturn;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3710      	adds	r7, #16
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009e04:	b480      	push	{r7}
 8009e06:	b085      	sub	sp, #20
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e0e:	2300      	movs	r3, #0
 8009e10:	60fb      	str	r3, [r7, #12]
 8009e12:	e014      	b.n	8009e3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009e14:	4a0f      	ldr	r2, [pc, #60]	@ (8009e54 <vQueueAddToRegistry+0x50>)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d10b      	bne.n	8009e38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009e20:	490c      	ldr	r1, [pc, #48]	@ (8009e54 <vQueueAddToRegistry+0x50>)
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	683a      	ldr	r2, [r7, #0]
 8009e26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8009e54 <vQueueAddToRegistry+0x50>)
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	00db      	lsls	r3, r3, #3
 8009e30:	4413      	add	r3, r2
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009e36:	e006      	b.n	8009e46 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	3301      	adds	r3, #1
 8009e3c:	60fb      	str	r3, [r7, #12]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2b07      	cmp	r3, #7
 8009e42:	d9e7      	bls.n	8009e14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009e44:	bf00      	nop
 8009e46:	bf00      	nop
 8009e48:	3714      	adds	r7, #20
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop
 8009e54:	20001080 	.word	0x20001080

08009e58 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009e58:	b480      	push	{r7}
 8009e5a:	b085      	sub	sp, #20
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e60:	2300      	movs	r3, #0
 8009e62:	60fb      	str	r3, [r7, #12]
 8009e64:	e016      	b.n	8009e94 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009e66:	4a10      	ldr	r2, [pc, #64]	@ (8009ea8 <vQueueUnregisterQueue+0x50>)
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	00db      	lsls	r3, r3, #3
 8009e6c:	4413      	add	r3, r2
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d10b      	bne.n	8009e8e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009e76:	4a0c      	ldr	r2, [pc, #48]	@ (8009ea8 <vQueueUnregisterQueue+0x50>)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2100      	movs	r1, #0
 8009e7c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009e80:	4a09      	ldr	r2, [pc, #36]	@ (8009ea8 <vQueueUnregisterQueue+0x50>)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	00db      	lsls	r3, r3, #3
 8009e86:	4413      	add	r3, r2
 8009e88:	2200      	movs	r2, #0
 8009e8a:	605a      	str	r2, [r3, #4]
				break;
 8009e8c:	e006      	b.n	8009e9c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	3301      	adds	r3, #1
 8009e92:	60fb      	str	r3, [r7, #12]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2b07      	cmp	r3, #7
 8009e98:	d9e5      	bls.n	8009e66 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009e9a:	bf00      	nop
 8009e9c:	bf00      	nop
 8009e9e:	3714      	adds	r7, #20
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr
 8009ea8:	20001080 	.word	0x20001080

08009eac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b086      	sub	sp, #24
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009ebc:	f001 fce4 	bl	800b888 <vPortEnterCritical>
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009ec6:	b25b      	sxtb	r3, r3
 8009ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ecc:	d103      	bne.n	8009ed6 <vQueueWaitForMessageRestricted+0x2a>
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009edc:	b25b      	sxtb	r3, r3
 8009ede:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ee2:	d103      	bne.n	8009eec <vQueueWaitForMessageRestricted+0x40>
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009eec:	f001 fcfe 	bl	800b8ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d106      	bne.n	8009f06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	3324      	adds	r3, #36	@ 0x24
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	68b9      	ldr	r1, [r7, #8]
 8009f00:	4618      	mov	r0, r3
 8009f02:	f000 fc57 	bl	800a7b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009f06:	6978      	ldr	r0, [r7, #20]
 8009f08:	f7ff fefc 	bl	8009d04 <prvUnlockQueue>
	}
 8009f0c:	bf00      	nop
 8009f0e:	3718      	adds	r7, #24
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b08e      	sub	sp, #56	@ 0x38
 8009f18:	af04      	add	r7, sp, #16
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	607a      	str	r2, [r7, #4]
 8009f20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d10b      	bne.n	8009f40 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f2c:	f383 8811 	msr	BASEPRI, r3
 8009f30:	f3bf 8f6f 	isb	sy
 8009f34:	f3bf 8f4f 	dsb	sy
 8009f38:	623b      	str	r3, [r7, #32]
}
 8009f3a:	bf00      	nop
 8009f3c:	bf00      	nop
 8009f3e:	e7fd      	b.n	8009f3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d10b      	bne.n	8009f5e <xTaskCreateStatic+0x4a>
	__asm volatile
 8009f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f4a:	f383 8811 	msr	BASEPRI, r3
 8009f4e:	f3bf 8f6f 	isb	sy
 8009f52:	f3bf 8f4f 	dsb	sy
 8009f56:	61fb      	str	r3, [r7, #28]
}
 8009f58:	bf00      	nop
 8009f5a:	bf00      	nop
 8009f5c:	e7fd      	b.n	8009f5a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009f5e:	235c      	movs	r3, #92	@ 0x5c
 8009f60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	2b5c      	cmp	r3, #92	@ 0x5c
 8009f66:	d00b      	beq.n	8009f80 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f6c:	f383 8811 	msr	BASEPRI, r3
 8009f70:	f3bf 8f6f 	isb	sy
 8009f74:	f3bf 8f4f 	dsb	sy
 8009f78:	61bb      	str	r3, [r7, #24]
}
 8009f7a:	bf00      	nop
 8009f7c:	bf00      	nop
 8009f7e:	e7fd      	b.n	8009f7c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009f80:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d01e      	beq.n	8009fc6 <xTaskCreateStatic+0xb2>
 8009f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d01b      	beq.n	8009fc6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f90:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009f96:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f9a:	2202      	movs	r2, #2
 8009f9c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	9303      	str	r3, [sp, #12]
 8009fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fa6:	9302      	str	r3, [sp, #8]
 8009fa8:	f107 0314 	add.w	r3, r7, #20
 8009fac:	9301      	str	r3, [sp, #4]
 8009fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fb0:	9300      	str	r3, [sp, #0]
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	68b9      	ldr	r1, [r7, #8]
 8009fb8:	68f8      	ldr	r0, [r7, #12]
 8009fba:	f000 f850 	bl	800a05e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009fbe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009fc0:	f000 f8de 	bl	800a180 <prvAddNewTaskToReadyList>
 8009fc4:	e001      	b.n	8009fca <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009fca:	697b      	ldr	r3, [r7, #20]
	}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3728      	adds	r7, #40	@ 0x28
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b08c      	sub	sp, #48	@ 0x30
 8009fd8:	af04      	add	r7, sp, #16
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	603b      	str	r3, [r7, #0]
 8009fe0:	4613      	mov	r3, r2
 8009fe2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009fe4:	88fb      	ldrh	r3, [r7, #6]
 8009fe6:	009b      	lsls	r3, r3, #2
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f001 fd6f 	bl	800bacc <pvPortMalloc>
 8009fee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d00e      	beq.n	800a014 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009ff6:	205c      	movs	r0, #92	@ 0x5c
 8009ff8:	f001 fd68 	bl	800bacc <pvPortMalloc>
 8009ffc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d003      	beq.n	800a00c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a004:	69fb      	ldr	r3, [r7, #28]
 800a006:	697a      	ldr	r2, [r7, #20]
 800a008:	631a      	str	r2, [r3, #48]	@ 0x30
 800a00a:	e005      	b.n	800a018 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a00c:	6978      	ldr	r0, [r7, #20]
 800a00e:	f001 fe2b 	bl	800bc68 <vPortFree>
 800a012:	e001      	b.n	800a018 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a014:	2300      	movs	r3, #0
 800a016:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d017      	beq.n	800a04e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	2200      	movs	r2, #0
 800a022:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a026:	88fa      	ldrh	r2, [r7, #6]
 800a028:	2300      	movs	r3, #0
 800a02a:	9303      	str	r3, [sp, #12]
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	9302      	str	r3, [sp, #8]
 800a030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a032:	9301      	str	r3, [sp, #4]
 800a034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a036:	9300      	str	r3, [sp, #0]
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	68b9      	ldr	r1, [r7, #8]
 800a03c:	68f8      	ldr	r0, [r7, #12]
 800a03e:	f000 f80e 	bl	800a05e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a042:	69f8      	ldr	r0, [r7, #28]
 800a044:	f000 f89c 	bl	800a180 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a048:	2301      	movs	r3, #1
 800a04a:	61bb      	str	r3, [r7, #24]
 800a04c:	e002      	b.n	800a054 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a04e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a052:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a054:	69bb      	ldr	r3, [r7, #24]
	}
 800a056:	4618      	mov	r0, r3
 800a058:	3720      	adds	r7, #32
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b088      	sub	sp, #32
 800a062:	af00      	add	r7, sp, #0
 800a064:	60f8      	str	r0, [r7, #12]
 800a066:	60b9      	str	r1, [r7, #8]
 800a068:	607a      	str	r2, [r7, #4]
 800a06a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a06c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a06e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	461a      	mov	r2, r3
 800a076:	21a5      	movs	r1, #165	@ 0xa5
 800a078:	f002 fea4 	bl	800cdc4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a07c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a07e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a086:	3b01      	subs	r3, #1
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	4413      	add	r3, r2
 800a08c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a08e:	69bb      	ldr	r3, [r7, #24]
 800a090:	f023 0307 	bic.w	r3, r3, #7
 800a094:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	f003 0307 	and.w	r3, r3, #7
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d00b      	beq.n	800a0b8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a0a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0a4:	f383 8811 	msr	BASEPRI, r3
 800a0a8:	f3bf 8f6f 	isb	sy
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	617b      	str	r3, [r7, #20]
}
 800a0b2:	bf00      	nop
 800a0b4:	bf00      	nop
 800a0b6:	e7fd      	b.n	800a0b4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d01f      	beq.n	800a0fe <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a0be:	2300      	movs	r3, #0
 800a0c0:	61fb      	str	r3, [r7, #28]
 800a0c2:	e012      	b.n	800a0ea <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	69fb      	ldr	r3, [r7, #28]
 800a0c8:	4413      	add	r3, r2
 800a0ca:	7819      	ldrb	r1, [r3, #0]
 800a0cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	4413      	add	r3, r2
 800a0d2:	3334      	adds	r3, #52	@ 0x34
 800a0d4:	460a      	mov	r2, r1
 800a0d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a0d8:	68ba      	ldr	r2, [r7, #8]
 800a0da:	69fb      	ldr	r3, [r7, #28]
 800a0dc:	4413      	add	r3, r2
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d006      	beq.n	800a0f2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a0e4:	69fb      	ldr	r3, [r7, #28]
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	61fb      	str	r3, [r7, #28]
 800a0ea:	69fb      	ldr	r3, [r7, #28]
 800a0ec:	2b0f      	cmp	r3, #15
 800a0ee:	d9e9      	bls.n	800a0c4 <prvInitialiseNewTask+0x66>
 800a0f0:	e000      	b.n	800a0f4 <prvInitialiseNewTask+0x96>
			{
				break;
 800a0f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a0f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a0fc:	e003      	b.n	800a106 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a0fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a100:	2200      	movs	r2, #0
 800a102:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a108:	2b37      	cmp	r3, #55	@ 0x37
 800a10a:	d901      	bls.n	800a110 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a10c:	2337      	movs	r3, #55	@ 0x37
 800a10e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a112:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a114:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a118:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a11a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a11c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a11e:	2200      	movs	r2, #0
 800a120:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a124:	3304      	adds	r3, #4
 800a126:	4618      	mov	r0, r3
 800a128:	f7fe fe0c 	bl	8008d44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a12e:	3318      	adds	r3, #24
 800a130:	4618      	mov	r0, r3
 800a132:	f7fe fe07 	bl	8008d44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a138:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a13a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a13c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a13e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a144:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a148:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a14a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a14c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a14e:	2200      	movs	r2, #0
 800a150:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a154:	2200      	movs	r2, #0
 800a156:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a15a:	683a      	ldr	r2, [r7, #0]
 800a15c:	68f9      	ldr	r1, [r7, #12]
 800a15e:	69b8      	ldr	r0, [r7, #24]
 800a160:	f001 fa60 	bl	800b624 <pxPortInitialiseStack>
 800a164:	4602      	mov	r2, r0
 800a166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a168:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a16a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d002      	beq.n	800a176 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a172:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a174:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a176:	bf00      	nop
 800a178:	3720      	adds	r7, #32
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
	...

0800a180 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b082      	sub	sp, #8
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a188:	f001 fb7e 	bl	800b888 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a18c:	4b2d      	ldr	r3, [pc, #180]	@ (800a244 <prvAddNewTaskToReadyList+0xc4>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	3301      	adds	r3, #1
 800a192:	4a2c      	ldr	r2, [pc, #176]	@ (800a244 <prvAddNewTaskToReadyList+0xc4>)
 800a194:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a196:	4b2c      	ldr	r3, [pc, #176]	@ (800a248 <prvAddNewTaskToReadyList+0xc8>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d109      	bne.n	800a1b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a19e:	4a2a      	ldr	r2, [pc, #168]	@ (800a248 <prvAddNewTaskToReadyList+0xc8>)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a1a4:	4b27      	ldr	r3, [pc, #156]	@ (800a244 <prvAddNewTaskToReadyList+0xc4>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d110      	bne.n	800a1ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a1ac:	f000 fc30 	bl	800aa10 <prvInitialiseTaskLists>
 800a1b0:	e00d      	b.n	800a1ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a1b2:	4b26      	ldr	r3, [pc, #152]	@ (800a24c <prvAddNewTaskToReadyList+0xcc>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d109      	bne.n	800a1ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a1ba:	4b23      	ldr	r3, [pc, #140]	@ (800a248 <prvAddNewTaskToReadyList+0xc8>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d802      	bhi.n	800a1ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a1c8:	4a1f      	ldr	r2, [pc, #124]	@ (800a248 <prvAddNewTaskToReadyList+0xc8>)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a1ce:	4b20      	ldr	r3, [pc, #128]	@ (800a250 <prvAddNewTaskToReadyList+0xd0>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	4a1e      	ldr	r2, [pc, #120]	@ (800a250 <prvAddNewTaskToReadyList+0xd0>)
 800a1d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a1d8:	4b1d      	ldr	r3, [pc, #116]	@ (800a250 <prvAddNewTaskToReadyList+0xd0>)
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1e4:	4b1b      	ldr	r3, [pc, #108]	@ (800a254 <prvAddNewTaskToReadyList+0xd4>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d903      	bls.n	800a1f4 <prvAddNewTaskToReadyList+0x74>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1f0:	4a18      	ldr	r2, [pc, #96]	@ (800a254 <prvAddNewTaskToReadyList+0xd4>)
 800a1f2:	6013      	str	r3, [r2, #0]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1f8:	4613      	mov	r3, r2
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	4413      	add	r3, r2
 800a1fe:	009b      	lsls	r3, r3, #2
 800a200:	4a15      	ldr	r2, [pc, #84]	@ (800a258 <prvAddNewTaskToReadyList+0xd8>)
 800a202:	441a      	add	r2, r3
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	3304      	adds	r3, #4
 800a208:	4619      	mov	r1, r3
 800a20a:	4610      	mov	r0, r2
 800a20c:	f7fe fda7 	bl	8008d5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a210:	f001 fb6c 	bl	800b8ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a214:	4b0d      	ldr	r3, [pc, #52]	@ (800a24c <prvAddNewTaskToReadyList+0xcc>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d00e      	beq.n	800a23a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a21c:	4b0a      	ldr	r3, [pc, #40]	@ (800a248 <prvAddNewTaskToReadyList+0xc8>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a226:	429a      	cmp	r2, r3
 800a228:	d207      	bcs.n	800a23a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a22a:	4b0c      	ldr	r3, [pc, #48]	@ (800a25c <prvAddNewTaskToReadyList+0xdc>)
 800a22c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a230:	601a      	str	r2, [r3, #0]
 800a232:	f3bf 8f4f 	dsb	sy
 800a236:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a23a:	bf00      	nop
 800a23c:	3708      	adds	r7, #8
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	20001594 	.word	0x20001594
 800a248:	200010c0 	.word	0x200010c0
 800a24c:	200015a0 	.word	0x200015a0
 800a250:	200015b0 	.word	0x200015b0
 800a254:	2000159c 	.word	0x2000159c
 800a258:	200010c4 	.word	0x200010c4
 800a25c:	e000ed04 	.word	0xe000ed04

0800a260 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a268:	2300      	movs	r3, #0
 800a26a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d018      	beq.n	800a2a4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a272:	4b14      	ldr	r3, [pc, #80]	@ (800a2c4 <vTaskDelay+0x64>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d00b      	beq.n	800a292 <vTaskDelay+0x32>
	__asm volatile
 800a27a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a27e:	f383 8811 	msr	BASEPRI, r3
 800a282:	f3bf 8f6f 	isb	sy
 800a286:	f3bf 8f4f 	dsb	sy
 800a28a:	60bb      	str	r3, [r7, #8]
}
 800a28c:	bf00      	nop
 800a28e:	bf00      	nop
 800a290:	e7fd      	b.n	800a28e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a292:	f000 f883 	bl	800a39c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a296:	2100      	movs	r1, #0
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f000 fe15 	bl	800aec8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a29e:	f000 f88b 	bl	800a3b8 <xTaskResumeAll>
 800a2a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d107      	bne.n	800a2ba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a2aa:	4b07      	ldr	r3, [pc, #28]	@ (800a2c8 <vTaskDelay+0x68>)
 800a2ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2b0:	601a      	str	r2, [r3, #0]
 800a2b2:	f3bf 8f4f 	dsb	sy
 800a2b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a2ba:	bf00      	nop
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	200015bc 	.word	0x200015bc
 800a2c8:	e000ed04 	.word	0xe000ed04

0800a2cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b08a      	sub	sp, #40	@ 0x28
 800a2d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a2da:	463a      	mov	r2, r7
 800a2dc:	1d39      	adds	r1, r7, #4
 800a2de:	f107 0308 	add.w	r3, r7, #8
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7fe fcda 	bl	8008c9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a2e8:	6839      	ldr	r1, [r7, #0]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	68ba      	ldr	r2, [r7, #8]
 800a2ee:	9202      	str	r2, [sp, #8]
 800a2f0:	9301      	str	r3, [sp, #4]
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	9300      	str	r3, [sp, #0]
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	460a      	mov	r2, r1
 800a2fa:	4922      	ldr	r1, [pc, #136]	@ (800a384 <vTaskStartScheduler+0xb8>)
 800a2fc:	4822      	ldr	r0, [pc, #136]	@ (800a388 <vTaskStartScheduler+0xbc>)
 800a2fe:	f7ff fe09 	bl	8009f14 <xTaskCreateStatic>
 800a302:	4603      	mov	r3, r0
 800a304:	4a21      	ldr	r2, [pc, #132]	@ (800a38c <vTaskStartScheduler+0xc0>)
 800a306:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a308:	4b20      	ldr	r3, [pc, #128]	@ (800a38c <vTaskStartScheduler+0xc0>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d002      	beq.n	800a316 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a310:	2301      	movs	r3, #1
 800a312:	617b      	str	r3, [r7, #20]
 800a314:	e001      	b.n	800a31a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a316:	2300      	movs	r3, #0
 800a318:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d102      	bne.n	800a326 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a320:	f000 fe26 	bl	800af70 <xTimerCreateTimerTask>
 800a324:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	2b01      	cmp	r3, #1
 800a32a:	d116      	bne.n	800a35a <vTaskStartScheduler+0x8e>
	__asm volatile
 800a32c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a330:	f383 8811 	msr	BASEPRI, r3
 800a334:	f3bf 8f6f 	isb	sy
 800a338:	f3bf 8f4f 	dsb	sy
 800a33c:	613b      	str	r3, [r7, #16]
}
 800a33e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a340:	4b13      	ldr	r3, [pc, #76]	@ (800a390 <vTaskStartScheduler+0xc4>)
 800a342:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a346:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a348:	4b12      	ldr	r3, [pc, #72]	@ (800a394 <vTaskStartScheduler+0xc8>)
 800a34a:	2201      	movs	r2, #1
 800a34c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a34e:	4b12      	ldr	r3, [pc, #72]	@ (800a398 <vTaskStartScheduler+0xcc>)
 800a350:	2200      	movs	r2, #0
 800a352:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a354:	f001 f9f4 	bl	800b740 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a358:	e00f      	b.n	800a37a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a360:	d10b      	bne.n	800a37a <vTaskStartScheduler+0xae>
	__asm volatile
 800a362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a366:	f383 8811 	msr	BASEPRI, r3
 800a36a:	f3bf 8f6f 	isb	sy
 800a36e:	f3bf 8f4f 	dsb	sy
 800a372:	60fb      	str	r3, [r7, #12]
}
 800a374:	bf00      	nop
 800a376:	bf00      	nop
 800a378:	e7fd      	b.n	800a376 <vTaskStartScheduler+0xaa>
}
 800a37a:	bf00      	nop
 800a37c:	3718      	adds	r7, #24
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	08010498 	.word	0x08010498
 800a388:	0800a9e1 	.word	0x0800a9e1
 800a38c:	200015b8 	.word	0x200015b8
 800a390:	200015b4 	.word	0x200015b4
 800a394:	200015a0 	.word	0x200015a0
 800a398:	20001598 	.word	0x20001598

0800a39c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a39c:	b480      	push	{r7}
 800a39e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a3a0:	4b04      	ldr	r3, [pc, #16]	@ (800a3b4 <vTaskSuspendAll+0x18>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	4a03      	ldr	r2, [pc, #12]	@ (800a3b4 <vTaskSuspendAll+0x18>)
 800a3a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a3aa:	bf00      	nop
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr
 800a3b4:	200015bc 	.word	0x200015bc

0800a3b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b084      	sub	sp, #16
 800a3bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a3c6:	4b42      	ldr	r3, [pc, #264]	@ (800a4d0 <xTaskResumeAll+0x118>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d10b      	bne.n	800a3e6 <xTaskResumeAll+0x2e>
	__asm volatile
 800a3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3d2:	f383 8811 	msr	BASEPRI, r3
 800a3d6:	f3bf 8f6f 	isb	sy
 800a3da:	f3bf 8f4f 	dsb	sy
 800a3de:	603b      	str	r3, [r7, #0]
}
 800a3e0:	bf00      	nop
 800a3e2:	bf00      	nop
 800a3e4:	e7fd      	b.n	800a3e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a3e6:	f001 fa4f 	bl	800b888 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a3ea:	4b39      	ldr	r3, [pc, #228]	@ (800a4d0 <xTaskResumeAll+0x118>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	3b01      	subs	r3, #1
 800a3f0:	4a37      	ldr	r2, [pc, #220]	@ (800a4d0 <xTaskResumeAll+0x118>)
 800a3f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3f4:	4b36      	ldr	r3, [pc, #216]	@ (800a4d0 <xTaskResumeAll+0x118>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d162      	bne.n	800a4c2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a3fc:	4b35      	ldr	r3, [pc, #212]	@ (800a4d4 <xTaskResumeAll+0x11c>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d05e      	beq.n	800a4c2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a404:	e02f      	b.n	800a466 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a406:	4b34      	ldr	r3, [pc, #208]	@ (800a4d8 <xTaskResumeAll+0x120>)
 800a408:	68db      	ldr	r3, [r3, #12]
 800a40a:	68db      	ldr	r3, [r3, #12]
 800a40c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	3318      	adds	r3, #24
 800a412:	4618      	mov	r0, r3
 800a414:	f7fe fd00 	bl	8008e18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	3304      	adds	r3, #4
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7fe fcfb 	bl	8008e18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a426:	4b2d      	ldr	r3, [pc, #180]	@ (800a4dc <xTaskResumeAll+0x124>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d903      	bls.n	800a436 <xTaskResumeAll+0x7e>
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a432:	4a2a      	ldr	r2, [pc, #168]	@ (800a4dc <xTaskResumeAll+0x124>)
 800a434:	6013      	str	r3, [r2, #0]
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a43a:	4613      	mov	r3, r2
 800a43c:	009b      	lsls	r3, r3, #2
 800a43e:	4413      	add	r3, r2
 800a440:	009b      	lsls	r3, r3, #2
 800a442:	4a27      	ldr	r2, [pc, #156]	@ (800a4e0 <xTaskResumeAll+0x128>)
 800a444:	441a      	add	r2, r3
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	3304      	adds	r3, #4
 800a44a:	4619      	mov	r1, r3
 800a44c:	4610      	mov	r0, r2
 800a44e:	f7fe fc86 	bl	8008d5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a456:	4b23      	ldr	r3, [pc, #140]	@ (800a4e4 <xTaskResumeAll+0x12c>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d302      	bcc.n	800a466 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a460:	4b21      	ldr	r3, [pc, #132]	@ (800a4e8 <xTaskResumeAll+0x130>)
 800a462:	2201      	movs	r2, #1
 800a464:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a466:	4b1c      	ldr	r3, [pc, #112]	@ (800a4d8 <xTaskResumeAll+0x120>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d1cb      	bne.n	800a406 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d001      	beq.n	800a478 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a474:	f000 fb6a 	bl	800ab4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a478:	4b1c      	ldr	r3, [pc, #112]	@ (800a4ec <xTaskResumeAll+0x134>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d010      	beq.n	800a4a6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a484:	f000 f858 	bl	800a538 <xTaskIncrementTick>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d002      	beq.n	800a494 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a48e:	4b16      	ldr	r3, [pc, #88]	@ (800a4e8 <xTaskResumeAll+0x130>)
 800a490:	2201      	movs	r2, #1
 800a492:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	3b01      	subs	r3, #1
 800a498:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d1f1      	bne.n	800a484 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a4a0:	4b12      	ldr	r3, [pc, #72]	@ (800a4ec <xTaskResumeAll+0x134>)
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a4a6:	4b10      	ldr	r3, [pc, #64]	@ (800a4e8 <xTaskResumeAll+0x130>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d009      	beq.n	800a4c2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a4b2:	4b0f      	ldr	r3, [pc, #60]	@ (800a4f0 <xTaskResumeAll+0x138>)
 800a4b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4b8:	601a      	str	r2, [r3, #0]
 800a4ba:	f3bf 8f4f 	dsb	sy
 800a4be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a4c2:	f001 fa13 	bl	800b8ec <vPortExitCritical>

	return xAlreadyYielded;
 800a4c6:	68bb      	ldr	r3, [r7, #8]
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3710      	adds	r7, #16
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}
 800a4d0:	200015bc 	.word	0x200015bc
 800a4d4:	20001594 	.word	0x20001594
 800a4d8:	20001554 	.word	0x20001554
 800a4dc:	2000159c 	.word	0x2000159c
 800a4e0:	200010c4 	.word	0x200010c4
 800a4e4:	200010c0 	.word	0x200010c0
 800a4e8:	200015a8 	.word	0x200015a8
 800a4ec:	200015a4 	.word	0x200015a4
 800a4f0:	e000ed04 	.word	0xe000ed04

0800a4f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a4fa:	4b05      	ldr	r3, [pc, #20]	@ (800a510 <xTaskGetTickCount+0x1c>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a500:	687b      	ldr	r3, [r7, #4]
}
 800a502:	4618      	mov	r0, r3
 800a504:	370c      	adds	r7, #12
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr
 800a50e:	bf00      	nop
 800a510:	20001598 	.word	0x20001598

0800a514 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a51a:	f001 fa95 	bl	800ba48 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a51e:	2300      	movs	r3, #0
 800a520:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a522:	4b04      	ldr	r3, [pc, #16]	@ (800a534 <xTaskGetTickCountFromISR+0x20>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a528:	683b      	ldr	r3, [r7, #0]
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3708      	adds	r7, #8
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	20001598 	.word	0x20001598

0800a538 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b086      	sub	sp, #24
 800a53c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a53e:	2300      	movs	r3, #0
 800a540:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a542:	4b4f      	ldr	r3, [pc, #316]	@ (800a680 <xTaskIncrementTick+0x148>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	f040 8090 	bne.w	800a66c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a54c:	4b4d      	ldr	r3, [pc, #308]	@ (800a684 <xTaskIncrementTick+0x14c>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	3301      	adds	r3, #1
 800a552:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a554:	4a4b      	ldr	r2, [pc, #300]	@ (800a684 <xTaskIncrementTick+0x14c>)
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d121      	bne.n	800a5a4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a560:	4b49      	ldr	r3, [pc, #292]	@ (800a688 <xTaskIncrementTick+0x150>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d00b      	beq.n	800a582 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a56a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a56e:	f383 8811 	msr	BASEPRI, r3
 800a572:	f3bf 8f6f 	isb	sy
 800a576:	f3bf 8f4f 	dsb	sy
 800a57a:	603b      	str	r3, [r7, #0]
}
 800a57c:	bf00      	nop
 800a57e:	bf00      	nop
 800a580:	e7fd      	b.n	800a57e <xTaskIncrementTick+0x46>
 800a582:	4b41      	ldr	r3, [pc, #260]	@ (800a688 <xTaskIncrementTick+0x150>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	60fb      	str	r3, [r7, #12]
 800a588:	4b40      	ldr	r3, [pc, #256]	@ (800a68c <xTaskIncrementTick+0x154>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a3e      	ldr	r2, [pc, #248]	@ (800a688 <xTaskIncrementTick+0x150>)
 800a58e:	6013      	str	r3, [r2, #0]
 800a590:	4a3e      	ldr	r2, [pc, #248]	@ (800a68c <xTaskIncrementTick+0x154>)
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	6013      	str	r3, [r2, #0]
 800a596:	4b3e      	ldr	r3, [pc, #248]	@ (800a690 <xTaskIncrementTick+0x158>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	3301      	adds	r3, #1
 800a59c:	4a3c      	ldr	r2, [pc, #240]	@ (800a690 <xTaskIncrementTick+0x158>)
 800a59e:	6013      	str	r3, [r2, #0]
 800a5a0:	f000 fad4 	bl	800ab4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a5a4:	4b3b      	ldr	r3, [pc, #236]	@ (800a694 <xTaskIncrementTick+0x15c>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	693a      	ldr	r2, [r7, #16]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d349      	bcc.n	800a642 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5ae:	4b36      	ldr	r3, [pc, #216]	@ (800a688 <xTaskIncrementTick+0x150>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d104      	bne.n	800a5c2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5b8:	4b36      	ldr	r3, [pc, #216]	@ (800a694 <xTaskIncrementTick+0x15c>)
 800a5ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a5be:	601a      	str	r2, [r3, #0]
					break;
 800a5c0:	e03f      	b.n	800a642 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5c2:	4b31      	ldr	r3, [pc, #196]	@ (800a688 <xTaskIncrementTick+0x150>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	68db      	ldr	r3, [r3, #12]
 800a5c8:	68db      	ldr	r3, [r3, #12]
 800a5ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a5d2:	693a      	ldr	r2, [r7, #16]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d203      	bcs.n	800a5e2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a5da:	4a2e      	ldr	r2, [pc, #184]	@ (800a694 <xTaskIncrementTick+0x15c>)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a5e0:	e02f      	b.n	800a642 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	3304      	adds	r3, #4
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7fe fc16 	bl	8008e18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d004      	beq.n	800a5fe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	3318      	adds	r3, #24
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7fe fc0d 	bl	8008e18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a602:	4b25      	ldr	r3, [pc, #148]	@ (800a698 <xTaskIncrementTick+0x160>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	429a      	cmp	r2, r3
 800a608:	d903      	bls.n	800a612 <xTaskIncrementTick+0xda>
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a60e:	4a22      	ldr	r2, [pc, #136]	@ (800a698 <xTaskIncrementTick+0x160>)
 800a610:	6013      	str	r3, [r2, #0]
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a616:	4613      	mov	r3, r2
 800a618:	009b      	lsls	r3, r3, #2
 800a61a:	4413      	add	r3, r2
 800a61c:	009b      	lsls	r3, r3, #2
 800a61e:	4a1f      	ldr	r2, [pc, #124]	@ (800a69c <xTaskIncrementTick+0x164>)
 800a620:	441a      	add	r2, r3
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	3304      	adds	r3, #4
 800a626:	4619      	mov	r1, r3
 800a628:	4610      	mov	r0, r2
 800a62a:	f7fe fb98 	bl	8008d5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a632:	4b1b      	ldr	r3, [pc, #108]	@ (800a6a0 <xTaskIncrementTick+0x168>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a638:	429a      	cmp	r2, r3
 800a63a:	d3b8      	bcc.n	800a5ae <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a63c:	2301      	movs	r3, #1
 800a63e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a640:	e7b5      	b.n	800a5ae <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a642:	4b17      	ldr	r3, [pc, #92]	@ (800a6a0 <xTaskIncrementTick+0x168>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a648:	4914      	ldr	r1, [pc, #80]	@ (800a69c <xTaskIncrementTick+0x164>)
 800a64a:	4613      	mov	r3, r2
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	4413      	add	r3, r2
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	440b      	add	r3, r1
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2b01      	cmp	r3, #1
 800a658:	d901      	bls.n	800a65e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a65a:	2301      	movs	r3, #1
 800a65c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a65e:	4b11      	ldr	r3, [pc, #68]	@ (800a6a4 <xTaskIncrementTick+0x16c>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d007      	beq.n	800a676 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a666:	2301      	movs	r3, #1
 800a668:	617b      	str	r3, [r7, #20]
 800a66a:	e004      	b.n	800a676 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a66c:	4b0e      	ldr	r3, [pc, #56]	@ (800a6a8 <xTaskIncrementTick+0x170>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	3301      	adds	r3, #1
 800a672:	4a0d      	ldr	r2, [pc, #52]	@ (800a6a8 <xTaskIncrementTick+0x170>)
 800a674:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a676:	697b      	ldr	r3, [r7, #20]
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3718      	adds	r7, #24
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}
 800a680:	200015bc 	.word	0x200015bc
 800a684:	20001598 	.word	0x20001598
 800a688:	2000154c 	.word	0x2000154c
 800a68c:	20001550 	.word	0x20001550
 800a690:	200015ac 	.word	0x200015ac
 800a694:	200015b4 	.word	0x200015b4
 800a698:	2000159c 	.word	0x2000159c
 800a69c:	200010c4 	.word	0x200010c4
 800a6a0:	200010c0 	.word	0x200010c0
 800a6a4:	200015a8 	.word	0x200015a8
 800a6a8:	200015a4 	.word	0x200015a4

0800a6ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b085      	sub	sp, #20
 800a6b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a6b2:	4b28      	ldr	r3, [pc, #160]	@ (800a754 <vTaskSwitchContext+0xa8>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d003      	beq.n	800a6c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a6ba:	4b27      	ldr	r3, [pc, #156]	@ (800a758 <vTaskSwitchContext+0xac>)
 800a6bc:	2201      	movs	r2, #1
 800a6be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a6c0:	e042      	b.n	800a748 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800a6c2:	4b25      	ldr	r3, [pc, #148]	@ (800a758 <vTaskSwitchContext+0xac>)
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6c8:	4b24      	ldr	r3, [pc, #144]	@ (800a75c <vTaskSwitchContext+0xb0>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	60fb      	str	r3, [r7, #12]
 800a6ce:	e011      	b.n	800a6f4 <vTaskSwitchContext+0x48>
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d10b      	bne.n	800a6ee <vTaskSwitchContext+0x42>
	__asm volatile
 800a6d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6da:	f383 8811 	msr	BASEPRI, r3
 800a6de:	f3bf 8f6f 	isb	sy
 800a6e2:	f3bf 8f4f 	dsb	sy
 800a6e6:	607b      	str	r3, [r7, #4]
}
 800a6e8:	bf00      	nop
 800a6ea:	bf00      	nop
 800a6ec:	e7fd      	b.n	800a6ea <vTaskSwitchContext+0x3e>
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	3b01      	subs	r3, #1
 800a6f2:	60fb      	str	r3, [r7, #12]
 800a6f4:	491a      	ldr	r1, [pc, #104]	@ (800a760 <vTaskSwitchContext+0xb4>)
 800a6f6:	68fa      	ldr	r2, [r7, #12]
 800a6f8:	4613      	mov	r3, r2
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	4413      	add	r3, r2
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	440b      	add	r3, r1
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d0e3      	beq.n	800a6d0 <vTaskSwitchContext+0x24>
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	4613      	mov	r3, r2
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	4413      	add	r3, r2
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	4a13      	ldr	r2, [pc, #76]	@ (800a760 <vTaskSwitchContext+0xb4>)
 800a714:	4413      	add	r3, r2
 800a716:	60bb      	str	r3, [r7, #8]
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	685a      	ldr	r2, [r3, #4]
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	605a      	str	r2, [r3, #4]
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	685a      	ldr	r2, [r3, #4]
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	3308      	adds	r3, #8
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d104      	bne.n	800a738 <vTaskSwitchContext+0x8c>
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	685a      	ldr	r2, [r3, #4]
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	605a      	str	r2, [r3, #4]
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	4a09      	ldr	r2, [pc, #36]	@ (800a764 <vTaskSwitchContext+0xb8>)
 800a740:	6013      	str	r3, [r2, #0]
 800a742:	4a06      	ldr	r2, [pc, #24]	@ (800a75c <vTaskSwitchContext+0xb0>)
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	6013      	str	r3, [r2, #0]
}
 800a748:	bf00      	nop
 800a74a:	3714      	adds	r7, #20
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr
 800a754:	200015bc 	.word	0x200015bc
 800a758:	200015a8 	.word	0x200015a8
 800a75c:	2000159c 	.word	0x2000159c
 800a760:	200010c4 	.word	0x200010c4
 800a764:	200010c0 	.word	0x200010c0

0800a768 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b084      	sub	sp, #16
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d10b      	bne.n	800a790 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a77c:	f383 8811 	msr	BASEPRI, r3
 800a780:	f3bf 8f6f 	isb	sy
 800a784:	f3bf 8f4f 	dsb	sy
 800a788:	60fb      	str	r3, [r7, #12]
}
 800a78a:	bf00      	nop
 800a78c:	bf00      	nop
 800a78e:	e7fd      	b.n	800a78c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a790:	4b07      	ldr	r3, [pc, #28]	@ (800a7b0 <vTaskPlaceOnEventList+0x48>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	3318      	adds	r3, #24
 800a796:	4619      	mov	r1, r3
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f7fe fb04 	bl	8008da6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a79e:	2101      	movs	r1, #1
 800a7a0:	6838      	ldr	r0, [r7, #0]
 800a7a2:	f000 fb91 	bl	800aec8 <prvAddCurrentTaskToDelayedList>
}
 800a7a6:	bf00      	nop
 800a7a8:	3710      	adds	r7, #16
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	200010c0 	.word	0x200010c0

0800a7b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b086      	sub	sp, #24
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d10b      	bne.n	800a7de <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ca:	f383 8811 	msr	BASEPRI, r3
 800a7ce:	f3bf 8f6f 	isb	sy
 800a7d2:	f3bf 8f4f 	dsb	sy
 800a7d6:	617b      	str	r3, [r7, #20]
}
 800a7d8:	bf00      	nop
 800a7da:	bf00      	nop
 800a7dc:	e7fd      	b.n	800a7da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a7de:	4b0a      	ldr	r3, [pc, #40]	@ (800a808 <vTaskPlaceOnEventListRestricted+0x54>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	3318      	adds	r3, #24
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	68f8      	ldr	r0, [r7, #12]
 800a7e8:	f7fe fab9 	bl	8008d5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d002      	beq.n	800a7f8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a7f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a7f6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a7f8:	6879      	ldr	r1, [r7, #4]
 800a7fa:	68b8      	ldr	r0, [r7, #8]
 800a7fc:	f000 fb64 	bl	800aec8 <prvAddCurrentTaskToDelayedList>
	}
 800a800:	bf00      	nop
 800a802:	3718      	adds	r7, #24
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	200010c0 	.word	0x200010c0

0800a80c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b086      	sub	sp, #24
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	68db      	ldr	r3, [r3, #12]
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d10b      	bne.n	800a83a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a826:	f383 8811 	msr	BASEPRI, r3
 800a82a:	f3bf 8f6f 	isb	sy
 800a82e:	f3bf 8f4f 	dsb	sy
 800a832:	60fb      	str	r3, [r7, #12]
}
 800a834:	bf00      	nop
 800a836:	bf00      	nop
 800a838:	e7fd      	b.n	800a836 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	3318      	adds	r3, #24
 800a83e:	4618      	mov	r0, r3
 800a840:	f7fe faea 	bl	8008e18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a844:	4b1d      	ldr	r3, [pc, #116]	@ (800a8bc <xTaskRemoveFromEventList+0xb0>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d11d      	bne.n	800a888 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	3304      	adds	r3, #4
 800a850:	4618      	mov	r0, r3
 800a852:	f7fe fae1 	bl	8008e18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a85a:	4b19      	ldr	r3, [pc, #100]	@ (800a8c0 <xTaskRemoveFromEventList+0xb4>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	429a      	cmp	r2, r3
 800a860:	d903      	bls.n	800a86a <xTaskRemoveFromEventList+0x5e>
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a866:	4a16      	ldr	r2, [pc, #88]	@ (800a8c0 <xTaskRemoveFromEventList+0xb4>)
 800a868:	6013      	str	r3, [r2, #0]
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a86e:	4613      	mov	r3, r2
 800a870:	009b      	lsls	r3, r3, #2
 800a872:	4413      	add	r3, r2
 800a874:	009b      	lsls	r3, r3, #2
 800a876:	4a13      	ldr	r2, [pc, #76]	@ (800a8c4 <xTaskRemoveFromEventList+0xb8>)
 800a878:	441a      	add	r2, r3
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	3304      	adds	r3, #4
 800a87e:	4619      	mov	r1, r3
 800a880:	4610      	mov	r0, r2
 800a882:	f7fe fa6c 	bl	8008d5e <vListInsertEnd>
 800a886:	e005      	b.n	800a894 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	3318      	adds	r3, #24
 800a88c:	4619      	mov	r1, r3
 800a88e:	480e      	ldr	r0, [pc, #56]	@ (800a8c8 <xTaskRemoveFromEventList+0xbc>)
 800a890:	f7fe fa65 	bl	8008d5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a898:	4b0c      	ldr	r3, [pc, #48]	@ (800a8cc <xTaskRemoveFromEventList+0xc0>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d905      	bls.n	800a8ae <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a8a6:	4b0a      	ldr	r3, [pc, #40]	@ (800a8d0 <xTaskRemoveFromEventList+0xc4>)
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	601a      	str	r2, [r3, #0]
 800a8ac:	e001      	b.n	800a8b2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a8b2:	697b      	ldr	r3, [r7, #20]
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3718      	adds	r7, #24
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	200015bc 	.word	0x200015bc
 800a8c0:	2000159c 	.word	0x2000159c
 800a8c4:	200010c4 	.word	0x200010c4
 800a8c8:	20001554 	.word	0x20001554
 800a8cc:	200010c0 	.word	0x200010c0
 800a8d0:	200015a8 	.word	0x200015a8

0800a8d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b083      	sub	sp, #12
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a8dc:	4b06      	ldr	r3, [pc, #24]	@ (800a8f8 <vTaskInternalSetTimeOutState+0x24>)
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a8e4:	4b05      	ldr	r3, [pc, #20]	@ (800a8fc <vTaskInternalSetTimeOutState+0x28>)
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	605a      	str	r2, [r3, #4]
}
 800a8ec:	bf00      	nop
 800a8ee:	370c      	adds	r7, #12
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr
 800a8f8:	200015ac 	.word	0x200015ac
 800a8fc:	20001598 	.word	0x20001598

0800a900 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b088      	sub	sp, #32
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d10b      	bne.n	800a928 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a914:	f383 8811 	msr	BASEPRI, r3
 800a918:	f3bf 8f6f 	isb	sy
 800a91c:	f3bf 8f4f 	dsb	sy
 800a920:	613b      	str	r3, [r7, #16]
}
 800a922:	bf00      	nop
 800a924:	bf00      	nop
 800a926:	e7fd      	b.n	800a924 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d10b      	bne.n	800a946 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a932:	f383 8811 	msr	BASEPRI, r3
 800a936:	f3bf 8f6f 	isb	sy
 800a93a:	f3bf 8f4f 	dsb	sy
 800a93e:	60fb      	str	r3, [r7, #12]
}
 800a940:	bf00      	nop
 800a942:	bf00      	nop
 800a944:	e7fd      	b.n	800a942 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a946:	f000 ff9f 	bl	800b888 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a94a:	4b1d      	ldr	r3, [pc, #116]	@ (800a9c0 <xTaskCheckForTimeOut+0xc0>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	69ba      	ldr	r2, [r7, #24]
 800a956:	1ad3      	subs	r3, r2, r3
 800a958:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a962:	d102      	bne.n	800a96a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a964:	2300      	movs	r3, #0
 800a966:	61fb      	str	r3, [r7, #28]
 800a968:	e023      	b.n	800a9b2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	4b15      	ldr	r3, [pc, #84]	@ (800a9c4 <xTaskCheckForTimeOut+0xc4>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	429a      	cmp	r2, r3
 800a974:	d007      	beq.n	800a986 <xTaskCheckForTimeOut+0x86>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	69ba      	ldr	r2, [r7, #24]
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d302      	bcc.n	800a986 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a980:	2301      	movs	r3, #1
 800a982:	61fb      	str	r3, [r7, #28]
 800a984:	e015      	b.n	800a9b2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	697a      	ldr	r2, [r7, #20]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d20b      	bcs.n	800a9a8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	1ad2      	subs	r2, r2, r3
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f7ff ff99 	bl	800a8d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	61fb      	str	r3, [r7, #28]
 800a9a6:	e004      	b.n	800a9b2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a9b2:	f000 ff9b 	bl	800b8ec <vPortExitCritical>

	return xReturn;
 800a9b6:	69fb      	ldr	r3, [r7, #28]
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3720      	adds	r7, #32
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}
 800a9c0:	20001598 	.word	0x20001598
 800a9c4:	200015ac 	.word	0x200015ac

0800a9c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a9cc:	4b03      	ldr	r3, [pc, #12]	@ (800a9dc <vTaskMissedYield+0x14>)
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	601a      	str	r2, [r3, #0]
}
 800a9d2:	bf00      	nop
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr
 800a9dc:	200015a8 	.word	0x200015a8

0800a9e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b082      	sub	sp, #8
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a9e8:	f000 f852 	bl	800aa90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a9ec:	4b06      	ldr	r3, [pc, #24]	@ (800aa08 <prvIdleTask+0x28>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d9f9      	bls.n	800a9e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a9f4:	4b05      	ldr	r3, [pc, #20]	@ (800aa0c <prvIdleTask+0x2c>)
 800a9f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9fa:	601a      	str	r2, [r3, #0]
 800a9fc:	f3bf 8f4f 	dsb	sy
 800aa00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aa04:	e7f0      	b.n	800a9e8 <prvIdleTask+0x8>
 800aa06:	bf00      	nop
 800aa08:	200010c4 	.word	0x200010c4
 800aa0c:	e000ed04 	.word	0xe000ed04

0800aa10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa16:	2300      	movs	r3, #0
 800aa18:	607b      	str	r3, [r7, #4]
 800aa1a:	e00c      	b.n	800aa36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	4613      	mov	r3, r2
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	4413      	add	r3, r2
 800aa24:	009b      	lsls	r3, r3, #2
 800aa26:	4a12      	ldr	r2, [pc, #72]	@ (800aa70 <prvInitialiseTaskLists+0x60>)
 800aa28:	4413      	add	r3, r2
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f7fe f96a 	bl	8008d04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	3301      	adds	r3, #1
 800aa34:	607b      	str	r3, [r7, #4]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2b37      	cmp	r3, #55	@ 0x37
 800aa3a:	d9ef      	bls.n	800aa1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aa3c:	480d      	ldr	r0, [pc, #52]	@ (800aa74 <prvInitialiseTaskLists+0x64>)
 800aa3e:	f7fe f961 	bl	8008d04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aa42:	480d      	ldr	r0, [pc, #52]	@ (800aa78 <prvInitialiseTaskLists+0x68>)
 800aa44:	f7fe f95e 	bl	8008d04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aa48:	480c      	ldr	r0, [pc, #48]	@ (800aa7c <prvInitialiseTaskLists+0x6c>)
 800aa4a:	f7fe f95b 	bl	8008d04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aa4e:	480c      	ldr	r0, [pc, #48]	@ (800aa80 <prvInitialiseTaskLists+0x70>)
 800aa50:	f7fe f958 	bl	8008d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aa54:	480b      	ldr	r0, [pc, #44]	@ (800aa84 <prvInitialiseTaskLists+0x74>)
 800aa56:	f7fe f955 	bl	8008d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aa5a:	4b0b      	ldr	r3, [pc, #44]	@ (800aa88 <prvInitialiseTaskLists+0x78>)
 800aa5c:	4a05      	ldr	r2, [pc, #20]	@ (800aa74 <prvInitialiseTaskLists+0x64>)
 800aa5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aa60:	4b0a      	ldr	r3, [pc, #40]	@ (800aa8c <prvInitialiseTaskLists+0x7c>)
 800aa62:	4a05      	ldr	r2, [pc, #20]	@ (800aa78 <prvInitialiseTaskLists+0x68>)
 800aa64:	601a      	str	r2, [r3, #0]
}
 800aa66:	bf00      	nop
 800aa68:	3708      	adds	r7, #8
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	200010c4 	.word	0x200010c4
 800aa74:	20001524 	.word	0x20001524
 800aa78:	20001538 	.word	0x20001538
 800aa7c:	20001554 	.word	0x20001554
 800aa80:	20001568 	.word	0x20001568
 800aa84:	20001580 	.word	0x20001580
 800aa88:	2000154c 	.word	0x2000154c
 800aa8c:	20001550 	.word	0x20001550

0800aa90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa96:	e019      	b.n	800aacc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aa98:	f000 fef6 	bl	800b888 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa9c:	4b10      	ldr	r3, [pc, #64]	@ (800aae0 <prvCheckTasksWaitingTermination+0x50>)
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	68db      	ldr	r3, [r3, #12]
 800aaa2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	3304      	adds	r3, #4
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f7fe f9b5 	bl	8008e18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aaae:	4b0d      	ldr	r3, [pc, #52]	@ (800aae4 <prvCheckTasksWaitingTermination+0x54>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	3b01      	subs	r3, #1
 800aab4:	4a0b      	ldr	r2, [pc, #44]	@ (800aae4 <prvCheckTasksWaitingTermination+0x54>)
 800aab6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aab8:	4b0b      	ldr	r3, [pc, #44]	@ (800aae8 <prvCheckTasksWaitingTermination+0x58>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	3b01      	subs	r3, #1
 800aabe:	4a0a      	ldr	r2, [pc, #40]	@ (800aae8 <prvCheckTasksWaitingTermination+0x58>)
 800aac0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aac2:	f000 ff13 	bl	800b8ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f000 f810 	bl	800aaec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aacc:	4b06      	ldr	r3, [pc, #24]	@ (800aae8 <prvCheckTasksWaitingTermination+0x58>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d1e1      	bne.n	800aa98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aad4:	bf00      	nop
 800aad6:	bf00      	nop
 800aad8:	3708      	adds	r7, #8
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	20001568 	.word	0x20001568
 800aae4:	20001594 	.word	0x20001594
 800aae8:	2000157c 	.word	0x2000157c

0800aaec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d108      	bne.n	800ab10 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab02:	4618      	mov	r0, r3
 800ab04:	f001 f8b0 	bl	800bc68 <vPortFree>
				vPortFree( pxTCB );
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f001 f8ad 	bl	800bc68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ab0e:	e019      	b.n	800ab44 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ab16:	2b01      	cmp	r3, #1
 800ab18:	d103      	bne.n	800ab22 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f001 f8a4 	bl	800bc68 <vPortFree>
	}
 800ab20:	e010      	b.n	800ab44 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ab28:	2b02      	cmp	r3, #2
 800ab2a:	d00b      	beq.n	800ab44 <prvDeleteTCB+0x58>
	__asm volatile
 800ab2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab30:	f383 8811 	msr	BASEPRI, r3
 800ab34:	f3bf 8f6f 	isb	sy
 800ab38:	f3bf 8f4f 	dsb	sy
 800ab3c:	60fb      	str	r3, [r7, #12]
}
 800ab3e:	bf00      	nop
 800ab40:	bf00      	nop
 800ab42:	e7fd      	b.n	800ab40 <prvDeleteTCB+0x54>
	}
 800ab44:	bf00      	nop
 800ab46:	3710      	adds	r7, #16
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab52:	4b0c      	ldr	r3, [pc, #48]	@ (800ab84 <prvResetNextTaskUnblockTime+0x38>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d104      	bne.n	800ab66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ab5c:	4b0a      	ldr	r3, [pc, #40]	@ (800ab88 <prvResetNextTaskUnblockTime+0x3c>)
 800ab5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ab62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ab64:	e008      	b.n	800ab78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab66:	4b07      	ldr	r3, [pc, #28]	@ (800ab84 <prvResetNextTaskUnblockTime+0x38>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	68db      	ldr	r3, [r3, #12]
 800ab6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	4a04      	ldr	r2, [pc, #16]	@ (800ab88 <prvResetNextTaskUnblockTime+0x3c>)
 800ab76:	6013      	str	r3, [r2, #0]
}
 800ab78:	bf00      	nop
 800ab7a:	370c      	adds	r7, #12
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr
 800ab84:	2000154c 	.word	0x2000154c
 800ab88:	200015b4 	.word	0x200015b4

0800ab8c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b083      	sub	sp, #12
 800ab90:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ab92:	4b05      	ldr	r3, [pc, #20]	@ (800aba8 <xTaskGetCurrentTaskHandle+0x1c>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ab98:	687b      	ldr	r3, [r7, #4]
	}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	370c      	adds	r7, #12
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr
 800aba6:	bf00      	nop
 800aba8:	200010c0 	.word	0x200010c0

0800abac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800abac:	b480      	push	{r7}
 800abae:	b083      	sub	sp, #12
 800abb0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800abb2:	4b0b      	ldr	r3, [pc, #44]	@ (800abe0 <xTaskGetSchedulerState+0x34>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d102      	bne.n	800abc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800abba:	2301      	movs	r3, #1
 800abbc:	607b      	str	r3, [r7, #4]
 800abbe:	e008      	b.n	800abd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abc0:	4b08      	ldr	r3, [pc, #32]	@ (800abe4 <xTaskGetSchedulerState+0x38>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d102      	bne.n	800abce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800abc8:	2302      	movs	r3, #2
 800abca:	607b      	str	r3, [r7, #4]
 800abcc:	e001      	b.n	800abd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800abce:	2300      	movs	r3, #0
 800abd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800abd2:	687b      	ldr	r3, [r7, #4]
	}
 800abd4:	4618      	mov	r0, r3
 800abd6:	370c      	adds	r7, #12
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr
 800abe0:	200015a0 	.word	0x200015a0
 800abe4:	200015bc 	.word	0x200015bc

0800abe8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800abf4:	2300      	movs	r3, #0
 800abf6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d051      	beq.n	800aca2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac02:	4b2a      	ldr	r3, [pc, #168]	@ (800acac <xTaskPriorityInherit+0xc4>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d241      	bcs.n	800ac90 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	699b      	ldr	r3, [r3, #24]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	db06      	blt.n	800ac22 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac14:	4b25      	ldr	r3, [pc, #148]	@ (800acac <xTaskPriorityInherit+0xc4>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac1a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	6959      	ldr	r1, [r3, #20]
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac2a:	4613      	mov	r3, r2
 800ac2c:	009b      	lsls	r3, r3, #2
 800ac2e:	4413      	add	r3, r2
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	4a1f      	ldr	r2, [pc, #124]	@ (800acb0 <xTaskPriorityInherit+0xc8>)
 800ac34:	4413      	add	r3, r2
 800ac36:	4299      	cmp	r1, r3
 800ac38:	d122      	bne.n	800ac80 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	3304      	adds	r3, #4
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7fe f8ea 	bl	8008e18 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ac44:	4b19      	ldr	r3, [pc, #100]	@ (800acac <xTaskPriorityInherit+0xc4>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac52:	4b18      	ldr	r3, [pc, #96]	@ (800acb4 <xTaskPriorityInherit+0xcc>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	429a      	cmp	r2, r3
 800ac58:	d903      	bls.n	800ac62 <xTaskPriorityInherit+0x7a>
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac5e:	4a15      	ldr	r2, [pc, #84]	@ (800acb4 <xTaskPriorityInherit+0xcc>)
 800ac60:	6013      	str	r3, [r2, #0]
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac66:	4613      	mov	r3, r2
 800ac68:	009b      	lsls	r3, r3, #2
 800ac6a:	4413      	add	r3, r2
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	4a10      	ldr	r2, [pc, #64]	@ (800acb0 <xTaskPriorityInherit+0xc8>)
 800ac70:	441a      	add	r2, r3
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	3304      	adds	r3, #4
 800ac76:	4619      	mov	r1, r3
 800ac78:	4610      	mov	r0, r2
 800ac7a:	f7fe f870 	bl	8008d5e <vListInsertEnd>
 800ac7e:	e004      	b.n	800ac8a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ac80:	4b0a      	ldr	r3, [pc, #40]	@ (800acac <xTaskPriorityInherit+0xc4>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	60fb      	str	r3, [r7, #12]
 800ac8e:	e008      	b.n	800aca2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ac94:	4b05      	ldr	r3, [pc, #20]	@ (800acac <xTaskPriorityInherit+0xc4>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d201      	bcs.n	800aca2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aca2:	68fb      	ldr	r3, [r7, #12]
	}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3710      	adds	r7, #16
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}
 800acac:	200010c0 	.word	0x200010c0
 800acb0:	200010c4 	.word	0x200010c4
 800acb4:	2000159c 	.word	0x2000159c

0800acb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b086      	sub	sp, #24
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800acc4:	2300      	movs	r3, #0
 800acc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d058      	beq.n	800ad80 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800acce:	4b2f      	ldr	r3, [pc, #188]	@ (800ad8c <xTaskPriorityDisinherit+0xd4>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	693a      	ldr	r2, [r7, #16]
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d00b      	beq.n	800acf0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800acd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acdc:	f383 8811 	msr	BASEPRI, r3
 800ace0:	f3bf 8f6f 	isb	sy
 800ace4:	f3bf 8f4f 	dsb	sy
 800ace8:	60fb      	str	r3, [r7, #12]
}
 800acea:	bf00      	nop
 800acec:	bf00      	nop
 800acee:	e7fd      	b.n	800acec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d10b      	bne.n	800ad10 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800acf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acfc:	f383 8811 	msr	BASEPRI, r3
 800ad00:	f3bf 8f6f 	isb	sy
 800ad04:	f3bf 8f4f 	dsb	sy
 800ad08:	60bb      	str	r3, [r7, #8]
}
 800ad0a:	bf00      	nop
 800ad0c:	bf00      	nop
 800ad0e:	e7fd      	b.n	800ad0c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad14:	1e5a      	subs	r2, r3, #1
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d02c      	beq.n	800ad80 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d128      	bne.n	800ad80 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	3304      	adds	r3, #4
 800ad32:	4618      	mov	r0, r3
 800ad34:	f7fe f870 	bl	8008e18 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad44:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad50:	4b0f      	ldr	r3, [pc, #60]	@ (800ad90 <xTaskPriorityDisinherit+0xd8>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d903      	bls.n	800ad60 <xTaskPriorityDisinherit+0xa8>
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad5c:	4a0c      	ldr	r2, [pc, #48]	@ (800ad90 <xTaskPriorityDisinherit+0xd8>)
 800ad5e:	6013      	str	r3, [r2, #0]
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad64:	4613      	mov	r3, r2
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	4413      	add	r3, r2
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	4a09      	ldr	r2, [pc, #36]	@ (800ad94 <xTaskPriorityDisinherit+0xdc>)
 800ad6e:	441a      	add	r2, r3
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	3304      	adds	r3, #4
 800ad74:	4619      	mov	r1, r3
 800ad76:	4610      	mov	r0, r2
 800ad78:	f7fd fff1 	bl	8008d5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ad80:	697b      	ldr	r3, [r7, #20]
	}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3718      	adds	r7, #24
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
 800ad8a:	bf00      	nop
 800ad8c:	200010c0 	.word	0x200010c0
 800ad90:	2000159c 	.word	0x2000159c
 800ad94:	200010c4 	.word	0x200010c4

0800ad98 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b088      	sub	sp, #32
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ada6:	2301      	movs	r3, #1
 800ada8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d06c      	beq.n	800ae8a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800adb0:	69bb      	ldr	r3, [r7, #24]
 800adb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d10b      	bne.n	800add0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800adb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adbc:	f383 8811 	msr	BASEPRI, r3
 800adc0:	f3bf 8f6f 	isb	sy
 800adc4:	f3bf 8f4f 	dsb	sy
 800adc8:	60fb      	str	r3, [r7, #12]
}
 800adca:	bf00      	nop
 800adcc:	bf00      	nop
 800adce:	e7fd      	b.n	800adcc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800add0:	69bb      	ldr	r3, [r7, #24]
 800add2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800add4:	683a      	ldr	r2, [r7, #0]
 800add6:	429a      	cmp	r2, r3
 800add8:	d902      	bls.n	800ade0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	61fb      	str	r3, [r7, #28]
 800adde:	e002      	b.n	800ade6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ade0:	69bb      	ldr	r3, [r7, #24]
 800ade2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ade4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ade6:	69bb      	ldr	r3, [r7, #24]
 800ade8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adea:	69fa      	ldr	r2, [r7, #28]
 800adec:	429a      	cmp	r2, r3
 800adee:	d04c      	beq.n	800ae8a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800adf4:	697a      	ldr	r2, [r7, #20]
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d147      	bne.n	800ae8a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800adfa:	4b26      	ldr	r3, [pc, #152]	@ (800ae94 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	69ba      	ldr	r2, [r7, #24]
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d10b      	bne.n	800ae1c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ae04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae08:	f383 8811 	msr	BASEPRI, r3
 800ae0c:	f3bf 8f6f 	isb	sy
 800ae10:	f3bf 8f4f 	dsb	sy
 800ae14:	60bb      	str	r3, [r7, #8]
}
 800ae16:	bf00      	nop
 800ae18:	bf00      	nop
 800ae1a:	e7fd      	b.n	800ae18 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ae1c:	69bb      	ldr	r3, [r7, #24]
 800ae1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae20:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ae22:	69bb      	ldr	r3, [r7, #24]
 800ae24:	69fa      	ldr	r2, [r7, #28]
 800ae26:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ae28:	69bb      	ldr	r3, [r7, #24]
 800ae2a:	699b      	ldr	r3, [r3, #24]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	db04      	blt.n	800ae3a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae30:	69fb      	ldr	r3, [r7, #28]
 800ae32:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ae36:	69bb      	ldr	r3, [r7, #24]
 800ae38:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	6959      	ldr	r1, [r3, #20]
 800ae3e:	693a      	ldr	r2, [r7, #16]
 800ae40:	4613      	mov	r3, r2
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	4413      	add	r3, r2
 800ae46:	009b      	lsls	r3, r3, #2
 800ae48:	4a13      	ldr	r2, [pc, #76]	@ (800ae98 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ae4a:	4413      	add	r3, r2
 800ae4c:	4299      	cmp	r1, r3
 800ae4e:	d11c      	bne.n	800ae8a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae50:	69bb      	ldr	r3, [r7, #24]
 800ae52:	3304      	adds	r3, #4
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7fd ffdf 	bl	8008e18 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae5e:	4b0f      	ldr	r3, [pc, #60]	@ (800ae9c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d903      	bls.n	800ae6e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800ae66:	69bb      	ldr	r3, [r7, #24]
 800ae68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae6a:	4a0c      	ldr	r2, [pc, #48]	@ (800ae9c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ae6c:	6013      	str	r3, [r2, #0]
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae72:	4613      	mov	r3, r2
 800ae74:	009b      	lsls	r3, r3, #2
 800ae76:	4413      	add	r3, r2
 800ae78:	009b      	lsls	r3, r3, #2
 800ae7a:	4a07      	ldr	r2, [pc, #28]	@ (800ae98 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ae7c:	441a      	add	r2, r3
 800ae7e:	69bb      	ldr	r3, [r7, #24]
 800ae80:	3304      	adds	r3, #4
 800ae82:	4619      	mov	r1, r3
 800ae84:	4610      	mov	r0, r2
 800ae86:	f7fd ff6a 	bl	8008d5e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae8a:	bf00      	nop
 800ae8c:	3720      	adds	r7, #32
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	200010c0 	.word	0x200010c0
 800ae98:	200010c4 	.word	0x200010c4
 800ae9c:	2000159c 	.word	0x2000159c

0800aea0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800aea0:	b480      	push	{r7}
 800aea2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800aea4:	4b07      	ldr	r3, [pc, #28]	@ (800aec4 <pvTaskIncrementMutexHeldCount+0x24>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d004      	beq.n	800aeb6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800aeac:	4b05      	ldr	r3, [pc, #20]	@ (800aec4 <pvTaskIncrementMutexHeldCount+0x24>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aeb2:	3201      	adds	r2, #1
 800aeb4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800aeb6:	4b03      	ldr	r3, [pc, #12]	@ (800aec4 <pvTaskIncrementMutexHeldCount+0x24>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
	}
 800aeba:	4618      	mov	r0, r3
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr
 800aec4:	200010c0 	.word	0x200010c0

0800aec8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aed2:	4b21      	ldr	r3, [pc, #132]	@ (800af58 <prvAddCurrentTaskToDelayedList+0x90>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aed8:	4b20      	ldr	r3, [pc, #128]	@ (800af5c <prvAddCurrentTaskToDelayedList+0x94>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	3304      	adds	r3, #4
 800aede:	4618      	mov	r0, r3
 800aee0:	f7fd ff9a 	bl	8008e18 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aeea:	d10a      	bne.n	800af02 <prvAddCurrentTaskToDelayedList+0x3a>
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d007      	beq.n	800af02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aef2:	4b1a      	ldr	r3, [pc, #104]	@ (800af5c <prvAddCurrentTaskToDelayedList+0x94>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	3304      	adds	r3, #4
 800aef8:	4619      	mov	r1, r3
 800aefa:	4819      	ldr	r0, [pc, #100]	@ (800af60 <prvAddCurrentTaskToDelayedList+0x98>)
 800aefc:	f7fd ff2f 	bl	8008d5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800af00:	e026      	b.n	800af50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800af02:	68fa      	ldr	r2, [r7, #12]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	4413      	add	r3, r2
 800af08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800af0a:	4b14      	ldr	r3, [pc, #80]	@ (800af5c <prvAddCurrentTaskToDelayedList+0x94>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	68ba      	ldr	r2, [r7, #8]
 800af10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800af12:	68ba      	ldr	r2, [r7, #8]
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	429a      	cmp	r2, r3
 800af18:	d209      	bcs.n	800af2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af1a:	4b12      	ldr	r3, [pc, #72]	@ (800af64 <prvAddCurrentTaskToDelayedList+0x9c>)
 800af1c:	681a      	ldr	r2, [r3, #0]
 800af1e:	4b0f      	ldr	r3, [pc, #60]	@ (800af5c <prvAddCurrentTaskToDelayedList+0x94>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	3304      	adds	r3, #4
 800af24:	4619      	mov	r1, r3
 800af26:	4610      	mov	r0, r2
 800af28:	f7fd ff3d 	bl	8008da6 <vListInsert>
}
 800af2c:	e010      	b.n	800af50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af2e:	4b0e      	ldr	r3, [pc, #56]	@ (800af68 <prvAddCurrentTaskToDelayedList+0xa0>)
 800af30:	681a      	ldr	r2, [r3, #0]
 800af32:	4b0a      	ldr	r3, [pc, #40]	@ (800af5c <prvAddCurrentTaskToDelayedList+0x94>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	3304      	adds	r3, #4
 800af38:	4619      	mov	r1, r3
 800af3a:	4610      	mov	r0, r2
 800af3c:	f7fd ff33 	bl	8008da6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800af40:	4b0a      	ldr	r3, [pc, #40]	@ (800af6c <prvAddCurrentTaskToDelayedList+0xa4>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	68ba      	ldr	r2, [r7, #8]
 800af46:	429a      	cmp	r2, r3
 800af48:	d202      	bcs.n	800af50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800af4a:	4a08      	ldr	r2, [pc, #32]	@ (800af6c <prvAddCurrentTaskToDelayedList+0xa4>)
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	6013      	str	r3, [r2, #0]
}
 800af50:	bf00      	nop
 800af52:	3710      	adds	r7, #16
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}
 800af58:	20001598 	.word	0x20001598
 800af5c:	200010c0 	.word	0x200010c0
 800af60:	20001580 	.word	0x20001580
 800af64:	20001550 	.word	0x20001550
 800af68:	2000154c 	.word	0x2000154c
 800af6c:	200015b4 	.word	0x200015b4

0800af70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b08a      	sub	sp, #40	@ 0x28
 800af74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800af76:	2300      	movs	r3, #0
 800af78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800af7a:	f000 fb13 	bl	800b5a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800af7e:	4b1d      	ldr	r3, [pc, #116]	@ (800aff4 <xTimerCreateTimerTask+0x84>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d021      	beq.n	800afca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800af86:	2300      	movs	r3, #0
 800af88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800af8a:	2300      	movs	r3, #0
 800af8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800af8e:	1d3a      	adds	r2, r7, #4
 800af90:	f107 0108 	add.w	r1, r7, #8
 800af94:	f107 030c 	add.w	r3, r7, #12
 800af98:	4618      	mov	r0, r3
 800af9a:	f7fd fe99 	bl	8008cd0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800af9e:	6879      	ldr	r1, [r7, #4]
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	68fa      	ldr	r2, [r7, #12]
 800afa4:	9202      	str	r2, [sp, #8]
 800afa6:	9301      	str	r3, [sp, #4]
 800afa8:	2302      	movs	r3, #2
 800afaa:	9300      	str	r3, [sp, #0]
 800afac:	2300      	movs	r3, #0
 800afae:	460a      	mov	r2, r1
 800afb0:	4911      	ldr	r1, [pc, #68]	@ (800aff8 <xTimerCreateTimerTask+0x88>)
 800afb2:	4812      	ldr	r0, [pc, #72]	@ (800affc <xTimerCreateTimerTask+0x8c>)
 800afb4:	f7fe ffae 	bl	8009f14 <xTaskCreateStatic>
 800afb8:	4603      	mov	r3, r0
 800afba:	4a11      	ldr	r2, [pc, #68]	@ (800b000 <xTimerCreateTimerTask+0x90>)
 800afbc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800afbe:	4b10      	ldr	r3, [pc, #64]	@ (800b000 <xTimerCreateTimerTask+0x90>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d001      	beq.n	800afca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800afc6:	2301      	movs	r3, #1
 800afc8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d10b      	bne.n	800afe8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800afd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afd4:	f383 8811 	msr	BASEPRI, r3
 800afd8:	f3bf 8f6f 	isb	sy
 800afdc:	f3bf 8f4f 	dsb	sy
 800afe0:	613b      	str	r3, [r7, #16]
}
 800afe2:	bf00      	nop
 800afe4:	bf00      	nop
 800afe6:	e7fd      	b.n	800afe4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800afe8:	697b      	ldr	r3, [r7, #20]
}
 800afea:	4618      	mov	r0, r3
 800afec:	3718      	adds	r7, #24
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	bf00      	nop
 800aff4:	200015f0 	.word	0x200015f0
 800aff8:	080104a0 	.word	0x080104a0
 800affc:	0800b13d 	.word	0x0800b13d
 800b000:	200015f4 	.word	0x200015f4

0800b004 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b08a      	sub	sp, #40	@ 0x28
 800b008:	af00      	add	r7, sp, #0
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	60b9      	str	r1, [r7, #8]
 800b00e:	607a      	str	r2, [r7, #4]
 800b010:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b012:	2300      	movs	r3, #0
 800b014:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d10b      	bne.n	800b034 <xTimerGenericCommand+0x30>
	__asm volatile
 800b01c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b020:	f383 8811 	msr	BASEPRI, r3
 800b024:	f3bf 8f6f 	isb	sy
 800b028:	f3bf 8f4f 	dsb	sy
 800b02c:	623b      	str	r3, [r7, #32]
}
 800b02e:	bf00      	nop
 800b030:	bf00      	nop
 800b032:	e7fd      	b.n	800b030 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b034:	4b19      	ldr	r3, [pc, #100]	@ (800b09c <xTimerGenericCommand+0x98>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d02a      	beq.n	800b092 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	2b05      	cmp	r3, #5
 800b04c:	dc18      	bgt.n	800b080 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b04e:	f7ff fdad 	bl	800abac <xTaskGetSchedulerState>
 800b052:	4603      	mov	r3, r0
 800b054:	2b02      	cmp	r3, #2
 800b056:	d109      	bne.n	800b06c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b058:	4b10      	ldr	r3, [pc, #64]	@ (800b09c <xTimerGenericCommand+0x98>)
 800b05a:	6818      	ldr	r0, [r3, #0]
 800b05c:	f107 0110 	add.w	r1, r7, #16
 800b060:	2300      	movs	r3, #0
 800b062:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b064:	f7fe f96e 	bl	8009344 <xQueueGenericSend>
 800b068:	6278      	str	r0, [r7, #36]	@ 0x24
 800b06a:	e012      	b.n	800b092 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b06c:	4b0b      	ldr	r3, [pc, #44]	@ (800b09c <xTimerGenericCommand+0x98>)
 800b06e:	6818      	ldr	r0, [r3, #0]
 800b070:	f107 0110 	add.w	r1, r7, #16
 800b074:	2300      	movs	r3, #0
 800b076:	2200      	movs	r2, #0
 800b078:	f7fe f964 	bl	8009344 <xQueueGenericSend>
 800b07c:	6278      	str	r0, [r7, #36]	@ 0x24
 800b07e:	e008      	b.n	800b092 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b080:	4b06      	ldr	r3, [pc, #24]	@ (800b09c <xTimerGenericCommand+0x98>)
 800b082:	6818      	ldr	r0, [r3, #0]
 800b084:	f107 0110 	add.w	r1, r7, #16
 800b088:	2300      	movs	r3, #0
 800b08a:	683a      	ldr	r2, [r7, #0]
 800b08c:	f7fe fa5c 	bl	8009548 <xQueueGenericSendFromISR>
 800b090:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b094:	4618      	mov	r0, r3
 800b096:	3728      	adds	r7, #40	@ 0x28
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}
 800b09c:	200015f0 	.word	0x200015f0

0800b0a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b088      	sub	sp, #32
 800b0a4:	af02      	add	r7, sp, #8
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0aa:	4b23      	ldr	r3, [pc, #140]	@ (800b138 <prvProcessExpiredTimer+0x98>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	68db      	ldr	r3, [r3, #12]
 800b0b0:	68db      	ldr	r3, [r3, #12]
 800b0b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	3304      	adds	r3, #4
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f7fd fead 	bl	8008e18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b0c4:	f003 0304 	and.w	r3, r3, #4
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d023      	beq.n	800b114 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	699a      	ldr	r2, [r3, #24]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	18d1      	adds	r1, r2, r3
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	683a      	ldr	r2, [r7, #0]
 800b0d8:	6978      	ldr	r0, [r7, #20]
 800b0da:	f000 f8d5 	bl	800b288 <prvInsertTimerInActiveList>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d020      	beq.n	800b126 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	9300      	str	r3, [sp, #0]
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	2100      	movs	r1, #0
 800b0ee:	6978      	ldr	r0, [r7, #20]
 800b0f0:	f7ff ff88 	bl	800b004 <xTimerGenericCommand>
 800b0f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d114      	bne.n	800b126 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b0fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b100:	f383 8811 	msr	BASEPRI, r3
 800b104:	f3bf 8f6f 	isb	sy
 800b108:	f3bf 8f4f 	dsb	sy
 800b10c:	60fb      	str	r3, [r7, #12]
}
 800b10e:	bf00      	nop
 800b110:	bf00      	nop
 800b112:	e7fd      	b.n	800b110 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b11a:	f023 0301 	bic.w	r3, r3, #1
 800b11e:	b2da      	uxtb	r2, r3
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	6a1b      	ldr	r3, [r3, #32]
 800b12a:	6978      	ldr	r0, [r7, #20]
 800b12c:	4798      	blx	r3
}
 800b12e:	bf00      	nop
 800b130:	3718      	adds	r7, #24
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	200015e8 	.word	0x200015e8

0800b13c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b084      	sub	sp, #16
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b144:	f107 0308 	add.w	r3, r7, #8
 800b148:	4618      	mov	r0, r3
 800b14a:	f000 f859 	bl	800b200 <prvGetNextExpireTime>
 800b14e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	4619      	mov	r1, r3
 800b154:	68f8      	ldr	r0, [r7, #12]
 800b156:	f000 f805 	bl	800b164 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b15a:	f000 f8d7 	bl	800b30c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b15e:	bf00      	nop
 800b160:	e7f0      	b.n	800b144 <prvTimerTask+0x8>
	...

0800b164 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b16e:	f7ff f915 	bl	800a39c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b172:	f107 0308 	add.w	r3, r7, #8
 800b176:	4618      	mov	r0, r3
 800b178:	f000 f866 	bl	800b248 <prvSampleTimeNow>
 800b17c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d130      	bne.n	800b1e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d10a      	bne.n	800b1a0 <prvProcessTimerOrBlockTask+0x3c>
 800b18a:	687a      	ldr	r2, [r7, #4]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	429a      	cmp	r2, r3
 800b190:	d806      	bhi.n	800b1a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b192:	f7ff f911 	bl	800a3b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b196:	68f9      	ldr	r1, [r7, #12]
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f7ff ff81 	bl	800b0a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b19e:	e024      	b.n	800b1ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d008      	beq.n	800b1b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b1a6:	4b13      	ldr	r3, [pc, #76]	@ (800b1f4 <prvProcessTimerOrBlockTask+0x90>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d101      	bne.n	800b1b4 <prvProcessTimerOrBlockTask+0x50>
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	e000      	b.n	800b1b6 <prvProcessTimerOrBlockTask+0x52>
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b1b8:	4b0f      	ldr	r3, [pc, #60]	@ (800b1f8 <prvProcessTimerOrBlockTask+0x94>)
 800b1ba:	6818      	ldr	r0, [r3, #0]
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	1ad3      	subs	r3, r2, r3
 800b1c2:	683a      	ldr	r2, [r7, #0]
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	f7fe fe71 	bl	8009eac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b1ca:	f7ff f8f5 	bl	800a3b8 <xTaskResumeAll>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d10a      	bne.n	800b1ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b1d4:	4b09      	ldr	r3, [pc, #36]	@ (800b1fc <prvProcessTimerOrBlockTask+0x98>)
 800b1d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1da:	601a      	str	r2, [r3, #0]
 800b1dc:	f3bf 8f4f 	dsb	sy
 800b1e0:	f3bf 8f6f 	isb	sy
}
 800b1e4:	e001      	b.n	800b1ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b1e6:	f7ff f8e7 	bl	800a3b8 <xTaskResumeAll>
}
 800b1ea:	bf00      	nop
 800b1ec:	3710      	adds	r7, #16
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	200015ec 	.word	0x200015ec
 800b1f8:	200015f0 	.word	0x200015f0
 800b1fc:	e000ed04 	.word	0xe000ed04

0800b200 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b200:	b480      	push	{r7}
 800b202:	b085      	sub	sp, #20
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b208:	4b0e      	ldr	r3, [pc, #56]	@ (800b244 <prvGetNextExpireTime+0x44>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d101      	bne.n	800b216 <prvGetNextExpireTime+0x16>
 800b212:	2201      	movs	r2, #1
 800b214:	e000      	b.n	800b218 <prvGetNextExpireTime+0x18>
 800b216:	2200      	movs	r2, #0
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d105      	bne.n	800b230 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b224:	4b07      	ldr	r3, [pc, #28]	@ (800b244 <prvGetNextExpireTime+0x44>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	68db      	ldr	r3, [r3, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	60fb      	str	r3, [r7, #12]
 800b22e:	e001      	b.n	800b234 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b230:	2300      	movs	r3, #0
 800b232:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b234:	68fb      	ldr	r3, [r7, #12]
}
 800b236:	4618      	mov	r0, r3
 800b238:	3714      	adds	r7, #20
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr
 800b242:	bf00      	nop
 800b244:	200015e8 	.word	0x200015e8

0800b248 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b250:	f7ff f950 	bl	800a4f4 <xTaskGetTickCount>
 800b254:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b256:	4b0b      	ldr	r3, [pc, #44]	@ (800b284 <prvSampleTimeNow+0x3c>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	68fa      	ldr	r2, [r7, #12]
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d205      	bcs.n	800b26c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b260:	f000 f93a 	bl	800b4d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2201      	movs	r2, #1
 800b268:	601a      	str	r2, [r3, #0]
 800b26a:	e002      	b.n	800b272 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2200      	movs	r2, #0
 800b270:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b272:	4a04      	ldr	r2, [pc, #16]	@ (800b284 <prvSampleTimeNow+0x3c>)
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b278:	68fb      	ldr	r3, [r7, #12]
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3710      	adds	r7, #16
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	200015f8 	.word	0x200015f8

0800b288 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b086      	sub	sp, #24
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	607a      	str	r2, [r7, #4]
 800b294:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b296:	2300      	movs	r3, #0
 800b298:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	68ba      	ldr	r2, [r7, #8]
 800b29e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	68fa      	ldr	r2, [r7, #12]
 800b2a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b2a6:	68ba      	ldr	r2, [r7, #8]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d812      	bhi.n	800b2d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	1ad2      	subs	r2, r2, r3
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	699b      	ldr	r3, [r3, #24]
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d302      	bcc.n	800b2c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	617b      	str	r3, [r7, #20]
 800b2c0:	e01b      	b.n	800b2fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b2c2:	4b10      	ldr	r3, [pc, #64]	@ (800b304 <prvInsertTimerInActiveList+0x7c>)
 800b2c4:	681a      	ldr	r2, [r3, #0]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	3304      	adds	r3, #4
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	4610      	mov	r0, r2
 800b2ce:	f7fd fd6a 	bl	8008da6 <vListInsert>
 800b2d2:	e012      	b.n	800b2fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d206      	bcs.n	800b2ea <prvInsertTimerInActiveList+0x62>
 800b2dc:	68ba      	ldr	r2, [r7, #8]
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	d302      	bcc.n	800b2ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	617b      	str	r3, [r7, #20]
 800b2e8:	e007      	b.n	800b2fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b2ea:	4b07      	ldr	r3, [pc, #28]	@ (800b308 <prvInsertTimerInActiveList+0x80>)
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	3304      	adds	r3, #4
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	4610      	mov	r0, r2
 800b2f6:	f7fd fd56 	bl	8008da6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b2fa:	697b      	ldr	r3, [r7, #20]
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3718      	adds	r7, #24
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}
 800b304:	200015ec 	.word	0x200015ec
 800b308:	200015e8 	.word	0x200015e8

0800b30c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b08e      	sub	sp, #56	@ 0x38
 800b310:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b312:	e0ce      	b.n	800b4b2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2b00      	cmp	r3, #0
 800b318:	da19      	bge.n	800b34e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b31a:	1d3b      	adds	r3, r7, #4
 800b31c:	3304      	adds	r3, #4
 800b31e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b322:	2b00      	cmp	r3, #0
 800b324:	d10b      	bne.n	800b33e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b32a:	f383 8811 	msr	BASEPRI, r3
 800b32e:	f3bf 8f6f 	isb	sy
 800b332:	f3bf 8f4f 	dsb	sy
 800b336:	61fb      	str	r3, [r7, #28]
}
 800b338:	bf00      	nop
 800b33a:	bf00      	nop
 800b33c:	e7fd      	b.n	800b33a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b33e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b344:	6850      	ldr	r0, [r2, #4]
 800b346:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b348:	6892      	ldr	r2, [r2, #8]
 800b34a:	4611      	mov	r1, r2
 800b34c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2b00      	cmp	r3, #0
 800b352:	f2c0 80ae 	blt.w	800b4b2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b35a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b35c:	695b      	ldr	r3, [r3, #20]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d004      	beq.n	800b36c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b364:	3304      	adds	r3, #4
 800b366:	4618      	mov	r0, r3
 800b368:	f7fd fd56 	bl	8008e18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b36c:	463b      	mov	r3, r7
 800b36e:	4618      	mov	r0, r3
 800b370:	f7ff ff6a 	bl	800b248 <prvSampleTimeNow>
 800b374:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2b09      	cmp	r3, #9
 800b37a:	f200 8097 	bhi.w	800b4ac <prvProcessReceivedCommands+0x1a0>
 800b37e:	a201      	add	r2, pc, #4	@ (adr r2, 800b384 <prvProcessReceivedCommands+0x78>)
 800b380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b384:	0800b3ad 	.word	0x0800b3ad
 800b388:	0800b3ad 	.word	0x0800b3ad
 800b38c:	0800b3ad 	.word	0x0800b3ad
 800b390:	0800b423 	.word	0x0800b423
 800b394:	0800b437 	.word	0x0800b437
 800b398:	0800b483 	.word	0x0800b483
 800b39c:	0800b3ad 	.word	0x0800b3ad
 800b3a0:	0800b3ad 	.word	0x0800b3ad
 800b3a4:	0800b423 	.word	0x0800b423
 800b3a8:	0800b437 	.word	0x0800b437
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b3ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b3b2:	f043 0301 	orr.w	r3, r3, #1
 800b3b6:	b2da      	uxtb	r2, r3
 800b3b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b3be:	68ba      	ldr	r2, [r7, #8]
 800b3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3c2:	699b      	ldr	r3, [r3, #24]
 800b3c4:	18d1      	adds	r1, r2, r3
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3cc:	f7ff ff5c 	bl	800b288 <prvInsertTimerInActiveList>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d06c      	beq.n	800b4b0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b3d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3d8:	6a1b      	ldr	r3, [r3, #32]
 800b3da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b3de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b3e4:	f003 0304 	and.w	r3, r3, #4
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d061      	beq.n	800b4b0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b3ec:	68ba      	ldr	r2, [r7, #8]
 800b3ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3f0:	699b      	ldr	r3, [r3, #24]
 800b3f2:	441a      	add	r2, r3
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	9300      	str	r3, [sp, #0]
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	2100      	movs	r1, #0
 800b3fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3fe:	f7ff fe01 	bl	800b004 <xTimerGenericCommand>
 800b402:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b404:	6a3b      	ldr	r3, [r7, #32]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d152      	bne.n	800b4b0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b40a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b40e:	f383 8811 	msr	BASEPRI, r3
 800b412:	f3bf 8f6f 	isb	sy
 800b416:	f3bf 8f4f 	dsb	sy
 800b41a:	61bb      	str	r3, [r7, #24]
}
 800b41c:	bf00      	nop
 800b41e:	bf00      	nop
 800b420:	e7fd      	b.n	800b41e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b424:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b428:	f023 0301 	bic.w	r3, r3, #1
 800b42c:	b2da      	uxtb	r2, r3
 800b42e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b430:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b434:	e03d      	b.n	800b4b2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b438:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b43c:	f043 0301 	orr.w	r3, r3, #1
 800b440:	b2da      	uxtb	r2, r3
 800b442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b444:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b448:	68ba      	ldr	r2, [r7, #8]
 800b44a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b44c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b44e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b450:	699b      	ldr	r3, [r3, #24]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d10b      	bne.n	800b46e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b45a:	f383 8811 	msr	BASEPRI, r3
 800b45e:	f3bf 8f6f 	isb	sy
 800b462:	f3bf 8f4f 	dsb	sy
 800b466:	617b      	str	r3, [r7, #20]
}
 800b468:	bf00      	nop
 800b46a:	bf00      	nop
 800b46c:	e7fd      	b.n	800b46a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b46e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b470:	699a      	ldr	r2, [r3, #24]
 800b472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b474:	18d1      	adds	r1, r2, r3
 800b476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b478:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b47a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b47c:	f7ff ff04 	bl	800b288 <prvInsertTimerInActiveList>
					break;
 800b480:	e017      	b.n	800b4b2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b484:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b488:	f003 0302 	and.w	r3, r3, #2
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d103      	bne.n	800b498 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b490:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b492:	f000 fbe9 	bl	800bc68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b496:	e00c      	b.n	800b4b2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b49a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b49e:	f023 0301 	bic.w	r3, r3, #1
 800b4a2:	b2da      	uxtb	r2, r3
 800b4a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b4aa:	e002      	b.n	800b4b2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b4ac:	bf00      	nop
 800b4ae:	e000      	b.n	800b4b2 <prvProcessReceivedCommands+0x1a6>
					break;
 800b4b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b4b2:	4b08      	ldr	r3, [pc, #32]	@ (800b4d4 <prvProcessReceivedCommands+0x1c8>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	1d39      	adds	r1, r7, #4
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7fe f8e2 	bl	8009684 <xQueueReceive>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	f47f af26 	bne.w	800b314 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b4c8:	bf00      	nop
 800b4ca:	bf00      	nop
 800b4cc:	3730      	adds	r7, #48	@ 0x30
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	200015f0 	.word	0x200015f0

0800b4d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b088      	sub	sp, #32
 800b4dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b4de:	e049      	b.n	800b574 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b4e0:	4b2e      	ldr	r3, [pc, #184]	@ (800b59c <prvSwitchTimerLists+0xc4>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	68db      	ldr	r3, [r3, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4ea:	4b2c      	ldr	r3, [pc, #176]	@ (800b59c <prvSwitchTimerLists+0xc4>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	68db      	ldr	r3, [r3, #12]
 800b4f0:	68db      	ldr	r3, [r3, #12]
 800b4f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	3304      	adds	r3, #4
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7fd fc8d 	bl	8008e18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	6a1b      	ldr	r3, [r3, #32]
 800b502:	68f8      	ldr	r0, [r7, #12]
 800b504:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b50c:	f003 0304 	and.w	r3, r3, #4
 800b510:	2b00      	cmp	r3, #0
 800b512:	d02f      	beq.n	800b574 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	699b      	ldr	r3, [r3, #24]
 800b518:	693a      	ldr	r2, [r7, #16]
 800b51a:	4413      	add	r3, r2
 800b51c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b51e:	68ba      	ldr	r2, [r7, #8]
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	429a      	cmp	r2, r3
 800b524:	d90e      	bls.n	800b544 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	68ba      	ldr	r2, [r7, #8]
 800b52a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	68fa      	ldr	r2, [r7, #12]
 800b530:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b532:	4b1a      	ldr	r3, [pc, #104]	@ (800b59c <prvSwitchTimerLists+0xc4>)
 800b534:	681a      	ldr	r2, [r3, #0]
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	3304      	adds	r3, #4
 800b53a:	4619      	mov	r1, r3
 800b53c:	4610      	mov	r0, r2
 800b53e:	f7fd fc32 	bl	8008da6 <vListInsert>
 800b542:	e017      	b.n	800b574 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b544:	2300      	movs	r3, #0
 800b546:	9300      	str	r3, [sp, #0]
 800b548:	2300      	movs	r3, #0
 800b54a:	693a      	ldr	r2, [r7, #16]
 800b54c:	2100      	movs	r1, #0
 800b54e:	68f8      	ldr	r0, [r7, #12]
 800b550:	f7ff fd58 	bl	800b004 <xTimerGenericCommand>
 800b554:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d10b      	bne.n	800b574 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b55c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b560:	f383 8811 	msr	BASEPRI, r3
 800b564:	f3bf 8f6f 	isb	sy
 800b568:	f3bf 8f4f 	dsb	sy
 800b56c:	603b      	str	r3, [r7, #0]
}
 800b56e:	bf00      	nop
 800b570:	bf00      	nop
 800b572:	e7fd      	b.n	800b570 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b574:	4b09      	ldr	r3, [pc, #36]	@ (800b59c <prvSwitchTimerLists+0xc4>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d1b0      	bne.n	800b4e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b57e:	4b07      	ldr	r3, [pc, #28]	@ (800b59c <prvSwitchTimerLists+0xc4>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b584:	4b06      	ldr	r3, [pc, #24]	@ (800b5a0 <prvSwitchTimerLists+0xc8>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	4a04      	ldr	r2, [pc, #16]	@ (800b59c <prvSwitchTimerLists+0xc4>)
 800b58a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b58c:	4a04      	ldr	r2, [pc, #16]	@ (800b5a0 <prvSwitchTimerLists+0xc8>)
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	6013      	str	r3, [r2, #0]
}
 800b592:	bf00      	nop
 800b594:	3718      	adds	r7, #24
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
 800b59a:	bf00      	nop
 800b59c:	200015e8 	.word	0x200015e8
 800b5a0:	200015ec 	.word	0x200015ec

0800b5a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b5aa:	f000 f96d 	bl	800b888 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b5ae:	4b15      	ldr	r3, [pc, #84]	@ (800b604 <prvCheckForValidListAndQueue+0x60>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d120      	bne.n	800b5f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b5b6:	4814      	ldr	r0, [pc, #80]	@ (800b608 <prvCheckForValidListAndQueue+0x64>)
 800b5b8:	f7fd fba4 	bl	8008d04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b5bc:	4813      	ldr	r0, [pc, #76]	@ (800b60c <prvCheckForValidListAndQueue+0x68>)
 800b5be:	f7fd fba1 	bl	8008d04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b5c2:	4b13      	ldr	r3, [pc, #76]	@ (800b610 <prvCheckForValidListAndQueue+0x6c>)
 800b5c4:	4a10      	ldr	r2, [pc, #64]	@ (800b608 <prvCheckForValidListAndQueue+0x64>)
 800b5c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b5c8:	4b12      	ldr	r3, [pc, #72]	@ (800b614 <prvCheckForValidListAndQueue+0x70>)
 800b5ca:	4a10      	ldr	r2, [pc, #64]	@ (800b60c <prvCheckForValidListAndQueue+0x68>)
 800b5cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	9300      	str	r3, [sp, #0]
 800b5d2:	4b11      	ldr	r3, [pc, #68]	@ (800b618 <prvCheckForValidListAndQueue+0x74>)
 800b5d4:	4a11      	ldr	r2, [pc, #68]	@ (800b61c <prvCheckForValidListAndQueue+0x78>)
 800b5d6:	2110      	movs	r1, #16
 800b5d8:	200a      	movs	r0, #10
 800b5da:	f7fd fcb1 	bl	8008f40 <xQueueGenericCreateStatic>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	4a08      	ldr	r2, [pc, #32]	@ (800b604 <prvCheckForValidListAndQueue+0x60>)
 800b5e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b5e4:	4b07      	ldr	r3, [pc, #28]	@ (800b604 <prvCheckForValidListAndQueue+0x60>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d005      	beq.n	800b5f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b5ec:	4b05      	ldr	r3, [pc, #20]	@ (800b604 <prvCheckForValidListAndQueue+0x60>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	490b      	ldr	r1, [pc, #44]	@ (800b620 <prvCheckForValidListAndQueue+0x7c>)
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f7fe fc06 	bl	8009e04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b5f8:	f000 f978 	bl	800b8ec <vPortExitCritical>
}
 800b5fc:	bf00      	nop
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
 800b602:	bf00      	nop
 800b604:	200015f0 	.word	0x200015f0
 800b608:	200015c0 	.word	0x200015c0
 800b60c:	200015d4 	.word	0x200015d4
 800b610:	200015e8 	.word	0x200015e8
 800b614:	200015ec 	.word	0x200015ec
 800b618:	2000169c 	.word	0x2000169c
 800b61c:	200015fc 	.word	0x200015fc
 800b620:	080104a8 	.word	0x080104a8

0800b624 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b624:	b480      	push	{r7}
 800b626:	b085      	sub	sp, #20
 800b628:	af00      	add	r7, sp, #0
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	3b04      	subs	r3, #4
 800b634:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b63c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	3b04      	subs	r3, #4
 800b642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	f023 0201 	bic.w	r2, r3, #1
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	3b04      	subs	r3, #4
 800b652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b654:	4a0c      	ldr	r2, [pc, #48]	@ (800b688 <pxPortInitialiseStack+0x64>)
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	3b14      	subs	r3, #20
 800b65e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	3b04      	subs	r3, #4
 800b66a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f06f 0202 	mvn.w	r2, #2
 800b672:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	3b20      	subs	r3, #32
 800b678:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b67a:	68fb      	ldr	r3, [r7, #12]
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3714      	adds	r7, #20
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr
 800b688:	0800b68d 	.word	0x0800b68d

0800b68c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b68c:	b480      	push	{r7}
 800b68e:	b085      	sub	sp, #20
 800b690:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b692:	2300      	movs	r3, #0
 800b694:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b696:	4b13      	ldr	r3, [pc, #76]	@ (800b6e4 <prvTaskExitError+0x58>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b69e:	d00b      	beq.n	800b6b8 <prvTaskExitError+0x2c>
	__asm volatile
 800b6a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6a4:	f383 8811 	msr	BASEPRI, r3
 800b6a8:	f3bf 8f6f 	isb	sy
 800b6ac:	f3bf 8f4f 	dsb	sy
 800b6b0:	60fb      	str	r3, [r7, #12]
}
 800b6b2:	bf00      	nop
 800b6b4:	bf00      	nop
 800b6b6:	e7fd      	b.n	800b6b4 <prvTaskExitError+0x28>
	__asm volatile
 800b6b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6bc:	f383 8811 	msr	BASEPRI, r3
 800b6c0:	f3bf 8f6f 	isb	sy
 800b6c4:	f3bf 8f4f 	dsb	sy
 800b6c8:	60bb      	str	r3, [r7, #8]
}
 800b6ca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b6cc:	bf00      	nop
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d0fc      	beq.n	800b6ce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b6d4:	bf00      	nop
 800b6d6:	bf00      	nop
 800b6d8:	3714      	adds	r7, #20
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr
 800b6e2:	bf00      	nop
 800b6e4:	2000000c 	.word	0x2000000c
	...

0800b6f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b6f0:	4b07      	ldr	r3, [pc, #28]	@ (800b710 <pxCurrentTCBConst2>)
 800b6f2:	6819      	ldr	r1, [r3, #0]
 800b6f4:	6808      	ldr	r0, [r1, #0]
 800b6f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6fa:	f380 8809 	msr	PSP, r0
 800b6fe:	f3bf 8f6f 	isb	sy
 800b702:	f04f 0000 	mov.w	r0, #0
 800b706:	f380 8811 	msr	BASEPRI, r0
 800b70a:	4770      	bx	lr
 800b70c:	f3af 8000 	nop.w

0800b710 <pxCurrentTCBConst2>:
 800b710:	200010c0 	.word	0x200010c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b714:	bf00      	nop
 800b716:	bf00      	nop

0800b718 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b718:	4808      	ldr	r0, [pc, #32]	@ (800b73c <prvPortStartFirstTask+0x24>)
 800b71a:	6800      	ldr	r0, [r0, #0]
 800b71c:	6800      	ldr	r0, [r0, #0]
 800b71e:	f380 8808 	msr	MSP, r0
 800b722:	f04f 0000 	mov.w	r0, #0
 800b726:	f380 8814 	msr	CONTROL, r0
 800b72a:	b662      	cpsie	i
 800b72c:	b661      	cpsie	f
 800b72e:	f3bf 8f4f 	dsb	sy
 800b732:	f3bf 8f6f 	isb	sy
 800b736:	df00      	svc	0
 800b738:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b73a:	bf00      	nop
 800b73c:	e000ed08 	.word	0xe000ed08

0800b740 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b086      	sub	sp, #24
 800b744:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b746:	4b47      	ldr	r3, [pc, #284]	@ (800b864 <xPortStartScheduler+0x124>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4a47      	ldr	r2, [pc, #284]	@ (800b868 <xPortStartScheduler+0x128>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d10b      	bne.n	800b768 <xPortStartScheduler+0x28>
	__asm volatile
 800b750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b754:	f383 8811 	msr	BASEPRI, r3
 800b758:	f3bf 8f6f 	isb	sy
 800b75c:	f3bf 8f4f 	dsb	sy
 800b760:	613b      	str	r3, [r7, #16]
}
 800b762:	bf00      	nop
 800b764:	bf00      	nop
 800b766:	e7fd      	b.n	800b764 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b768:	4b3e      	ldr	r3, [pc, #248]	@ (800b864 <xPortStartScheduler+0x124>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4a3f      	ldr	r2, [pc, #252]	@ (800b86c <xPortStartScheduler+0x12c>)
 800b76e:	4293      	cmp	r3, r2
 800b770:	d10b      	bne.n	800b78a <xPortStartScheduler+0x4a>
	__asm volatile
 800b772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b776:	f383 8811 	msr	BASEPRI, r3
 800b77a:	f3bf 8f6f 	isb	sy
 800b77e:	f3bf 8f4f 	dsb	sy
 800b782:	60fb      	str	r3, [r7, #12]
}
 800b784:	bf00      	nop
 800b786:	bf00      	nop
 800b788:	e7fd      	b.n	800b786 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b78a:	4b39      	ldr	r3, [pc, #228]	@ (800b870 <xPortStartScheduler+0x130>)
 800b78c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	b2db      	uxtb	r3, r3
 800b794:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	22ff      	movs	r2, #255	@ 0xff
 800b79a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	781b      	ldrb	r3, [r3, #0]
 800b7a0:	b2db      	uxtb	r3, r3
 800b7a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b7a4:	78fb      	ldrb	r3, [r7, #3]
 800b7a6:	b2db      	uxtb	r3, r3
 800b7a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b7ac:	b2da      	uxtb	r2, r3
 800b7ae:	4b31      	ldr	r3, [pc, #196]	@ (800b874 <xPortStartScheduler+0x134>)
 800b7b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b7b2:	4b31      	ldr	r3, [pc, #196]	@ (800b878 <xPortStartScheduler+0x138>)
 800b7b4:	2207      	movs	r2, #7
 800b7b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b7b8:	e009      	b.n	800b7ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b7ba:	4b2f      	ldr	r3, [pc, #188]	@ (800b878 <xPortStartScheduler+0x138>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	3b01      	subs	r3, #1
 800b7c0:	4a2d      	ldr	r2, [pc, #180]	@ (800b878 <xPortStartScheduler+0x138>)
 800b7c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b7c4:	78fb      	ldrb	r3, [r7, #3]
 800b7c6:	b2db      	uxtb	r3, r3
 800b7c8:	005b      	lsls	r3, r3, #1
 800b7ca:	b2db      	uxtb	r3, r3
 800b7cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b7ce:	78fb      	ldrb	r3, [r7, #3]
 800b7d0:	b2db      	uxtb	r3, r3
 800b7d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7d6:	2b80      	cmp	r3, #128	@ 0x80
 800b7d8:	d0ef      	beq.n	800b7ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b7da:	4b27      	ldr	r3, [pc, #156]	@ (800b878 <xPortStartScheduler+0x138>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f1c3 0307 	rsb	r3, r3, #7
 800b7e2:	2b04      	cmp	r3, #4
 800b7e4:	d00b      	beq.n	800b7fe <xPortStartScheduler+0xbe>
	__asm volatile
 800b7e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7ea:	f383 8811 	msr	BASEPRI, r3
 800b7ee:	f3bf 8f6f 	isb	sy
 800b7f2:	f3bf 8f4f 	dsb	sy
 800b7f6:	60bb      	str	r3, [r7, #8]
}
 800b7f8:	bf00      	nop
 800b7fa:	bf00      	nop
 800b7fc:	e7fd      	b.n	800b7fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b7fe:	4b1e      	ldr	r3, [pc, #120]	@ (800b878 <xPortStartScheduler+0x138>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	021b      	lsls	r3, r3, #8
 800b804:	4a1c      	ldr	r2, [pc, #112]	@ (800b878 <xPortStartScheduler+0x138>)
 800b806:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b808:	4b1b      	ldr	r3, [pc, #108]	@ (800b878 <xPortStartScheduler+0x138>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b810:	4a19      	ldr	r2, [pc, #100]	@ (800b878 <xPortStartScheduler+0x138>)
 800b812:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	b2da      	uxtb	r2, r3
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b81c:	4b17      	ldr	r3, [pc, #92]	@ (800b87c <xPortStartScheduler+0x13c>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4a16      	ldr	r2, [pc, #88]	@ (800b87c <xPortStartScheduler+0x13c>)
 800b822:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b826:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b828:	4b14      	ldr	r3, [pc, #80]	@ (800b87c <xPortStartScheduler+0x13c>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	4a13      	ldr	r2, [pc, #76]	@ (800b87c <xPortStartScheduler+0x13c>)
 800b82e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b832:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b834:	f000 f8da 	bl	800b9ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b838:	4b11      	ldr	r3, [pc, #68]	@ (800b880 <xPortStartScheduler+0x140>)
 800b83a:	2200      	movs	r2, #0
 800b83c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b83e:	f000 f8f9 	bl	800ba34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b842:	4b10      	ldr	r3, [pc, #64]	@ (800b884 <xPortStartScheduler+0x144>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4a0f      	ldr	r2, [pc, #60]	@ (800b884 <xPortStartScheduler+0x144>)
 800b848:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b84c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b84e:	f7ff ff63 	bl	800b718 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b852:	f7fe ff2b 	bl	800a6ac <vTaskSwitchContext>
	prvTaskExitError();
 800b856:	f7ff ff19 	bl	800b68c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b85a:	2300      	movs	r3, #0
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3718      	adds	r7, #24
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}
 800b864:	e000ed00 	.word	0xe000ed00
 800b868:	410fc271 	.word	0x410fc271
 800b86c:	410fc270 	.word	0x410fc270
 800b870:	e000e400 	.word	0xe000e400
 800b874:	200016ec 	.word	0x200016ec
 800b878:	200016f0 	.word	0x200016f0
 800b87c:	e000ed20 	.word	0xe000ed20
 800b880:	2000000c 	.word	0x2000000c
 800b884:	e000ef34 	.word	0xe000ef34

0800b888 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b888:	b480      	push	{r7}
 800b88a:	b083      	sub	sp, #12
 800b88c:	af00      	add	r7, sp, #0
	__asm volatile
 800b88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b892:	f383 8811 	msr	BASEPRI, r3
 800b896:	f3bf 8f6f 	isb	sy
 800b89a:	f3bf 8f4f 	dsb	sy
 800b89e:	607b      	str	r3, [r7, #4]
}
 800b8a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b8a2:	4b10      	ldr	r3, [pc, #64]	@ (800b8e4 <vPortEnterCritical+0x5c>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	4a0e      	ldr	r2, [pc, #56]	@ (800b8e4 <vPortEnterCritical+0x5c>)
 800b8aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b8ac:	4b0d      	ldr	r3, [pc, #52]	@ (800b8e4 <vPortEnterCritical+0x5c>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	d110      	bne.n	800b8d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b8b4:	4b0c      	ldr	r3, [pc, #48]	@ (800b8e8 <vPortEnterCritical+0x60>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d00b      	beq.n	800b8d6 <vPortEnterCritical+0x4e>
	__asm volatile
 800b8be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8c2:	f383 8811 	msr	BASEPRI, r3
 800b8c6:	f3bf 8f6f 	isb	sy
 800b8ca:	f3bf 8f4f 	dsb	sy
 800b8ce:	603b      	str	r3, [r7, #0]
}
 800b8d0:	bf00      	nop
 800b8d2:	bf00      	nop
 800b8d4:	e7fd      	b.n	800b8d2 <vPortEnterCritical+0x4a>
	}
}
 800b8d6:	bf00      	nop
 800b8d8:	370c      	adds	r7, #12
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e0:	4770      	bx	lr
 800b8e2:	bf00      	nop
 800b8e4:	2000000c 	.word	0x2000000c
 800b8e8:	e000ed04 	.word	0xe000ed04

0800b8ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b083      	sub	sp, #12
 800b8f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b8f2:	4b12      	ldr	r3, [pc, #72]	@ (800b93c <vPortExitCritical+0x50>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d10b      	bne.n	800b912 <vPortExitCritical+0x26>
	__asm volatile
 800b8fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8fe:	f383 8811 	msr	BASEPRI, r3
 800b902:	f3bf 8f6f 	isb	sy
 800b906:	f3bf 8f4f 	dsb	sy
 800b90a:	607b      	str	r3, [r7, #4]
}
 800b90c:	bf00      	nop
 800b90e:	bf00      	nop
 800b910:	e7fd      	b.n	800b90e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b912:	4b0a      	ldr	r3, [pc, #40]	@ (800b93c <vPortExitCritical+0x50>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	3b01      	subs	r3, #1
 800b918:	4a08      	ldr	r2, [pc, #32]	@ (800b93c <vPortExitCritical+0x50>)
 800b91a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b91c:	4b07      	ldr	r3, [pc, #28]	@ (800b93c <vPortExitCritical+0x50>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d105      	bne.n	800b930 <vPortExitCritical+0x44>
 800b924:	2300      	movs	r3, #0
 800b926:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	f383 8811 	msr	BASEPRI, r3
}
 800b92e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b930:	bf00      	nop
 800b932:	370c      	adds	r7, #12
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr
 800b93c:	2000000c 	.word	0x2000000c

0800b940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b940:	f3ef 8009 	mrs	r0, PSP
 800b944:	f3bf 8f6f 	isb	sy
 800b948:	4b15      	ldr	r3, [pc, #84]	@ (800b9a0 <pxCurrentTCBConst>)
 800b94a:	681a      	ldr	r2, [r3, #0]
 800b94c:	f01e 0f10 	tst.w	lr, #16
 800b950:	bf08      	it	eq
 800b952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b95a:	6010      	str	r0, [r2, #0]
 800b95c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b960:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b964:	f380 8811 	msr	BASEPRI, r0
 800b968:	f3bf 8f4f 	dsb	sy
 800b96c:	f3bf 8f6f 	isb	sy
 800b970:	f7fe fe9c 	bl	800a6ac <vTaskSwitchContext>
 800b974:	f04f 0000 	mov.w	r0, #0
 800b978:	f380 8811 	msr	BASEPRI, r0
 800b97c:	bc09      	pop	{r0, r3}
 800b97e:	6819      	ldr	r1, [r3, #0]
 800b980:	6808      	ldr	r0, [r1, #0]
 800b982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b986:	f01e 0f10 	tst.w	lr, #16
 800b98a:	bf08      	it	eq
 800b98c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b990:	f380 8809 	msr	PSP, r0
 800b994:	f3bf 8f6f 	isb	sy
 800b998:	4770      	bx	lr
 800b99a:	bf00      	nop
 800b99c:	f3af 8000 	nop.w

0800b9a0 <pxCurrentTCBConst>:
 800b9a0:	200010c0 	.word	0x200010c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b9a4:	bf00      	nop
 800b9a6:	bf00      	nop

0800b9a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b082      	sub	sp, #8
 800b9ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b9ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9b2:	f383 8811 	msr	BASEPRI, r3
 800b9b6:	f3bf 8f6f 	isb	sy
 800b9ba:	f3bf 8f4f 	dsb	sy
 800b9be:	607b      	str	r3, [r7, #4]
}
 800b9c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b9c2:	f7fe fdb9 	bl	800a538 <xTaskIncrementTick>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d003      	beq.n	800b9d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b9cc:	4b06      	ldr	r3, [pc, #24]	@ (800b9e8 <xPortSysTickHandler+0x40>)
 800b9ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b9d2:	601a      	str	r2, [r3, #0]
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	f383 8811 	msr	BASEPRI, r3
}
 800b9de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b9e0:	bf00      	nop
 800b9e2:	3708      	adds	r7, #8
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}
 800b9e8:	e000ed04 	.word	0xe000ed04

0800b9ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b9f0:	4b0b      	ldr	r3, [pc, #44]	@ (800ba20 <vPortSetupTimerInterrupt+0x34>)
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b9f6:	4b0b      	ldr	r3, [pc, #44]	@ (800ba24 <vPortSetupTimerInterrupt+0x38>)
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b9fc:	4b0a      	ldr	r3, [pc, #40]	@ (800ba28 <vPortSetupTimerInterrupt+0x3c>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	4a0a      	ldr	r2, [pc, #40]	@ (800ba2c <vPortSetupTimerInterrupt+0x40>)
 800ba02:	fba2 2303 	umull	r2, r3, r2, r3
 800ba06:	099b      	lsrs	r3, r3, #6
 800ba08:	4a09      	ldr	r2, [pc, #36]	@ (800ba30 <vPortSetupTimerInterrupt+0x44>)
 800ba0a:	3b01      	subs	r3, #1
 800ba0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ba0e:	4b04      	ldr	r3, [pc, #16]	@ (800ba20 <vPortSetupTimerInterrupt+0x34>)
 800ba10:	2207      	movs	r2, #7
 800ba12:	601a      	str	r2, [r3, #0]
}
 800ba14:	bf00      	nop
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr
 800ba1e:	bf00      	nop
 800ba20:	e000e010 	.word	0xe000e010
 800ba24:	e000e018 	.word	0xe000e018
 800ba28:	20000000 	.word	0x20000000
 800ba2c:	10624dd3 	.word	0x10624dd3
 800ba30:	e000e014 	.word	0xe000e014

0800ba34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ba34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ba44 <vPortEnableVFP+0x10>
 800ba38:	6801      	ldr	r1, [r0, #0]
 800ba3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ba3e:	6001      	str	r1, [r0, #0]
 800ba40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ba42:	bf00      	nop
 800ba44:	e000ed88 	.word	0xe000ed88

0800ba48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ba48:	b480      	push	{r7}
 800ba4a:	b085      	sub	sp, #20
 800ba4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ba4e:	f3ef 8305 	mrs	r3, IPSR
 800ba52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2b0f      	cmp	r3, #15
 800ba58:	d915      	bls.n	800ba86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ba5a:	4a18      	ldr	r2, [pc, #96]	@ (800babc <vPortValidateInterruptPriority+0x74>)
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	4413      	add	r3, r2
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ba64:	4b16      	ldr	r3, [pc, #88]	@ (800bac0 <vPortValidateInterruptPriority+0x78>)
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	7afa      	ldrb	r2, [r7, #11]
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d20b      	bcs.n	800ba86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ba6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba72:	f383 8811 	msr	BASEPRI, r3
 800ba76:	f3bf 8f6f 	isb	sy
 800ba7a:	f3bf 8f4f 	dsb	sy
 800ba7e:	607b      	str	r3, [r7, #4]
}
 800ba80:	bf00      	nop
 800ba82:	bf00      	nop
 800ba84:	e7fd      	b.n	800ba82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ba86:	4b0f      	ldr	r3, [pc, #60]	@ (800bac4 <vPortValidateInterruptPriority+0x7c>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ba8e:	4b0e      	ldr	r3, [pc, #56]	@ (800bac8 <vPortValidateInterruptPriority+0x80>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d90b      	bls.n	800baae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ba96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba9a:	f383 8811 	msr	BASEPRI, r3
 800ba9e:	f3bf 8f6f 	isb	sy
 800baa2:	f3bf 8f4f 	dsb	sy
 800baa6:	603b      	str	r3, [r7, #0]
}
 800baa8:	bf00      	nop
 800baaa:	bf00      	nop
 800baac:	e7fd      	b.n	800baaa <vPortValidateInterruptPriority+0x62>
	}
 800baae:	bf00      	nop
 800bab0:	3714      	adds	r7, #20
 800bab2:	46bd      	mov	sp, r7
 800bab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab8:	4770      	bx	lr
 800baba:	bf00      	nop
 800babc:	e000e3f0 	.word	0xe000e3f0
 800bac0:	200016ec 	.word	0x200016ec
 800bac4:	e000ed0c 	.word	0xe000ed0c
 800bac8:	200016f0 	.word	0x200016f0

0800bacc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b08a      	sub	sp, #40	@ 0x28
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bad4:	2300      	movs	r3, #0
 800bad6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bad8:	f7fe fc60 	bl	800a39c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800badc:	4b5c      	ldr	r3, [pc, #368]	@ (800bc50 <pvPortMalloc+0x184>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d101      	bne.n	800bae8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bae4:	f000 f924 	bl	800bd30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bae8:	4b5a      	ldr	r3, [pc, #360]	@ (800bc54 <pvPortMalloc+0x188>)
 800baea:	681a      	ldr	r2, [r3, #0]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	4013      	ands	r3, r2
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	f040 8095 	bne.w	800bc20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d01e      	beq.n	800bb3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800bafc:	2208      	movs	r2, #8
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	4413      	add	r3, r2
 800bb02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f003 0307 	and.w	r3, r3, #7
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d015      	beq.n	800bb3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f023 0307 	bic.w	r3, r3, #7
 800bb14:	3308      	adds	r3, #8
 800bb16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f003 0307 	and.w	r3, r3, #7
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d00b      	beq.n	800bb3a <pvPortMalloc+0x6e>
	__asm volatile
 800bb22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb26:	f383 8811 	msr	BASEPRI, r3
 800bb2a:	f3bf 8f6f 	isb	sy
 800bb2e:	f3bf 8f4f 	dsb	sy
 800bb32:	617b      	str	r3, [r7, #20]
}
 800bb34:	bf00      	nop
 800bb36:	bf00      	nop
 800bb38:	e7fd      	b.n	800bb36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d06f      	beq.n	800bc20 <pvPortMalloc+0x154>
 800bb40:	4b45      	ldr	r3, [pc, #276]	@ (800bc58 <pvPortMalloc+0x18c>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	687a      	ldr	r2, [r7, #4]
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d86a      	bhi.n	800bc20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bb4a:	4b44      	ldr	r3, [pc, #272]	@ (800bc5c <pvPortMalloc+0x190>)
 800bb4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bb4e:	4b43      	ldr	r3, [pc, #268]	@ (800bc5c <pvPortMalloc+0x190>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb54:	e004      	b.n	800bb60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bb56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bb5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	429a      	cmp	r2, r3
 800bb68:	d903      	bls.n	800bb72 <pvPortMalloc+0xa6>
 800bb6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d1f1      	bne.n	800bb56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bb72:	4b37      	ldr	r3, [pc, #220]	@ (800bc50 <pvPortMalloc+0x184>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d051      	beq.n	800bc20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bb7c:	6a3b      	ldr	r3, [r7, #32]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	2208      	movs	r2, #8
 800bb82:	4413      	add	r3, r2
 800bb84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bb86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	6a3b      	ldr	r3, [r7, #32]
 800bb8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bb8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb90:	685a      	ldr	r2, [r3, #4]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	1ad2      	subs	r2, r2, r3
 800bb96:	2308      	movs	r3, #8
 800bb98:	005b      	lsls	r3, r3, #1
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d920      	bls.n	800bbe0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bb9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	4413      	add	r3, r2
 800bba4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bba6:	69bb      	ldr	r3, [r7, #24]
 800bba8:	f003 0307 	and.w	r3, r3, #7
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d00b      	beq.n	800bbc8 <pvPortMalloc+0xfc>
	__asm volatile
 800bbb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbb4:	f383 8811 	msr	BASEPRI, r3
 800bbb8:	f3bf 8f6f 	isb	sy
 800bbbc:	f3bf 8f4f 	dsb	sy
 800bbc0:	613b      	str	r3, [r7, #16]
}
 800bbc2:	bf00      	nop
 800bbc4:	bf00      	nop
 800bbc6:	e7fd      	b.n	800bbc4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bbc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbca:	685a      	ldr	r2, [r3, #4]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	1ad2      	subs	r2, r2, r3
 800bbd0:	69bb      	ldr	r3, [r7, #24]
 800bbd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bbd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd6:	687a      	ldr	r2, [r7, #4]
 800bbd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bbda:	69b8      	ldr	r0, [r7, #24]
 800bbdc:	f000 f90a 	bl	800bdf4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bbe0:	4b1d      	ldr	r3, [pc, #116]	@ (800bc58 <pvPortMalloc+0x18c>)
 800bbe2:	681a      	ldr	r2, [r3, #0]
 800bbe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	1ad3      	subs	r3, r2, r3
 800bbea:	4a1b      	ldr	r2, [pc, #108]	@ (800bc58 <pvPortMalloc+0x18c>)
 800bbec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bbee:	4b1a      	ldr	r3, [pc, #104]	@ (800bc58 <pvPortMalloc+0x18c>)
 800bbf0:	681a      	ldr	r2, [r3, #0]
 800bbf2:	4b1b      	ldr	r3, [pc, #108]	@ (800bc60 <pvPortMalloc+0x194>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d203      	bcs.n	800bc02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bbfa:	4b17      	ldr	r3, [pc, #92]	@ (800bc58 <pvPortMalloc+0x18c>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	4a18      	ldr	r2, [pc, #96]	@ (800bc60 <pvPortMalloc+0x194>)
 800bc00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bc02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc04:	685a      	ldr	r2, [r3, #4]
 800bc06:	4b13      	ldr	r3, [pc, #76]	@ (800bc54 <pvPortMalloc+0x188>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	431a      	orrs	r2, r3
 800bc0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bc10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc12:	2200      	movs	r2, #0
 800bc14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bc16:	4b13      	ldr	r3, [pc, #76]	@ (800bc64 <pvPortMalloc+0x198>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	4a11      	ldr	r2, [pc, #68]	@ (800bc64 <pvPortMalloc+0x198>)
 800bc1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bc20:	f7fe fbca 	bl	800a3b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc24:	69fb      	ldr	r3, [r7, #28]
 800bc26:	f003 0307 	and.w	r3, r3, #7
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d00b      	beq.n	800bc46 <pvPortMalloc+0x17a>
	__asm volatile
 800bc2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc32:	f383 8811 	msr	BASEPRI, r3
 800bc36:	f3bf 8f6f 	isb	sy
 800bc3a:	f3bf 8f4f 	dsb	sy
 800bc3e:	60fb      	str	r3, [r7, #12]
}
 800bc40:	bf00      	nop
 800bc42:	bf00      	nop
 800bc44:	e7fd      	b.n	800bc42 <pvPortMalloc+0x176>
	return pvReturn;
 800bc46:	69fb      	ldr	r3, [r7, #28]
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3728      	adds	r7, #40	@ 0x28
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}
 800bc50:	2000b6fc 	.word	0x2000b6fc
 800bc54:	2000b710 	.word	0x2000b710
 800bc58:	2000b700 	.word	0x2000b700
 800bc5c:	2000b6f4 	.word	0x2000b6f4
 800bc60:	2000b704 	.word	0x2000b704
 800bc64:	2000b708 	.word	0x2000b708

0800bc68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b086      	sub	sp, #24
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d04f      	beq.n	800bd1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bc7a:	2308      	movs	r3, #8
 800bc7c:	425b      	negs	r3, r3
 800bc7e:	697a      	ldr	r2, [r7, #20]
 800bc80:	4413      	add	r3, r2
 800bc82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	685a      	ldr	r2, [r3, #4]
 800bc8c:	4b25      	ldr	r3, [pc, #148]	@ (800bd24 <vPortFree+0xbc>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	4013      	ands	r3, r2
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d10b      	bne.n	800bcae <vPortFree+0x46>
	__asm volatile
 800bc96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc9a:	f383 8811 	msr	BASEPRI, r3
 800bc9e:	f3bf 8f6f 	isb	sy
 800bca2:	f3bf 8f4f 	dsb	sy
 800bca6:	60fb      	str	r3, [r7, #12]
}
 800bca8:	bf00      	nop
 800bcaa:	bf00      	nop
 800bcac:	e7fd      	b.n	800bcaa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d00b      	beq.n	800bcce <vPortFree+0x66>
	__asm volatile
 800bcb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcba:	f383 8811 	msr	BASEPRI, r3
 800bcbe:	f3bf 8f6f 	isb	sy
 800bcc2:	f3bf 8f4f 	dsb	sy
 800bcc6:	60bb      	str	r3, [r7, #8]
}
 800bcc8:	bf00      	nop
 800bcca:	bf00      	nop
 800bccc:	e7fd      	b.n	800bcca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	685a      	ldr	r2, [r3, #4]
 800bcd2:	4b14      	ldr	r3, [pc, #80]	@ (800bd24 <vPortFree+0xbc>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	4013      	ands	r3, r2
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d01e      	beq.n	800bd1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d11a      	bne.n	800bd1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	685a      	ldr	r2, [r3, #4]
 800bce8:	4b0e      	ldr	r3, [pc, #56]	@ (800bd24 <vPortFree+0xbc>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	43db      	mvns	r3, r3
 800bcee:	401a      	ands	r2, r3
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bcf4:	f7fe fb52 	bl	800a39c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	685a      	ldr	r2, [r3, #4]
 800bcfc:	4b0a      	ldr	r3, [pc, #40]	@ (800bd28 <vPortFree+0xc0>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4413      	add	r3, r2
 800bd02:	4a09      	ldr	r2, [pc, #36]	@ (800bd28 <vPortFree+0xc0>)
 800bd04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bd06:	6938      	ldr	r0, [r7, #16]
 800bd08:	f000 f874 	bl	800bdf4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bd0c:	4b07      	ldr	r3, [pc, #28]	@ (800bd2c <vPortFree+0xc4>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	3301      	adds	r3, #1
 800bd12:	4a06      	ldr	r2, [pc, #24]	@ (800bd2c <vPortFree+0xc4>)
 800bd14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bd16:	f7fe fb4f 	bl	800a3b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bd1a:	bf00      	nop
 800bd1c:	3718      	adds	r7, #24
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	bf00      	nop
 800bd24:	2000b710 	.word	0x2000b710
 800bd28:	2000b700 	.word	0x2000b700
 800bd2c:	2000b70c 	.word	0x2000b70c

0800bd30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bd30:	b480      	push	{r7}
 800bd32:	b085      	sub	sp, #20
 800bd34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bd36:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 800bd3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bd3c:	4b27      	ldr	r3, [pc, #156]	@ (800bddc <prvHeapInit+0xac>)
 800bd3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f003 0307 	and.w	r3, r3, #7
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d00c      	beq.n	800bd64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	3307      	adds	r3, #7
 800bd4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	f023 0307 	bic.w	r3, r3, #7
 800bd56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bd58:	68ba      	ldr	r2, [r7, #8]
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	1ad3      	subs	r3, r2, r3
 800bd5e:	4a1f      	ldr	r2, [pc, #124]	@ (800bddc <prvHeapInit+0xac>)
 800bd60:	4413      	add	r3, r2
 800bd62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bd68:	4a1d      	ldr	r2, [pc, #116]	@ (800bde0 <prvHeapInit+0xb0>)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bd6e:	4b1c      	ldr	r3, [pc, #112]	@ (800bde0 <prvHeapInit+0xb0>)
 800bd70:	2200      	movs	r2, #0
 800bd72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	68ba      	ldr	r2, [r7, #8]
 800bd78:	4413      	add	r3, r2
 800bd7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bd7c:	2208      	movs	r2, #8
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	1a9b      	subs	r3, r3, r2
 800bd82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f023 0307 	bic.w	r3, r3, #7
 800bd8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	4a15      	ldr	r2, [pc, #84]	@ (800bde4 <prvHeapInit+0xb4>)
 800bd90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bd92:	4b14      	ldr	r3, [pc, #80]	@ (800bde4 <prvHeapInit+0xb4>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	2200      	movs	r2, #0
 800bd98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bd9a:	4b12      	ldr	r3, [pc, #72]	@ (800bde4 <prvHeapInit+0xb4>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	68fa      	ldr	r2, [r7, #12]
 800bdaa:	1ad2      	subs	r2, r2, r3
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bdb0:	4b0c      	ldr	r3, [pc, #48]	@ (800bde4 <prvHeapInit+0xb4>)
 800bdb2:	681a      	ldr	r2, [r3, #0]
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	4a0a      	ldr	r2, [pc, #40]	@ (800bde8 <prvHeapInit+0xb8>)
 800bdbe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	4a09      	ldr	r2, [pc, #36]	@ (800bdec <prvHeapInit+0xbc>)
 800bdc6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bdc8:	4b09      	ldr	r3, [pc, #36]	@ (800bdf0 <prvHeapInit+0xc0>)
 800bdca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bdce:	601a      	str	r2, [r3, #0]
}
 800bdd0:	bf00      	nop
 800bdd2:	3714      	adds	r7, #20
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr
 800bddc:	200016f4 	.word	0x200016f4
 800bde0:	2000b6f4 	.word	0x2000b6f4
 800bde4:	2000b6fc 	.word	0x2000b6fc
 800bde8:	2000b704 	.word	0x2000b704
 800bdec:	2000b700 	.word	0x2000b700
 800bdf0:	2000b710 	.word	0x2000b710

0800bdf4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b085      	sub	sp, #20
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bdfc:	4b28      	ldr	r3, [pc, #160]	@ (800bea0 <prvInsertBlockIntoFreeList+0xac>)
 800bdfe:	60fb      	str	r3, [r7, #12]
 800be00:	e002      	b.n	800be08 <prvInsertBlockIntoFreeList+0x14>
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	60fb      	str	r3, [r7, #12]
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d8f7      	bhi.n	800be02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	68ba      	ldr	r2, [r7, #8]
 800be1c:	4413      	add	r3, r2
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	429a      	cmp	r2, r3
 800be22:	d108      	bne.n	800be36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	685a      	ldr	r2, [r3, #4]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	441a      	add	r2, r3
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	68ba      	ldr	r2, [r7, #8]
 800be40:	441a      	add	r2, r3
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	429a      	cmp	r2, r3
 800be48:	d118      	bne.n	800be7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681a      	ldr	r2, [r3, #0]
 800be4e:	4b15      	ldr	r3, [pc, #84]	@ (800bea4 <prvInsertBlockIntoFreeList+0xb0>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	429a      	cmp	r2, r3
 800be54:	d00d      	beq.n	800be72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	685a      	ldr	r2, [r3, #4]
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	685b      	ldr	r3, [r3, #4]
 800be60:	441a      	add	r2, r3
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	601a      	str	r2, [r3, #0]
 800be70:	e008      	b.n	800be84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800be72:	4b0c      	ldr	r3, [pc, #48]	@ (800bea4 <prvInsertBlockIntoFreeList+0xb0>)
 800be74:	681a      	ldr	r2, [r3, #0]
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	601a      	str	r2, [r3, #0]
 800be7a:	e003      	b.n	800be84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681a      	ldr	r2, [r3, #0]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800be84:	68fa      	ldr	r2, [r7, #12]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	429a      	cmp	r2, r3
 800be8a:	d002      	beq.n	800be92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	687a      	ldr	r2, [r7, #4]
 800be90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be92:	bf00      	nop
 800be94:	3714      	adds	r7, #20
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr
 800be9e:	bf00      	nop
 800bea0:	2000b6f4 	.word	0x2000b6f4
 800bea4:	2000b6fc 	.word	0x2000b6fc

0800bea8 <_free_r>:
 800bea8:	b538      	push	{r3, r4, r5, lr}
 800beaa:	4605      	mov	r5, r0
 800beac:	2900      	cmp	r1, #0
 800beae:	d041      	beq.n	800bf34 <_free_r+0x8c>
 800beb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800beb4:	1f0c      	subs	r4, r1, #4
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	bfb8      	it	lt
 800beba:	18e4      	addlt	r4, r4, r3
 800bebc:	f000 f8e0 	bl	800c080 <__malloc_lock>
 800bec0:	4a1d      	ldr	r2, [pc, #116]	@ (800bf38 <_free_r+0x90>)
 800bec2:	6813      	ldr	r3, [r2, #0]
 800bec4:	b933      	cbnz	r3, 800bed4 <_free_r+0x2c>
 800bec6:	6063      	str	r3, [r4, #4]
 800bec8:	6014      	str	r4, [r2, #0]
 800beca:	4628      	mov	r0, r5
 800becc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bed0:	f000 b8dc 	b.w	800c08c <__malloc_unlock>
 800bed4:	42a3      	cmp	r3, r4
 800bed6:	d908      	bls.n	800beea <_free_r+0x42>
 800bed8:	6820      	ldr	r0, [r4, #0]
 800beda:	1821      	adds	r1, r4, r0
 800bedc:	428b      	cmp	r3, r1
 800bede:	bf01      	itttt	eq
 800bee0:	6819      	ldreq	r1, [r3, #0]
 800bee2:	685b      	ldreq	r3, [r3, #4]
 800bee4:	1809      	addeq	r1, r1, r0
 800bee6:	6021      	streq	r1, [r4, #0]
 800bee8:	e7ed      	b.n	800bec6 <_free_r+0x1e>
 800beea:	461a      	mov	r2, r3
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	b10b      	cbz	r3, 800bef4 <_free_r+0x4c>
 800bef0:	42a3      	cmp	r3, r4
 800bef2:	d9fa      	bls.n	800beea <_free_r+0x42>
 800bef4:	6811      	ldr	r1, [r2, #0]
 800bef6:	1850      	adds	r0, r2, r1
 800bef8:	42a0      	cmp	r0, r4
 800befa:	d10b      	bne.n	800bf14 <_free_r+0x6c>
 800befc:	6820      	ldr	r0, [r4, #0]
 800befe:	4401      	add	r1, r0
 800bf00:	1850      	adds	r0, r2, r1
 800bf02:	4283      	cmp	r3, r0
 800bf04:	6011      	str	r1, [r2, #0]
 800bf06:	d1e0      	bne.n	800beca <_free_r+0x22>
 800bf08:	6818      	ldr	r0, [r3, #0]
 800bf0a:	685b      	ldr	r3, [r3, #4]
 800bf0c:	6053      	str	r3, [r2, #4]
 800bf0e:	4408      	add	r0, r1
 800bf10:	6010      	str	r0, [r2, #0]
 800bf12:	e7da      	b.n	800beca <_free_r+0x22>
 800bf14:	d902      	bls.n	800bf1c <_free_r+0x74>
 800bf16:	230c      	movs	r3, #12
 800bf18:	602b      	str	r3, [r5, #0]
 800bf1a:	e7d6      	b.n	800beca <_free_r+0x22>
 800bf1c:	6820      	ldr	r0, [r4, #0]
 800bf1e:	1821      	adds	r1, r4, r0
 800bf20:	428b      	cmp	r3, r1
 800bf22:	bf04      	itt	eq
 800bf24:	6819      	ldreq	r1, [r3, #0]
 800bf26:	685b      	ldreq	r3, [r3, #4]
 800bf28:	6063      	str	r3, [r4, #4]
 800bf2a:	bf04      	itt	eq
 800bf2c:	1809      	addeq	r1, r1, r0
 800bf2e:	6021      	streq	r1, [r4, #0]
 800bf30:	6054      	str	r4, [r2, #4]
 800bf32:	e7ca      	b.n	800beca <_free_r+0x22>
 800bf34:	bd38      	pop	{r3, r4, r5, pc}
 800bf36:	bf00      	nop
 800bf38:	2000b718 	.word	0x2000b718

0800bf3c <sbrk_aligned>:
 800bf3c:	b570      	push	{r4, r5, r6, lr}
 800bf3e:	4e0f      	ldr	r6, [pc, #60]	@ (800bf7c <sbrk_aligned+0x40>)
 800bf40:	460c      	mov	r4, r1
 800bf42:	6831      	ldr	r1, [r6, #0]
 800bf44:	4605      	mov	r5, r0
 800bf46:	b911      	cbnz	r1, 800bf4e <sbrk_aligned+0x12>
 800bf48:	f000 ff7c 	bl	800ce44 <_sbrk_r>
 800bf4c:	6030      	str	r0, [r6, #0]
 800bf4e:	4621      	mov	r1, r4
 800bf50:	4628      	mov	r0, r5
 800bf52:	f000 ff77 	bl	800ce44 <_sbrk_r>
 800bf56:	1c43      	adds	r3, r0, #1
 800bf58:	d103      	bne.n	800bf62 <sbrk_aligned+0x26>
 800bf5a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800bf5e:	4620      	mov	r0, r4
 800bf60:	bd70      	pop	{r4, r5, r6, pc}
 800bf62:	1cc4      	adds	r4, r0, #3
 800bf64:	f024 0403 	bic.w	r4, r4, #3
 800bf68:	42a0      	cmp	r0, r4
 800bf6a:	d0f8      	beq.n	800bf5e <sbrk_aligned+0x22>
 800bf6c:	1a21      	subs	r1, r4, r0
 800bf6e:	4628      	mov	r0, r5
 800bf70:	f000 ff68 	bl	800ce44 <_sbrk_r>
 800bf74:	3001      	adds	r0, #1
 800bf76:	d1f2      	bne.n	800bf5e <sbrk_aligned+0x22>
 800bf78:	e7ef      	b.n	800bf5a <sbrk_aligned+0x1e>
 800bf7a:	bf00      	nop
 800bf7c:	2000b714 	.word	0x2000b714

0800bf80 <_malloc_r>:
 800bf80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf84:	1ccd      	adds	r5, r1, #3
 800bf86:	f025 0503 	bic.w	r5, r5, #3
 800bf8a:	3508      	adds	r5, #8
 800bf8c:	2d0c      	cmp	r5, #12
 800bf8e:	bf38      	it	cc
 800bf90:	250c      	movcc	r5, #12
 800bf92:	2d00      	cmp	r5, #0
 800bf94:	4606      	mov	r6, r0
 800bf96:	db01      	blt.n	800bf9c <_malloc_r+0x1c>
 800bf98:	42a9      	cmp	r1, r5
 800bf9a:	d904      	bls.n	800bfa6 <_malloc_r+0x26>
 800bf9c:	230c      	movs	r3, #12
 800bf9e:	6033      	str	r3, [r6, #0]
 800bfa0:	2000      	movs	r0, #0
 800bfa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfa6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c07c <_malloc_r+0xfc>
 800bfaa:	f000 f869 	bl	800c080 <__malloc_lock>
 800bfae:	f8d8 3000 	ldr.w	r3, [r8]
 800bfb2:	461c      	mov	r4, r3
 800bfb4:	bb44      	cbnz	r4, 800c008 <_malloc_r+0x88>
 800bfb6:	4629      	mov	r1, r5
 800bfb8:	4630      	mov	r0, r6
 800bfba:	f7ff ffbf 	bl	800bf3c <sbrk_aligned>
 800bfbe:	1c43      	adds	r3, r0, #1
 800bfc0:	4604      	mov	r4, r0
 800bfc2:	d158      	bne.n	800c076 <_malloc_r+0xf6>
 800bfc4:	f8d8 4000 	ldr.w	r4, [r8]
 800bfc8:	4627      	mov	r7, r4
 800bfca:	2f00      	cmp	r7, #0
 800bfcc:	d143      	bne.n	800c056 <_malloc_r+0xd6>
 800bfce:	2c00      	cmp	r4, #0
 800bfd0:	d04b      	beq.n	800c06a <_malloc_r+0xea>
 800bfd2:	6823      	ldr	r3, [r4, #0]
 800bfd4:	4639      	mov	r1, r7
 800bfd6:	4630      	mov	r0, r6
 800bfd8:	eb04 0903 	add.w	r9, r4, r3
 800bfdc:	f000 ff32 	bl	800ce44 <_sbrk_r>
 800bfe0:	4581      	cmp	r9, r0
 800bfe2:	d142      	bne.n	800c06a <_malloc_r+0xea>
 800bfe4:	6821      	ldr	r1, [r4, #0]
 800bfe6:	1a6d      	subs	r5, r5, r1
 800bfe8:	4629      	mov	r1, r5
 800bfea:	4630      	mov	r0, r6
 800bfec:	f7ff ffa6 	bl	800bf3c <sbrk_aligned>
 800bff0:	3001      	adds	r0, #1
 800bff2:	d03a      	beq.n	800c06a <_malloc_r+0xea>
 800bff4:	6823      	ldr	r3, [r4, #0]
 800bff6:	442b      	add	r3, r5
 800bff8:	6023      	str	r3, [r4, #0]
 800bffa:	f8d8 3000 	ldr.w	r3, [r8]
 800bffe:	685a      	ldr	r2, [r3, #4]
 800c000:	bb62      	cbnz	r2, 800c05c <_malloc_r+0xdc>
 800c002:	f8c8 7000 	str.w	r7, [r8]
 800c006:	e00f      	b.n	800c028 <_malloc_r+0xa8>
 800c008:	6822      	ldr	r2, [r4, #0]
 800c00a:	1b52      	subs	r2, r2, r5
 800c00c:	d420      	bmi.n	800c050 <_malloc_r+0xd0>
 800c00e:	2a0b      	cmp	r2, #11
 800c010:	d917      	bls.n	800c042 <_malloc_r+0xc2>
 800c012:	1961      	adds	r1, r4, r5
 800c014:	42a3      	cmp	r3, r4
 800c016:	6025      	str	r5, [r4, #0]
 800c018:	bf18      	it	ne
 800c01a:	6059      	strne	r1, [r3, #4]
 800c01c:	6863      	ldr	r3, [r4, #4]
 800c01e:	bf08      	it	eq
 800c020:	f8c8 1000 	streq.w	r1, [r8]
 800c024:	5162      	str	r2, [r4, r5]
 800c026:	604b      	str	r3, [r1, #4]
 800c028:	4630      	mov	r0, r6
 800c02a:	f000 f82f 	bl	800c08c <__malloc_unlock>
 800c02e:	f104 000b 	add.w	r0, r4, #11
 800c032:	1d23      	adds	r3, r4, #4
 800c034:	f020 0007 	bic.w	r0, r0, #7
 800c038:	1ac2      	subs	r2, r0, r3
 800c03a:	bf1c      	itt	ne
 800c03c:	1a1b      	subne	r3, r3, r0
 800c03e:	50a3      	strne	r3, [r4, r2]
 800c040:	e7af      	b.n	800bfa2 <_malloc_r+0x22>
 800c042:	6862      	ldr	r2, [r4, #4]
 800c044:	42a3      	cmp	r3, r4
 800c046:	bf0c      	ite	eq
 800c048:	f8c8 2000 	streq.w	r2, [r8]
 800c04c:	605a      	strne	r2, [r3, #4]
 800c04e:	e7eb      	b.n	800c028 <_malloc_r+0xa8>
 800c050:	4623      	mov	r3, r4
 800c052:	6864      	ldr	r4, [r4, #4]
 800c054:	e7ae      	b.n	800bfb4 <_malloc_r+0x34>
 800c056:	463c      	mov	r4, r7
 800c058:	687f      	ldr	r7, [r7, #4]
 800c05a:	e7b6      	b.n	800bfca <_malloc_r+0x4a>
 800c05c:	461a      	mov	r2, r3
 800c05e:	685b      	ldr	r3, [r3, #4]
 800c060:	42a3      	cmp	r3, r4
 800c062:	d1fb      	bne.n	800c05c <_malloc_r+0xdc>
 800c064:	2300      	movs	r3, #0
 800c066:	6053      	str	r3, [r2, #4]
 800c068:	e7de      	b.n	800c028 <_malloc_r+0xa8>
 800c06a:	230c      	movs	r3, #12
 800c06c:	6033      	str	r3, [r6, #0]
 800c06e:	4630      	mov	r0, r6
 800c070:	f000 f80c 	bl	800c08c <__malloc_unlock>
 800c074:	e794      	b.n	800bfa0 <_malloc_r+0x20>
 800c076:	6005      	str	r5, [r0, #0]
 800c078:	e7d6      	b.n	800c028 <_malloc_r+0xa8>
 800c07a:	bf00      	nop
 800c07c:	2000b718 	.word	0x2000b718

0800c080 <__malloc_lock>:
 800c080:	4801      	ldr	r0, [pc, #4]	@ (800c088 <__malloc_lock+0x8>)
 800c082:	f000 bf2c 	b.w	800cede <__retarget_lock_acquire_recursive>
 800c086:	bf00      	nop
 800c088:	2000b85c 	.word	0x2000b85c

0800c08c <__malloc_unlock>:
 800c08c:	4801      	ldr	r0, [pc, #4]	@ (800c094 <__malloc_unlock+0x8>)
 800c08e:	f000 bf27 	b.w	800cee0 <__retarget_lock_release_recursive>
 800c092:	bf00      	nop
 800c094:	2000b85c 	.word	0x2000b85c

0800c098 <__cvt>:
 800c098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c09c:	ec57 6b10 	vmov	r6, r7, d0
 800c0a0:	2f00      	cmp	r7, #0
 800c0a2:	460c      	mov	r4, r1
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	463b      	mov	r3, r7
 800c0a8:	bfbb      	ittet	lt
 800c0aa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c0ae:	461f      	movlt	r7, r3
 800c0b0:	2300      	movge	r3, #0
 800c0b2:	232d      	movlt	r3, #45	@ 0x2d
 800c0b4:	700b      	strb	r3, [r1, #0]
 800c0b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c0b8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c0bc:	4691      	mov	r9, r2
 800c0be:	f023 0820 	bic.w	r8, r3, #32
 800c0c2:	bfbc      	itt	lt
 800c0c4:	4632      	movlt	r2, r6
 800c0c6:	4616      	movlt	r6, r2
 800c0c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c0cc:	d005      	beq.n	800c0da <__cvt+0x42>
 800c0ce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c0d2:	d100      	bne.n	800c0d6 <__cvt+0x3e>
 800c0d4:	3401      	adds	r4, #1
 800c0d6:	2102      	movs	r1, #2
 800c0d8:	e000      	b.n	800c0dc <__cvt+0x44>
 800c0da:	2103      	movs	r1, #3
 800c0dc:	ab03      	add	r3, sp, #12
 800c0de:	9301      	str	r3, [sp, #4]
 800c0e0:	ab02      	add	r3, sp, #8
 800c0e2:	9300      	str	r3, [sp, #0]
 800c0e4:	ec47 6b10 	vmov	d0, r6, r7
 800c0e8:	4653      	mov	r3, sl
 800c0ea:	4622      	mov	r2, r4
 800c0ec:	f000 ff90 	bl	800d010 <_dtoa_r>
 800c0f0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c0f4:	4605      	mov	r5, r0
 800c0f6:	d119      	bne.n	800c12c <__cvt+0x94>
 800c0f8:	f019 0f01 	tst.w	r9, #1
 800c0fc:	d00e      	beq.n	800c11c <__cvt+0x84>
 800c0fe:	eb00 0904 	add.w	r9, r0, r4
 800c102:	2200      	movs	r2, #0
 800c104:	2300      	movs	r3, #0
 800c106:	4630      	mov	r0, r6
 800c108:	4639      	mov	r1, r7
 800c10a:	f7f4 fcfd 	bl	8000b08 <__aeabi_dcmpeq>
 800c10e:	b108      	cbz	r0, 800c114 <__cvt+0x7c>
 800c110:	f8cd 900c 	str.w	r9, [sp, #12]
 800c114:	2230      	movs	r2, #48	@ 0x30
 800c116:	9b03      	ldr	r3, [sp, #12]
 800c118:	454b      	cmp	r3, r9
 800c11a:	d31e      	bcc.n	800c15a <__cvt+0xc2>
 800c11c:	9b03      	ldr	r3, [sp, #12]
 800c11e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c120:	1b5b      	subs	r3, r3, r5
 800c122:	4628      	mov	r0, r5
 800c124:	6013      	str	r3, [r2, #0]
 800c126:	b004      	add	sp, #16
 800c128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c12c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c130:	eb00 0904 	add.w	r9, r0, r4
 800c134:	d1e5      	bne.n	800c102 <__cvt+0x6a>
 800c136:	7803      	ldrb	r3, [r0, #0]
 800c138:	2b30      	cmp	r3, #48	@ 0x30
 800c13a:	d10a      	bne.n	800c152 <__cvt+0xba>
 800c13c:	2200      	movs	r2, #0
 800c13e:	2300      	movs	r3, #0
 800c140:	4630      	mov	r0, r6
 800c142:	4639      	mov	r1, r7
 800c144:	f7f4 fce0 	bl	8000b08 <__aeabi_dcmpeq>
 800c148:	b918      	cbnz	r0, 800c152 <__cvt+0xba>
 800c14a:	f1c4 0401 	rsb	r4, r4, #1
 800c14e:	f8ca 4000 	str.w	r4, [sl]
 800c152:	f8da 3000 	ldr.w	r3, [sl]
 800c156:	4499      	add	r9, r3
 800c158:	e7d3      	b.n	800c102 <__cvt+0x6a>
 800c15a:	1c59      	adds	r1, r3, #1
 800c15c:	9103      	str	r1, [sp, #12]
 800c15e:	701a      	strb	r2, [r3, #0]
 800c160:	e7d9      	b.n	800c116 <__cvt+0x7e>

0800c162 <__exponent>:
 800c162:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c164:	2900      	cmp	r1, #0
 800c166:	bfba      	itte	lt
 800c168:	4249      	neglt	r1, r1
 800c16a:	232d      	movlt	r3, #45	@ 0x2d
 800c16c:	232b      	movge	r3, #43	@ 0x2b
 800c16e:	2909      	cmp	r1, #9
 800c170:	7002      	strb	r2, [r0, #0]
 800c172:	7043      	strb	r3, [r0, #1]
 800c174:	dd29      	ble.n	800c1ca <__exponent+0x68>
 800c176:	f10d 0307 	add.w	r3, sp, #7
 800c17a:	461d      	mov	r5, r3
 800c17c:	270a      	movs	r7, #10
 800c17e:	461a      	mov	r2, r3
 800c180:	fbb1 f6f7 	udiv	r6, r1, r7
 800c184:	fb07 1416 	mls	r4, r7, r6, r1
 800c188:	3430      	adds	r4, #48	@ 0x30
 800c18a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c18e:	460c      	mov	r4, r1
 800c190:	2c63      	cmp	r4, #99	@ 0x63
 800c192:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800c196:	4631      	mov	r1, r6
 800c198:	dcf1      	bgt.n	800c17e <__exponent+0x1c>
 800c19a:	3130      	adds	r1, #48	@ 0x30
 800c19c:	1e94      	subs	r4, r2, #2
 800c19e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c1a2:	1c41      	adds	r1, r0, #1
 800c1a4:	4623      	mov	r3, r4
 800c1a6:	42ab      	cmp	r3, r5
 800c1a8:	d30a      	bcc.n	800c1c0 <__exponent+0x5e>
 800c1aa:	f10d 0309 	add.w	r3, sp, #9
 800c1ae:	1a9b      	subs	r3, r3, r2
 800c1b0:	42ac      	cmp	r4, r5
 800c1b2:	bf88      	it	hi
 800c1b4:	2300      	movhi	r3, #0
 800c1b6:	3302      	adds	r3, #2
 800c1b8:	4403      	add	r3, r0
 800c1ba:	1a18      	subs	r0, r3, r0
 800c1bc:	b003      	add	sp, #12
 800c1be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1c0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c1c4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c1c8:	e7ed      	b.n	800c1a6 <__exponent+0x44>
 800c1ca:	2330      	movs	r3, #48	@ 0x30
 800c1cc:	3130      	adds	r1, #48	@ 0x30
 800c1ce:	7083      	strb	r3, [r0, #2]
 800c1d0:	70c1      	strb	r1, [r0, #3]
 800c1d2:	1d03      	adds	r3, r0, #4
 800c1d4:	e7f1      	b.n	800c1ba <__exponent+0x58>
	...

0800c1d8 <_printf_float>:
 800c1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1dc:	b08d      	sub	sp, #52	@ 0x34
 800c1de:	460c      	mov	r4, r1
 800c1e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c1e4:	4616      	mov	r6, r2
 800c1e6:	461f      	mov	r7, r3
 800c1e8:	4605      	mov	r5, r0
 800c1ea:	f000 fdf3 	bl	800cdd4 <_localeconv_r>
 800c1ee:	6803      	ldr	r3, [r0, #0]
 800c1f0:	9304      	str	r3, [sp, #16]
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7f4 f85c 	bl	80002b0 <strlen>
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1fc:	f8d8 3000 	ldr.w	r3, [r8]
 800c200:	9005      	str	r0, [sp, #20]
 800c202:	3307      	adds	r3, #7
 800c204:	f023 0307 	bic.w	r3, r3, #7
 800c208:	f103 0208 	add.w	r2, r3, #8
 800c20c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c210:	f8d4 b000 	ldr.w	fp, [r4]
 800c214:	f8c8 2000 	str.w	r2, [r8]
 800c218:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c21c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c220:	9307      	str	r3, [sp, #28]
 800c222:	f8cd 8018 	str.w	r8, [sp, #24]
 800c226:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c22a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c22e:	4b9c      	ldr	r3, [pc, #624]	@ (800c4a0 <_printf_float+0x2c8>)
 800c230:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c234:	f7f4 fc9a 	bl	8000b6c <__aeabi_dcmpun>
 800c238:	bb70      	cbnz	r0, 800c298 <_printf_float+0xc0>
 800c23a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c23e:	4b98      	ldr	r3, [pc, #608]	@ (800c4a0 <_printf_float+0x2c8>)
 800c240:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c244:	f7f4 fc74 	bl	8000b30 <__aeabi_dcmple>
 800c248:	bb30      	cbnz	r0, 800c298 <_printf_float+0xc0>
 800c24a:	2200      	movs	r2, #0
 800c24c:	2300      	movs	r3, #0
 800c24e:	4640      	mov	r0, r8
 800c250:	4649      	mov	r1, r9
 800c252:	f7f4 fc63 	bl	8000b1c <__aeabi_dcmplt>
 800c256:	b110      	cbz	r0, 800c25e <_printf_float+0x86>
 800c258:	232d      	movs	r3, #45	@ 0x2d
 800c25a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c25e:	4a91      	ldr	r2, [pc, #580]	@ (800c4a4 <_printf_float+0x2cc>)
 800c260:	4b91      	ldr	r3, [pc, #580]	@ (800c4a8 <_printf_float+0x2d0>)
 800c262:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c266:	bf94      	ite	ls
 800c268:	4690      	movls	r8, r2
 800c26a:	4698      	movhi	r8, r3
 800c26c:	2303      	movs	r3, #3
 800c26e:	6123      	str	r3, [r4, #16]
 800c270:	f02b 0304 	bic.w	r3, fp, #4
 800c274:	6023      	str	r3, [r4, #0]
 800c276:	f04f 0900 	mov.w	r9, #0
 800c27a:	9700      	str	r7, [sp, #0]
 800c27c:	4633      	mov	r3, r6
 800c27e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c280:	4621      	mov	r1, r4
 800c282:	4628      	mov	r0, r5
 800c284:	f000 f9d2 	bl	800c62c <_printf_common>
 800c288:	3001      	adds	r0, #1
 800c28a:	f040 808d 	bne.w	800c3a8 <_printf_float+0x1d0>
 800c28e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c292:	b00d      	add	sp, #52	@ 0x34
 800c294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c298:	4642      	mov	r2, r8
 800c29a:	464b      	mov	r3, r9
 800c29c:	4640      	mov	r0, r8
 800c29e:	4649      	mov	r1, r9
 800c2a0:	f7f4 fc64 	bl	8000b6c <__aeabi_dcmpun>
 800c2a4:	b140      	cbz	r0, 800c2b8 <_printf_float+0xe0>
 800c2a6:	464b      	mov	r3, r9
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	bfbc      	itt	lt
 800c2ac:	232d      	movlt	r3, #45	@ 0x2d
 800c2ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c2b2:	4a7e      	ldr	r2, [pc, #504]	@ (800c4ac <_printf_float+0x2d4>)
 800c2b4:	4b7e      	ldr	r3, [pc, #504]	@ (800c4b0 <_printf_float+0x2d8>)
 800c2b6:	e7d4      	b.n	800c262 <_printf_float+0x8a>
 800c2b8:	6863      	ldr	r3, [r4, #4]
 800c2ba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c2be:	9206      	str	r2, [sp, #24]
 800c2c0:	1c5a      	adds	r2, r3, #1
 800c2c2:	d13b      	bne.n	800c33c <_printf_float+0x164>
 800c2c4:	2306      	movs	r3, #6
 800c2c6:	6063      	str	r3, [r4, #4]
 800c2c8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	6022      	str	r2, [r4, #0]
 800c2d0:	9303      	str	r3, [sp, #12]
 800c2d2:	ab0a      	add	r3, sp, #40	@ 0x28
 800c2d4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c2d8:	ab09      	add	r3, sp, #36	@ 0x24
 800c2da:	9300      	str	r3, [sp, #0]
 800c2dc:	6861      	ldr	r1, [r4, #4]
 800c2de:	ec49 8b10 	vmov	d0, r8, r9
 800c2e2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	f7ff fed6 	bl	800c098 <__cvt>
 800c2ec:	9b06      	ldr	r3, [sp, #24]
 800c2ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c2f0:	2b47      	cmp	r3, #71	@ 0x47
 800c2f2:	4680      	mov	r8, r0
 800c2f4:	d129      	bne.n	800c34a <_printf_float+0x172>
 800c2f6:	1cc8      	adds	r0, r1, #3
 800c2f8:	db02      	blt.n	800c300 <_printf_float+0x128>
 800c2fa:	6863      	ldr	r3, [r4, #4]
 800c2fc:	4299      	cmp	r1, r3
 800c2fe:	dd41      	ble.n	800c384 <_printf_float+0x1ac>
 800c300:	f1aa 0a02 	sub.w	sl, sl, #2
 800c304:	fa5f fa8a 	uxtb.w	sl, sl
 800c308:	3901      	subs	r1, #1
 800c30a:	4652      	mov	r2, sl
 800c30c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c310:	9109      	str	r1, [sp, #36]	@ 0x24
 800c312:	f7ff ff26 	bl	800c162 <__exponent>
 800c316:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c318:	1813      	adds	r3, r2, r0
 800c31a:	2a01      	cmp	r2, #1
 800c31c:	4681      	mov	r9, r0
 800c31e:	6123      	str	r3, [r4, #16]
 800c320:	dc02      	bgt.n	800c328 <_printf_float+0x150>
 800c322:	6822      	ldr	r2, [r4, #0]
 800c324:	07d2      	lsls	r2, r2, #31
 800c326:	d501      	bpl.n	800c32c <_printf_float+0x154>
 800c328:	3301      	adds	r3, #1
 800c32a:	6123      	str	r3, [r4, #16]
 800c32c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c330:	2b00      	cmp	r3, #0
 800c332:	d0a2      	beq.n	800c27a <_printf_float+0xa2>
 800c334:	232d      	movs	r3, #45	@ 0x2d
 800c336:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c33a:	e79e      	b.n	800c27a <_printf_float+0xa2>
 800c33c:	9a06      	ldr	r2, [sp, #24]
 800c33e:	2a47      	cmp	r2, #71	@ 0x47
 800c340:	d1c2      	bne.n	800c2c8 <_printf_float+0xf0>
 800c342:	2b00      	cmp	r3, #0
 800c344:	d1c0      	bne.n	800c2c8 <_printf_float+0xf0>
 800c346:	2301      	movs	r3, #1
 800c348:	e7bd      	b.n	800c2c6 <_printf_float+0xee>
 800c34a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c34e:	d9db      	bls.n	800c308 <_printf_float+0x130>
 800c350:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c354:	d118      	bne.n	800c388 <_printf_float+0x1b0>
 800c356:	2900      	cmp	r1, #0
 800c358:	6863      	ldr	r3, [r4, #4]
 800c35a:	dd0b      	ble.n	800c374 <_printf_float+0x19c>
 800c35c:	6121      	str	r1, [r4, #16]
 800c35e:	b913      	cbnz	r3, 800c366 <_printf_float+0x18e>
 800c360:	6822      	ldr	r2, [r4, #0]
 800c362:	07d0      	lsls	r0, r2, #31
 800c364:	d502      	bpl.n	800c36c <_printf_float+0x194>
 800c366:	3301      	adds	r3, #1
 800c368:	440b      	add	r3, r1
 800c36a:	6123      	str	r3, [r4, #16]
 800c36c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c36e:	f04f 0900 	mov.w	r9, #0
 800c372:	e7db      	b.n	800c32c <_printf_float+0x154>
 800c374:	b913      	cbnz	r3, 800c37c <_printf_float+0x1a4>
 800c376:	6822      	ldr	r2, [r4, #0]
 800c378:	07d2      	lsls	r2, r2, #31
 800c37a:	d501      	bpl.n	800c380 <_printf_float+0x1a8>
 800c37c:	3302      	adds	r3, #2
 800c37e:	e7f4      	b.n	800c36a <_printf_float+0x192>
 800c380:	2301      	movs	r3, #1
 800c382:	e7f2      	b.n	800c36a <_printf_float+0x192>
 800c384:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c388:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c38a:	4299      	cmp	r1, r3
 800c38c:	db05      	blt.n	800c39a <_printf_float+0x1c2>
 800c38e:	6823      	ldr	r3, [r4, #0]
 800c390:	6121      	str	r1, [r4, #16]
 800c392:	07d8      	lsls	r0, r3, #31
 800c394:	d5ea      	bpl.n	800c36c <_printf_float+0x194>
 800c396:	1c4b      	adds	r3, r1, #1
 800c398:	e7e7      	b.n	800c36a <_printf_float+0x192>
 800c39a:	2900      	cmp	r1, #0
 800c39c:	bfd4      	ite	le
 800c39e:	f1c1 0202 	rsble	r2, r1, #2
 800c3a2:	2201      	movgt	r2, #1
 800c3a4:	4413      	add	r3, r2
 800c3a6:	e7e0      	b.n	800c36a <_printf_float+0x192>
 800c3a8:	6823      	ldr	r3, [r4, #0]
 800c3aa:	055a      	lsls	r2, r3, #21
 800c3ac:	d407      	bmi.n	800c3be <_printf_float+0x1e6>
 800c3ae:	6923      	ldr	r3, [r4, #16]
 800c3b0:	4642      	mov	r2, r8
 800c3b2:	4631      	mov	r1, r6
 800c3b4:	4628      	mov	r0, r5
 800c3b6:	47b8      	blx	r7
 800c3b8:	3001      	adds	r0, #1
 800c3ba:	d12b      	bne.n	800c414 <_printf_float+0x23c>
 800c3bc:	e767      	b.n	800c28e <_printf_float+0xb6>
 800c3be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c3c2:	f240 80dd 	bls.w	800c580 <_printf_float+0x3a8>
 800c3c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	f7f4 fb9b 	bl	8000b08 <__aeabi_dcmpeq>
 800c3d2:	2800      	cmp	r0, #0
 800c3d4:	d033      	beq.n	800c43e <_printf_float+0x266>
 800c3d6:	4a37      	ldr	r2, [pc, #220]	@ (800c4b4 <_printf_float+0x2dc>)
 800c3d8:	2301      	movs	r3, #1
 800c3da:	4631      	mov	r1, r6
 800c3dc:	4628      	mov	r0, r5
 800c3de:	47b8      	blx	r7
 800c3e0:	3001      	adds	r0, #1
 800c3e2:	f43f af54 	beq.w	800c28e <_printf_float+0xb6>
 800c3e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c3ea:	4543      	cmp	r3, r8
 800c3ec:	db02      	blt.n	800c3f4 <_printf_float+0x21c>
 800c3ee:	6823      	ldr	r3, [r4, #0]
 800c3f0:	07d8      	lsls	r0, r3, #31
 800c3f2:	d50f      	bpl.n	800c414 <_printf_float+0x23c>
 800c3f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3f8:	4631      	mov	r1, r6
 800c3fa:	4628      	mov	r0, r5
 800c3fc:	47b8      	blx	r7
 800c3fe:	3001      	adds	r0, #1
 800c400:	f43f af45 	beq.w	800c28e <_printf_float+0xb6>
 800c404:	f04f 0900 	mov.w	r9, #0
 800c408:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c40c:	f104 0a1a 	add.w	sl, r4, #26
 800c410:	45c8      	cmp	r8, r9
 800c412:	dc09      	bgt.n	800c428 <_printf_float+0x250>
 800c414:	6823      	ldr	r3, [r4, #0]
 800c416:	079b      	lsls	r3, r3, #30
 800c418:	f100 8103 	bmi.w	800c622 <_printf_float+0x44a>
 800c41c:	68e0      	ldr	r0, [r4, #12]
 800c41e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c420:	4298      	cmp	r0, r3
 800c422:	bfb8      	it	lt
 800c424:	4618      	movlt	r0, r3
 800c426:	e734      	b.n	800c292 <_printf_float+0xba>
 800c428:	2301      	movs	r3, #1
 800c42a:	4652      	mov	r2, sl
 800c42c:	4631      	mov	r1, r6
 800c42e:	4628      	mov	r0, r5
 800c430:	47b8      	blx	r7
 800c432:	3001      	adds	r0, #1
 800c434:	f43f af2b 	beq.w	800c28e <_printf_float+0xb6>
 800c438:	f109 0901 	add.w	r9, r9, #1
 800c43c:	e7e8      	b.n	800c410 <_printf_float+0x238>
 800c43e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c440:	2b00      	cmp	r3, #0
 800c442:	dc39      	bgt.n	800c4b8 <_printf_float+0x2e0>
 800c444:	4a1b      	ldr	r2, [pc, #108]	@ (800c4b4 <_printf_float+0x2dc>)
 800c446:	2301      	movs	r3, #1
 800c448:	4631      	mov	r1, r6
 800c44a:	4628      	mov	r0, r5
 800c44c:	47b8      	blx	r7
 800c44e:	3001      	adds	r0, #1
 800c450:	f43f af1d 	beq.w	800c28e <_printf_float+0xb6>
 800c454:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c458:	ea59 0303 	orrs.w	r3, r9, r3
 800c45c:	d102      	bne.n	800c464 <_printf_float+0x28c>
 800c45e:	6823      	ldr	r3, [r4, #0]
 800c460:	07d9      	lsls	r1, r3, #31
 800c462:	d5d7      	bpl.n	800c414 <_printf_float+0x23c>
 800c464:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c468:	4631      	mov	r1, r6
 800c46a:	4628      	mov	r0, r5
 800c46c:	47b8      	blx	r7
 800c46e:	3001      	adds	r0, #1
 800c470:	f43f af0d 	beq.w	800c28e <_printf_float+0xb6>
 800c474:	f04f 0a00 	mov.w	sl, #0
 800c478:	f104 0b1a 	add.w	fp, r4, #26
 800c47c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c47e:	425b      	negs	r3, r3
 800c480:	4553      	cmp	r3, sl
 800c482:	dc01      	bgt.n	800c488 <_printf_float+0x2b0>
 800c484:	464b      	mov	r3, r9
 800c486:	e793      	b.n	800c3b0 <_printf_float+0x1d8>
 800c488:	2301      	movs	r3, #1
 800c48a:	465a      	mov	r2, fp
 800c48c:	4631      	mov	r1, r6
 800c48e:	4628      	mov	r0, r5
 800c490:	47b8      	blx	r7
 800c492:	3001      	adds	r0, #1
 800c494:	f43f aefb 	beq.w	800c28e <_printf_float+0xb6>
 800c498:	f10a 0a01 	add.w	sl, sl, #1
 800c49c:	e7ee      	b.n	800c47c <_printf_float+0x2a4>
 800c49e:	bf00      	nop
 800c4a0:	7fefffff 	.word	0x7fefffff
 800c4a4:	08010768 	.word	0x08010768
 800c4a8:	0801076c 	.word	0x0801076c
 800c4ac:	08010770 	.word	0x08010770
 800c4b0:	08010774 	.word	0x08010774
 800c4b4:	08010778 	.word	0x08010778
 800c4b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c4ba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c4be:	4553      	cmp	r3, sl
 800c4c0:	bfa8      	it	ge
 800c4c2:	4653      	movge	r3, sl
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	4699      	mov	r9, r3
 800c4c8:	dc36      	bgt.n	800c538 <_printf_float+0x360>
 800c4ca:	f04f 0b00 	mov.w	fp, #0
 800c4ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c4d2:	f104 021a 	add.w	r2, r4, #26
 800c4d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c4d8:	9306      	str	r3, [sp, #24]
 800c4da:	eba3 0309 	sub.w	r3, r3, r9
 800c4de:	455b      	cmp	r3, fp
 800c4e0:	dc31      	bgt.n	800c546 <_printf_float+0x36e>
 800c4e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4e4:	459a      	cmp	sl, r3
 800c4e6:	dc3a      	bgt.n	800c55e <_printf_float+0x386>
 800c4e8:	6823      	ldr	r3, [r4, #0]
 800c4ea:	07da      	lsls	r2, r3, #31
 800c4ec:	d437      	bmi.n	800c55e <_printf_float+0x386>
 800c4ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4f0:	ebaa 0903 	sub.w	r9, sl, r3
 800c4f4:	9b06      	ldr	r3, [sp, #24]
 800c4f6:	ebaa 0303 	sub.w	r3, sl, r3
 800c4fa:	4599      	cmp	r9, r3
 800c4fc:	bfa8      	it	ge
 800c4fe:	4699      	movge	r9, r3
 800c500:	f1b9 0f00 	cmp.w	r9, #0
 800c504:	dc33      	bgt.n	800c56e <_printf_float+0x396>
 800c506:	f04f 0800 	mov.w	r8, #0
 800c50a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c50e:	f104 0b1a 	add.w	fp, r4, #26
 800c512:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c514:	ebaa 0303 	sub.w	r3, sl, r3
 800c518:	eba3 0309 	sub.w	r3, r3, r9
 800c51c:	4543      	cmp	r3, r8
 800c51e:	f77f af79 	ble.w	800c414 <_printf_float+0x23c>
 800c522:	2301      	movs	r3, #1
 800c524:	465a      	mov	r2, fp
 800c526:	4631      	mov	r1, r6
 800c528:	4628      	mov	r0, r5
 800c52a:	47b8      	blx	r7
 800c52c:	3001      	adds	r0, #1
 800c52e:	f43f aeae 	beq.w	800c28e <_printf_float+0xb6>
 800c532:	f108 0801 	add.w	r8, r8, #1
 800c536:	e7ec      	b.n	800c512 <_printf_float+0x33a>
 800c538:	4642      	mov	r2, r8
 800c53a:	4631      	mov	r1, r6
 800c53c:	4628      	mov	r0, r5
 800c53e:	47b8      	blx	r7
 800c540:	3001      	adds	r0, #1
 800c542:	d1c2      	bne.n	800c4ca <_printf_float+0x2f2>
 800c544:	e6a3      	b.n	800c28e <_printf_float+0xb6>
 800c546:	2301      	movs	r3, #1
 800c548:	4631      	mov	r1, r6
 800c54a:	4628      	mov	r0, r5
 800c54c:	9206      	str	r2, [sp, #24]
 800c54e:	47b8      	blx	r7
 800c550:	3001      	adds	r0, #1
 800c552:	f43f ae9c 	beq.w	800c28e <_printf_float+0xb6>
 800c556:	9a06      	ldr	r2, [sp, #24]
 800c558:	f10b 0b01 	add.w	fp, fp, #1
 800c55c:	e7bb      	b.n	800c4d6 <_printf_float+0x2fe>
 800c55e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c562:	4631      	mov	r1, r6
 800c564:	4628      	mov	r0, r5
 800c566:	47b8      	blx	r7
 800c568:	3001      	adds	r0, #1
 800c56a:	d1c0      	bne.n	800c4ee <_printf_float+0x316>
 800c56c:	e68f      	b.n	800c28e <_printf_float+0xb6>
 800c56e:	9a06      	ldr	r2, [sp, #24]
 800c570:	464b      	mov	r3, r9
 800c572:	4442      	add	r2, r8
 800c574:	4631      	mov	r1, r6
 800c576:	4628      	mov	r0, r5
 800c578:	47b8      	blx	r7
 800c57a:	3001      	adds	r0, #1
 800c57c:	d1c3      	bne.n	800c506 <_printf_float+0x32e>
 800c57e:	e686      	b.n	800c28e <_printf_float+0xb6>
 800c580:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c584:	f1ba 0f01 	cmp.w	sl, #1
 800c588:	dc01      	bgt.n	800c58e <_printf_float+0x3b6>
 800c58a:	07db      	lsls	r3, r3, #31
 800c58c:	d536      	bpl.n	800c5fc <_printf_float+0x424>
 800c58e:	2301      	movs	r3, #1
 800c590:	4642      	mov	r2, r8
 800c592:	4631      	mov	r1, r6
 800c594:	4628      	mov	r0, r5
 800c596:	47b8      	blx	r7
 800c598:	3001      	adds	r0, #1
 800c59a:	f43f ae78 	beq.w	800c28e <_printf_float+0xb6>
 800c59e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5a2:	4631      	mov	r1, r6
 800c5a4:	4628      	mov	r0, r5
 800c5a6:	47b8      	blx	r7
 800c5a8:	3001      	adds	r0, #1
 800c5aa:	f43f ae70 	beq.w	800c28e <_printf_float+0xb6>
 800c5ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c5ba:	f7f4 faa5 	bl	8000b08 <__aeabi_dcmpeq>
 800c5be:	b9c0      	cbnz	r0, 800c5f2 <_printf_float+0x41a>
 800c5c0:	4653      	mov	r3, sl
 800c5c2:	f108 0201 	add.w	r2, r8, #1
 800c5c6:	4631      	mov	r1, r6
 800c5c8:	4628      	mov	r0, r5
 800c5ca:	47b8      	blx	r7
 800c5cc:	3001      	adds	r0, #1
 800c5ce:	d10c      	bne.n	800c5ea <_printf_float+0x412>
 800c5d0:	e65d      	b.n	800c28e <_printf_float+0xb6>
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	465a      	mov	r2, fp
 800c5d6:	4631      	mov	r1, r6
 800c5d8:	4628      	mov	r0, r5
 800c5da:	47b8      	blx	r7
 800c5dc:	3001      	adds	r0, #1
 800c5de:	f43f ae56 	beq.w	800c28e <_printf_float+0xb6>
 800c5e2:	f108 0801 	add.w	r8, r8, #1
 800c5e6:	45d0      	cmp	r8, sl
 800c5e8:	dbf3      	blt.n	800c5d2 <_printf_float+0x3fa>
 800c5ea:	464b      	mov	r3, r9
 800c5ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c5f0:	e6df      	b.n	800c3b2 <_printf_float+0x1da>
 800c5f2:	f04f 0800 	mov.w	r8, #0
 800c5f6:	f104 0b1a 	add.w	fp, r4, #26
 800c5fa:	e7f4      	b.n	800c5e6 <_printf_float+0x40e>
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	4642      	mov	r2, r8
 800c600:	e7e1      	b.n	800c5c6 <_printf_float+0x3ee>
 800c602:	2301      	movs	r3, #1
 800c604:	464a      	mov	r2, r9
 800c606:	4631      	mov	r1, r6
 800c608:	4628      	mov	r0, r5
 800c60a:	47b8      	blx	r7
 800c60c:	3001      	adds	r0, #1
 800c60e:	f43f ae3e 	beq.w	800c28e <_printf_float+0xb6>
 800c612:	f108 0801 	add.w	r8, r8, #1
 800c616:	68e3      	ldr	r3, [r4, #12]
 800c618:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c61a:	1a5b      	subs	r3, r3, r1
 800c61c:	4543      	cmp	r3, r8
 800c61e:	dcf0      	bgt.n	800c602 <_printf_float+0x42a>
 800c620:	e6fc      	b.n	800c41c <_printf_float+0x244>
 800c622:	f04f 0800 	mov.w	r8, #0
 800c626:	f104 0919 	add.w	r9, r4, #25
 800c62a:	e7f4      	b.n	800c616 <_printf_float+0x43e>

0800c62c <_printf_common>:
 800c62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c630:	4616      	mov	r6, r2
 800c632:	4698      	mov	r8, r3
 800c634:	688a      	ldr	r2, [r1, #8]
 800c636:	690b      	ldr	r3, [r1, #16]
 800c638:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c63c:	4293      	cmp	r3, r2
 800c63e:	bfb8      	it	lt
 800c640:	4613      	movlt	r3, r2
 800c642:	6033      	str	r3, [r6, #0]
 800c644:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c648:	4607      	mov	r7, r0
 800c64a:	460c      	mov	r4, r1
 800c64c:	b10a      	cbz	r2, 800c652 <_printf_common+0x26>
 800c64e:	3301      	adds	r3, #1
 800c650:	6033      	str	r3, [r6, #0]
 800c652:	6823      	ldr	r3, [r4, #0]
 800c654:	0699      	lsls	r1, r3, #26
 800c656:	bf42      	ittt	mi
 800c658:	6833      	ldrmi	r3, [r6, #0]
 800c65a:	3302      	addmi	r3, #2
 800c65c:	6033      	strmi	r3, [r6, #0]
 800c65e:	6825      	ldr	r5, [r4, #0]
 800c660:	f015 0506 	ands.w	r5, r5, #6
 800c664:	d106      	bne.n	800c674 <_printf_common+0x48>
 800c666:	f104 0a19 	add.w	sl, r4, #25
 800c66a:	68e3      	ldr	r3, [r4, #12]
 800c66c:	6832      	ldr	r2, [r6, #0]
 800c66e:	1a9b      	subs	r3, r3, r2
 800c670:	42ab      	cmp	r3, r5
 800c672:	dc26      	bgt.n	800c6c2 <_printf_common+0x96>
 800c674:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c678:	6822      	ldr	r2, [r4, #0]
 800c67a:	3b00      	subs	r3, #0
 800c67c:	bf18      	it	ne
 800c67e:	2301      	movne	r3, #1
 800c680:	0692      	lsls	r2, r2, #26
 800c682:	d42b      	bmi.n	800c6dc <_printf_common+0xb0>
 800c684:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c688:	4641      	mov	r1, r8
 800c68a:	4638      	mov	r0, r7
 800c68c:	47c8      	blx	r9
 800c68e:	3001      	adds	r0, #1
 800c690:	d01e      	beq.n	800c6d0 <_printf_common+0xa4>
 800c692:	6823      	ldr	r3, [r4, #0]
 800c694:	6922      	ldr	r2, [r4, #16]
 800c696:	f003 0306 	and.w	r3, r3, #6
 800c69a:	2b04      	cmp	r3, #4
 800c69c:	bf02      	ittt	eq
 800c69e:	68e5      	ldreq	r5, [r4, #12]
 800c6a0:	6833      	ldreq	r3, [r6, #0]
 800c6a2:	1aed      	subeq	r5, r5, r3
 800c6a4:	68a3      	ldr	r3, [r4, #8]
 800c6a6:	bf0c      	ite	eq
 800c6a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c6ac:	2500      	movne	r5, #0
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	bfc4      	itt	gt
 800c6b2:	1a9b      	subgt	r3, r3, r2
 800c6b4:	18ed      	addgt	r5, r5, r3
 800c6b6:	2600      	movs	r6, #0
 800c6b8:	341a      	adds	r4, #26
 800c6ba:	42b5      	cmp	r5, r6
 800c6bc:	d11a      	bne.n	800c6f4 <_printf_common+0xc8>
 800c6be:	2000      	movs	r0, #0
 800c6c0:	e008      	b.n	800c6d4 <_printf_common+0xa8>
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	4652      	mov	r2, sl
 800c6c6:	4641      	mov	r1, r8
 800c6c8:	4638      	mov	r0, r7
 800c6ca:	47c8      	blx	r9
 800c6cc:	3001      	adds	r0, #1
 800c6ce:	d103      	bne.n	800c6d8 <_printf_common+0xac>
 800c6d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c6d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6d8:	3501      	adds	r5, #1
 800c6da:	e7c6      	b.n	800c66a <_printf_common+0x3e>
 800c6dc:	18e1      	adds	r1, r4, r3
 800c6de:	1c5a      	adds	r2, r3, #1
 800c6e0:	2030      	movs	r0, #48	@ 0x30
 800c6e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c6e6:	4422      	add	r2, r4
 800c6e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c6ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c6f0:	3302      	adds	r3, #2
 800c6f2:	e7c7      	b.n	800c684 <_printf_common+0x58>
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	4622      	mov	r2, r4
 800c6f8:	4641      	mov	r1, r8
 800c6fa:	4638      	mov	r0, r7
 800c6fc:	47c8      	blx	r9
 800c6fe:	3001      	adds	r0, #1
 800c700:	d0e6      	beq.n	800c6d0 <_printf_common+0xa4>
 800c702:	3601      	adds	r6, #1
 800c704:	e7d9      	b.n	800c6ba <_printf_common+0x8e>
	...

0800c708 <_printf_i>:
 800c708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c70c:	7e0f      	ldrb	r7, [r1, #24]
 800c70e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c710:	2f78      	cmp	r7, #120	@ 0x78
 800c712:	4691      	mov	r9, r2
 800c714:	4680      	mov	r8, r0
 800c716:	460c      	mov	r4, r1
 800c718:	469a      	mov	sl, r3
 800c71a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c71e:	d807      	bhi.n	800c730 <_printf_i+0x28>
 800c720:	2f62      	cmp	r7, #98	@ 0x62
 800c722:	d80a      	bhi.n	800c73a <_printf_i+0x32>
 800c724:	2f00      	cmp	r7, #0
 800c726:	f000 80d2 	beq.w	800c8ce <_printf_i+0x1c6>
 800c72a:	2f58      	cmp	r7, #88	@ 0x58
 800c72c:	f000 80b9 	beq.w	800c8a2 <_printf_i+0x19a>
 800c730:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c734:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c738:	e03a      	b.n	800c7b0 <_printf_i+0xa8>
 800c73a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c73e:	2b15      	cmp	r3, #21
 800c740:	d8f6      	bhi.n	800c730 <_printf_i+0x28>
 800c742:	a101      	add	r1, pc, #4	@ (adr r1, 800c748 <_printf_i+0x40>)
 800c744:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c748:	0800c7a1 	.word	0x0800c7a1
 800c74c:	0800c7b5 	.word	0x0800c7b5
 800c750:	0800c731 	.word	0x0800c731
 800c754:	0800c731 	.word	0x0800c731
 800c758:	0800c731 	.word	0x0800c731
 800c75c:	0800c731 	.word	0x0800c731
 800c760:	0800c7b5 	.word	0x0800c7b5
 800c764:	0800c731 	.word	0x0800c731
 800c768:	0800c731 	.word	0x0800c731
 800c76c:	0800c731 	.word	0x0800c731
 800c770:	0800c731 	.word	0x0800c731
 800c774:	0800c8b5 	.word	0x0800c8b5
 800c778:	0800c7df 	.word	0x0800c7df
 800c77c:	0800c86f 	.word	0x0800c86f
 800c780:	0800c731 	.word	0x0800c731
 800c784:	0800c731 	.word	0x0800c731
 800c788:	0800c8d7 	.word	0x0800c8d7
 800c78c:	0800c731 	.word	0x0800c731
 800c790:	0800c7df 	.word	0x0800c7df
 800c794:	0800c731 	.word	0x0800c731
 800c798:	0800c731 	.word	0x0800c731
 800c79c:	0800c877 	.word	0x0800c877
 800c7a0:	6833      	ldr	r3, [r6, #0]
 800c7a2:	1d1a      	adds	r2, r3, #4
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	6032      	str	r2, [r6, #0]
 800c7a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c7ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	e09d      	b.n	800c8f0 <_printf_i+0x1e8>
 800c7b4:	6833      	ldr	r3, [r6, #0]
 800c7b6:	6820      	ldr	r0, [r4, #0]
 800c7b8:	1d19      	adds	r1, r3, #4
 800c7ba:	6031      	str	r1, [r6, #0]
 800c7bc:	0606      	lsls	r6, r0, #24
 800c7be:	d501      	bpl.n	800c7c4 <_printf_i+0xbc>
 800c7c0:	681d      	ldr	r5, [r3, #0]
 800c7c2:	e003      	b.n	800c7cc <_printf_i+0xc4>
 800c7c4:	0645      	lsls	r5, r0, #25
 800c7c6:	d5fb      	bpl.n	800c7c0 <_printf_i+0xb8>
 800c7c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c7cc:	2d00      	cmp	r5, #0
 800c7ce:	da03      	bge.n	800c7d8 <_printf_i+0xd0>
 800c7d0:	232d      	movs	r3, #45	@ 0x2d
 800c7d2:	426d      	negs	r5, r5
 800c7d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c7d8:	4859      	ldr	r0, [pc, #356]	@ (800c940 <_printf_i+0x238>)
 800c7da:	230a      	movs	r3, #10
 800c7dc:	e011      	b.n	800c802 <_printf_i+0xfa>
 800c7de:	6821      	ldr	r1, [r4, #0]
 800c7e0:	6833      	ldr	r3, [r6, #0]
 800c7e2:	0608      	lsls	r0, r1, #24
 800c7e4:	f853 5b04 	ldr.w	r5, [r3], #4
 800c7e8:	d402      	bmi.n	800c7f0 <_printf_i+0xe8>
 800c7ea:	0649      	lsls	r1, r1, #25
 800c7ec:	bf48      	it	mi
 800c7ee:	b2ad      	uxthmi	r5, r5
 800c7f0:	2f6f      	cmp	r7, #111	@ 0x6f
 800c7f2:	4853      	ldr	r0, [pc, #332]	@ (800c940 <_printf_i+0x238>)
 800c7f4:	6033      	str	r3, [r6, #0]
 800c7f6:	bf14      	ite	ne
 800c7f8:	230a      	movne	r3, #10
 800c7fa:	2308      	moveq	r3, #8
 800c7fc:	2100      	movs	r1, #0
 800c7fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c802:	6866      	ldr	r6, [r4, #4]
 800c804:	60a6      	str	r6, [r4, #8]
 800c806:	2e00      	cmp	r6, #0
 800c808:	bfa2      	ittt	ge
 800c80a:	6821      	ldrge	r1, [r4, #0]
 800c80c:	f021 0104 	bicge.w	r1, r1, #4
 800c810:	6021      	strge	r1, [r4, #0]
 800c812:	b90d      	cbnz	r5, 800c818 <_printf_i+0x110>
 800c814:	2e00      	cmp	r6, #0
 800c816:	d04b      	beq.n	800c8b0 <_printf_i+0x1a8>
 800c818:	4616      	mov	r6, r2
 800c81a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c81e:	fb03 5711 	mls	r7, r3, r1, r5
 800c822:	5dc7      	ldrb	r7, [r0, r7]
 800c824:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c828:	462f      	mov	r7, r5
 800c82a:	42bb      	cmp	r3, r7
 800c82c:	460d      	mov	r5, r1
 800c82e:	d9f4      	bls.n	800c81a <_printf_i+0x112>
 800c830:	2b08      	cmp	r3, #8
 800c832:	d10b      	bne.n	800c84c <_printf_i+0x144>
 800c834:	6823      	ldr	r3, [r4, #0]
 800c836:	07df      	lsls	r7, r3, #31
 800c838:	d508      	bpl.n	800c84c <_printf_i+0x144>
 800c83a:	6923      	ldr	r3, [r4, #16]
 800c83c:	6861      	ldr	r1, [r4, #4]
 800c83e:	4299      	cmp	r1, r3
 800c840:	bfde      	ittt	le
 800c842:	2330      	movle	r3, #48	@ 0x30
 800c844:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c848:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c84c:	1b92      	subs	r2, r2, r6
 800c84e:	6122      	str	r2, [r4, #16]
 800c850:	f8cd a000 	str.w	sl, [sp]
 800c854:	464b      	mov	r3, r9
 800c856:	aa03      	add	r2, sp, #12
 800c858:	4621      	mov	r1, r4
 800c85a:	4640      	mov	r0, r8
 800c85c:	f7ff fee6 	bl	800c62c <_printf_common>
 800c860:	3001      	adds	r0, #1
 800c862:	d14a      	bne.n	800c8fa <_printf_i+0x1f2>
 800c864:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c868:	b004      	add	sp, #16
 800c86a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c86e:	6823      	ldr	r3, [r4, #0]
 800c870:	f043 0320 	orr.w	r3, r3, #32
 800c874:	6023      	str	r3, [r4, #0]
 800c876:	4833      	ldr	r0, [pc, #204]	@ (800c944 <_printf_i+0x23c>)
 800c878:	2778      	movs	r7, #120	@ 0x78
 800c87a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c87e:	6823      	ldr	r3, [r4, #0]
 800c880:	6831      	ldr	r1, [r6, #0]
 800c882:	061f      	lsls	r7, r3, #24
 800c884:	f851 5b04 	ldr.w	r5, [r1], #4
 800c888:	d402      	bmi.n	800c890 <_printf_i+0x188>
 800c88a:	065f      	lsls	r7, r3, #25
 800c88c:	bf48      	it	mi
 800c88e:	b2ad      	uxthmi	r5, r5
 800c890:	6031      	str	r1, [r6, #0]
 800c892:	07d9      	lsls	r1, r3, #31
 800c894:	bf44      	itt	mi
 800c896:	f043 0320 	orrmi.w	r3, r3, #32
 800c89a:	6023      	strmi	r3, [r4, #0]
 800c89c:	b11d      	cbz	r5, 800c8a6 <_printf_i+0x19e>
 800c89e:	2310      	movs	r3, #16
 800c8a0:	e7ac      	b.n	800c7fc <_printf_i+0xf4>
 800c8a2:	4827      	ldr	r0, [pc, #156]	@ (800c940 <_printf_i+0x238>)
 800c8a4:	e7e9      	b.n	800c87a <_printf_i+0x172>
 800c8a6:	6823      	ldr	r3, [r4, #0]
 800c8a8:	f023 0320 	bic.w	r3, r3, #32
 800c8ac:	6023      	str	r3, [r4, #0]
 800c8ae:	e7f6      	b.n	800c89e <_printf_i+0x196>
 800c8b0:	4616      	mov	r6, r2
 800c8b2:	e7bd      	b.n	800c830 <_printf_i+0x128>
 800c8b4:	6833      	ldr	r3, [r6, #0]
 800c8b6:	6825      	ldr	r5, [r4, #0]
 800c8b8:	6961      	ldr	r1, [r4, #20]
 800c8ba:	1d18      	adds	r0, r3, #4
 800c8bc:	6030      	str	r0, [r6, #0]
 800c8be:	062e      	lsls	r6, r5, #24
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	d501      	bpl.n	800c8c8 <_printf_i+0x1c0>
 800c8c4:	6019      	str	r1, [r3, #0]
 800c8c6:	e002      	b.n	800c8ce <_printf_i+0x1c6>
 800c8c8:	0668      	lsls	r0, r5, #25
 800c8ca:	d5fb      	bpl.n	800c8c4 <_printf_i+0x1bc>
 800c8cc:	8019      	strh	r1, [r3, #0]
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	6123      	str	r3, [r4, #16]
 800c8d2:	4616      	mov	r6, r2
 800c8d4:	e7bc      	b.n	800c850 <_printf_i+0x148>
 800c8d6:	6833      	ldr	r3, [r6, #0]
 800c8d8:	1d1a      	adds	r2, r3, #4
 800c8da:	6032      	str	r2, [r6, #0]
 800c8dc:	681e      	ldr	r6, [r3, #0]
 800c8de:	6862      	ldr	r2, [r4, #4]
 800c8e0:	2100      	movs	r1, #0
 800c8e2:	4630      	mov	r0, r6
 800c8e4:	f7f3 fc94 	bl	8000210 <memchr>
 800c8e8:	b108      	cbz	r0, 800c8ee <_printf_i+0x1e6>
 800c8ea:	1b80      	subs	r0, r0, r6
 800c8ec:	6060      	str	r0, [r4, #4]
 800c8ee:	6863      	ldr	r3, [r4, #4]
 800c8f0:	6123      	str	r3, [r4, #16]
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c8f8:	e7aa      	b.n	800c850 <_printf_i+0x148>
 800c8fa:	6923      	ldr	r3, [r4, #16]
 800c8fc:	4632      	mov	r2, r6
 800c8fe:	4649      	mov	r1, r9
 800c900:	4640      	mov	r0, r8
 800c902:	47d0      	blx	sl
 800c904:	3001      	adds	r0, #1
 800c906:	d0ad      	beq.n	800c864 <_printf_i+0x15c>
 800c908:	6823      	ldr	r3, [r4, #0]
 800c90a:	079b      	lsls	r3, r3, #30
 800c90c:	d413      	bmi.n	800c936 <_printf_i+0x22e>
 800c90e:	68e0      	ldr	r0, [r4, #12]
 800c910:	9b03      	ldr	r3, [sp, #12]
 800c912:	4298      	cmp	r0, r3
 800c914:	bfb8      	it	lt
 800c916:	4618      	movlt	r0, r3
 800c918:	e7a6      	b.n	800c868 <_printf_i+0x160>
 800c91a:	2301      	movs	r3, #1
 800c91c:	4632      	mov	r2, r6
 800c91e:	4649      	mov	r1, r9
 800c920:	4640      	mov	r0, r8
 800c922:	47d0      	blx	sl
 800c924:	3001      	adds	r0, #1
 800c926:	d09d      	beq.n	800c864 <_printf_i+0x15c>
 800c928:	3501      	adds	r5, #1
 800c92a:	68e3      	ldr	r3, [r4, #12]
 800c92c:	9903      	ldr	r1, [sp, #12]
 800c92e:	1a5b      	subs	r3, r3, r1
 800c930:	42ab      	cmp	r3, r5
 800c932:	dcf2      	bgt.n	800c91a <_printf_i+0x212>
 800c934:	e7eb      	b.n	800c90e <_printf_i+0x206>
 800c936:	2500      	movs	r5, #0
 800c938:	f104 0619 	add.w	r6, r4, #25
 800c93c:	e7f5      	b.n	800c92a <_printf_i+0x222>
 800c93e:	bf00      	nop
 800c940:	0801077a 	.word	0x0801077a
 800c944:	0801078b 	.word	0x0801078b

0800c948 <std>:
 800c948:	2300      	movs	r3, #0
 800c94a:	b510      	push	{r4, lr}
 800c94c:	4604      	mov	r4, r0
 800c94e:	e9c0 3300 	strd	r3, r3, [r0]
 800c952:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c956:	6083      	str	r3, [r0, #8]
 800c958:	8181      	strh	r1, [r0, #12]
 800c95a:	6643      	str	r3, [r0, #100]	@ 0x64
 800c95c:	81c2      	strh	r2, [r0, #14]
 800c95e:	6183      	str	r3, [r0, #24]
 800c960:	4619      	mov	r1, r3
 800c962:	2208      	movs	r2, #8
 800c964:	305c      	adds	r0, #92	@ 0x5c
 800c966:	f000 fa2d 	bl	800cdc4 <memset>
 800c96a:	4b0d      	ldr	r3, [pc, #52]	@ (800c9a0 <std+0x58>)
 800c96c:	6263      	str	r3, [r4, #36]	@ 0x24
 800c96e:	4b0d      	ldr	r3, [pc, #52]	@ (800c9a4 <std+0x5c>)
 800c970:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c972:	4b0d      	ldr	r3, [pc, #52]	@ (800c9a8 <std+0x60>)
 800c974:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c976:	4b0d      	ldr	r3, [pc, #52]	@ (800c9ac <std+0x64>)
 800c978:	6323      	str	r3, [r4, #48]	@ 0x30
 800c97a:	4b0d      	ldr	r3, [pc, #52]	@ (800c9b0 <std+0x68>)
 800c97c:	6224      	str	r4, [r4, #32]
 800c97e:	429c      	cmp	r4, r3
 800c980:	d006      	beq.n	800c990 <std+0x48>
 800c982:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c986:	4294      	cmp	r4, r2
 800c988:	d002      	beq.n	800c990 <std+0x48>
 800c98a:	33d0      	adds	r3, #208	@ 0xd0
 800c98c:	429c      	cmp	r4, r3
 800c98e:	d105      	bne.n	800c99c <std+0x54>
 800c990:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c998:	f000 baa0 	b.w	800cedc <__retarget_lock_init_recursive>
 800c99c:	bd10      	pop	{r4, pc}
 800c99e:	bf00      	nop
 800c9a0:	0800cc15 	.word	0x0800cc15
 800c9a4:	0800cc37 	.word	0x0800cc37
 800c9a8:	0800cc6f 	.word	0x0800cc6f
 800c9ac:	0800cc93 	.word	0x0800cc93
 800c9b0:	2000b71c 	.word	0x2000b71c

0800c9b4 <stdio_exit_handler>:
 800c9b4:	4a02      	ldr	r2, [pc, #8]	@ (800c9c0 <stdio_exit_handler+0xc>)
 800c9b6:	4903      	ldr	r1, [pc, #12]	@ (800c9c4 <stdio_exit_handler+0x10>)
 800c9b8:	4803      	ldr	r0, [pc, #12]	@ (800c9c8 <stdio_exit_handler+0x14>)
 800c9ba:	f000 b869 	b.w	800ca90 <_fwalk_sglue>
 800c9be:	bf00      	nop
 800c9c0:	20000010 	.word	0x20000010
 800c9c4:	0800e8e9 	.word	0x0800e8e9
 800c9c8:	20000020 	.word	0x20000020

0800c9cc <cleanup_stdio>:
 800c9cc:	6841      	ldr	r1, [r0, #4]
 800c9ce:	4b0c      	ldr	r3, [pc, #48]	@ (800ca00 <cleanup_stdio+0x34>)
 800c9d0:	4299      	cmp	r1, r3
 800c9d2:	b510      	push	{r4, lr}
 800c9d4:	4604      	mov	r4, r0
 800c9d6:	d001      	beq.n	800c9dc <cleanup_stdio+0x10>
 800c9d8:	f001 ff86 	bl	800e8e8 <_fflush_r>
 800c9dc:	68a1      	ldr	r1, [r4, #8]
 800c9de:	4b09      	ldr	r3, [pc, #36]	@ (800ca04 <cleanup_stdio+0x38>)
 800c9e0:	4299      	cmp	r1, r3
 800c9e2:	d002      	beq.n	800c9ea <cleanup_stdio+0x1e>
 800c9e4:	4620      	mov	r0, r4
 800c9e6:	f001 ff7f 	bl	800e8e8 <_fflush_r>
 800c9ea:	68e1      	ldr	r1, [r4, #12]
 800c9ec:	4b06      	ldr	r3, [pc, #24]	@ (800ca08 <cleanup_stdio+0x3c>)
 800c9ee:	4299      	cmp	r1, r3
 800c9f0:	d004      	beq.n	800c9fc <cleanup_stdio+0x30>
 800c9f2:	4620      	mov	r0, r4
 800c9f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9f8:	f001 bf76 	b.w	800e8e8 <_fflush_r>
 800c9fc:	bd10      	pop	{r4, pc}
 800c9fe:	bf00      	nop
 800ca00:	2000b71c 	.word	0x2000b71c
 800ca04:	2000b784 	.word	0x2000b784
 800ca08:	2000b7ec 	.word	0x2000b7ec

0800ca0c <global_stdio_init.part.0>:
 800ca0c:	b510      	push	{r4, lr}
 800ca0e:	4b0b      	ldr	r3, [pc, #44]	@ (800ca3c <global_stdio_init.part.0+0x30>)
 800ca10:	4c0b      	ldr	r4, [pc, #44]	@ (800ca40 <global_stdio_init.part.0+0x34>)
 800ca12:	4a0c      	ldr	r2, [pc, #48]	@ (800ca44 <global_stdio_init.part.0+0x38>)
 800ca14:	601a      	str	r2, [r3, #0]
 800ca16:	4620      	mov	r0, r4
 800ca18:	2200      	movs	r2, #0
 800ca1a:	2104      	movs	r1, #4
 800ca1c:	f7ff ff94 	bl	800c948 <std>
 800ca20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ca24:	2201      	movs	r2, #1
 800ca26:	2109      	movs	r1, #9
 800ca28:	f7ff ff8e 	bl	800c948 <std>
 800ca2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ca30:	2202      	movs	r2, #2
 800ca32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca36:	2112      	movs	r1, #18
 800ca38:	f7ff bf86 	b.w	800c948 <std>
 800ca3c:	2000b854 	.word	0x2000b854
 800ca40:	2000b71c 	.word	0x2000b71c
 800ca44:	0800c9b5 	.word	0x0800c9b5

0800ca48 <__sfp_lock_acquire>:
 800ca48:	4801      	ldr	r0, [pc, #4]	@ (800ca50 <__sfp_lock_acquire+0x8>)
 800ca4a:	f000 ba48 	b.w	800cede <__retarget_lock_acquire_recursive>
 800ca4e:	bf00      	nop
 800ca50:	2000b85d 	.word	0x2000b85d

0800ca54 <__sfp_lock_release>:
 800ca54:	4801      	ldr	r0, [pc, #4]	@ (800ca5c <__sfp_lock_release+0x8>)
 800ca56:	f000 ba43 	b.w	800cee0 <__retarget_lock_release_recursive>
 800ca5a:	bf00      	nop
 800ca5c:	2000b85d 	.word	0x2000b85d

0800ca60 <__sinit>:
 800ca60:	b510      	push	{r4, lr}
 800ca62:	4604      	mov	r4, r0
 800ca64:	f7ff fff0 	bl	800ca48 <__sfp_lock_acquire>
 800ca68:	6a23      	ldr	r3, [r4, #32]
 800ca6a:	b11b      	cbz	r3, 800ca74 <__sinit+0x14>
 800ca6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca70:	f7ff bff0 	b.w	800ca54 <__sfp_lock_release>
 800ca74:	4b04      	ldr	r3, [pc, #16]	@ (800ca88 <__sinit+0x28>)
 800ca76:	6223      	str	r3, [r4, #32]
 800ca78:	4b04      	ldr	r3, [pc, #16]	@ (800ca8c <__sinit+0x2c>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d1f5      	bne.n	800ca6c <__sinit+0xc>
 800ca80:	f7ff ffc4 	bl	800ca0c <global_stdio_init.part.0>
 800ca84:	e7f2      	b.n	800ca6c <__sinit+0xc>
 800ca86:	bf00      	nop
 800ca88:	0800c9cd 	.word	0x0800c9cd
 800ca8c:	2000b854 	.word	0x2000b854

0800ca90 <_fwalk_sglue>:
 800ca90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca94:	4607      	mov	r7, r0
 800ca96:	4688      	mov	r8, r1
 800ca98:	4614      	mov	r4, r2
 800ca9a:	2600      	movs	r6, #0
 800ca9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800caa0:	f1b9 0901 	subs.w	r9, r9, #1
 800caa4:	d505      	bpl.n	800cab2 <_fwalk_sglue+0x22>
 800caa6:	6824      	ldr	r4, [r4, #0]
 800caa8:	2c00      	cmp	r4, #0
 800caaa:	d1f7      	bne.n	800ca9c <_fwalk_sglue+0xc>
 800caac:	4630      	mov	r0, r6
 800caae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cab2:	89ab      	ldrh	r3, [r5, #12]
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	d907      	bls.n	800cac8 <_fwalk_sglue+0x38>
 800cab8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cabc:	3301      	adds	r3, #1
 800cabe:	d003      	beq.n	800cac8 <_fwalk_sglue+0x38>
 800cac0:	4629      	mov	r1, r5
 800cac2:	4638      	mov	r0, r7
 800cac4:	47c0      	blx	r8
 800cac6:	4306      	orrs	r6, r0
 800cac8:	3568      	adds	r5, #104	@ 0x68
 800caca:	e7e9      	b.n	800caa0 <_fwalk_sglue+0x10>

0800cacc <iprintf>:
 800cacc:	b40f      	push	{r0, r1, r2, r3}
 800cace:	b507      	push	{r0, r1, r2, lr}
 800cad0:	4906      	ldr	r1, [pc, #24]	@ (800caec <iprintf+0x20>)
 800cad2:	ab04      	add	r3, sp, #16
 800cad4:	6808      	ldr	r0, [r1, #0]
 800cad6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cada:	6881      	ldr	r1, [r0, #8]
 800cadc:	9301      	str	r3, [sp, #4]
 800cade:	f001 fd67 	bl	800e5b0 <_vfiprintf_r>
 800cae2:	b003      	add	sp, #12
 800cae4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cae8:	b004      	add	sp, #16
 800caea:	4770      	bx	lr
 800caec:	2000001c 	.word	0x2000001c

0800caf0 <_puts_r>:
 800caf0:	6a03      	ldr	r3, [r0, #32]
 800caf2:	b570      	push	{r4, r5, r6, lr}
 800caf4:	6884      	ldr	r4, [r0, #8]
 800caf6:	4605      	mov	r5, r0
 800caf8:	460e      	mov	r6, r1
 800cafa:	b90b      	cbnz	r3, 800cb00 <_puts_r+0x10>
 800cafc:	f7ff ffb0 	bl	800ca60 <__sinit>
 800cb00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cb02:	07db      	lsls	r3, r3, #31
 800cb04:	d405      	bmi.n	800cb12 <_puts_r+0x22>
 800cb06:	89a3      	ldrh	r3, [r4, #12]
 800cb08:	0598      	lsls	r0, r3, #22
 800cb0a:	d402      	bmi.n	800cb12 <_puts_r+0x22>
 800cb0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb0e:	f000 f9e6 	bl	800cede <__retarget_lock_acquire_recursive>
 800cb12:	89a3      	ldrh	r3, [r4, #12]
 800cb14:	0719      	lsls	r1, r3, #28
 800cb16:	d502      	bpl.n	800cb1e <_puts_r+0x2e>
 800cb18:	6923      	ldr	r3, [r4, #16]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d135      	bne.n	800cb8a <_puts_r+0x9a>
 800cb1e:	4621      	mov	r1, r4
 800cb20:	4628      	mov	r0, r5
 800cb22:	f000 f8f9 	bl	800cd18 <__swsetup_r>
 800cb26:	b380      	cbz	r0, 800cb8a <_puts_r+0x9a>
 800cb28:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800cb2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cb2e:	07da      	lsls	r2, r3, #31
 800cb30:	d405      	bmi.n	800cb3e <_puts_r+0x4e>
 800cb32:	89a3      	ldrh	r3, [r4, #12]
 800cb34:	059b      	lsls	r3, r3, #22
 800cb36:	d402      	bmi.n	800cb3e <_puts_r+0x4e>
 800cb38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb3a:	f000 f9d1 	bl	800cee0 <__retarget_lock_release_recursive>
 800cb3e:	4628      	mov	r0, r5
 800cb40:	bd70      	pop	{r4, r5, r6, pc}
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	da04      	bge.n	800cb50 <_puts_r+0x60>
 800cb46:	69a2      	ldr	r2, [r4, #24]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	dc17      	bgt.n	800cb7c <_puts_r+0x8c>
 800cb4c:	290a      	cmp	r1, #10
 800cb4e:	d015      	beq.n	800cb7c <_puts_r+0x8c>
 800cb50:	6823      	ldr	r3, [r4, #0]
 800cb52:	1c5a      	adds	r2, r3, #1
 800cb54:	6022      	str	r2, [r4, #0]
 800cb56:	7019      	strb	r1, [r3, #0]
 800cb58:	68a3      	ldr	r3, [r4, #8]
 800cb5a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cb5e:	3b01      	subs	r3, #1
 800cb60:	60a3      	str	r3, [r4, #8]
 800cb62:	2900      	cmp	r1, #0
 800cb64:	d1ed      	bne.n	800cb42 <_puts_r+0x52>
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	da11      	bge.n	800cb8e <_puts_r+0x9e>
 800cb6a:	4622      	mov	r2, r4
 800cb6c:	210a      	movs	r1, #10
 800cb6e:	4628      	mov	r0, r5
 800cb70:	f000 f893 	bl	800cc9a <__swbuf_r>
 800cb74:	3001      	adds	r0, #1
 800cb76:	d0d7      	beq.n	800cb28 <_puts_r+0x38>
 800cb78:	250a      	movs	r5, #10
 800cb7a:	e7d7      	b.n	800cb2c <_puts_r+0x3c>
 800cb7c:	4622      	mov	r2, r4
 800cb7e:	4628      	mov	r0, r5
 800cb80:	f000 f88b 	bl	800cc9a <__swbuf_r>
 800cb84:	3001      	adds	r0, #1
 800cb86:	d1e7      	bne.n	800cb58 <_puts_r+0x68>
 800cb88:	e7ce      	b.n	800cb28 <_puts_r+0x38>
 800cb8a:	3e01      	subs	r6, #1
 800cb8c:	e7e4      	b.n	800cb58 <_puts_r+0x68>
 800cb8e:	6823      	ldr	r3, [r4, #0]
 800cb90:	1c5a      	adds	r2, r3, #1
 800cb92:	6022      	str	r2, [r4, #0]
 800cb94:	220a      	movs	r2, #10
 800cb96:	701a      	strb	r2, [r3, #0]
 800cb98:	e7ee      	b.n	800cb78 <_puts_r+0x88>
	...

0800cb9c <puts>:
 800cb9c:	4b02      	ldr	r3, [pc, #8]	@ (800cba8 <puts+0xc>)
 800cb9e:	4601      	mov	r1, r0
 800cba0:	6818      	ldr	r0, [r3, #0]
 800cba2:	f7ff bfa5 	b.w	800caf0 <_puts_r>
 800cba6:	bf00      	nop
 800cba8:	2000001c 	.word	0x2000001c

0800cbac <sniprintf>:
 800cbac:	b40c      	push	{r2, r3}
 800cbae:	b530      	push	{r4, r5, lr}
 800cbb0:	4b17      	ldr	r3, [pc, #92]	@ (800cc10 <sniprintf+0x64>)
 800cbb2:	1e0c      	subs	r4, r1, #0
 800cbb4:	681d      	ldr	r5, [r3, #0]
 800cbb6:	b09d      	sub	sp, #116	@ 0x74
 800cbb8:	da08      	bge.n	800cbcc <sniprintf+0x20>
 800cbba:	238b      	movs	r3, #139	@ 0x8b
 800cbbc:	602b      	str	r3, [r5, #0]
 800cbbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cbc2:	b01d      	add	sp, #116	@ 0x74
 800cbc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cbc8:	b002      	add	sp, #8
 800cbca:	4770      	bx	lr
 800cbcc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cbd0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cbd4:	bf14      	ite	ne
 800cbd6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800cbda:	4623      	moveq	r3, r4
 800cbdc:	9304      	str	r3, [sp, #16]
 800cbde:	9307      	str	r3, [sp, #28]
 800cbe0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cbe4:	9002      	str	r0, [sp, #8]
 800cbe6:	9006      	str	r0, [sp, #24]
 800cbe8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cbec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cbee:	ab21      	add	r3, sp, #132	@ 0x84
 800cbf0:	a902      	add	r1, sp, #8
 800cbf2:	4628      	mov	r0, r5
 800cbf4:	9301      	str	r3, [sp, #4]
 800cbf6:	f001 fbb5 	bl	800e364 <_svfiprintf_r>
 800cbfa:	1c43      	adds	r3, r0, #1
 800cbfc:	bfbc      	itt	lt
 800cbfe:	238b      	movlt	r3, #139	@ 0x8b
 800cc00:	602b      	strlt	r3, [r5, #0]
 800cc02:	2c00      	cmp	r4, #0
 800cc04:	d0dd      	beq.n	800cbc2 <sniprintf+0x16>
 800cc06:	9b02      	ldr	r3, [sp, #8]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	701a      	strb	r2, [r3, #0]
 800cc0c:	e7d9      	b.n	800cbc2 <sniprintf+0x16>
 800cc0e:	bf00      	nop
 800cc10:	2000001c 	.word	0x2000001c

0800cc14 <__sread>:
 800cc14:	b510      	push	{r4, lr}
 800cc16:	460c      	mov	r4, r1
 800cc18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc1c:	f000 f900 	bl	800ce20 <_read_r>
 800cc20:	2800      	cmp	r0, #0
 800cc22:	bfab      	itete	ge
 800cc24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cc26:	89a3      	ldrhlt	r3, [r4, #12]
 800cc28:	181b      	addge	r3, r3, r0
 800cc2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cc2e:	bfac      	ite	ge
 800cc30:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cc32:	81a3      	strhlt	r3, [r4, #12]
 800cc34:	bd10      	pop	{r4, pc}

0800cc36 <__swrite>:
 800cc36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc3a:	461f      	mov	r7, r3
 800cc3c:	898b      	ldrh	r3, [r1, #12]
 800cc3e:	05db      	lsls	r3, r3, #23
 800cc40:	4605      	mov	r5, r0
 800cc42:	460c      	mov	r4, r1
 800cc44:	4616      	mov	r6, r2
 800cc46:	d505      	bpl.n	800cc54 <__swrite+0x1e>
 800cc48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc4c:	2302      	movs	r3, #2
 800cc4e:	2200      	movs	r2, #0
 800cc50:	f000 f8d4 	bl	800cdfc <_lseek_r>
 800cc54:	89a3      	ldrh	r3, [r4, #12]
 800cc56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cc5e:	81a3      	strh	r3, [r4, #12]
 800cc60:	4632      	mov	r2, r6
 800cc62:	463b      	mov	r3, r7
 800cc64:	4628      	mov	r0, r5
 800cc66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc6a:	f000 b8fb 	b.w	800ce64 <_write_r>

0800cc6e <__sseek>:
 800cc6e:	b510      	push	{r4, lr}
 800cc70:	460c      	mov	r4, r1
 800cc72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc76:	f000 f8c1 	bl	800cdfc <_lseek_r>
 800cc7a:	1c43      	adds	r3, r0, #1
 800cc7c:	89a3      	ldrh	r3, [r4, #12]
 800cc7e:	bf15      	itete	ne
 800cc80:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cc82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cc86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cc8a:	81a3      	strheq	r3, [r4, #12]
 800cc8c:	bf18      	it	ne
 800cc8e:	81a3      	strhne	r3, [r4, #12]
 800cc90:	bd10      	pop	{r4, pc}

0800cc92 <__sclose>:
 800cc92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc96:	f000 b8a1 	b.w	800cddc <_close_r>

0800cc9a <__swbuf_r>:
 800cc9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc9c:	460e      	mov	r6, r1
 800cc9e:	4614      	mov	r4, r2
 800cca0:	4605      	mov	r5, r0
 800cca2:	b118      	cbz	r0, 800ccac <__swbuf_r+0x12>
 800cca4:	6a03      	ldr	r3, [r0, #32]
 800cca6:	b90b      	cbnz	r3, 800ccac <__swbuf_r+0x12>
 800cca8:	f7ff feda 	bl	800ca60 <__sinit>
 800ccac:	69a3      	ldr	r3, [r4, #24]
 800ccae:	60a3      	str	r3, [r4, #8]
 800ccb0:	89a3      	ldrh	r3, [r4, #12]
 800ccb2:	071a      	lsls	r2, r3, #28
 800ccb4:	d501      	bpl.n	800ccba <__swbuf_r+0x20>
 800ccb6:	6923      	ldr	r3, [r4, #16]
 800ccb8:	b943      	cbnz	r3, 800cccc <__swbuf_r+0x32>
 800ccba:	4621      	mov	r1, r4
 800ccbc:	4628      	mov	r0, r5
 800ccbe:	f000 f82b 	bl	800cd18 <__swsetup_r>
 800ccc2:	b118      	cbz	r0, 800cccc <__swbuf_r+0x32>
 800ccc4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ccc8:	4638      	mov	r0, r7
 800ccca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cccc:	6823      	ldr	r3, [r4, #0]
 800ccce:	6922      	ldr	r2, [r4, #16]
 800ccd0:	1a98      	subs	r0, r3, r2
 800ccd2:	6963      	ldr	r3, [r4, #20]
 800ccd4:	b2f6      	uxtb	r6, r6
 800ccd6:	4283      	cmp	r3, r0
 800ccd8:	4637      	mov	r7, r6
 800ccda:	dc05      	bgt.n	800cce8 <__swbuf_r+0x4e>
 800ccdc:	4621      	mov	r1, r4
 800ccde:	4628      	mov	r0, r5
 800cce0:	f001 fe02 	bl	800e8e8 <_fflush_r>
 800cce4:	2800      	cmp	r0, #0
 800cce6:	d1ed      	bne.n	800ccc4 <__swbuf_r+0x2a>
 800cce8:	68a3      	ldr	r3, [r4, #8]
 800ccea:	3b01      	subs	r3, #1
 800ccec:	60a3      	str	r3, [r4, #8]
 800ccee:	6823      	ldr	r3, [r4, #0]
 800ccf0:	1c5a      	adds	r2, r3, #1
 800ccf2:	6022      	str	r2, [r4, #0]
 800ccf4:	701e      	strb	r6, [r3, #0]
 800ccf6:	6962      	ldr	r2, [r4, #20]
 800ccf8:	1c43      	adds	r3, r0, #1
 800ccfa:	429a      	cmp	r2, r3
 800ccfc:	d004      	beq.n	800cd08 <__swbuf_r+0x6e>
 800ccfe:	89a3      	ldrh	r3, [r4, #12]
 800cd00:	07db      	lsls	r3, r3, #31
 800cd02:	d5e1      	bpl.n	800ccc8 <__swbuf_r+0x2e>
 800cd04:	2e0a      	cmp	r6, #10
 800cd06:	d1df      	bne.n	800ccc8 <__swbuf_r+0x2e>
 800cd08:	4621      	mov	r1, r4
 800cd0a:	4628      	mov	r0, r5
 800cd0c:	f001 fdec 	bl	800e8e8 <_fflush_r>
 800cd10:	2800      	cmp	r0, #0
 800cd12:	d0d9      	beq.n	800ccc8 <__swbuf_r+0x2e>
 800cd14:	e7d6      	b.n	800ccc4 <__swbuf_r+0x2a>
	...

0800cd18 <__swsetup_r>:
 800cd18:	b538      	push	{r3, r4, r5, lr}
 800cd1a:	4b29      	ldr	r3, [pc, #164]	@ (800cdc0 <__swsetup_r+0xa8>)
 800cd1c:	4605      	mov	r5, r0
 800cd1e:	6818      	ldr	r0, [r3, #0]
 800cd20:	460c      	mov	r4, r1
 800cd22:	b118      	cbz	r0, 800cd2c <__swsetup_r+0x14>
 800cd24:	6a03      	ldr	r3, [r0, #32]
 800cd26:	b90b      	cbnz	r3, 800cd2c <__swsetup_r+0x14>
 800cd28:	f7ff fe9a 	bl	800ca60 <__sinit>
 800cd2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd30:	0719      	lsls	r1, r3, #28
 800cd32:	d422      	bmi.n	800cd7a <__swsetup_r+0x62>
 800cd34:	06da      	lsls	r2, r3, #27
 800cd36:	d407      	bmi.n	800cd48 <__swsetup_r+0x30>
 800cd38:	2209      	movs	r2, #9
 800cd3a:	602a      	str	r2, [r5, #0]
 800cd3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd40:	81a3      	strh	r3, [r4, #12]
 800cd42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cd46:	e033      	b.n	800cdb0 <__swsetup_r+0x98>
 800cd48:	0758      	lsls	r0, r3, #29
 800cd4a:	d512      	bpl.n	800cd72 <__swsetup_r+0x5a>
 800cd4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cd4e:	b141      	cbz	r1, 800cd62 <__swsetup_r+0x4a>
 800cd50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cd54:	4299      	cmp	r1, r3
 800cd56:	d002      	beq.n	800cd5e <__swsetup_r+0x46>
 800cd58:	4628      	mov	r0, r5
 800cd5a:	f7ff f8a5 	bl	800bea8 <_free_r>
 800cd5e:	2300      	movs	r3, #0
 800cd60:	6363      	str	r3, [r4, #52]	@ 0x34
 800cd62:	89a3      	ldrh	r3, [r4, #12]
 800cd64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cd68:	81a3      	strh	r3, [r4, #12]
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	6063      	str	r3, [r4, #4]
 800cd6e:	6923      	ldr	r3, [r4, #16]
 800cd70:	6023      	str	r3, [r4, #0]
 800cd72:	89a3      	ldrh	r3, [r4, #12]
 800cd74:	f043 0308 	orr.w	r3, r3, #8
 800cd78:	81a3      	strh	r3, [r4, #12]
 800cd7a:	6923      	ldr	r3, [r4, #16]
 800cd7c:	b94b      	cbnz	r3, 800cd92 <__swsetup_r+0x7a>
 800cd7e:	89a3      	ldrh	r3, [r4, #12]
 800cd80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cd84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd88:	d003      	beq.n	800cd92 <__swsetup_r+0x7a>
 800cd8a:	4621      	mov	r1, r4
 800cd8c:	4628      	mov	r0, r5
 800cd8e:	f001 fdf9 	bl	800e984 <__smakebuf_r>
 800cd92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd96:	f013 0201 	ands.w	r2, r3, #1
 800cd9a:	d00a      	beq.n	800cdb2 <__swsetup_r+0x9a>
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	60a2      	str	r2, [r4, #8]
 800cda0:	6962      	ldr	r2, [r4, #20]
 800cda2:	4252      	negs	r2, r2
 800cda4:	61a2      	str	r2, [r4, #24]
 800cda6:	6922      	ldr	r2, [r4, #16]
 800cda8:	b942      	cbnz	r2, 800cdbc <__swsetup_r+0xa4>
 800cdaa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cdae:	d1c5      	bne.n	800cd3c <__swsetup_r+0x24>
 800cdb0:	bd38      	pop	{r3, r4, r5, pc}
 800cdb2:	0799      	lsls	r1, r3, #30
 800cdb4:	bf58      	it	pl
 800cdb6:	6962      	ldrpl	r2, [r4, #20]
 800cdb8:	60a2      	str	r2, [r4, #8]
 800cdba:	e7f4      	b.n	800cda6 <__swsetup_r+0x8e>
 800cdbc:	2000      	movs	r0, #0
 800cdbe:	e7f7      	b.n	800cdb0 <__swsetup_r+0x98>
 800cdc0:	2000001c 	.word	0x2000001c

0800cdc4 <memset>:
 800cdc4:	4402      	add	r2, r0
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	4293      	cmp	r3, r2
 800cdca:	d100      	bne.n	800cdce <memset+0xa>
 800cdcc:	4770      	bx	lr
 800cdce:	f803 1b01 	strb.w	r1, [r3], #1
 800cdd2:	e7f9      	b.n	800cdc8 <memset+0x4>

0800cdd4 <_localeconv_r>:
 800cdd4:	4800      	ldr	r0, [pc, #0]	@ (800cdd8 <_localeconv_r+0x4>)
 800cdd6:	4770      	bx	lr
 800cdd8:	2000015c 	.word	0x2000015c

0800cddc <_close_r>:
 800cddc:	b538      	push	{r3, r4, r5, lr}
 800cdde:	4d06      	ldr	r5, [pc, #24]	@ (800cdf8 <_close_r+0x1c>)
 800cde0:	2300      	movs	r3, #0
 800cde2:	4604      	mov	r4, r0
 800cde4:	4608      	mov	r0, r1
 800cde6:	602b      	str	r3, [r5, #0]
 800cde8:	f7f6 fb48 	bl	800347c <_close>
 800cdec:	1c43      	adds	r3, r0, #1
 800cdee:	d102      	bne.n	800cdf6 <_close_r+0x1a>
 800cdf0:	682b      	ldr	r3, [r5, #0]
 800cdf2:	b103      	cbz	r3, 800cdf6 <_close_r+0x1a>
 800cdf4:	6023      	str	r3, [r4, #0]
 800cdf6:	bd38      	pop	{r3, r4, r5, pc}
 800cdf8:	2000b858 	.word	0x2000b858

0800cdfc <_lseek_r>:
 800cdfc:	b538      	push	{r3, r4, r5, lr}
 800cdfe:	4d07      	ldr	r5, [pc, #28]	@ (800ce1c <_lseek_r+0x20>)
 800ce00:	4604      	mov	r4, r0
 800ce02:	4608      	mov	r0, r1
 800ce04:	4611      	mov	r1, r2
 800ce06:	2200      	movs	r2, #0
 800ce08:	602a      	str	r2, [r5, #0]
 800ce0a:	461a      	mov	r2, r3
 800ce0c:	f7f6 fb5d 	bl	80034ca <_lseek>
 800ce10:	1c43      	adds	r3, r0, #1
 800ce12:	d102      	bne.n	800ce1a <_lseek_r+0x1e>
 800ce14:	682b      	ldr	r3, [r5, #0]
 800ce16:	b103      	cbz	r3, 800ce1a <_lseek_r+0x1e>
 800ce18:	6023      	str	r3, [r4, #0]
 800ce1a:	bd38      	pop	{r3, r4, r5, pc}
 800ce1c:	2000b858 	.word	0x2000b858

0800ce20 <_read_r>:
 800ce20:	b538      	push	{r3, r4, r5, lr}
 800ce22:	4d07      	ldr	r5, [pc, #28]	@ (800ce40 <_read_r+0x20>)
 800ce24:	4604      	mov	r4, r0
 800ce26:	4608      	mov	r0, r1
 800ce28:	4611      	mov	r1, r2
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	602a      	str	r2, [r5, #0]
 800ce2e:	461a      	mov	r2, r3
 800ce30:	f7f6 fb07 	bl	8003442 <_read>
 800ce34:	1c43      	adds	r3, r0, #1
 800ce36:	d102      	bne.n	800ce3e <_read_r+0x1e>
 800ce38:	682b      	ldr	r3, [r5, #0]
 800ce3a:	b103      	cbz	r3, 800ce3e <_read_r+0x1e>
 800ce3c:	6023      	str	r3, [r4, #0]
 800ce3e:	bd38      	pop	{r3, r4, r5, pc}
 800ce40:	2000b858 	.word	0x2000b858

0800ce44 <_sbrk_r>:
 800ce44:	b538      	push	{r3, r4, r5, lr}
 800ce46:	4d06      	ldr	r5, [pc, #24]	@ (800ce60 <_sbrk_r+0x1c>)
 800ce48:	2300      	movs	r3, #0
 800ce4a:	4604      	mov	r4, r0
 800ce4c:	4608      	mov	r0, r1
 800ce4e:	602b      	str	r3, [r5, #0]
 800ce50:	f7f6 fb48 	bl	80034e4 <_sbrk>
 800ce54:	1c43      	adds	r3, r0, #1
 800ce56:	d102      	bne.n	800ce5e <_sbrk_r+0x1a>
 800ce58:	682b      	ldr	r3, [r5, #0]
 800ce5a:	b103      	cbz	r3, 800ce5e <_sbrk_r+0x1a>
 800ce5c:	6023      	str	r3, [r4, #0]
 800ce5e:	bd38      	pop	{r3, r4, r5, pc}
 800ce60:	2000b858 	.word	0x2000b858

0800ce64 <_write_r>:
 800ce64:	b538      	push	{r3, r4, r5, lr}
 800ce66:	4d07      	ldr	r5, [pc, #28]	@ (800ce84 <_write_r+0x20>)
 800ce68:	4604      	mov	r4, r0
 800ce6a:	4608      	mov	r0, r1
 800ce6c:	4611      	mov	r1, r2
 800ce6e:	2200      	movs	r2, #0
 800ce70:	602a      	str	r2, [r5, #0]
 800ce72:	461a      	mov	r2, r3
 800ce74:	f7f6 fb7e 	bl	8003574 <_write>
 800ce78:	1c43      	adds	r3, r0, #1
 800ce7a:	d102      	bne.n	800ce82 <_write_r+0x1e>
 800ce7c:	682b      	ldr	r3, [r5, #0]
 800ce7e:	b103      	cbz	r3, 800ce82 <_write_r+0x1e>
 800ce80:	6023      	str	r3, [r4, #0]
 800ce82:	bd38      	pop	{r3, r4, r5, pc}
 800ce84:	2000b858 	.word	0x2000b858

0800ce88 <__errno>:
 800ce88:	4b01      	ldr	r3, [pc, #4]	@ (800ce90 <__errno+0x8>)
 800ce8a:	6818      	ldr	r0, [r3, #0]
 800ce8c:	4770      	bx	lr
 800ce8e:	bf00      	nop
 800ce90:	2000001c 	.word	0x2000001c

0800ce94 <__libc_init_array>:
 800ce94:	b570      	push	{r4, r5, r6, lr}
 800ce96:	4d0d      	ldr	r5, [pc, #52]	@ (800cecc <__libc_init_array+0x38>)
 800ce98:	4c0d      	ldr	r4, [pc, #52]	@ (800ced0 <__libc_init_array+0x3c>)
 800ce9a:	1b64      	subs	r4, r4, r5
 800ce9c:	10a4      	asrs	r4, r4, #2
 800ce9e:	2600      	movs	r6, #0
 800cea0:	42a6      	cmp	r6, r4
 800cea2:	d109      	bne.n	800ceb8 <__libc_init_array+0x24>
 800cea4:	4d0b      	ldr	r5, [pc, #44]	@ (800ced4 <__libc_init_array+0x40>)
 800cea6:	4c0c      	ldr	r4, [pc, #48]	@ (800ced8 <__libc_init_array+0x44>)
 800cea8:	f003 f8b6 	bl	8010018 <_init>
 800ceac:	1b64      	subs	r4, r4, r5
 800ceae:	10a4      	asrs	r4, r4, #2
 800ceb0:	2600      	movs	r6, #0
 800ceb2:	42a6      	cmp	r6, r4
 800ceb4:	d105      	bne.n	800cec2 <__libc_init_array+0x2e>
 800ceb6:	bd70      	pop	{r4, r5, r6, pc}
 800ceb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cebc:	4798      	blx	r3
 800cebe:	3601      	adds	r6, #1
 800cec0:	e7ee      	b.n	800cea0 <__libc_init_array+0xc>
 800cec2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cec6:	4798      	blx	r3
 800cec8:	3601      	adds	r6, #1
 800ceca:	e7f2      	b.n	800ceb2 <__libc_init_array+0x1e>
 800cecc:	08010b80 	.word	0x08010b80
 800ced0:	08010b80 	.word	0x08010b80
 800ced4:	08010b80 	.word	0x08010b80
 800ced8:	08010b84 	.word	0x08010b84

0800cedc <__retarget_lock_init_recursive>:
 800cedc:	4770      	bx	lr

0800cede <__retarget_lock_acquire_recursive>:
 800cede:	4770      	bx	lr

0800cee0 <__retarget_lock_release_recursive>:
 800cee0:	4770      	bx	lr

0800cee2 <memcpy>:
 800cee2:	440a      	add	r2, r1
 800cee4:	4291      	cmp	r1, r2
 800cee6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ceea:	d100      	bne.n	800ceee <memcpy+0xc>
 800ceec:	4770      	bx	lr
 800ceee:	b510      	push	{r4, lr}
 800cef0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cef4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cef8:	4291      	cmp	r1, r2
 800cefa:	d1f9      	bne.n	800cef0 <memcpy+0xe>
 800cefc:	bd10      	pop	{r4, pc}

0800cefe <quorem>:
 800cefe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf02:	6903      	ldr	r3, [r0, #16]
 800cf04:	690c      	ldr	r4, [r1, #16]
 800cf06:	42a3      	cmp	r3, r4
 800cf08:	4607      	mov	r7, r0
 800cf0a:	db7e      	blt.n	800d00a <quorem+0x10c>
 800cf0c:	3c01      	subs	r4, #1
 800cf0e:	f101 0814 	add.w	r8, r1, #20
 800cf12:	00a3      	lsls	r3, r4, #2
 800cf14:	f100 0514 	add.w	r5, r0, #20
 800cf18:	9300      	str	r3, [sp, #0]
 800cf1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cf1e:	9301      	str	r3, [sp, #4]
 800cf20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cf24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cf28:	3301      	adds	r3, #1
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cf30:	fbb2 f6f3 	udiv	r6, r2, r3
 800cf34:	d32e      	bcc.n	800cf94 <quorem+0x96>
 800cf36:	f04f 0a00 	mov.w	sl, #0
 800cf3a:	46c4      	mov	ip, r8
 800cf3c:	46ae      	mov	lr, r5
 800cf3e:	46d3      	mov	fp, sl
 800cf40:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cf44:	b298      	uxth	r0, r3
 800cf46:	fb06 a000 	mla	r0, r6, r0, sl
 800cf4a:	0c02      	lsrs	r2, r0, #16
 800cf4c:	0c1b      	lsrs	r3, r3, #16
 800cf4e:	fb06 2303 	mla	r3, r6, r3, r2
 800cf52:	f8de 2000 	ldr.w	r2, [lr]
 800cf56:	b280      	uxth	r0, r0
 800cf58:	b292      	uxth	r2, r2
 800cf5a:	1a12      	subs	r2, r2, r0
 800cf5c:	445a      	add	r2, fp
 800cf5e:	f8de 0000 	ldr.w	r0, [lr]
 800cf62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf66:	b29b      	uxth	r3, r3
 800cf68:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cf6c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cf70:	b292      	uxth	r2, r2
 800cf72:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cf76:	45e1      	cmp	r9, ip
 800cf78:	f84e 2b04 	str.w	r2, [lr], #4
 800cf7c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cf80:	d2de      	bcs.n	800cf40 <quorem+0x42>
 800cf82:	9b00      	ldr	r3, [sp, #0]
 800cf84:	58eb      	ldr	r3, [r5, r3]
 800cf86:	b92b      	cbnz	r3, 800cf94 <quorem+0x96>
 800cf88:	9b01      	ldr	r3, [sp, #4]
 800cf8a:	3b04      	subs	r3, #4
 800cf8c:	429d      	cmp	r5, r3
 800cf8e:	461a      	mov	r2, r3
 800cf90:	d32f      	bcc.n	800cff2 <quorem+0xf4>
 800cf92:	613c      	str	r4, [r7, #16]
 800cf94:	4638      	mov	r0, r7
 800cf96:	f001 f881 	bl	800e09c <__mcmp>
 800cf9a:	2800      	cmp	r0, #0
 800cf9c:	db25      	blt.n	800cfea <quorem+0xec>
 800cf9e:	4629      	mov	r1, r5
 800cfa0:	2000      	movs	r0, #0
 800cfa2:	f858 2b04 	ldr.w	r2, [r8], #4
 800cfa6:	f8d1 c000 	ldr.w	ip, [r1]
 800cfaa:	fa1f fe82 	uxth.w	lr, r2
 800cfae:	fa1f f38c 	uxth.w	r3, ip
 800cfb2:	eba3 030e 	sub.w	r3, r3, lr
 800cfb6:	4403      	add	r3, r0
 800cfb8:	0c12      	lsrs	r2, r2, #16
 800cfba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cfbe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cfc2:	b29b      	uxth	r3, r3
 800cfc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cfc8:	45c1      	cmp	r9, r8
 800cfca:	f841 3b04 	str.w	r3, [r1], #4
 800cfce:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cfd2:	d2e6      	bcs.n	800cfa2 <quorem+0xa4>
 800cfd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cfd8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cfdc:	b922      	cbnz	r2, 800cfe8 <quorem+0xea>
 800cfde:	3b04      	subs	r3, #4
 800cfe0:	429d      	cmp	r5, r3
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	d30b      	bcc.n	800cffe <quorem+0x100>
 800cfe6:	613c      	str	r4, [r7, #16]
 800cfe8:	3601      	adds	r6, #1
 800cfea:	4630      	mov	r0, r6
 800cfec:	b003      	add	sp, #12
 800cfee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cff2:	6812      	ldr	r2, [r2, #0]
 800cff4:	3b04      	subs	r3, #4
 800cff6:	2a00      	cmp	r2, #0
 800cff8:	d1cb      	bne.n	800cf92 <quorem+0x94>
 800cffa:	3c01      	subs	r4, #1
 800cffc:	e7c6      	b.n	800cf8c <quorem+0x8e>
 800cffe:	6812      	ldr	r2, [r2, #0]
 800d000:	3b04      	subs	r3, #4
 800d002:	2a00      	cmp	r2, #0
 800d004:	d1ef      	bne.n	800cfe6 <quorem+0xe8>
 800d006:	3c01      	subs	r4, #1
 800d008:	e7ea      	b.n	800cfe0 <quorem+0xe2>
 800d00a:	2000      	movs	r0, #0
 800d00c:	e7ee      	b.n	800cfec <quorem+0xee>
	...

0800d010 <_dtoa_r>:
 800d010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d014:	69c7      	ldr	r7, [r0, #28]
 800d016:	b099      	sub	sp, #100	@ 0x64
 800d018:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d01c:	ec55 4b10 	vmov	r4, r5, d0
 800d020:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d022:	9109      	str	r1, [sp, #36]	@ 0x24
 800d024:	4683      	mov	fp, r0
 800d026:	920e      	str	r2, [sp, #56]	@ 0x38
 800d028:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d02a:	b97f      	cbnz	r7, 800d04c <_dtoa_r+0x3c>
 800d02c:	2010      	movs	r0, #16
 800d02e:	f000 fdb3 	bl	800db98 <malloc>
 800d032:	4602      	mov	r2, r0
 800d034:	f8cb 001c 	str.w	r0, [fp, #28]
 800d038:	b920      	cbnz	r0, 800d044 <_dtoa_r+0x34>
 800d03a:	4ba7      	ldr	r3, [pc, #668]	@ (800d2d8 <_dtoa_r+0x2c8>)
 800d03c:	21ef      	movs	r1, #239	@ 0xef
 800d03e:	48a7      	ldr	r0, [pc, #668]	@ (800d2dc <_dtoa_r+0x2cc>)
 800d040:	f001 fd18 	bl	800ea74 <__assert_func>
 800d044:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d048:	6007      	str	r7, [r0, #0]
 800d04a:	60c7      	str	r7, [r0, #12]
 800d04c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d050:	6819      	ldr	r1, [r3, #0]
 800d052:	b159      	cbz	r1, 800d06c <_dtoa_r+0x5c>
 800d054:	685a      	ldr	r2, [r3, #4]
 800d056:	604a      	str	r2, [r1, #4]
 800d058:	2301      	movs	r3, #1
 800d05a:	4093      	lsls	r3, r2
 800d05c:	608b      	str	r3, [r1, #8]
 800d05e:	4658      	mov	r0, fp
 800d060:	f000 fde2 	bl	800dc28 <_Bfree>
 800d064:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d068:	2200      	movs	r2, #0
 800d06a:	601a      	str	r2, [r3, #0]
 800d06c:	1e2b      	subs	r3, r5, #0
 800d06e:	bfb9      	ittee	lt
 800d070:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d074:	9303      	strlt	r3, [sp, #12]
 800d076:	2300      	movge	r3, #0
 800d078:	6033      	strge	r3, [r6, #0]
 800d07a:	9f03      	ldr	r7, [sp, #12]
 800d07c:	4b98      	ldr	r3, [pc, #608]	@ (800d2e0 <_dtoa_r+0x2d0>)
 800d07e:	bfbc      	itt	lt
 800d080:	2201      	movlt	r2, #1
 800d082:	6032      	strlt	r2, [r6, #0]
 800d084:	43bb      	bics	r3, r7
 800d086:	d112      	bne.n	800d0ae <_dtoa_r+0x9e>
 800d088:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d08a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d08e:	6013      	str	r3, [r2, #0]
 800d090:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d094:	4323      	orrs	r3, r4
 800d096:	f000 854d 	beq.w	800db34 <_dtoa_r+0xb24>
 800d09a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d09c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d2f4 <_dtoa_r+0x2e4>
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	f000 854f 	beq.w	800db44 <_dtoa_r+0xb34>
 800d0a6:	f10a 0303 	add.w	r3, sl, #3
 800d0aa:	f000 bd49 	b.w	800db40 <_dtoa_r+0xb30>
 800d0ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	ec51 0b17 	vmov	r0, r1, d7
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d0be:	f7f3 fd23 	bl	8000b08 <__aeabi_dcmpeq>
 800d0c2:	4680      	mov	r8, r0
 800d0c4:	b158      	cbz	r0, 800d0de <_dtoa_r+0xce>
 800d0c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	6013      	str	r3, [r2, #0]
 800d0cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d0ce:	b113      	cbz	r3, 800d0d6 <_dtoa_r+0xc6>
 800d0d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d0d2:	4b84      	ldr	r3, [pc, #528]	@ (800d2e4 <_dtoa_r+0x2d4>)
 800d0d4:	6013      	str	r3, [r2, #0]
 800d0d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d2f8 <_dtoa_r+0x2e8>
 800d0da:	f000 bd33 	b.w	800db44 <_dtoa_r+0xb34>
 800d0de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d0e2:	aa16      	add	r2, sp, #88	@ 0x58
 800d0e4:	a917      	add	r1, sp, #92	@ 0x5c
 800d0e6:	4658      	mov	r0, fp
 800d0e8:	f001 f888 	bl	800e1fc <__d2b>
 800d0ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d0f0:	4681      	mov	r9, r0
 800d0f2:	2e00      	cmp	r6, #0
 800d0f4:	d077      	beq.n	800d1e6 <_dtoa_r+0x1d6>
 800d0f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d0f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d0fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d100:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d104:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d108:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d10c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d110:	4619      	mov	r1, r3
 800d112:	2200      	movs	r2, #0
 800d114:	4b74      	ldr	r3, [pc, #464]	@ (800d2e8 <_dtoa_r+0x2d8>)
 800d116:	f7f3 f8d7 	bl	80002c8 <__aeabi_dsub>
 800d11a:	a369      	add	r3, pc, #420	@ (adr r3, 800d2c0 <_dtoa_r+0x2b0>)
 800d11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d120:	f7f3 fa8a 	bl	8000638 <__aeabi_dmul>
 800d124:	a368      	add	r3, pc, #416	@ (adr r3, 800d2c8 <_dtoa_r+0x2b8>)
 800d126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d12a:	f7f3 f8cf 	bl	80002cc <__adddf3>
 800d12e:	4604      	mov	r4, r0
 800d130:	4630      	mov	r0, r6
 800d132:	460d      	mov	r5, r1
 800d134:	f7f3 fa16 	bl	8000564 <__aeabi_i2d>
 800d138:	a365      	add	r3, pc, #404	@ (adr r3, 800d2d0 <_dtoa_r+0x2c0>)
 800d13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d13e:	f7f3 fa7b 	bl	8000638 <__aeabi_dmul>
 800d142:	4602      	mov	r2, r0
 800d144:	460b      	mov	r3, r1
 800d146:	4620      	mov	r0, r4
 800d148:	4629      	mov	r1, r5
 800d14a:	f7f3 f8bf 	bl	80002cc <__adddf3>
 800d14e:	4604      	mov	r4, r0
 800d150:	460d      	mov	r5, r1
 800d152:	f7f3 fd21 	bl	8000b98 <__aeabi_d2iz>
 800d156:	2200      	movs	r2, #0
 800d158:	4607      	mov	r7, r0
 800d15a:	2300      	movs	r3, #0
 800d15c:	4620      	mov	r0, r4
 800d15e:	4629      	mov	r1, r5
 800d160:	f7f3 fcdc 	bl	8000b1c <__aeabi_dcmplt>
 800d164:	b140      	cbz	r0, 800d178 <_dtoa_r+0x168>
 800d166:	4638      	mov	r0, r7
 800d168:	f7f3 f9fc 	bl	8000564 <__aeabi_i2d>
 800d16c:	4622      	mov	r2, r4
 800d16e:	462b      	mov	r3, r5
 800d170:	f7f3 fcca 	bl	8000b08 <__aeabi_dcmpeq>
 800d174:	b900      	cbnz	r0, 800d178 <_dtoa_r+0x168>
 800d176:	3f01      	subs	r7, #1
 800d178:	2f16      	cmp	r7, #22
 800d17a:	d851      	bhi.n	800d220 <_dtoa_r+0x210>
 800d17c:	4b5b      	ldr	r3, [pc, #364]	@ (800d2ec <_dtoa_r+0x2dc>)
 800d17e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d186:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d18a:	f7f3 fcc7 	bl	8000b1c <__aeabi_dcmplt>
 800d18e:	2800      	cmp	r0, #0
 800d190:	d048      	beq.n	800d224 <_dtoa_r+0x214>
 800d192:	3f01      	subs	r7, #1
 800d194:	2300      	movs	r3, #0
 800d196:	9312      	str	r3, [sp, #72]	@ 0x48
 800d198:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d19a:	1b9b      	subs	r3, r3, r6
 800d19c:	1e5a      	subs	r2, r3, #1
 800d19e:	bf44      	itt	mi
 800d1a0:	f1c3 0801 	rsbmi	r8, r3, #1
 800d1a4:	2300      	movmi	r3, #0
 800d1a6:	9208      	str	r2, [sp, #32]
 800d1a8:	bf54      	ite	pl
 800d1aa:	f04f 0800 	movpl.w	r8, #0
 800d1ae:	9308      	strmi	r3, [sp, #32]
 800d1b0:	2f00      	cmp	r7, #0
 800d1b2:	db39      	blt.n	800d228 <_dtoa_r+0x218>
 800d1b4:	9b08      	ldr	r3, [sp, #32]
 800d1b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d1b8:	443b      	add	r3, r7
 800d1ba:	9308      	str	r3, [sp, #32]
 800d1bc:	2300      	movs	r3, #0
 800d1be:	930a      	str	r3, [sp, #40]	@ 0x28
 800d1c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1c2:	2b09      	cmp	r3, #9
 800d1c4:	d864      	bhi.n	800d290 <_dtoa_r+0x280>
 800d1c6:	2b05      	cmp	r3, #5
 800d1c8:	bfc4      	itt	gt
 800d1ca:	3b04      	subgt	r3, #4
 800d1cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d1ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1d0:	f1a3 0302 	sub.w	r3, r3, #2
 800d1d4:	bfcc      	ite	gt
 800d1d6:	2400      	movgt	r4, #0
 800d1d8:	2401      	movle	r4, #1
 800d1da:	2b03      	cmp	r3, #3
 800d1dc:	d863      	bhi.n	800d2a6 <_dtoa_r+0x296>
 800d1de:	e8df f003 	tbb	[pc, r3]
 800d1e2:	372a      	.short	0x372a
 800d1e4:	5535      	.short	0x5535
 800d1e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d1ea:	441e      	add	r6, r3
 800d1ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d1f0:	2b20      	cmp	r3, #32
 800d1f2:	bfc1      	itttt	gt
 800d1f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d1f8:	409f      	lslgt	r7, r3
 800d1fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d1fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d202:	bfd6      	itet	le
 800d204:	f1c3 0320 	rsble	r3, r3, #32
 800d208:	ea47 0003 	orrgt.w	r0, r7, r3
 800d20c:	fa04 f003 	lslle.w	r0, r4, r3
 800d210:	f7f3 f998 	bl	8000544 <__aeabi_ui2d>
 800d214:	2201      	movs	r2, #1
 800d216:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d21a:	3e01      	subs	r6, #1
 800d21c:	9214      	str	r2, [sp, #80]	@ 0x50
 800d21e:	e777      	b.n	800d110 <_dtoa_r+0x100>
 800d220:	2301      	movs	r3, #1
 800d222:	e7b8      	b.n	800d196 <_dtoa_r+0x186>
 800d224:	9012      	str	r0, [sp, #72]	@ 0x48
 800d226:	e7b7      	b.n	800d198 <_dtoa_r+0x188>
 800d228:	427b      	negs	r3, r7
 800d22a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d22c:	2300      	movs	r3, #0
 800d22e:	eba8 0807 	sub.w	r8, r8, r7
 800d232:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d234:	e7c4      	b.n	800d1c0 <_dtoa_r+0x1b0>
 800d236:	2300      	movs	r3, #0
 800d238:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d23a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	dc35      	bgt.n	800d2ac <_dtoa_r+0x29c>
 800d240:	2301      	movs	r3, #1
 800d242:	9300      	str	r3, [sp, #0]
 800d244:	9307      	str	r3, [sp, #28]
 800d246:	461a      	mov	r2, r3
 800d248:	920e      	str	r2, [sp, #56]	@ 0x38
 800d24a:	e00b      	b.n	800d264 <_dtoa_r+0x254>
 800d24c:	2301      	movs	r3, #1
 800d24e:	e7f3      	b.n	800d238 <_dtoa_r+0x228>
 800d250:	2300      	movs	r3, #0
 800d252:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d254:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d256:	18fb      	adds	r3, r7, r3
 800d258:	9300      	str	r3, [sp, #0]
 800d25a:	3301      	adds	r3, #1
 800d25c:	2b01      	cmp	r3, #1
 800d25e:	9307      	str	r3, [sp, #28]
 800d260:	bfb8      	it	lt
 800d262:	2301      	movlt	r3, #1
 800d264:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d268:	2100      	movs	r1, #0
 800d26a:	2204      	movs	r2, #4
 800d26c:	f102 0514 	add.w	r5, r2, #20
 800d270:	429d      	cmp	r5, r3
 800d272:	d91f      	bls.n	800d2b4 <_dtoa_r+0x2a4>
 800d274:	6041      	str	r1, [r0, #4]
 800d276:	4658      	mov	r0, fp
 800d278:	f000 fc96 	bl	800dba8 <_Balloc>
 800d27c:	4682      	mov	sl, r0
 800d27e:	2800      	cmp	r0, #0
 800d280:	d13c      	bne.n	800d2fc <_dtoa_r+0x2ec>
 800d282:	4b1b      	ldr	r3, [pc, #108]	@ (800d2f0 <_dtoa_r+0x2e0>)
 800d284:	4602      	mov	r2, r0
 800d286:	f240 11af 	movw	r1, #431	@ 0x1af
 800d28a:	e6d8      	b.n	800d03e <_dtoa_r+0x2e>
 800d28c:	2301      	movs	r3, #1
 800d28e:	e7e0      	b.n	800d252 <_dtoa_r+0x242>
 800d290:	2401      	movs	r4, #1
 800d292:	2300      	movs	r3, #0
 800d294:	9309      	str	r3, [sp, #36]	@ 0x24
 800d296:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d298:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d29c:	9300      	str	r3, [sp, #0]
 800d29e:	9307      	str	r3, [sp, #28]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	2312      	movs	r3, #18
 800d2a4:	e7d0      	b.n	800d248 <_dtoa_r+0x238>
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d2aa:	e7f5      	b.n	800d298 <_dtoa_r+0x288>
 800d2ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2ae:	9300      	str	r3, [sp, #0]
 800d2b0:	9307      	str	r3, [sp, #28]
 800d2b2:	e7d7      	b.n	800d264 <_dtoa_r+0x254>
 800d2b4:	3101      	adds	r1, #1
 800d2b6:	0052      	lsls	r2, r2, #1
 800d2b8:	e7d8      	b.n	800d26c <_dtoa_r+0x25c>
 800d2ba:	bf00      	nop
 800d2bc:	f3af 8000 	nop.w
 800d2c0:	636f4361 	.word	0x636f4361
 800d2c4:	3fd287a7 	.word	0x3fd287a7
 800d2c8:	8b60c8b3 	.word	0x8b60c8b3
 800d2cc:	3fc68a28 	.word	0x3fc68a28
 800d2d0:	509f79fb 	.word	0x509f79fb
 800d2d4:	3fd34413 	.word	0x3fd34413
 800d2d8:	080107a9 	.word	0x080107a9
 800d2dc:	080107c0 	.word	0x080107c0
 800d2e0:	7ff00000 	.word	0x7ff00000
 800d2e4:	08010779 	.word	0x08010779
 800d2e8:	3ff80000 	.word	0x3ff80000
 800d2ec:	080108b8 	.word	0x080108b8
 800d2f0:	08010818 	.word	0x08010818
 800d2f4:	080107a5 	.word	0x080107a5
 800d2f8:	08010778 	.word	0x08010778
 800d2fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d300:	6018      	str	r0, [r3, #0]
 800d302:	9b07      	ldr	r3, [sp, #28]
 800d304:	2b0e      	cmp	r3, #14
 800d306:	f200 80a4 	bhi.w	800d452 <_dtoa_r+0x442>
 800d30a:	2c00      	cmp	r4, #0
 800d30c:	f000 80a1 	beq.w	800d452 <_dtoa_r+0x442>
 800d310:	2f00      	cmp	r7, #0
 800d312:	dd33      	ble.n	800d37c <_dtoa_r+0x36c>
 800d314:	4bad      	ldr	r3, [pc, #692]	@ (800d5cc <_dtoa_r+0x5bc>)
 800d316:	f007 020f 	and.w	r2, r7, #15
 800d31a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d31e:	ed93 7b00 	vldr	d7, [r3]
 800d322:	05f8      	lsls	r0, r7, #23
 800d324:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d328:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d32c:	d516      	bpl.n	800d35c <_dtoa_r+0x34c>
 800d32e:	4ba8      	ldr	r3, [pc, #672]	@ (800d5d0 <_dtoa_r+0x5c0>)
 800d330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d334:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d338:	f7f3 faa8 	bl	800088c <__aeabi_ddiv>
 800d33c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d340:	f004 040f 	and.w	r4, r4, #15
 800d344:	2603      	movs	r6, #3
 800d346:	4da2      	ldr	r5, [pc, #648]	@ (800d5d0 <_dtoa_r+0x5c0>)
 800d348:	b954      	cbnz	r4, 800d360 <_dtoa_r+0x350>
 800d34a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d34e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d352:	f7f3 fa9b 	bl	800088c <__aeabi_ddiv>
 800d356:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d35a:	e028      	b.n	800d3ae <_dtoa_r+0x39e>
 800d35c:	2602      	movs	r6, #2
 800d35e:	e7f2      	b.n	800d346 <_dtoa_r+0x336>
 800d360:	07e1      	lsls	r1, r4, #31
 800d362:	d508      	bpl.n	800d376 <_dtoa_r+0x366>
 800d364:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d368:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d36c:	f7f3 f964 	bl	8000638 <__aeabi_dmul>
 800d370:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d374:	3601      	adds	r6, #1
 800d376:	1064      	asrs	r4, r4, #1
 800d378:	3508      	adds	r5, #8
 800d37a:	e7e5      	b.n	800d348 <_dtoa_r+0x338>
 800d37c:	f000 80d2 	beq.w	800d524 <_dtoa_r+0x514>
 800d380:	427c      	negs	r4, r7
 800d382:	4b92      	ldr	r3, [pc, #584]	@ (800d5cc <_dtoa_r+0x5bc>)
 800d384:	4d92      	ldr	r5, [pc, #584]	@ (800d5d0 <_dtoa_r+0x5c0>)
 800d386:	f004 020f 	and.w	r2, r4, #15
 800d38a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d392:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d396:	f7f3 f94f 	bl	8000638 <__aeabi_dmul>
 800d39a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d39e:	1124      	asrs	r4, r4, #4
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	2602      	movs	r6, #2
 800d3a4:	2c00      	cmp	r4, #0
 800d3a6:	f040 80b2 	bne.w	800d50e <_dtoa_r+0x4fe>
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d1d3      	bne.n	800d356 <_dtoa_r+0x346>
 800d3ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d3b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	f000 80b7 	beq.w	800d528 <_dtoa_r+0x518>
 800d3ba:	4b86      	ldr	r3, [pc, #536]	@ (800d5d4 <_dtoa_r+0x5c4>)
 800d3bc:	2200      	movs	r2, #0
 800d3be:	4620      	mov	r0, r4
 800d3c0:	4629      	mov	r1, r5
 800d3c2:	f7f3 fbab 	bl	8000b1c <__aeabi_dcmplt>
 800d3c6:	2800      	cmp	r0, #0
 800d3c8:	f000 80ae 	beq.w	800d528 <_dtoa_r+0x518>
 800d3cc:	9b07      	ldr	r3, [sp, #28]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	f000 80aa 	beq.w	800d528 <_dtoa_r+0x518>
 800d3d4:	9b00      	ldr	r3, [sp, #0]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	dd37      	ble.n	800d44a <_dtoa_r+0x43a>
 800d3da:	1e7b      	subs	r3, r7, #1
 800d3dc:	9304      	str	r3, [sp, #16]
 800d3de:	4620      	mov	r0, r4
 800d3e0:	4b7d      	ldr	r3, [pc, #500]	@ (800d5d8 <_dtoa_r+0x5c8>)
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	4629      	mov	r1, r5
 800d3e6:	f7f3 f927 	bl	8000638 <__aeabi_dmul>
 800d3ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3ee:	9c00      	ldr	r4, [sp, #0]
 800d3f0:	3601      	adds	r6, #1
 800d3f2:	4630      	mov	r0, r6
 800d3f4:	f7f3 f8b6 	bl	8000564 <__aeabi_i2d>
 800d3f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d3fc:	f7f3 f91c 	bl	8000638 <__aeabi_dmul>
 800d400:	4b76      	ldr	r3, [pc, #472]	@ (800d5dc <_dtoa_r+0x5cc>)
 800d402:	2200      	movs	r2, #0
 800d404:	f7f2 ff62 	bl	80002cc <__adddf3>
 800d408:	4605      	mov	r5, r0
 800d40a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d40e:	2c00      	cmp	r4, #0
 800d410:	f040 808d 	bne.w	800d52e <_dtoa_r+0x51e>
 800d414:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d418:	4b71      	ldr	r3, [pc, #452]	@ (800d5e0 <_dtoa_r+0x5d0>)
 800d41a:	2200      	movs	r2, #0
 800d41c:	f7f2 ff54 	bl	80002c8 <__aeabi_dsub>
 800d420:	4602      	mov	r2, r0
 800d422:	460b      	mov	r3, r1
 800d424:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d428:	462a      	mov	r2, r5
 800d42a:	4633      	mov	r3, r6
 800d42c:	f7f3 fb94 	bl	8000b58 <__aeabi_dcmpgt>
 800d430:	2800      	cmp	r0, #0
 800d432:	f040 828b 	bne.w	800d94c <_dtoa_r+0x93c>
 800d436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d43a:	462a      	mov	r2, r5
 800d43c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d440:	f7f3 fb6c 	bl	8000b1c <__aeabi_dcmplt>
 800d444:	2800      	cmp	r0, #0
 800d446:	f040 8128 	bne.w	800d69a <_dtoa_r+0x68a>
 800d44a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d44e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d452:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d454:	2b00      	cmp	r3, #0
 800d456:	f2c0 815a 	blt.w	800d70e <_dtoa_r+0x6fe>
 800d45a:	2f0e      	cmp	r7, #14
 800d45c:	f300 8157 	bgt.w	800d70e <_dtoa_r+0x6fe>
 800d460:	4b5a      	ldr	r3, [pc, #360]	@ (800d5cc <_dtoa_r+0x5bc>)
 800d462:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d466:	ed93 7b00 	vldr	d7, [r3]
 800d46a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	ed8d 7b00 	vstr	d7, [sp]
 800d472:	da03      	bge.n	800d47c <_dtoa_r+0x46c>
 800d474:	9b07      	ldr	r3, [sp, #28]
 800d476:	2b00      	cmp	r3, #0
 800d478:	f340 8101 	ble.w	800d67e <_dtoa_r+0x66e>
 800d47c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d480:	4656      	mov	r6, sl
 800d482:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d486:	4620      	mov	r0, r4
 800d488:	4629      	mov	r1, r5
 800d48a:	f7f3 f9ff 	bl	800088c <__aeabi_ddiv>
 800d48e:	f7f3 fb83 	bl	8000b98 <__aeabi_d2iz>
 800d492:	4680      	mov	r8, r0
 800d494:	f7f3 f866 	bl	8000564 <__aeabi_i2d>
 800d498:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d49c:	f7f3 f8cc 	bl	8000638 <__aeabi_dmul>
 800d4a0:	4602      	mov	r2, r0
 800d4a2:	460b      	mov	r3, r1
 800d4a4:	4620      	mov	r0, r4
 800d4a6:	4629      	mov	r1, r5
 800d4a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d4ac:	f7f2 ff0c 	bl	80002c8 <__aeabi_dsub>
 800d4b0:	f806 4b01 	strb.w	r4, [r6], #1
 800d4b4:	9d07      	ldr	r5, [sp, #28]
 800d4b6:	eba6 040a 	sub.w	r4, r6, sl
 800d4ba:	42a5      	cmp	r5, r4
 800d4bc:	4602      	mov	r2, r0
 800d4be:	460b      	mov	r3, r1
 800d4c0:	f040 8117 	bne.w	800d6f2 <_dtoa_r+0x6e2>
 800d4c4:	f7f2 ff02 	bl	80002cc <__adddf3>
 800d4c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d4cc:	4604      	mov	r4, r0
 800d4ce:	460d      	mov	r5, r1
 800d4d0:	f7f3 fb42 	bl	8000b58 <__aeabi_dcmpgt>
 800d4d4:	2800      	cmp	r0, #0
 800d4d6:	f040 80f9 	bne.w	800d6cc <_dtoa_r+0x6bc>
 800d4da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d4de:	4620      	mov	r0, r4
 800d4e0:	4629      	mov	r1, r5
 800d4e2:	f7f3 fb11 	bl	8000b08 <__aeabi_dcmpeq>
 800d4e6:	b118      	cbz	r0, 800d4f0 <_dtoa_r+0x4e0>
 800d4e8:	f018 0f01 	tst.w	r8, #1
 800d4ec:	f040 80ee 	bne.w	800d6cc <_dtoa_r+0x6bc>
 800d4f0:	4649      	mov	r1, r9
 800d4f2:	4658      	mov	r0, fp
 800d4f4:	f000 fb98 	bl	800dc28 <_Bfree>
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	7033      	strb	r3, [r6, #0]
 800d4fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d4fe:	3701      	adds	r7, #1
 800d500:	601f      	str	r7, [r3, #0]
 800d502:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d504:	2b00      	cmp	r3, #0
 800d506:	f000 831d 	beq.w	800db44 <_dtoa_r+0xb34>
 800d50a:	601e      	str	r6, [r3, #0]
 800d50c:	e31a      	b.n	800db44 <_dtoa_r+0xb34>
 800d50e:	07e2      	lsls	r2, r4, #31
 800d510:	d505      	bpl.n	800d51e <_dtoa_r+0x50e>
 800d512:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d516:	f7f3 f88f 	bl	8000638 <__aeabi_dmul>
 800d51a:	3601      	adds	r6, #1
 800d51c:	2301      	movs	r3, #1
 800d51e:	1064      	asrs	r4, r4, #1
 800d520:	3508      	adds	r5, #8
 800d522:	e73f      	b.n	800d3a4 <_dtoa_r+0x394>
 800d524:	2602      	movs	r6, #2
 800d526:	e742      	b.n	800d3ae <_dtoa_r+0x39e>
 800d528:	9c07      	ldr	r4, [sp, #28]
 800d52a:	9704      	str	r7, [sp, #16]
 800d52c:	e761      	b.n	800d3f2 <_dtoa_r+0x3e2>
 800d52e:	4b27      	ldr	r3, [pc, #156]	@ (800d5cc <_dtoa_r+0x5bc>)
 800d530:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d532:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d536:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d53a:	4454      	add	r4, sl
 800d53c:	2900      	cmp	r1, #0
 800d53e:	d053      	beq.n	800d5e8 <_dtoa_r+0x5d8>
 800d540:	4928      	ldr	r1, [pc, #160]	@ (800d5e4 <_dtoa_r+0x5d4>)
 800d542:	2000      	movs	r0, #0
 800d544:	f7f3 f9a2 	bl	800088c <__aeabi_ddiv>
 800d548:	4633      	mov	r3, r6
 800d54a:	462a      	mov	r2, r5
 800d54c:	f7f2 febc 	bl	80002c8 <__aeabi_dsub>
 800d550:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d554:	4656      	mov	r6, sl
 800d556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d55a:	f7f3 fb1d 	bl	8000b98 <__aeabi_d2iz>
 800d55e:	4605      	mov	r5, r0
 800d560:	f7f3 f800 	bl	8000564 <__aeabi_i2d>
 800d564:	4602      	mov	r2, r0
 800d566:	460b      	mov	r3, r1
 800d568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d56c:	f7f2 feac 	bl	80002c8 <__aeabi_dsub>
 800d570:	3530      	adds	r5, #48	@ 0x30
 800d572:	4602      	mov	r2, r0
 800d574:	460b      	mov	r3, r1
 800d576:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d57a:	f806 5b01 	strb.w	r5, [r6], #1
 800d57e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d582:	f7f3 facb 	bl	8000b1c <__aeabi_dcmplt>
 800d586:	2800      	cmp	r0, #0
 800d588:	d171      	bne.n	800d66e <_dtoa_r+0x65e>
 800d58a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d58e:	4911      	ldr	r1, [pc, #68]	@ (800d5d4 <_dtoa_r+0x5c4>)
 800d590:	2000      	movs	r0, #0
 800d592:	f7f2 fe99 	bl	80002c8 <__aeabi_dsub>
 800d596:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d59a:	f7f3 fabf 	bl	8000b1c <__aeabi_dcmplt>
 800d59e:	2800      	cmp	r0, #0
 800d5a0:	f040 8095 	bne.w	800d6ce <_dtoa_r+0x6be>
 800d5a4:	42a6      	cmp	r6, r4
 800d5a6:	f43f af50 	beq.w	800d44a <_dtoa_r+0x43a>
 800d5aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d5ae:	4b0a      	ldr	r3, [pc, #40]	@ (800d5d8 <_dtoa_r+0x5c8>)
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	f7f3 f841 	bl	8000638 <__aeabi_dmul>
 800d5b6:	4b08      	ldr	r3, [pc, #32]	@ (800d5d8 <_dtoa_r+0x5c8>)
 800d5b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d5bc:	2200      	movs	r2, #0
 800d5be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5c2:	f7f3 f839 	bl	8000638 <__aeabi_dmul>
 800d5c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5ca:	e7c4      	b.n	800d556 <_dtoa_r+0x546>
 800d5cc:	080108b8 	.word	0x080108b8
 800d5d0:	08010890 	.word	0x08010890
 800d5d4:	3ff00000 	.word	0x3ff00000
 800d5d8:	40240000 	.word	0x40240000
 800d5dc:	401c0000 	.word	0x401c0000
 800d5e0:	40140000 	.word	0x40140000
 800d5e4:	3fe00000 	.word	0x3fe00000
 800d5e8:	4631      	mov	r1, r6
 800d5ea:	4628      	mov	r0, r5
 800d5ec:	f7f3 f824 	bl	8000638 <__aeabi_dmul>
 800d5f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d5f4:	9415      	str	r4, [sp, #84]	@ 0x54
 800d5f6:	4656      	mov	r6, sl
 800d5f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5fc:	f7f3 facc 	bl	8000b98 <__aeabi_d2iz>
 800d600:	4605      	mov	r5, r0
 800d602:	f7f2 ffaf 	bl	8000564 <__aeabi_i2d>
 800d606:	4602      	mov	r2, r0
 800d608:	460b      	mov	r3, r1
 800d60a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d60e:	f7f2 fe5b 	bl	80002c8 <__aeabi_dsub>
 800d612:	3530      	adds	r5, #48	@ 0x30
 800d614:	f806 5b01 	strb.w	r5, [r6], #1
 800d618:	4602      	mov	r2, r0
 800d61a:	460b      	mov	r3, r1
 800d61c:	42a6      	cmp	r6, r4
 800d61e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d622:	f04f 0200 	mov.w	r2, #0
 800d626:	d124      	bne.n	800d672 <_dtoa_r+0x662>
 800d628:	4bac      	ldr	r3, [pc, #688]	@ (800d8dc <_dtoa_r+0x8cc>)
 800d62a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d62e:	f7f2 fe4d 	bl	80002cc <__adddf3>
 800d632:	4602      	mov	r2, r0
 800d634:	460b      	mov	r3, r1
 800d636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d63a:	f7f3 fa8d 	bl	8000b58 <__aeabi_dcmpgt>
 800d63e:	2800      	cmp	r0, #0
 800d640:	d145      	bne.n	800d6ce <_dtoa_r+0x6be>
 800d642:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d646:	49a5      	ldr	r1, [pc, #660]	@ (800d8dc <_dtoa_r+0x8cc>)
 800d648:	2000      	movs	r0, #0
 800d64a:	f7f2 fe3d 	bl	80002c8 <__aeabi_dsub>
 800d64e:	4602      	mov	r2, r0
 800d650:	460b      	mov	r3, r1
 800d652:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d656:	f7f3 fa61 	bl	8000b1c <__aeabi_dcmplt>
 800d65a:	2800      	cmp	r0, #0
 800d65c:	f43f aef5 	beq.w	800d44a <_dtoa_r+0x43a>
 800d660:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d662:	1e73      	subs	r3, r6, #1
 800d664:	9315      	str	r3, [sp, #84]	@ 0x54
 800d666:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d66a:	2b30      	cmp	r3, #48	@ 0x30
 800d66c:	d0f8      	beq.n	800d660 <_dtoa_r+0x650>
 800d66e:	9f04      	ldr	r7, [sp, #16]
 800d670:	e73e      	b.n	800d4f0 <_dtoa_r+0x4e0>
 800d672:	4b9b      	ldr	r3, [pc, #620]	@ (800d8e0 <_dtoa_r+0x8d0>)
 800d674:	f7f2 ffe0 	bl	8000638 <__aeabi_dmul>
 800d678:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d67c:	e7bc      	b.n	800d5f8 <_dtoa_r+0x5e8>
 800d67e:	d10c      	bne.n	800d69a <_dtoa_r+0x68a>
 800d680:	4b98      	ldr	r3, [pc, #608]	@ (800d8e4 <_dtoa_r+0x8d4>)
 800d682:	2200      	movs	r2, #0
 800d684:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d688:	f7f2 ffd6 	bl	8000638 <__aeabi_dmul>
 800d68c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d690:	f7f3 fa58 	bl	8000b44 <__aeabi_dcmpge>
 800d694:	2800      	cmp	r0, #0
 800d696:	f000 8157 	beq.w	800d948 <_dtoa_r+0x938>
 800d69a:	2400      	movs	r4, #0
 800d69c:	4625      	mov	r5, r4
 800d69e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6a0:	43db      	mvns	r3, r3
 800d6a2:	9304      	str	r3, [sp, #16]
 800d6a4:	4656      	mov	r6, sl
 800d6a6:	2700      	movs	r7, #0
 800d6a8:	4621      	mov	r1, r4
 800d6aa:	4658      	mov	r0, fp
 800d6ac:	f000 fabc 	bl	800dc28 <_Bfree>
 800d6b0:	2d00      	cmp	r5, #0
 800d6b2:	d0dc      	beq.n	800d66e <_dtoa_r+0x65e>
 800d6b4:	b12f      	cbz	r7, 800d6c2 <_dtoa_r+0x6b2>
 800d6b6:	42af      	cmp	r7, r5
 800d6b8:	d003      	beq.n	800d6c2 <_dtoa_r+0x6b2>
 800d6ba:	4639      	mov	r1, r7
 800d6bc:	4658      	mov	r0, fp
 800d6be:	f000 fab3 	bl	800dc28 <_Bfree>
 800d6c2:	4629      	mov	r1, r5
 800d6c4:	4658      	mov	r0, fp
 800d6c6:	f000 faaf 	bl	800dc28 <_Bfree>
 800d6ca:	e7d0      	b.n	800d66e <_dtoa_r+0x65e>
 800d6cc:	9704      	str	r7, [sp, #16]
 800d6ce:	4633      	mov	r3, r6
 800d6d0:	461e      	mov	r6, r3
 800d6d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d6d6:	2a39      	cmp	r2, #57	@ 0x39
 800d6d8:	d107      	bne.n	800d6ea <_dtoa_r+0x6da>
 800d6da:	459a      	cmp	sl, r3
 800d6dc:	d1f8      	bne.n	800d6d0 <_dtoa_r+0x6c0>
 800d6de:	9a04      	ldr	r2, [sp, #16]
 800d6e0:	3201      	adds	r2, #1
 800d6e2:	9204      	str	r2, [sp, #16]
 800d6e4:	2230      	movs	r2, #48	@ 0x30
 800d6e6:	f88a 2000 	strb.w	r2, [sl]
 800d6ea:	781a      	ldrb	r2, [r3, #0]
 800d6ec:	3201      	adds	r2, #1
 800d6ee:	701a      	strb	r2, [r3, #0]
 800d6f0:	e7bd      	b.n	800d66e <_dtoa_r+0x65e>
 800d6f2:	4b7b      	ldr	r3, [pc, #492]	@ (800d8e0 <_dtoa_r+0x8d0>)
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	f7f2 ff9f 	bl	8000638 <__aeabi_dmul>
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	4604      	mov	r4, r0
 800d700:	460d      	mov	r5, r1
 800d702:	f7f3 fa01 	bl	8000b08 <__aeabi_dcmpeq>
 800d706:	2800      	cmp	r0, #0
 800d708:	f43f aebb 	beq.w	800d482 <_dtoa_r+0x472>
 800d70c:	e6f0      	b.n	800d4f0 <_dtoa_r+0x4e0>
 800d70e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d710:	2a00      	cmp	r2, #0
 800d712:	f000 80db 	beq.w	800d8cc <_dtoa_r+0x8bc>
 800d716:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d718:	2a01      	cmp	r2, #1
 800d71a:	f300 80bf 	bgt.w	800d89c <_dtoa_r+0x88c>
 800d71e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d720:	2a00      	cmp	r2, #0
 800d722:	f000 80b7 	beq.w	800d894 <_dtoa_r+0x884>
 800d726:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d72a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d72c:	4646      	mov	r6, r8
 800d72e:	9a08      	ldr	r2, [sp, #32]
 800d730:	2101      	movs	r1, #1
 800d732:	441a      	add	r2, r3
 800d734:	4658      	mov	r0, fp
 800d736:	4498      	add	r8, r3
 800d738:	9208      	str	r2, [sp, #32]
 800d73a:	f000 fb29 	bl	800dd90 <__i2b>
 800d73e:	4605      	mov	r5, r0
 800d740:	b15e      	cbz	r6, 800d75a <_dtoa_r+0x74a>
 800d742:	9b08      	ldr	r3, [sp, #32]
 800d744:	2b00      	cmp	r3, #0
 800d746:	dd08      	ble.n	800d75a <_dtoa_r+0x74a>
 800d748:	42b3      	cmp	r3, r6
 800d74a:	9a08      	ldr	r2, [sp, #32]
 800d74c:	bfa8      	it	ge
 800d74e:	4633      	movge	r3, r6
 800d750:	eba8 0803 	sub.w	r8, r8, r3
 800d754:	1af6      	subs	r6, r6, r3
 800d756:	1ad3      	subs	r3, r2, r3
 800d758:	9308      	str	r3, [sp, #32]
 800d75a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d75c:	b1f3      	cbz	r3, 800d79c <_dtoa_r+0x78c>
 800d75e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d760:	2b00      	cmp	r3, #0
 800d762:	f000 80b7 	beq.w	800d8d4 <_dtoa_r+0x8c4>
 800d766:	b18c      	cbz	r4, 800d78c <_dtoa_r+0x77c>
 800d768:	4629      	mov	r1, r5
 800d76a:	4622      	mov	r2, r4
 800d76c:	4658      	mov	r0, fp
 800d76e:	f000 fbcf 	bl	800df10 <__pow5mult>
 800d772:	464a      	mov	r2, r9
 800d774:	4601      	mov	r1, r0
 800d776:	4605      	mov	r5, r0
 800d778:	4658      	mov	r0, fp
 800d77a:	f000 fb1f 	bl	800ddbc <__multiply>
 800d77e:	4649      	mov	r1, r9
 800d780:	9004      	str	r0, [sp, #16]
 800d782:	4658      	mov	r0, fp
 800d784:	f000 fa50 	bl	800dc28 <_Bfree>
 800d788:	9b04      	ldr	r3, [sp, #16]
 800d78a:	4699      	mov	r9, r3
 800d78c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d78e:	1b1a      	subs	r2, r3, r4
 800d790:	d004      	beq.n	800d79c <_dtoa_r+0x78c>
 800d792:	4649      	mov	r1, r9
 800d794:	4658      	mov	r0, fp
 800d796:	f000 fbbb 	bl	800df10 <__pow5mult>
 800d79a:	4681      	mov	r9, r0
 800d79c:	2101      	movs	r1, #1
 800d79e:	4658      	mov	r0, fp
 800d7a0:	f000 faf6 	bl	800dd90 <__i2b>
 800d7a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7a6:	4604      	mov	r4, r0
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	f000 81cf 	beq.w	800db4c <_dtoa_r+0xb3c>
 800d7ae:	461a      	mov	r2, r3
 800d7b0:	4601      	mov	r1, r0
 800d7b2:	4658      	mov	r0, fp
 800d7b4:	f000 fbac 	bl	800df10 <__pow5mult>
 800d7b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7ba:	2b01      	cmp	r3, #1
 800d7bc:	4604      	mov	r4, r0
 800d7be:	f300 8095 	bgt.w	800d8ec <_dtoa_r+0x8dc>
 800d7c2:	9b02      	ldr	r3, [sp, #8]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	f040 8087 	bne.w	800d8d8 <_dtoa_r+0x8c8>
 800d7ca:	9b03      	ldr	r3, [sp, #12]
 800d7cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	f040 8089 	bne.w	800d8e8 <_dtoa_r+0x8d8>
 800d7d6:	9b03      	ldr	r3, [sp, #12]
 800d7d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d7dc:	0d1b      	lsrs	r3, r3, #20
 800d7de:	051b      	lsls	r3, r3, #20
 800d7e0:	b12b      	cbz	r3, 800d7ee <_dtoa_r+0x7de>
 800d7e2:	9b08      	ldr	r3, [sp, #32]
 800d7e4:	3301      	adds	r3, #1
 800d7e6:	9308      	str	r3, [sp, #32]
 800d7e8:	f108 0801 	add.w	r8, r8, #1
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800d7f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	f000 81b0 	beq.w	800db58 <_dtoa_r+0xb48>
 800d7f8:	6923      	ldr	r3, [r4, #16]
 800d7fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d7fe:	6918      	ldr	r0, [r3, #16]
 800d800:	f000 fa7a 	bl	800dcf8 <__hi0bits>
 800d804:	f1c0 0020 	rsb	r0, r0, #32
 800d808:	9b08      	ldr	r3, [sp, #32]
 800d80a:	4418      	add	r0, r3
 800d80c:	f010 001f 	ands.w	r0, r0, #31
 800d810:	d077      	beq.n	800d902 <_dtoa_r+0x8f2>
 800d812:	f1c0 0320 	rsb	r3, r0, #32
 800d816:	2b04      	cmp	r3, #4
 800d818:	dd6b      	ble.n	800d8f2 <_dtoa_r+0x8e2>
 800d81a:	9b08      	ldr	r3, [sp, #32]
 800d81c:	f1c0 001c 	rsb	r0, r0, #28
 800d820:	4403      	add	r3, r0
 800d822:	4480      	add	r8, r0
 800d824:	4406      	add	r6, r0
 800d826:	9308      	str	r3, [sp, #32]
 800d828:	f1b8 0f00 	cmp.w	r8, #0
 800d82c:	dd05      	ble.n	800d83a <_dtoa_r+0x82a>
 800d82e:	4649      	mov	r1, r9
 800d830:	4642      	mov	r2, r8
 800d832:	4658      	mov	r0, fp
 800d834:	f000 fbc6 	bl	800dfc4 <__lshift>
 800d838:	4681      	mov	r9, r0
 800d83a:	9b08      	ldr	r3, [sp, #32]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	dd05      	ble.n	800d84c <_dtoa_r+0x83c>
 800d840:	4621      	mov	r1, r4
 800d842:	461a      	mov	r2, r3
 800d844:	4658      	mov	r0, fp
 800d846:	f000 fbbd 	bl	800dfc4 <__lshift>
 800d84a:	4604      	mov	r4, r0
 800d84c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d059      	beq.n	800d906 <_dtoa_r+0x8f6>
 800d852:	4621      	mov	r1, r4
 800d854:	4648      	mov	r0, r9
 800d856:	f000 fc21 	bl	800e09c <__mcmp>
 800d85a:	2800      	cmp	r0, #0
 800d85c:	da53      	bge.n	800d906 <_dtoa_r+0x8f6>
 800d85e:	1e7b      	subs	r3, r7, #1
 800d860:	9304      	str	r3, [sp, #16]
 800d862:	4649      	mov	r1, r9
 800d864:	2300      	movs	r3, #0
 800d866:	220a      	movs	r2, #10
 800d868:	4658      	mov	r0, fp
 800d86a:	f000 f9ff 	bl	800dc6c <__multadd>
 800d86e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d870:	4681      	mov	r9, r0
 800d872:	2b00      	cmp	r3, #0
 800d874:	f000 8172 	beq.w	800db5c <_dtoa_r+0xb4c>
 800d878:	2300      	movs	r3, #0
 800d87a:	4629      	mov	r1, r5
 800d87c:	220a      	movs	r2, #10
 800d87e:	4658      	mov	r0, fp
 800d880:	f000 f9f4 	bl	800dc6c <__multadd>
 800d884:	9b00      	ldr	r3, [sp, #0]
 800d886:	2b00      	cmp	r3, #0
 800d888:	4605      	mov	r5, r0
 800d88a:	dc67      	bgt.n	800d95c <_dtoa_r+0x94c>
 800d88c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d88e:	2b02      	cmp	r3, #2
 800d890:	dc41      	bgt.n	800d916 <_dtoa_r+0x906>
 800d892:	e063      	b.n	800d95c <_dtoa_r+0x94c>
 800d894:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d896:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d89a:	e746      	b.n	800d72a <_dtoa_r+0x71a>
 800d89c:	9b07      	ldr	r3, [sp, #28]
 800d89e:	1e5c      	subs	r4, r3, #1
 800d8a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8a2:	42a3      	cmp	r3, r4
 800d8a4:	bfbf      	itttt	lt
 800d8a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d8a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d8aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d8ac:	1ae3      	sublt	r3, r4, r3
 800d8ae:	bfb4      	ite	lt
 800d8b0:	18d2      	addlt	r2, r2, r3
 800d8b2:	1b1c      	subge	r4, r3, r4
 800d8b4:	9b07      	ldr	r3, [sp, #28]
 800d8b6:	bfbc      	itt	lt
 800d8b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d8ba:	2400      	movlt	r4, #0
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	bfb5      	itete	lt
 800d8c0:	eba8 0603 	sublt.w	r6, r8, r3
 800d8c4:	9b07      	ldrge	r3, [sp, #28]
 800d8c6:	2300      	movlt	r3, #0
 800d8c8:	4646      	movge	r6, r8
 800d8ca:	e730      	b.n	800d72e <_dtoa_r+0x71e>
 800d8cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d8ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d8d0:	4646      	mov	r6, r8
 800d8d2:	e735      	b.n	800d740 <_dtoa_r+0x730>
 800d8d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d8d6:	e75c      	b.n	800d792 <_dtoa_r+0x782>
 800d8d8:	2300      	movs	r3, #0
 800d8da:	e788      	b.n	800d7ee <_dtoa_r+0x7de>
 800d8dc:	3fe00000 	.word	0x3fe00000
 800d8e0:	40240000 	.word	0x40240000
 800d8e4:	40140000 	.word	0x40140000
 800d8e8:	9b02      	ldr	r3, [sp, #8]
 800d8ea:	e780      	b.n	800d7ee <_dtoa_r+0x7de>
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800d8f0:	e782      	b.n	800d7f8 <_dtoa_r+0x7e8>
 800d8f2:	d099      	beq.n	800d828 <_dtoa_r+0x818>
 800d8f4:	9a08      	ldr	r2, [sp, #32]
 800d8f6:	331c      	adds	r3, #28
 800d8f8:	441a      	add	r2, r3
 800d8fa:	4498      	add	r8, r3
 800d8fc:	441e      	add	r6, r3
 800d8fe:	9208      	str	r2, [sp, #32]
 800d900:	e792      	b.n	800d828 <_dtoa_r+0x818>
 800d902:	4603      	mov	r3, r0
 800d904:	e7f6      	b.n	800d8f4 <_dtoa_r+0x8e4>
 800d906:	9b07      	ldr	r3, [sp, #28]
 800d908:	9704      	str	r7, [sp, #16]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	dc20      	bgt.n	800d950 <_dtoa_r+0x940>
 800d90e:	9300      	str	r3, [sp, #0]
 800d910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d912:	2b02      	cmp	r3, #2
 800d914:	dd1e      	ble.n	800d954 <_dtoa_r+0x944>
 800d916:	9b00      	ldr	r3, [sp, #0]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	f47f aec0 	bne.w	800d69e <_dtoa_r+0x68e>
 800d91e:	4621      	mov	r1, r4
 800d920:	2205      	movs	r2, #5
 800d922:	4658      	mov	r0, fp
 800d924:	f000 f9a2 	bl	800dc6c <__multadd>
 800d928:	4601      	mov	r1, r0
 800d92a:	4604      	mov	r4, r0
 800d92c:	4648      	mov	r0, r9
 800d92e:	f000 fbb5 	bl	800e09c <__mcmp>
 800d932:	2800      	cmp	r0, #0
 800d934:	f77f aeb3 	ble.w	800d69e <_dtoa_r+0x68e>
 800d938:	4656      	mov	r6, sl
 800d93a:	2331      	movs	r3, #49	@ 0x31
 800d93c:	f806 3b01 	strb.w	r3, [r6], #1
 800d940:	9b04      	ldr	r3, [sp, #16]
 800d942:	3301      	adds	r3, #1
 800d944:	9304      	str	r3, [sp, #16]
 800d946:	e6ae      	b.n	800d6a6 <_dtoa_r+0x696>
 800d948:	9c07      	ldr	r4, [sp, #28]
 800d94a:	9704      	str	r7, [sp, #16]
 800d94c:	4625      	mov	r5, r4
 800d94e:	e7f3      	b.n	800d938 <_dtoa_r+0x928>
 800d950:	9b07      	ldr	r3, [sp, #28]
 800d952:	9300      	str	r3, [sp, #0]
 800d954:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d956:	2b00      	cmp	r3, #0
 800d958:	f000 8104 	beq.w	800db64 <_dtoa_r+0xb54>
 800d95c:	2e00      	cmp	r6, #0
 800d95e:	dd05      	ble.n	800d96c <_dtoa_r+0x95c>
 800d960:	4629      	mov	r1, r5
 800d962:	4632      	mov	r2, r6
 800d964:	4658      	mov	r0, fp
 800d966:	f000 fb2d 	bl	800dfc4 <__lshift>
 800d96a:	4605      	mov	r5, r0
 800d96c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d05a      	beq.n	800da28 <_dtoa_r+0xa18>
 800d972:	6869      	ldr	r1, [r5, #4]
 800d974:	4658      	mov	r0, fp
 800d976:	f000 f917 	bl	800dba8 <_Balloc>
 800d97a:	4606      	mov	r6, r0
 800d97c:	b928      	cbnz	r0, 800d98a <_dtoa_r+0x97a>
 800d97e:	4b84      	ldr	r3, [pc, #528]	@ (800db90 <_dtoa_r+0xb80>)
 800d980:	4602      	mov	r2, r0
 800d982:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d986:	f7ff bb5a 	b.w	800d03e <_dtoa_r+0x2e>
 800d98a:	692a      	ldr	r2, [r5, #16]
 800d98c:	3202      	adds	r2, #2
 800d98e:	0092      	lsls	r2, r2, #2
 800d990:	f105 010c 	add.w	r1, r5, #12
 800d994:	300c      	adds	r0, #12
 800d996:	f7ff faa4 	bl	800cee2 <memcpy>
 800d99a:	2201      	movs	r2, #1
 800d99c:	4631      	mov	r1, r6
 800d99e:	4658      	mov	r0, fp
 800d9a0:	f000 fb10 	bl	800dfc4 <__lshift>
 800d9a4:	f10a 0301 	add.w	r3, sl, #1
 800d9a8:	9307      	str	r3, [sp, #28]
 800d9aa:	9b00      	ldr	r3, [sp, #0]
 800d9ac:	4453      	add	r3, sl
 800d9ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d9b0:	9b02      	ldr	r3, [sp, #8]
 800d9b2:	f003 0301 	and.w	r3, r3, #1
 800d9b6:	462f      	mov	r7, r5
 800d9b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800d9ba:	4605      	mov	r5, r0
 800d9bc:	9b07      	ldr	r3, [sp, #28]
 800d9be:	4621      	mov	r1, r4
 800d9c0:	3b01      	subs	r3, #1
 800d9c2:	4648      	mov	r0, r9
 800d9c4:	9300      	str	r3, [sp, #0]
 800d9c6:	f7ff fa9a 	bl	800cefe <quorem>
 800d9ca:	4639      	mov	r1, r7
 800d9cc:	9002      	str	r0, [sp, #8]
 800d9ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d9d2:	4648      	mov	r0, r9
 800d9d4:	f000 fb62 	bl	800e09c <__mcmp>
 800d9d8:	462a      	mov	r2, r5
 800d9da:	9008      	str	r0, [sp, #32]
 800d9dc:	4621      	mov	r1, r4
 800d9de:	4658      	mov	r0, fp
 800d9e0:	f000 fb78 	bl	800e0d4 <__mdiff>
 800d9e4:	68c2      	ldr	r2, [r0, #12]
 800d9e6:	4606      	mov	r6, r0
 800d9e8:	bb02      	cbnz	r2, 800da2c <_dtoa_r+0xa1c>
 800d9ea:	4601      	mov	r1, r0
 800d9ec:	4648      	mov	r0, r9
 800d9ee:	f000 fb55 	bl	800e09c <__mcmp>
 800d9f2:	4602      	mov	r2, r0
 800d9f4:	4631      	mov	r1, r6
 800d9f6:	4658      	mov	r0, fp
 800d9f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d9fa:	f000 f915 	bl	800dc28 <_Bfree>
 800d9fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800da02:	9e07      	ldr	r6, [sp, #28]
 800da04:	ea43 0102 	orr.w	r1, r3, r2
 800da08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da0a:	4319      	orrs	r1, r3
 800da0c:	d110      	bne.n	800da30 <_dtoa_r+0xa20>
 800da0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800da12:	d029      	beq.n	800da68 <_dtoa_r+0xa58>
 800da14:	9b08      	ldr	r3, [sp, #32]
 800da16:	2b00      	cmp	r3, #0
 800da18:	dd02      	ble.n	800da20 <_dtoa_r+0xa10>
 800da1a:	9b02      	ldr	r3, [sp, #8]
 800da1c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800da20:	9b00      	ldr	r3, [sp, #0]
 800da22:	f883 8000 	strb.w	r8, [r3]
 800da26:	e63f      	b.n	800d6a8 <_dtoa_r+0x698>
 800da28:	4628      	mov	r0, r5
 800da2a:	e7bb      	b.n	800d9a4 <_dtoa_r+0x994>
 800da2c:	2201      	movs	r2, #1
 800da2e:	e7e1      	b.n	800d9f4 <_dtoa_r+0x9e4>
 800da30:	9b08      	ldr	r3, [sp, #32]
 800da32:	2b00      	cmp	r3, #0
 800da34:	db04      	blt.n	800da40 <_dtoa_r+0xa30>
 800da36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800da38:	430b      	orrs	r3, r1
 800da3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800da3c:	430b      	orrs	r3, r1
 800da3e:	d120      	bne.n	800da82 <_dtoa_r+0xa72>
 800da40:	2a00      	cmp	r2, #0
 800da42:	dded      	ble.n	800da20 <_dtoa_r+0xa10>
 800da44:	4649      	mov	r1, r9
 800da46:	2201      	movs	r2, #1
 800da48:	4658      	mov	r0, fp
 800da4a:	f000 fabb 	bl	800dfc4 <__lshift>
 800da4e:	4621      	mov	r1, r4
 800da50:	4681      	mov	r9, r0
 800da52:	f000 fb23 	bl	800e09c <__mcmp>
 800da56:	2800      	cmp	r0, #0
 800da58:	dc03      	bgt.n	800da62 <_dtoa_r+0xa52>
 800da5a:	d1e1      	bne.n	800da20 <_dtoa_r+0xa10>
 800da5c:	f018 0f01 	tst.w	r8, #1
 800da60:	d0de      	beq.n	800da20 <_dtoa_r+0xa10>
 800da62:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800da66:	d1d8      	bne.n	800da1a <_dtoa_r+0xa0a>
 800da68:	9a00      	ldr	r2, [sp, #0]
 800da6a:	2339      	movs	r3, #57	@ 0x39
 800da6c:	7013      	strb	r3, [r2, #0]
 800da6e:	4633      	mov	r3, r6
 800da70:	461e      	mov	r6, r3
 800da72:	3b01      	subs	r3, #1
 800da74:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800da78:	2a39      	cmp	r2, #57	@ 0x39
 800da7a:	d052      	beq.n	800db22 <_dtoa_r+0xb12>
 800da7c:	3201      	adds	r2, #1
 800da7e:	701a      	strb	r2, [r3, #0]
 800da80:	e612      	b.n	800d6a8 <_dtoa_r+0x698>
 800da82:	2a00      	cmp	r2, #0
 800da84:	dd07      	ble.n	800da96 <_dtoa_r+0xa86>
 800da86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800da8a:	d0ed      	beq.n	800da68 <_dtoa_r+0xa58>
 800da8c:	9a00      	ldr	r2, [sp, #0]
 800da8e:	f108 0301 	add.w	r3, r8, #1
 800da92:	7013      	strb	r3, [r2, #0]
 800da94:	e608      	b.n	800d6a8 <_dtoa_r+0x698>
 800da96:	9b07      	ldr	r3, [sp, #28]
 800da98:	9a07      	ldr	r2, [sp, #28]
 800da9a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800da9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d028      	beq.n	800daf6 <_dtoa_r+0xae6>
 800daa4:	4649      	mov	r1, r9
 800daa6:	2300      	movs	r3, #0
 800daa8:	220a      	movs	r2, #10
 800daaa:	4658      	mov	r0, fp
 800daac:	f000 f8de 	bl	800dc6c <__multadd>
 800dab0:	42af      	cmp	r7, r5
 800dab2:	4681      	mov	r9, r0
 800dab4:	f04f 0300 	mov.w	r3, #0
 800dab8:	f04f 020a 	mov.w	r2, #10
 800dabc:	4639      	mov	r1, r7
 800dabe:	4658      	mov	r0, fp
 800dac0:	d107      	bne.n	800dad2 <_dtoa_r+0xac2>
 800dac2:	f000 f8d3 	bl	800dc6c <__multadd>
 800dac6:	4607      	mov	r7, r0
 800dac8:	4605      	mov	r5, r0
 800daca:	9b07      	ldr	r3, [sp, #28]
 800dacc:	3301      	adds	r3, #1
 800dace:	9307      	str	r3, [sp, #28]
 800dad0:	e774      	b.n	800d9bc <_dtoa_r+0x9ac>
 800dad2:	f000 f8cb 	bl	800dc6c <__multadd>
 800dad6:	4629      	mov	r1, r5
 800dad8:	4607      	mov	r7, r0
 800dada:	2300      	movs	r3, #0
 800dadc:	220a      	movs	r2, #10
 800dade:	4658      	mov	r0, fp
 800dae0:	f000 f8c4 	bl	800dc6c <__multadd>
 800dae4:	4605      	mov	r5, r0
 800dae6:	e7f0      	b.n	800daca <_dtoa_r+0xaba>
 800dae8:	9b00      	ldr	r3, [sp, #0]
 800daea:	2b00      	cmp	r3, #0
 800daec:	bfcc      	ite	gt
 800daee:	461e      	movgt	r6, r3
 800daf0:	2601      	movle	r6, #1
 800daf2:	4456      	add	r6, sl
 800daf4:	2700      	movs	r7, #0
 800daf6:	4649      	mov	r1, r9
 800daf8:	2201      	movs	r2, #1
 800dafa:	4658      	mov	r0, fp
 800dafc:	f000 fa62 	bl	800dfc4 <__lshift>
 800db00:	4621      	mov	r1, r4
 800db02:	4681      	mov	r9, r0
 800db04:	f000 faca 	bl	800e09c <__mcmp>
 800db08:	2800      	cmp	r0, #0
 800db0a:	dcb0      	bgt.n	800da6e <_dtoa_r+0xa5e>
 800db0c:	d102      	bne.n	800db14 <_dtoa_r+0xb04>
 800db0e:	f018 0f01 	tst.w	r8, #1
 800db12:	d1ac      	bne.n	800da6e <_dtoa_r+0xa5e>
 800db14:	4633      	mov	r3, r6
 800db16:	461e      	mov	r6, r3
 800db18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db1c:	2a30      	cmp	r2, #48	@ 0x30
 800db1e:	d0fa      	beq.n	800db16 <_dtoa_r+0xb06>
 800db20:	e5c2      	b.n	800d6a8 <_dtoa_r+0x698>
 800db22:	459a      	cmp	sl, r3
 800db24:	d1a4      	bne.n	800da70 <_dtoa_r+0xa60>
 800db26:	9b04      	ldr	r3, [sp, #16]
 800db28:	3301      	adds	r3, #1
 800db2a:	9304      	str	r3, [sp, #16]
 800db2c:	2331      	movs	r3, #49	@ 0x31
 800db2e:	f88a 3000 	strb.w	r3, [sl]
 800db32:	e5b9      	b.n	800d6a8 <_dtoa_r+0x698>
 800db34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800db36:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800db94 <_dtoa_r+0xb84>
 800db3a:	b11b      	cbz	r3, 800db44 <_dtoa_r+0xb34>
 800db3c:	f10a 0308 	add.w	r3, sl, #8
 800db40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800db42:	6013      	str	r3, [r2, #0]
 800db44:	4650      	mov	r0, sl
 800db46:	b019      	add	sp, #100	@ 0x64
 800db48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db4e:	2b01      	cmp	r3, #1
 800db50:	f77f ae37 	ble.w	800d7c2 <_dtoa_r+0x7b2>
 800db54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db56:	930a      	str	r3, [sp, #40]	@ 0x28
 800db58:	2001      	movs	r0, #1
 800db5a:	e655      	b.n	800d808 <_dtoa_r+0x7f8>
 800db5c:	9b00      	ldr	r3, [sp, #0]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	f77f aed6 	ble.w	800d910 <_dtoa_r+0x900>
 800db64:	4656      	mov	r6, sl
 800db66:	4621      	mov	r1, r4
 800db68:	4648      	mov	r0, r9
 800db6a:	f7ff f9c8 	bl	800cefe <quorem>
 800db6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800db72:	f806 8b01 	strb.w	r8, [r6], #1
 800db76:	9b00      	ldr	r3, [sp, #0]
 800db78:	eba6 020a 	sub.w	r2, r6, sl
 800db7c:	4293      	cmp	r3, r2
 800db7e:	ddb3      	ble.n	800dae8 <_dtoa_r+0xad8>
 800db80:	4649      	mov	r1, r9
 800db82:	2300      	movs	r3, #0
 800db84:	220a      	movs	r2, #10
 800db86:	4658      	mov	r0, fp
 800db88:	f000 f870 	bl	800dc6c <__multadd>
 800db8c:	4681      	mov	r9, r0
 800db8e:	e7ea      	b.n	800db66 <_dtoa_r+0xb56>
 800db90:	08010818 	.word	0x08010818
 800db94:	0801079c 	.word	0x0801079c

0800db98 <malloc>:
 800db98:	4b02      	ldr	r3, [pc, #8]	@ (800dba4 <malloc+0xc>)
 800db9a:	4601      	mov	r1, r0
 800db9c:	6818      	ldr	r0, [r3, #0]
 800db9e:	f7fe b9ef 	b.w	800bf80 <_malloc_r>
 800dba2:	bf00      	nop
 800dba4:	2000001c 	.word	0x2000001c

0800dba8 <_Balloc>:
 800dba8:	b570      	push	{r4, r5, r6, lr}
 800dbaa:	69c6      	ldr	r6, [r0, #28]
 800dbac:	4604      	mov	r4, r0
 800dbae:	460d      	mov	r5, r1
 800dbb0:	b976      	cbnz	r6, 800dbd0 <_Balloc+0x28>
 800dbb2:	2010      	movs	r0, #16
 800dbb4:	f7ff fff0 	bl	800db98 <malloc>
 800dbb8:	4602      	mov	r2, r0
 800dbba:	61e0      	str	r0, [r4, #28]
 800dbbc:	b920      	cbnz	r0, 800dbc8 <_Balloc+0x20>
 800dbbe:	4b18      	ldr	r3, [pc, #96]	@ (800dc20 <_Balloc+0x78>)
 800dbc0:	4818      	ldr	r0, [pc, #96]	@ (800dc24 <_Balloc+0x7c>)
 800dbc2:	216b      	movs	r1, #107	@ 0x6b
 800dbc4:	f000 ff56 	bl	800ea74 <__assert_func>
 800dbc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dbcc:	6006      	str	r6, [r0, #0]
 800dbce:	60c6      	str	r6, [r0, #12]
 800dbd0:	69e6      	ldr	r6, [r4, #28]
 800dbd2:	68f3      	ldr	r3, [r6, #12]
 800dbd4:	b183      	cbz	r3, 800dbf8 <_Balloc+0x50>
 800dbd6:	69e3      	ldr	r3, [r4, #28]
 800dbd8:	68db      	ldr	r3, [r3, #12]
 800dbda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dbde:	b9b8      	cbnz	r0, 800dc10 <_Balloc+0x68>
 800dbe0:	2101      	movs	r1, #1
 800dbe2:	fa01 f605 	lsl.w	r6, r1, r5
 800dbe6:	1d72      	adds	r2, r6, #5
 800dbe8:	0092      	lsls	r2, r2, #2
 800dbea:	4620      	mov	r0, r4
 800dbec:	f000 ff60 	bl	800eab0 <_calloc_r>
 800dbf0:	b160      	cbz	r0, 800dc0c <_Balloc+0x64>
 800dbf2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dbf6:	e00e      	b.n	800dc16 <_Balloc+0x6e>
 800dbf8:	2221      	movs	r2, #33	@ 0x21
 800dbfa:	2104      	movs	r1, #4
 800dbfc:	4620      	mov	r0, r4
 800dbfe:	f000 ff57 	bl	800eab0 <_calloc_r>
 800dc02:	69e3      	ldr	r3, [r4, #28]
 800dc04:	60f0      	str	r0, [r6, #12]
 800dc06:	68db      	ldr	r3, [r3, #12]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d1e4      	bne.n	800dbd6 <_Balloc+0x2e>
 800dc0c:	2000      	movs	r0, #0
 800dc0e:	bd70      	pop	{r4, r5, r6, pc}
 800dc10:	6802      	ldr	r2, [r0, #0]
 800dc12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dc16:	2300      	movs	r3, #0
 800dc18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dc1c:	e7f7      	b.n	800dc0e <_Balloc+0x66>
 800dc1e:	bf00      	nop
 800dc20:	080107a9 	.word	0x080107a9
 800dc24:	08010829 	.word	0x08010829

0800dc28 <_Bfree>:
 800dc28:	b570      	push	{r4, r5, r6, lr}
 800dc2a:	69c6      	ldr	r6, [r0, #28]
 800dc2c:	4605      	mov	r5, r0
 800dc2e:	460c      	mov	r4, r1
 800dc30:	b976      	cbnz	r6, 800dc50 <_Bfree+0x28>
 800dc32:	2010      	movs	r0, #16
 800dc34:	f7ff ffb0 	bl	800db98 <malloc>
 800dc38:	4602      	mov	r2, r0
 800dc3a:	61e8      	str	r0, [r5, #28]
 800dc3c:	b920      	cbnz	r0, 800dc48 <_Bfree+0x20>
 800dc3e:	4b09      	ldr	r3, [pc, #36]	@ (800dc64 <_Bfree+0x3c>)
 800dc40:	4809      	ldr	r0, [pc, #36]	@ (800dc68 <_Bfree+0x40>)
 800dc42:	218f      	movs	r1, #143	@ 0x8f
 800dc44:	f000 ff16 	bl	800ea74 <__assert_func>
 800dc48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc4c:	6006      	str	r6, [r0, #0]
 800dc4e:	60c6      	str	r6, [r0, #12]
 800dc50:	b13c      	cbz	r4, 800dc62 <_Bfree+0x3a>
 800dc52:	69eb      	ldr	r3, [r5, #28]
 800dc54:	6862      	ldr	r2, [r4, #4]
 800dc56:	68db      	ldr	r3, [r3, #12]
 800dc58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dc5c:	6021      	str	r1, [r4, #0]
 800dc5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dc62:	bd70      	pop	{r4, r5, r6, pc}
 800dc64:	080107a9 	.word	0x080107a9
 800dc68:	08010829 	.word	0x08010829

0800dc6c <__multadd>:
 800dc6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc70:	690d      	ldr	r5, [r1, #16]
 800dc72:	4607      	mov	r7, r0
 800dc74:	460c      	mov	r4, r1
 800dc76:	461e      	mov	r6, r3
 800dc78:	f101 0c14 	add.w	ip, r1, #20
 800dc7c:	2000      	movs	r0, #0
 800dc7e:	f8dc 3000 	ldr.w	r3, [ip]
 800dc82:	b299      	uxth	r1, r3
 800dc84:	fb02 6101 	mla	r1, r2, r1, r6
 800dc88:	0c1e      	lsrs	r6, r3, #16
 800dc8a:	0c0b      	lsrs	r3, r1, #16
 800dc8c:	fb02 3306 	mla	r3, r2, r6, r3
 800dc90:	b289      	uxth	r1, r1
 800dc92:	3001      	adds	r0, #1
 800dc94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dc98:	4285      	cmp	r5, r0
 800dc9a:	f84c 1b04 	str.w	r1, [ip], #4
 800dc9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dca2:	dcec      	bgt.n	800dc7e <__multadd+0x12>
 800dca4:	b30e      	cbz	r6, 800dcea <__multadd+0x7e>
 800dca6:	68a3      	ldr	r3, [r4, #8]
 800dca8:	42ab      	cmp	r3, r5
 800dcaa:	dc19      	bgt.n	800dce0 <__multadd+0x74>
 800dcac:	6861      	ldr	r1, [r4, #4]
 800dcae:	4638      	mov	r0, r7
 800dcb0:	3101      	adds	r1, #1
 800dcb2:	f7ff ff79 	bl	800dba8 <_Balloc>
 800dcb6:	4680      	mov	r8, r0
 800dcb8:	b928      	cbnz	r0, 800dcc6 <__multadd+0x5a>
 800dcba:	4602      	mov	r2, r0
 800dcbc:	4b0c      	ldr	r3, [pc, #48]	@ (800dcf0 <__multadd+0x84>)
 800dcbe:	480d      	ldr	r0, [pc, #52]	@ (800dcf4 <__multadd+0x88>)
 800dcc0:	21ba      	movs	r1, #186	@ 0xba
 800dcc2:	f000 fed7 	bl	800ea74 <__assert_func>
 800dcc6:	6922      	ldr	r2, [r4, #16]
 800dcc8:	3202      	adds	r2, #2
 800dcca:	f104 010c 	add.w	r1, r4, #12
 800dcce:	0092      	lsls	r2, r2, #2
 800dcd0:	300c      	adds	r0, #12
 800dcd2:	f7ff f906 	bl	800cee2 <memcpy>
 800dcd6:	4621      	mov	r1, r4
 800dcd8:	4638      	mov	r0, r7
 800dcda:	f7ff ffa5 	bl	800dc28 <_Bfree>
 800dcde:	4644      	mov	r4, r8
 800dce0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dce4:	3501      	adds	r5, #1
 800dce6:	615e      	str	r6, [r3, #20]
 800dce8:	6125      	str	r5, [r4, #16]
 800dcea:	4620      	mov	r0, r4
 800dcec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcf0:	08010818 	.word	0x08010818
 800dcf4:	08010829 	.word	0x08010829

0800dcf8 <__hi0bits>:
 800dcf8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	bf36      	itet	cc
 800dd00:	0403      	lslcc	r3, r0, #16
 800dd02:	2000      	movcs	r0, #0
 800dd04:	2010      	movcc	r0, #16
 800dd06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dd0a:	bf3c      	itt	cc
 800dd0c:	021b      	lslcc	r3, r3, #8
 800dd0e:	3008      	addcc	r0, #8
 800dd10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dd14:	bf3c      	itt	cc
 800dd16:	011b      	lslcc	r3, r3, #4
 800dd18:	3004      	addcc	r0, #4
 800dd1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd1e:	bf3c      	itt	cc
 800dd20:	009b      	lslcc	r3, r3, #2
 800dd22:	3002      	addcc	r0, #2
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	db05      	blt.n	800dd34 <__hi0bits+0x3c>
 800dd28:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dd2c:	f100 0001 	add.w	r0, r0, #1
 800dd30:	bf08      	it	eq
 800dd32:	2020      	moveq	r0, #32
 800dd34:	4770      	bx	lr

0800dd36 <__lo0bits>:
 800dd36:	6803      	ldr	r3, [r0, #0]
 800dd38:	4602      	mov	r2, r0
 800dd3a:	f013 0007 	ands.w	r0, r3, #7
 800dd3e:	d00b      	beq.n	800dd58 <__lo0bits+0x22>
 800dd40:	07d9      	lsls	r1, r3, #31
 800dd42:	d421      	bmi.n	800dd88 <__lo0bits+0x52>
 800dd44:	0798      	lsls	r0, r3, #30
 800dd46:	bf49      	itett	mi
 800dd48:	085b      	lsrmi	r3, r3, #1
 800dd4a:	089b      	lsrpl	r3, r3, #2
 800dd4c:	2001      	movmi	r0, #1
 800dd4e:	6013      	strmi	r3, [r2, #0]
 800dd50:	bf5c      	itt	pl
 800dd52:	6013      	strpl	r3, [r2, #0]
 800dd54:	2002      	movpl	r0, #2
 800dd56:	4770      	bx	lr
 800dd58:	b299      	uxth	r1, r3
 800dd5a:	b909      	cbnz	r1, 800dd60 <__lo0bits+0x2a>
 800dd5c:	0c1b      	lsrs	r3, r3, #16
 800dd5e:	2010      	movs	r0, #16
 800dd60:	b2d9      	uxtb	r1, r3
 800dd62:	b909      	cbnz	r1, 800dd68 <__lo0bits+0x32>
 800dd64:	3008      	adds	r0, #8
 800dd66:	0a1b      	lsrs	r3, r3, #8
 800dd68:	0719      	lsls	r1, r3, #28
 800dd6a:	bf04      	itt	eq
 800dd6c:	091b      	lsreq	r3, r3, #4
 800dd6e:	3004      	addeq	r0, #4
 800dd70:	0799      	lsls	r1, r3, #30
 800dd72:	bf04      	itt	eq
 800dd74:	089b      	lsreq	r3, r3, #2
 800dd76:	3002      	addeq	r0, #2
 800dd78:	07d9      	lsls	r1, r3, #31
 800dd7a:	d403      	bmi.n	800dd84 <__lo0bits+0x4e>
 800dd7c:	085b      	lsrs	r3, r3, #1
 800dd7e:	f100 0001 	add.w	r0, r0, #1
 800dd82:	d003      	beq.n	800dd8c <__lo0bits+0x56>
 800dd84:	6013      	str	r3, [r2, #0]
 800dd86:	4770      	bx	lr
 800dd88:	2000      	movs	r0, #0
 800dd8a:	4770      	bx	lr
 800dd8c:	2020      	movs	r0, #32
 800dd8e:	4770      	bx	lr

0800dd90 <__i2b>:
 800dd90:	b510      	push	{r4, lr}
 800dd92:	460c      	mov	r4, r1
 800dd94:	2101      	movs	r1, #1
 800dd96:	f7ff ff07 	bl	800dba8 <_Balloc>
 800dd9a:	4602      	mov	r2, r0
 800dd9c:	b928      	cbnz	r0, 800ddaa <__i2b+0x1a>
 800dd9e:	4b05      	ldr	r3, [pc, #20]	@ (800ddb4 <__i2b+0x24>)
 800dda0:	4805      	ldr	r0, [pc, #20]	@ (800ddb8 <__i2b+0x28>)
 800dda2:	f240 1145 	movw	r1, #325	@ 0x145
 800dda6:	f000 fe65 	bl	800ea74 <__assert_func>
 800ddaa:	2301      	movs	r3, #1
 800ddac:	6144      	str	r4, [r0, #20]
 800ddae:	6103      	str	r3, [r0, #16]
 800ddb0:	bd10      	pop	{r4, pc}
 800ddb2:	bf00      	nop
 800ddb4:	08010818 	.word	0x08010818
 800ddb8:	08010829 	.word	0x08010829

0800ddbc <__multiply>:
 800ddbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddc0:	4614      	mov	r4, r2
 800ddc2:	690a      	ldr	r2, [r1, #16]
 800ddc4:	6923      	ldr	r3, [r4, #16]
 800ddc6:	429a      	cmp	r2, r3
 800ddc8:	bfa8      	it	ge
 800ddca:	4623      	movge	r3, r4
 800ddcc:	460f      	mov	r7, r1
 800ddce:	bfa4      	itt	ge
 800ddd0:	460c      	movge	r4, r1
 800ddd2:	461f      	movge	r7, r3
 800ddd4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ddd8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800dddc:	68a3      	ldr	r3, [r4, #8]
 800ddde:	6861      	ldr	r1, [r4, #4]
 800dde0:	eb0a 0609 	add.w	r6, sl, r9
 800dde4:	42b3      	cmp	r3, r6
 800dde6:	b085      	sub	sp, #20
 800dde8:	bfb8      	it	lt
 800ddea:	3101      	addlt	r1, #1
 800ddec:	f7ff fedc 	bl	800dba8 <_Balloc>
 800ddf0:	b930      	cbnz	r0, 800de00 <__multiply+0x44>
 800ddf2:	4602      	mov	r2, r0
 800ddf4:	4b44      	ldr	r3, [pc, #272]	@ (800df08 <__multiply+0x14c>)
 800ddf6:	4845      	ldr	r0, [pc, #276]	@ (800df0c <__multiply+0x150>)
 800ddf8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ddfc:	f000 fe3a 	bl	800ea74 <__assert_func>
 800de00:	f100 0514 	add.w	r5, r0, #20
 800de04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800de08:	462b      	mov	r3, r5
 800de0a:	2200      	movs	r2, #0
 800de0c:	4543      	cmp	r3, r8
 800de0e:	d321      	bcc.n	800de54 <__multiply+0x98>
 800de10:	f107 0114 	add.w	r1, r7, #20
 800de14:	f104 0214 	add.w	r2, r4, #20
 800de18:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800de1c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800de20:	9302      	str	r3, [sp, #8]
 800de22:	1b13      	subs	r3, r2, r4
 800de24:	3b15      	subs	r3, #21
 800de26:	f023 0303 	bic.w	r3, r3, #3
 800de2a:	3304      	adds	r3, #4
 800de2c:	f104 0715 	add.w	r7, r4, #21
 800de30:	42ba      	cmp	r2, r7
 800de32:	bf38      	it	cc
 800de34:	2304      	movcc	r3, #4
 800de36:	9301      	str	r3, [sp, #4]
 800de38:	9b02      	ldr	r3, [sp, #8]
 800de3a:	9103      	str	r1, [sp, #12]
 800de3c:	428b      	cmp	r3, r1
 800de3e:	d80c      	bhi.n	800de5a <__multiply+0x9e>
 800de40:	2e00      	cmp	r6, #0
 800de42:	dd03      	ble.n	800de4c <__multiply+0x90>
 800de44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d05b      	beq.n	800df04 <__multiply+0x148>
 800de4c:	6106      	str	r6, [r0, #16]
 800de4e:	b005      	add	sp, #20
 800de50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de54:	f843 2b04 	str.w	r2, [r3], #4
 800de58:	e7d8      	b.n	800de0c <__multiply+0x50>
 800de5a:	f8b1 a000 	ldrh.w	sl, [r1]
 800de5e:	f1ba 0f00 	cmp.w	sl, #0
 800de62:	d024      	beq.n	800deae <__multiply+0xf2>
 800de64:	f104 0e14 	add.w	lr, r4, #20
 800de68:	46a9      	mov	r9, r5
 800de6a:	f04f 0c00 	mov.w	ip, #0
 800de6e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800de72:	f8d9 3000 	ldr.w	r3, [r9]
 800de76:	fa1f fb87 	uxth.w	fp, r7
 800de7a:	b29b      	uxth	r3, r3
 800de7c:	fb0a 330b 	mla	r3, sl, fp, r3
 800de80:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800de84:	f8d9 7000 	ldr.w	r7, [r9]
 800de88:	4463      	add	r3, ip
 800de8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800de8e:	fb0a c70b 	mla	r7, sl, fp, ip
 800de92:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800de96:	b29b      	uxth	r3, r3
 800de98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800de9c:	4572      	cmp	r2, lr
 800de9e:	f849 3b04 	str.w	r3, [r9], #4
 800dea2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dea6:	d8e2      	bhi.n	800de6e <__multiply+0xb2>
 800dea8:	9b01      	ldr	r3, [sp, #4]
 800deaa:	f845 c003 	str.w	ip, [r5, r3]
 800deae:	9b03      	ldr	r3, [sp, #12]
 800deb0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800deb4:	3104      	adds	r1, #4
 800deb6:	f1b9 0f00 	cmp.w	r9, #0
 800deba:	d021      	beq.n	800df00 <__multiply+0x144>
 800debc:	682b      	ldr	r3, [r5, #0]
 800debe:	f104 0c14 	add.w	ip, r4, #20
 800dec2:	46ae      	mov	lr, r5
 800dec4:	f04f 0a00 	mov.w	sl, #0
 800dec8:	f8bc b000 	ldrh.w	fp, [ip]
 800decc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ded0:	fb09 770b 	mla	r7, r9, fp, r7
 800ded4:	4457      	add	r7, sl
 800ded6:	b29b      	uxth	r3, r3
 800ded8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dedc:	f84e 3b04 	str.w	r3, [lr], #4
 800dee0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dee4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dee8:	f8be 3000 	ldrh.w	r3, [lr]
 800deec:	fb09 330a 	mla	r3, r9, sl, r3
 800def0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800def4:	4562      	cmp	r2, ip
 800def6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800defa:	d8e5      	bhi.n	800dec8 <__multiply+0x10c>
 800defc:	9f01      	ldr	r7, [sp, #4]
 800defe:	51eb      	str	r3, [r5, r7]
 800df00:	3504      	adds	r5, #4
 800df02:	e799      	b.n	800de38 <__multiply+0x7c>
 800df04:	3e01      	subs	r6, #1
 800df06:	e79b      	b.n	800de40 <__multiply+0x84>
 800df08:	08010818 	.word	0x08010818
 800df0c:	08010829 	.word	0x08010829

0800df10 <__pow5mult>:
 800df10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df14:	4615      	mov	r5, r2
 800df16:	f012 0203 	ands.w	r2, r2, #3
 800df1a:	4607      	mov	r7, r0
 800df1c:	460e      	mov	r6, r1
 800df1e:	d007      	beq.n	800df30 <__pow5mult+0x20>
 800df20:	4c25      	ldr	r4, [pc, #148]	@ (800dfb8 <__pow5mult+0xa8>)
 800df22:	3a01      	subs	r2, #1
 800df24:	2300      	movs	r3, #0
 800df26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800df2a:	f7ff fe9f 	bl	800dc6c <__multadd>
 800df2e:	4606      	mov	r6, r0
 800df30:	10ad      	asrs	r5, r5, #2
 800df32:	d03d      	beq.n	800dfb0 <__pow5mult+0xa0>
 800df34:	69fc      	ldr	r4, [r7, #28]
 800df36:	b97c      	cbnz	r4, 800df58 <__pow5mult+0x48>
 800df38:	2010      	movs	r0, #16
 800df3a:	f7ff fe2d 	bl	800db98 <malloc>
 800df3e:	4602      	mov	r2, r0
 800df40:	61f8      	str	r0, [r7, #28]
 800df42:	b928      	cbnz	r0, 800df50 <__pow5mult+0x40>
 800df44:	4b1d      	ldr	r3, [pc, #116]	@ (800dfbc <__pow5mult+0xac>)
 800df46:	481e      	ldr	r0, [pc, #120]	@ (800dfc0 <__pow5mult+0xb0>)
 800df48:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800df4c:	f000 fd92 	bl	800ea74 <__assert_func>
 800df50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800df54:	6004      	str	r4, [r0, #0]
 800df56:	60c4      	str	r4, [r0, #12]
 800df58:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800df5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800df60:	b94c      	cbnz	r4, 800df76 <__pow5mult+0x66>
 800df62:	f240 2171 	movw	r1, #625	@ 0x271
 800df66:	4638      	mov	r0, r7
 800df68:	f7ff ff12 	bl	800dd90 <__i2b>
 800df6c:	2300      	movs	r3, #0
 800df6e:	f8c8 0008 	str.w	r0, [r8, #8]
 800df72:	4604      	mov	r4, r0
 800df74:	6003      	str	r3, [r0, #0]
 800df76:	f04f 0900 	mov.w	r9, #0
 800df7a:	07eb      	lsls	r3, r5, #31
 800df7c:	d50a      	bpl.n	800df94 <__pow5mult+0x84>
 800df7e:	4631      	mov	r1, r6
 800df80:	4622      	mov	r2, r4
 800df82:	4638      	mov	r0, r7
 800df84:	f7ff ff1a 	bl	800ddbc <__multiply>
 800df88:	4631      	mov	r1, r6
 800df8a:	4680      	mov	r8, r0
 800df8c:	4638      	mov	r0, r7
 800df8e:	f7ff fe4b 	bl	800dc28 <_Bfree>
 800df92:	4646      	mov	r6, r8
 800df94:	106d      	asrs	r5, r5, #1
 800df96:	d00b      	beq.n	800dfb0 <__pow5mult+0xa0>
 800df98:	6820      	ldr	r0, [r4, #0]
 800df9a:	b938      	cbnz	r0, 800dfac <__pow5mult+0x9c>
 800df9c:	4622      	mov	r2, r4
 800df9e:	4621      	mov	r1, r4
 800dfa0:	4638      	mov	r0, r7
 800dfa2:	f7ff ff0b 	bl	800ddbc <__multiply>
 800dfa6:	6020      	str	r0, [r4, #0]
 800dfa8:	f8c0 9000 	str.w	r9, [r0]
 800dfac:	4604      	mov	r4, r0
 800dfae:	e7e4      	b.n	800df7a <__pow5mult+0x6a>
 800dfb0:	4630      	mov	r0, r6
 800dfb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfb6:	bf00      	nop
 800dfb8:	08010884 	.word	0x08010884
 800dfbc:	080107a9 	.word	0x080107a9
 800dfc0:	08010829 	.word	0x08010829

0800dfc4 <__lshift>:
 800dfc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfc8:	460c      	mov	r4, r1
 800dfca:	6849      	ldr	r1, [r1, #4]
 800dfcc:	6923      	ldr	r3, [r4, #16]
 800dfce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dfd2:	68a3      	ldr	r3, [r4, #8]
 800dfd4:	4607      	mov	r7, r0
 800dfd6:	4691      	mov	r9, r2
 800dfd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dfdc:	f108 0601 	add.w	r6, r8, #1
 800dfe0:	42b3      	cmp	r3, r6
 800dfe2:	db0b      	blt.n	800dffc <__lshift+0x38>
 800dfe4:	4638      	mov	r0, r7
 800dfe6:	f7ff fddf 	bl	800dba8 <_Balloc>
 800dfea:	4605      	mov	r5, r0
 800dfec:	b948      	cbnz	r0, 800e002 <__lshift+0x3e>
 800dfee:	4602      	mov	r2, r0
 800dff0:	4b28      	ldr	r3, [pc, #160]	@ (800e094 <__lshift+0xd0>)
 800dff2:	4829      	ldr	r0, [pc, #164]	@ (800e098 <__lshift+0xd4>)
 800dff4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800dff8:	f000 fd3c 	bl	800ea74 <__assert_func>
 800dffc:	3101      	adds	r1, #1
 800dffe:	005b      	lsls	r3, r3, #1
 800e000:	e7ee      	b.n	800dfe0 <__lshift+0x1c>
 800e002:	2300      	movs	r3, #0
 800e004:	f100 0114 	add.w	r1, r0, #20
 800e008:	f100 0210 	add.w	r2, r0, #16
 800e00c:	4618      	mov	r0, r3
 800e00e:	4553      	cmp	r3, sl
 800e010:	db33      	blt.n	800e07a <__lshift+0xb6>
 800e012:	6920      	ldr	r0, [r4, #16]
 800e014:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e018:	f104 0314 	add.w	r3, r4, #20
 800e01c:	f019 091f 	ands.w	r9, r9, #31
 800e020:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e024:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e028:	d02b      	beq.n	800e082 <__lshift+0xbe>
 800e02a:	f1c9 0e20 	rsb	lr, r9, #32
 800e02e:	468a      	mov	sl, r1
 800e030:	2200      	movs	r2, #0
 800e032:	6818      	ldr	r0, [r3, #0]
 800e034:	fa00 f009 	lsl.w	r0, r0, r9
 800e038:	4310      	orrs	r0, r2
 800e03a:	f84a 0b04 	str.w	r0, [sl], #4
 800e03e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e042:	459c      	cmp	ip, r3
 800e044:	fa22 f20e 	lsr.w	r2, r2, lr
 800e048:	d8f3      	bhi.n	800e032 <__lshift+0x6e>
 800e04a:	ebac 0304 	sub.w	r3, ip, r4
 800e04e:	3b15      	subs	r3, #21
 800e050:	f023 0303 	bic.w	r3, r3, #3
 800e054:	3304      	adds	r3, #4
 800e056:	f104 0015 	add.w	r0, r4, #21
 800e05a:	4584      	cmp	ip, r0
 800e05c:	bf38      	it	cc
 800e05e:	2304      	movcc	r3, #4
 800e060:	50ca      	str	r2, [r1, r3]
 800e062:	b10a      	cbz	r2, 800e068 <__lshift+0xa4>
 800e064:	f108 0602 	add.w	r6, r8, #2
 800e068:	3e01      	subs	r6, #1
 800e06a:	4638      	mov	r0, r7
 800e06c:	612e      	str	r6, [r5, #16]
 800e06e:	4621      	mov	r1, r4
 800e070:	f7ff fdda 	bl	800dc28 <_Bfree>
 800e074:	4628      	mov	r0, r5
 800e076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e07a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e07e:	3301      	adds	r3, #1
 800e080:	e7c5      	b.n	800e00e <__lshift+0x4a>
 800e082:	3904      	subs	r1, #4
 800e084:	f853 2b04 	ldr.w	r2, [r3], #4
 800e088:	f841 2f04 	str.w	r2, [r1, #4]!
 800e08c:	459c      	cmp	ip, r3
 800e08e:	d8f9      	bhi.n	800e084 <__lshift+0xc0>
 800e090:	e7ea      	b.n	800e068 <__lshift+0xa4>
 800e092:	bf00      	nop
 800e094:	08010818 	.word	0x08010818
 800e098:	08010829 	.word	0x08010829

0800e09c <__mcmp>:
 800e09c:	690a      	ldr	r2, [r1, #16]
 800e09e:	4603      	mov	r3, r0
 800e0a0:	6900      	ldr	r0, [r0, #16]
 800e0a2:	1a80      	subs	r0, r0, r2
 800e0a4:	b530      	push	{r4, r5, lr}
 800e0a6:	d10e      	bne.n	800e0c6 <__mcmp+0x2a>
 800e0a8:	3314      	adds	r3, #20
 800e0aa:	3114      	adds	r1, #20
 800e0ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e0b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e0b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e0b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e0bc:	4295      	cmp	r5, r2
 800e0be:	d003      	beq.n	800e0c8 <__mcmp+0x2c>
 800e0c0:	d205      	bcs.n	800e0ce <__mcmp+0x32>
 800e0c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e0c6:	bd30      	pop	{r4, r5, pc}
 800e0c8:	42a3      	cmp	r3, r4
 800e0ca:	d3f3      	bcc.n	800e0b4 <__mcmp+0x18>
 800e0cc:	e7fb      	b.n	800e0c6 <__mcmp+0x2a>
 800e0ce:	2001      	movs	r0, #1
 800e0d0:	e7f9      	b.n	800e0c6 <__mcmp+0x2a>
	...

0800e0d4 <__mdiff>:
 800e0d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0d8:	4689      	mov	r9, r1
 800e0da:	4606      	mov	r6, r0
 800e0dc:	4611      	mov	r1, r2
 800e0de:	4648      	mov	r0, r9
 800e0e0:	4614      	mov	r4, r2
 800e0e2:	f7ff ffdb 	bl	800e09c <__mcmp>
 800e0e6:	1e05      	subs	r5, r0, #0
 800e0e8:	d112      	bne.n	800e110 <__mdiff+0x3c>
 800e0ea:	4629      	mov	r1, r5
 800e0ec:	4630      	mov	r0, r6
 800e0ee:	f7ff fd5b 	bl	800dba8 <_Balloc>
 800e0f2:	4602      	mov	r2, r0
 800e0f4:	b928      	cbnz	r0, 800e102 <__mdiff+0x2e>
 800e0f6:	4b3f      	ldr	r3, [pc, #252]	@ (800e1f4 <__mdiff+0x120>)
 800e0f8:	f240 2137 	movw	r1, #567	@ 0x237
 800e0fc:	483e      	ldr	r0, [pc, #248]	@ (800e1f8 <__mdiff+0x124>)
 800e0fe:	f000 fcb9 	bl	800ea74 <__assert_func>
 800e102:	2301      	movs	r3, #1
 800e104:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e108:	4610      	mov	r0, r2
 800e10a:	b003      	add	sp, #12
 800e10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e110:	bfbc      	itt	lt
 800e112:	464b      	movlt	r3, r9
 800e114:	46a1      	movlt	r9, r4
 800e116:	4630      	mov	r0, r6
 800e118:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e11c:	bfba      	itte	lt
 800e11e:	461c      	movlt	r4, r3
 800e120:	2501      	movlt	r5, #1
 800e122:	2500      	movge	r5, #0
 800e124:	f7ff fd40 	bl	800dba8 <_Balloc>
 800e128:	4602      	mov	r2, r0
 800e12a:	b918      	cbnz	r0, 800e134 <__mdiff+0x60>
 800e12c:	4b31      	ldr	r3, [pc, #196]	@ (800e1f4 <__mdiff+0x120>)
 800e12e:	f240 2145 	movw	r1, #581	@ 0x245
 800e132:	e7e3      	b.n	800e0fc <__mdiff+0x28>
 800e134:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e138:	6926      	ldr	r6, [r4, #16]
 800e13a:	60c5      	str	r5, [r0, #12]
 800e13c:	f109 0310 	add.w	r3, r9, #16
 800e140:	f109 0514 	add.w	r5, r9, #20
 800e144:	f104 0e14 	add.w	lr, r4, #20
 800e148:	f100 0b14 	add.w	fp, r0, #20
 800e14c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e150:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e154:	9301      	str	r3, [sp, #4]
 800e156:	46d9      	mov	r9, fp
 800e158:	f04f 0c00 	mov.w	ip, #0
 800e15c:	9b01      	ldr	r3, [sp, #4]
 800e15e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e162:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e166:	9301      	str	r3, [sp, #4]
 800e168:	fa1f f38a 	uxth.w	r3, sl
 800e16c:	4619      	mov	r1, r3
 800e16e:	b283      	uxth	r3, r0
 800e170:	1acb      	subs	r3, r1, r3
 800e172:	0c00      	lsrs	r0, r0, #16
 800e174:	4463      	add	r3, ip
 800e176:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e17a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e17e:	b29b      	uxth	r3, r3
 800e180:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e184:	4576      	cmp	r6, lr
 800e186:	f849 3b04 	str.w	r3, [r9], #4
 800e18a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e18e:	d8e5      	bhi.n	800e15c <__mdiff+0x88>
 800e190:	1b33      	subs	r3, r6, r4
 800e192:	3b15      	subs	r3, #21
 800e194:	f023 0303 	bic.w	r3, r3, #3
 800e198:	3415      	adds	r4, #21
 800e19a:	3304      	adds	r3, #4
 800e19c:	42a6      	cmp	r6, r4
 800e19e:	bf38      	it	cc
 800e1a0:	2304      	movcc	r3, #4
 800e1a2:	441d      	add	r5, r3
 800e1a4:	445b      	add	r3, fp
 800e1a6:	461e      	mov	r6, r3
 800e1a8:	462c      	mov	r4, r5
 800e1aa:	4544      	cmp	r4, r8
 800e1ac:	d30e      	bcc.n	800e1cc <__mdiff+0xf8>
 800e1ae:	f108 0103 	add.w	r1, r8, #3
 800e1b2:	1b49      	subs	r1, r1, r5
 800e1b4:	f021 0103 	bic.w	r1, r1, #3
 800e1b8:	3d03      	subs	r5, #3
 800e1ba:	45a8      	cmp	r8, r5
 800e1bc:	bf38      	it	cc
 800e1be:	2100      	movcc	r1, #0
 800e1c0:	440b      	add	r3, r1
 800e1c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e1c6:	b191      	cbz	r1, 800e1ee <__mdiff+0x11a>
 800e1c8:	6117      	str	r7, [r2, #16]
 800e1ca:	e79d      	b.n	800e108 <__mdiff+0x34>
 800e1cc:	f854 1b04 	ldr.w	r1, [r4], #4
 800e1d0:	46e6      	mov	lr, ip
 800e1d2:	0c08      	lsrs	r0, r1, #16
 800e1d4:	fa1c fc81 	uxtah	ip, ip, r1
 800e1d8:	4471      	add	r1, lr
 800e1da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e1de:	b289      	uxth	r1, r1
 800e1e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e1e4:	f846 1b04 	str.w	r1, [r6], #4
 800e1e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e1ec:	e7dd      	b.n	800e1aa <__mdiff+0xd6>
 800e1ee:	3f01      	subs	r7, #1
 800e1f0:	e7e7      	b.n	800e1c2 <__mdiff+0xee>
 800e1f2:	bf00      	nop
 800e1f4:	08010818 	.word	0x08010818
 800e1f8:	08010829 	.word	0x08010829

0800e1fc <__d2b>:
 800e1fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e200:	460f      	mov	r7, r1
 800e202:	2101      	movs	r1, #1
 800e204:	ec59 8b10 	vmov	r8, r9, d0
 800e208:	4616      	mov	r6, r2
 800e20a:	f7ff fccd 	bl	800dba8 <_Balloc>
 800e20e:	4604      	mov	r4, r0
 800e210:	b930      	cbnz	r0, 800e220 <__d2b+0x24>
 800e212:	4602      	mov	r2, r0
 800e214:	4b23      	ldr	r3, [pc, #140]	@ (800e2a4 <__d2b+0xa8>)
 800e216:	4824      	ldr	r0, [pc, #144]	@ (800e2a8 <__d2b+0xac>)
 800e218:	f240 310f 	movw	r1, #783	@ 0x30f
 800e21c:	f000 fc2a 	bl	800ea74 <__assert_func>
 800e220:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e224:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e228:	b10d      	cbz	r5, 800e22e <__d2b+0x32>
 800e22a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e22e:	9301      	str	r3, [sp, #4]
 800e230:	f1b8 0300 	subs.w	r3, r8, #0
 800e234:	d023      	beq.n	800e27e <__d2b+0x82>
 800e236:	4668      	mov	r0, sp
 800e238:	9300      	str	r3, [sp, #0]
 800e23a:	f7ff fd7c 	bl	800dd36 <__lo0bits>
 800e23e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e242:	b1d0      	cbz	r0, 800e27a <__d2b+0x7e>
 800e244:	f1c0 0320 	rsb	r3, r0, #32
 800e248:	fa02 f303 	lsl.w	r3, r2, r3
 800e24c:	430b      	orrs	r3, r1
 800e24e:	40c2      	lsrs	r2, r0
 800e250:	6163      	str	r3, [r4, #20]
 800e252:	9201      	str	r2, [sp, #4]
 800e254:	9b01      	ldr	r3, [sp, #4]
 800e256:	61a3      	str	r3, [r4, #24]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	bf0c      	ite	eq
 800e25c:	2201      	moveq	r2, #1
 800e25e:	2202      	movne	r2, #2
 800e260:	6122      	str	r2, [r4, #16]
 800e262:	b1a5      	cbz	r5, 800e28e <__d2b+0x92>
 800e264:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e268:	4405      	add	r5, r0
 800e26a:	603d      	str	r5, [r7, #0]
 800e26c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e270:	6030      	str	r0, [r6, #0]
 800e272:	4620      	mov	r0, r4
 800e274:	b003      	add	sp, #12
 800e276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e27a:	6161      	str	r1, [r4, #20]
 800e27c:	e7ea      	b.n	800e254 <__d2b+0x58>
 800e27e:	a801      	add	r0, sp, #4
 800e280:	f7ff fd59 	bl	800dd36 <__lo0bits>
 800e284:	9b01      	ldr	r3, [sp, #4]
 800e286:	6163      	str	r3, [r4, #20]
 800e288:	3020      	adds	r0, #32
 800e28a:	2201      	movs	r2, #1
 800e28c:	e7e8      	b.n	800e260 <__d2b+0x64>
 800e28e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e292:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e296:	6038      	str	r0, [r7, #0]
 800e298:	6918      	ldr	r0, [r3, #16]
 800e29a:	f7ff fd2d 	bl	800dcf8 <__hi0bits>
 800e29e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e2a2:	e7e5      	b.n	800e270 <__d2b+0x74>
 800e2a4:	08010818 	.word	0x08010818
 800e2a8:	08010829 	.word	0x08010829

0800e2ac <__ssputs_r>:
 800e2ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2b0:	688e      	ldr	r6, [r1, #8]
 800e2b2:	461f      	mov	r7, r3
 800e2b4:	42be      	cmp	r6, r7
 800e2b6:	680b      	ldr	r3, [r1, #0]
 800e2b8:	4682      	mov	sl, r0
 800e2ba:	460c      	mov	r4, r1
 800e2bc:	4690      	mov	r8, r2
 800e2be:	d82d      	bhi.n	800e31c <__ssputs_r+0x70>
 800e2c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e2c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e2c8:	d026      	beq.n	800e318 <__ssputs_r+0x6c>
 800e2ca:	6965      	ldr	r5, [r4, #20]
 800e2cc:	6909      	ldr	r1, [r1, #16]
 800e2ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e2d2:	eba3 0901 	sub.w	r9, r3, r1
 800e2d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e2da:	1c7b      	adds	r3, r7, #1
 800e2dc:	444b      	add	r3, r9
 800e2de:	106d      	asrs	r5, r5, #1
 800e2e0:	429d      	cmp	r5, r3
 800e2e2:	bf38      	it	cc
 800e2e4:	461d      	movcc	r5, r3
 800e2e6:	0553      	lsls	r3, r2, #21
 800e2e8:	d527      	bpl.n	800e33a <__ssputs_r+0x8e>
 800e2ea:	4629      	mov	r1, r5
 800e2ec:	f7fd fe48 	bl	800bf80 <_malloc_r>
 800e2f0:	4606      	mov	r6, r0
 800e2f2:	b360      	cbz	r0, 800e34e <__ssputs_r+0xa2>
 800e2f4:	6921      	ldr	r1, [r4, #16]
 800e2f6:	464a      	mov	r2, r9
 800e2f8:	f7fe fdf3 	bl	800cee2 <memcpy>
 800e2fc:	89a3      	ldrh	r3, [r4, #12]
 800e2fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e306:	81a3      	strh	r3, [r4, #12]
 800e308:	6126      	str	r6, [r4, #16]
 800e30a:	6165      	str	r5, [r4, #20]
 800e30c:	444e      	add	r6, r9
 800e30e:	eba5 0509 	sub.w	r5, r5, r9
 800e312:	6026      	str	r6, [r4, #0]
 800e314:	60a5      	str	r5, [r4, #8]
 800e316:	463e      	mov	r6, r7
 800e318:	42be      	cmp	r6, r7
 800e31a:	d900      	bls.n	800e31e <__ssputs_r+0x72>
 800e31c:	463e      	mov	r6, r7
 800e31e:	6820      	ldr	r0, [r4, #0]
 800e320:	4632      	mov	r2, r6
 800e322:	4641      	mov	r1, r8
 800e324:	f000 fb6a 	bl	800e9fc <memmove>
 800e328:	68a3      	ldr	r3, [r4, #8]
 800e32a:	1b9b      	subs	r3, r3, r6
 800e32c:	60a3      	str	r3, [r4, #8]
 800e32e:	6823      	ldr	r3, [r4, #0]
 800e330:	4433      	add	r3, r6
 800e332:	6023      	str	r3, [r4, #0]
 800e334:	2000      	movs	r0, #0
 800e336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e33a:	462a      	mov	r2, r5
 800e33c:	f000 fbde 	bl	800eafc <_realloc_r>
 800e340:	4606      	mov	r6, r0
 800e342:	2800      	cmp	r0, #0
 800e344:	d1e0      	bne.n	800e308 <__ssputs_r+0x5c>
 800e346:	6921      	ldr	r1, [r4, #16]
 800e348:	4650      	mov	r0, sl
 800e34a:	f7fd fdad 	bl	800bea8 <_free_r>
 800e34e:	230c      	movs	r3, #12
 800e350:	f8ca 3000 	str.w	r3, [sl]
 800e354:	89a3      	ldrh	r3, [r4, #12]
 800e356:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e35a:	81a3      	strh	r3, [r4, #12]
 800e35c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e360:	e7e9      	b.n	800e336 <__ssputs_r+0x8a>
	...

0800e364 <_svfiprintf_r>:
 800e364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e368:	4698      	mov	r8, r3
 800e36a:	898b      	ldrh	r3, [r1, #12]
 800e36c:	061b      	lsls	r3, r3, #24
 800e36e:	b09d      	sub	sp, #116	@ 0x74
 800e370:	4607      	mov	r7, r0
 800e372:	460d      	mov	r5, r1
 800e374:	4614      	mov	r4, r2
 800e376:	d510      	bpl.n	800e39a <_svfiprintf_r+0x36>
 800e378:	690b      	ldr	r3, [r1, #16]
 800e37a:	b973      	cbnz	r3, 800e39a <_svfiprintf_r+0x36>
 800e37c:	2140      	movs	r1, #64	@ 0x40
 800e37e:	f7fd fdff 	bl	800bf80 <_malloc_r>
 800e382:	6028      	str	r0, [r5, #0]
 800e384:	6128      	str	r0, [r5, #16]
 800e386:	b930      	cbnz	r0, 800e396 <_svfiprintf_r+0x32>
 800e388:	230c      	movs	r3, #12
 800e38a:	603b      	str	r3, [r7, #0]
 800e38c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e390:	b01d      	add	sp, #116	@ 0x74
 800e392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e396:	2340      	movs	r3, #64	@ 0x40
 800e398:	616b      	str	r3, [r5, #20]
 800e39a:	2300      	movs	r3, #0
 800e39c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e39e:	2320      	movs	r3, #32
 800e3a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e3a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3a8:	2330      	movs	r3, #48	@ 0x30
 800e3aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e548 <_svfiprintf_r+0x1e4>
 800e3ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e3b2:	f04f 0901 	mov.w	r9, #1
 800e3b6:	4623      	mov	r3, r4
 800e3b8:	469a      	mov	sl, r3
 800e3ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3be:	b10a      	cbz	r2, 800e3c4 <_svfiprintf_r+0x60>
 800e3c0:	2a25      	cmp	r2, #37	@ 0x25
 800e3c2:	d1f9      	bne.n	800e3b8 <_svfiprintf_r+0x54>
 800e3c4:	ebba 0b04 	subs.w	fp, sl, r4
 800e3c8:	d00b      	beq.n	800e3e2 <_svfiprintf_r+0x7e>
 800e3ca:	465b      	mov	r3, fp
 800e3cc:	4622      	mov	r2, r4
 800e3ce:	4629      	mov	r1, r5
 800e3d0:	4638      	mov	r0, r7
 800e3d2:	f7ff ff6b 	bl	800e2ac <__ssputs_r>
 800e3d6:	3001      	adds	r0, #1
 800e3d8:	f000 80a7 	beq.w	800e52a <_svfiprintf_r+0x1c6>
 800e3dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e3de:	445a      	add	r2, fp
 800e3e0:	9209      	str	r2, [sp, #36]	@ 0x24
 800e3e2:	f89a 3000 	ldrb.w	r3, [sl]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	f000 809f 	beq.w	800e52a <_svfiprintf_r+0x1c6>
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e3f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e3f6:	f10a 0a01 	add.w	sl, sl, #1
 800e3fa:	9304      	str	r3, [sp, #16]
 800e3fc:	9307      	str	r3, [sp, #28]
 800e3fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e402:	931a      	str	r3, [sp, #104]	@ 0x68
 800e404:	4654      	mov	r4, sl
 800e406:	2205      	movs	r2, #5
 800e408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e40c:	484e      	ldr	r0, [pc, #312]	@ (800e548 <_svfiprintf_r+0x1e4>)
 800e40e:	f7f1 feff 	bl	8000210 <memchr>
 800e412:	9a04      	ldr	r2, [sp, #16]
 800e414:	b9d8      	cbnz	r0, 800e44e <_svfiprintf_r+0xea>
 800e416:	06d0      	lsls	r0, r2, #27
 800e418:	bf44      	itt	mi
 800e41a:	2320      	movmi	r3, #32
 800e41c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e420:	0711      	lsls	r1, r2, #28
 800e422:	bf44      	itt	mi
 800e424:	232b      	movmi	r3, #43	@ 0x2b
 800e426:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e42a:	f89a 3000 	ldrb.w	r3, [sl]
 800e42e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e430:	d015      	beq.n	800e45e <_svfiprintf_r+0xfa>
 800e432:	9a07      	ldr	r2, [sp, #28]
 800e434:	4654      	mov	r4, sl
 800e436:	2000      	movs	r0, #0
 800e438:	f04f 0c0a 	mov.w	ip, #10
 800e43c:	4621      	mov	r1, r4
 800e43e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e442:	3b30      	subs	r3, #48	@ 0x30
 800e444:	2b09      	cmp	r3, #9
 800e446:	d94b      	bls.n	800e4e0 <_svfiprintf_r+0x17c>
 800e448:	b1b0      	cbz	r0, 800e478 <_svfiprintf_r+0x114>
 800e44a:	9207      	str	r2, [sp, #28]
 800e44c:	e014      	b.n	800e478 <_svfiprintf_r+0x114>
 800e44e:	eba0 0308 	sub.w	r3, r0, r8
 800e452:	fa09 f303 	lsl.w	r3, r9, r3
 800e456:	4313      	orrs	r3, r2
 800e458:	9304      	str	r3, [sp, #16]
 800e45a:	46a2      	mov	sl, r4
 800e45c:	e7d2      	b.n	800e404 <_svfiprintf_r+0xa0>
 800e45e:	9b03      	ldr	r3, [sp, #12]
 800e460:	1d19      	adds	r1, r3, #4
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	9103      	str	r1, [sp, #12]
 800e466:	2b00      	cmp	r3, #0
 800e468:	bfbb      	ittet	lt
 800e46a:	425b      	neglt	r3, r3
 800e46c:	f042 0202 	orrlt.w	r2, r2, #2
 800e470:	9307      	strge	r3, [sp, #28]
 800e472:	9307      	strlt	r3, [sp, #28]
 800e474:	bfb8      	it	lt
 800e476:	9204      	strlt	r2, [sp, #16]
 800e478:	7823      	ldrb	r3, [r4, #0]
 800e47a:	2b2e      	cmp	r3, #46	@ 0x2e
 800e47c:	d10a      	bne.n	800e494 <_svfiprintf_r+0x130>
 800e47e:	7863      	ldrb	r3, [r4, #1]
 800e480:	2b2a      	cmp	r3, #42	@ 0x2a
 800e482:	d132      	bne.n	800e4ea <_svfiprintf_r+0x186>
 800e484:	9b03      	ldr	r3, [sp, #12]
 800e486:	1d1a      	adds	r2, r3, #4
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	9203      	str	r2, [sp, #12]
 800e48c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e490:	3402      	adds	r4, #2
 800e492:	9305      	str	r3, [sp, #20]
 800e494:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e558 <_svfiprintf_r+0x1f4>
 800e498:	7821      	ldrb	r1, [r4, #0]
 800e49a:	2203      	movs	r2, #3
 800e49c:	4650      	mov	r0, sl
 800e49e:	f7f1 feb7 	bl	8000210 <memchr>
 800e4a2:	b138      	cbz	r0, 800e4b4 <_svfiprintf_r+0x150>
 800e4a4:	9b04      	ldr	r3, [sp, #16]
 800e4a6:	eba0 000a 	sub.w	r0, r0, sl
 800e4aa:	2240      	movs	r2, #64	@ 0x40
 800e4ac:	4082      	lsls	r2, r0
 800e4ae:	4313      	orrs	r3, r2
 800e4b0:	3401      	adds	r4, #1
 800e4b2:	9304      	str	r3, [sp, #16]
 800e4b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4b8:	4824      	ldr	r0, [pc, #144]	@ (800e54c <_svfiprintf_r+0x1e8>)
 800e4ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e4be:	2206      	movs	r2, #6
 800e4c0:	f7f1 fea6 	bl	8000210 <memchr>
 800e4c4:	2800      	cmp	r0, #0
 800e4c6:	d036      	beq.n	800e536 <_svfiprintf_r+0x1d2>
 800e4c8:	4b21      	ldr	r3, [pc, #132]	@ (800e550 <_svfiprintf_r+0x1ec>)
 800e4ca:	bb1b      	cbnz	r3, 800e514 <_svfiprintf_r+0x1b0>
 800e4cc:	9b03      	ldr	r3, [sp, #12]
 800e4ce:	3307      	adds	r3, #7
 800e4d0:	f023 0307 	bic.w	r3, r3, #7
 800e4d4:	3308      	adds	r3, #8
 800e4d6:	9303      	str	r3, [sp, #12]
 800e4d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4da:	4433      	add	r3, r6
 800e4dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4de:	e76a      	b.n	800e3b6 <_svfiprintf_r+0x52>
 800e4e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e4e4:	460c      	mov	r4, r1
 800e4e6:	2001      	movs	r0, #1
 800e4e8:	e7a8      	b.n	800e43c <_svfiprintf_r+0xd8>
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	3401      	adds	r4, #1
 800e4ee:	9305      	str	r3, [sp, #20]
 800e4f0:	4619      	mov	r1, r3
 800e4f2:	f04f 0c0a 	mov.w	ip, #10
 800e4f6:	4620      	mov	r0, r4
 800e4f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4fc:	3a30      	subs	r2, #48	@ 0x30
 800e4fe:	2a09      	cmp	r2, #9
 800e500:	d903      	bls.n	800e50a <_svfiprintf_r+0x1a6>
 800e502:	2b00      	cmp	r3, #0
 800e504:	d0c6      	beq.n	800e494 <_svfiprintf_r+0x130>
 800e506:	9105      	str	r1, [sp, #20]
 800e508:	e7c4      	b.n	800e494 <_svfiprintf_r+0x130>
 800e50a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e50e:	4604      	mov	r4, r0
 800e510:	2301      	movs	r3, #1
 800e512:	e7f0      	b.n	800e4f6 <_svfiprintf_r+0x192>
 800e514:	ab03      	add	r3, sp, #12
 800e516:	9300      	str	r3, [sp, #0]
 800e518:	462a      	mov	r2, r5
 800e51a:	4b0e      	ldr	r3, [pc, #56]	@ (800e554 <_svfiprintf_r+0x1f0>)
 800e51c:	a904      	add	r1, sp, #16
 800e51e:	4638      	mov	r0, r7
 800e520:	f7fd fe5a 	bl	800c1d8 <_printf_float>
 800e524:	1c42      	adds	r2, r0, #1
 800e526:	4606      	mov	r6, r0
 800e528:	d1d6      	bne.n	800e4d8 <_svfiprintf_r+0x174>
 800e52a:	89ab      	ldrh	r3, [r5, #12]
 800e52c:	065b      	lsls	r3, r3, #25
 800e52e:	f53f af2d 	bmi.w	800e38c <_svfiprintf_r+0x28>
 800e532:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e534:	e72c      	b.n	800e390 <_svfiprintf_r+0x2c>
 800e536:	ab03      	add	r3, sp, #12
 800e538:	9300      	str	r3, [sp, #0]
 800e53a:	462a      	mov	r2, r5
 800e53c:	4b05      	ldr	r3, [pc, #20]	@ (800e554 <_svfiprintf_r+0x1f0>)
 800e53e:	a904      	add	r1, sp, #16
 800e540:	4638      	mov	r0, r7
 800e542:	f7fe f8e1 	bl	800c708 <_printf_i>
 800e546:	e7ed      	b.n	800e524 <_svfiprintf_r+0x1c0>
 800e548:	08010980 	.word	0x08010980
 800e54c:	0801098a 	.word	0x0801098a
 800e550:	0800c1d9 	.word	0x0800c1d9
 800e554:	0800e2ad 	.word	0x0800e2ad
 800e558:	08010986 	.word	0x08010986

0800e55c <__sfputc_r>:
 800e55c:	6893      	ldr	r3, [r2, #8]
 800e55e:	3b01      	subs	r3, #1
 800e560:	2b00      	cmp	r3, #0
 800e562:	b410      	push	{r4}
 800e564:	6093      	str	r3, [r2, #8]
 800e566:	da08      	bge.n	800e57a <__sfputc_r+0x1e>
 800e568:	6994      	ldr	r4, [r2, #24]
 800e56a:	42a3      	cmp	r3, r4
 800e56c:	db01      	blt.n	800e572 <__sfputc_r+0x16>
 800e56e:	290a      	cmp	r1, #10
 800e570:	d103      	bne.n	800e57a <__sfputc_r+0x1e>
 800e572:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e576:	f7fe bb90 	b.w	800cc9a <__swbuf_r>
 800e57a:	6813      	ldr	r3, [r2, #0]
 800e57c:	1c58      	adds	r0, r3, #1
 800e57e:	6010      	str	r0, [r2, #0]
 800e580:	7019      	strb	r1, [r3, #0]
 800e582:	4608      	mov	r0, r1
 800e584:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e588:	4770      	bx	lr

0800e58a <__sfputs_r>:
 800e58a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e58c:	4606      	mov	r6, r0
 800e58e:	460f      	mov	r7, r1
 800e590:	4614      	mov	r4, r2
 800e592:	18d5      	adds	r5, r2, r3
 800e594:	42ac      	cmp	r4, r5
 800e596:	d101      	bne.n	800e59c <__sfputs_r+0x12>
 800e598:	2000      	movs	r0, #0
 800e59a:	e007      	b.n	800e5ac <__sfputs_r+0x22>
 800e59c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5a0:	463a      	mov	r2, r7
 800e5a2:	4630      	mov	r0, r6
 800e5a4:	f7ff ffda 	bl	800e55c <__sfputc_r>
 800e5a8:	1c43      	adds	r3, r0, #1
 800e5aa:	d1f3      	bne.n	800e594 <__sfputs_r+0xa>
 800e5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e5b0 <_vfiprintf_r>:
 800e5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5b4:	460d      	mov	r5, r1
 800e5b6:	b09d      	sub	sp, #116	@ 0x74
 800e5b8:	4614      	mov	r4, r2
 800e5ba:	4698      	mov	r8, r3
 800e5bc:	4606      	mov	r6, r0
 800e5be:	b118      	cbz	r0, 800e5c8 <_vfiprintf_r+0x18>
 800e5c0:	6a03      	ldr	r3, [r0, #32]
 800e5c2:	b90b      	cbnz	r3, 800e5c8 <_vfiprintf_r+0x18>
 800e5c4:	f7fe fa4c 	bl	800ca60 <__sinit>
 800e5c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e5ca:	07d9      	lsls	r1, r3, #31
 800e5cc:	d405      	bmi.n	800e5da <_vfiprintf_r+0x2a>
 800e5ce:	89ab      	ldrh	r3, [r5, #12]
 800e5d0:	059a      	lsls	r2, r3, #22
 800e5d2:	d402      	bmi.n	800e5da <_vfiprintf_r+0x2a>
 800e5d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e5d6:	f7fe fc82 	bl	800cede <__retarget_lock_acquire_recursive>
 800e5da:	89ab      	ldrh	r3, [r5, #12]
 800e5dc:	071b      	lsls	r3, r3, #28
 800e5de:	d501      	bpl.n	800e5e4 <_vfiprintf_r+0x34>
 800e5e0:	692b      	ldr	r3, [r5, #16]
 800e5e2:	b99b      	cbnz	r3, 800e60c <_vfiprintf_r+0x5c>
 800e5e4:	4629      	mov	r1, r5
 800e5e6:	4630      	mov	r0, r6
 800e5e8:	f7fe fb96 	bl	800cd18 <__swsetup_r>
 800e5ec:	b170      	cbz	r0, 800e60c <_vfiprintf_r+0x5c>
 800e5ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e5f0:	07dc      	lsls	r4, r3, #31
 800e5f2:	d504      	bpl.n	800e5fe <_vfiprintf_r+0x4e>
 800e5f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e5f8:	b01d      	add	sp, #116	@ 0x74
 800e5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5fe:	89ab      	ldrh	r3, [r5, #12]
 800e600:	0598      	lsls	r0, r3, #22
 800e602:	d4f7      	bmi.n	800e5f4 <_vfiprintf_r+0x44>
 800e604:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e606:	f7fe fc6b 	bl	800cee0 <__retarget_lock_release_recursive>
 800e60a:	e7f3      	b.n	800e5f4 <_vfiprintf_r+0x44>
 800e60c:	2300      	movs	r3, #0
 800e60e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e610:	2320      	movs	r3, #32
 800e612:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e616:	f8cd 800c 	str.w	r8, [sp, #12]
 800e61a:	2330      	movs	r3, #48	@ 0x30
 800e61c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e7cc <_vfiprintf_r+0x21c>
 800e620:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e624:	f04f 0901 	mov.w	r9, #1
 800e628:	4623      	mov	r3, r4
 800e62a:	469a      	mov	sl, r3
 800e62c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e630:	b10a      	cbz	r2, 800e636 <_vfiprintf_r+0x86>
 800e632:	2a25      	cmp	r2, #37	@ 0x25
 800e634:	d1f9      	bne.n	800e62a <_vfiprintf_r+0x7a>
 800e636:	ebba 0b04 	subs.w	fp, sl, r4
 800e63a:	d00b      	beq.n	800e654 <_vfiprintf_r+0xa4>
 800e63c:	465b      	mov	r3, fp
 800e63e:	4622      	mov	r2, r4
 800e640:	4629      	mov	r1, r5
 800e642:	4630      	mov	r0, r6
 800e644:	f7ff ffa1 	bl	800e58a <__sfputs_r>
 800e648:	3001      	adds	r0, #1
 800e64a:	f000 80a7 	beq.w	800e79c <_vfiprintf_r+0x1ec>
 800e64e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e650:	445a      	add	r2, fp
 800e652:	9209      	str	r2, [sp, #36]	@ 0x24
 800e654:	f89a 3000 	ldrb.w	r3, [sl]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	f000 809f 	beq.w	800e79c <_vfiprintf_r+0x1ec>
 800e65e:	2300      	movs	r3, #0
 800e660:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e664:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e668:	f10a 0a01 	add.w	sl, sl, #1
 800e66c:	9304      	str	r3, [sp, #16]
 800e66e:	9307      	str	r3, [sp, #28]
 800e670:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e674:	931a      	str	r3, [sp, #104]	@ 0x68
 800e676:	4654      	mov	r4, sl
 800e678:	2205      	movs	r2, #5
 800e67a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e67e:	4853      	ldr	r0, [pc, #332]	@ (800e7cc <_vfiprintf_r+0x21c>)
 800e680:	f7f1 fdc6 	bl	8000210 <memchr>
 800e684:	9a04      	ldr	r2, [sp, #16]
 800e686:	b9d8      	cbnz	r0, 800e6c0 <_vfiprintf_r+0x110>
 800e688:	06d1      	lsls	r1, r2, #27
 800e68a:	bf44      	itt	mi
 800e68c:	2320      	movmi	r3, #32
 800e68e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e692:	0713      	lsls	r3, r2, #28
 800e694:	bf44      	itt	mi
 800e696:	232b      	movmi	r3, #43	@ 0x2b
 800e698:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e69c:	f89a 3000 	ldrb.w	r3, [sl]
 800e6a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e6a2:	d015      	beq.n	800e6d0 <_vfiprintf_r+0x120>
 800e6a4:	9a07      	ldr	r2, [sp, #28]
 800e6a6:	4654      	mov	r4, sl
 800e6a8:	2000      	movs	r0, #0
 800e6aa:	f04f 0c0a 	mov.w	ip, #10
 800e6ae:	4621      	mov	r1, r4
 800e6b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6b4:	3b30      	subs	r3, #48	@ 0x30
 800e6b6:	2b09      	cmp	r3, #9
 800e6b8:	d94b      	bls.n	800e752 <_vfiprintf_r+0x1a2>
 800e6ba:	b1b0      	cbz	r0, 800e6ea <_vfiprintf_r+0x13a>
 800e6bc:	9207      	str	r2, [sp, #28]
 800e6be:	e014      	b.n	800e6ea <_vfiprintf_r+0x13a>
 800e6c0:	eba0 0308 	sub.w	r3, r0, r8
 800e6c4:	fa09 f303 	lsl.w	r3, r9, r3
 800e6c8:	4313      	orrs	r3, r2
 800e6ca:	9304      	str	r3, [sp, #16]
 800e6cc:	46a2      	mov	sl, r4
 800e6ce:	e7d2      	b.n	800e676 <_vfiprintf_r+0xc6>
 800e6d0:	9b03      	ldr	r3, [sp, #12]
 800e6d2:	1d19      	adds	r1, r3, #4
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	9103      	str	r1, [sp, #12]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	bfbb      	ittet	lt
 800e6dc:	425b      	neglt	r3, r3
 800e6de:	f042 0202 	orrlt.w	r2, r2, #2
 800e6e2:	9307      	strge	r3, [sp, #28]
 800e6e4:	9307      	strlt	r3, [sp, #28]
 800e6e6:	bfb8      	it	lt
 800e6e8:	9204      	strlt	r2, [sp, #16]
 800e6ea:	7823      	ldrb	r3, [r4, #0]
 800e6ec:	2b2e      	cmp	r3, #46	@ 0x2e
 800e6ee:	d10a      	bne.n	800e706 <_vfiprintf_r+0x156>
 800e6f0:	7863      	ldrb	r3, [r4, #1]
 800e6f2:	2b2a      	cmp	r3, #42	@ 0x2a
 800e6f4:	d132      	bne.n	800e75c <_vfiprintf_r+0x1ac>
 800e6f6:	9b03      	ldr	r3, [sp, #12]
 800e6f8:	1d1a      	adds	r2, r3, #4
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	9203      	str	r2, [sp, #12]
 800e6fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e702:	3402      	adds	r4, #2
 800e704:	9305      	str	r3, [sp, #20]
 800e706:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e7dc <_vfiprintf_r+0x22c>
 800e70a:	7821      	ldrb	r1, [r4, #0]
 800e70c:	2203      	movs	r2, #3
 800e70e:	4650      	mov	r0, sl
 800e710:	f7f1 fd7e 	bl	8000210 <memchr>
 800e714:	b138      	cbz	r0, 800e726 <_vfiprintf_r+0x176>
 800e716:	9b04      	ldr	r3, [sp, #16]
 800e718:	eba0 000a 	sub.w	r0, r0, sl
 800e71c:	2240      	movs	r2, #64	@ 0x40
 800e71e:	4082      	lsls	r2, r0
 800e720:	4313      	orrs	r3, r2
 800e722:	3401      	adds	r4, #1
 800e724:	9304      	str	r3, [sp, #16]
 800e726:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e72a:	4829      	ldr	r0, [pc, #164]	@ (800e7d0 <_vfiprintf_r+0x220>)
 800e72c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e730:	2206      	movs	r2, #6
 800e732:	f7f1 fd6d 	bl	8000210 <memchr>
 800e736:	2800      	cmp	r0, #0
 800e738:	d03f      	beq.n	800e7ba <_vfiprintf_r+0x20a>
 800e73a:	4b26      	ldr	r3, [pc, #152]	@ (800e7d4 <_vfiprintf_r+0x224>)
 800e73c:	bb1b      	cbnz	r3, 800e786 <_vfiprintf_r+0x1d6>
 800e73e:	9b03      	ldr	r3, [sp, #12]
 800e740:	3307      	adds	r3, #7
 800e742:	f023 0307 	bic.w	r3, r3, #7
 800e746:	3308      	adds	r3, #8
 800e748:	9303      	str	r3, [sp, #12]
 800e74a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e74c:	443b      	add	r3, r7
 800e74e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e750:	e76a      	b.n	800e628 <_vfiprintf_r+0x78>
 800e752:	fb0c 3202 	mla	r2, ip, r2, r3
 800e756:	460c      	mov	r4, r1
 800e758:	2001      	movs	r0, #1
 800e75a:	e7a8      	b.n	800e6ae <_vfiprintf_r+0xfe>
 800e75c:	2300      	movs	r3, #0
 800e75e:	3401      	adds	r4, #1
 800e760:	9305      	str	r3, [sp, #20]
 800e762:	4619      	mov	r1, r3
 800e764:	f04f 0c0a 	mov.w	ip, #10
 800e768:	4620      	mov	r0, r4
 800e76a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e76e:	3a30      	subs	r2, #48	@ 0x30
 800e770:	2a09      	cmp	r2, #9
 800e772:	d903      	bls.n	800e77c <_vfiprintf_r+0x1cc>
 800e774:	2b00      	cmp	r3, #0
 800e776:	d0c6      	beq.n	800e706 <_vfiprintf_r+0x156>
 800e778:	9105      	str	r1, [sp, #20]
 800e77a:	e7c4      	b.n	800e706 <_vfiprintf_r+0x156>
 800e77c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e780:	4604      	mov	r4, r0
 800e782:	2301      	movs	r3, #1
 800e784:	e7f0      	b.n	800e768 <_vfiprintf_r+0x1b8>
 800e786:	ab03      	add	r3, sp, #12
 800e788:	9300      	str	r3, [sp, #0]
 800e78a:	462a      	mov	r2, r5
 800e78c:	4b12      	ldr	r3, [pc, #72]	@ (800e7d8 <_vfiprintf_r+0x228>)
 800e78e:	a904      	add	r1, sp, #16
 800e790:	4630      	mov	r0, r6
 800e792:	f7fd fd21 	bl	800c1d8 <_printf_float>
 800e796:	4607      	mov	r7, r0
 800e798:	1c78      	adds	r0, r7, #1
 800e79a:	d1d6      	bne.n	800e74a <_vfiprintf_r+0x19a>
 800e79c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e79e:	07d9      	lsls	r1, r3, #31
 800e7a0:	d405      	bmi.n	800e7ae <_vfiprintf_r+0x1fe>
 800e7a2:	89ab      	ldrh	r3, [r5, #12]
 800e7a4:	059a      	lsls	r2, r3, #22
 800e7a6:	d402      	bmi.n	800e7ae <_vfiprintf_r+0x1fe>
 800e7a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e7aa:	f7fe fb99 	bl	800cee0 <__retarget_lock_release_recursive>
 800e7ae:	89ab      	ldrh	r3, [r5, #12]
 800e7b0:	065b      	lsls	r3, r3, #25
 800e7b2:	f53f af1f 	bmi.w	800e5f4 <_vfiprintf_r+0x44>
 800e7b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e7b8:	e71e      	b.n	800e5f8 <_vfiprintf_r+0x48>
 800e7ba:	ab03      	add	r3, sp, #12
 800e7bc:	9300      	str	r3, [sp, #0]
 800e7be:	462a      	mov	r2, r5
 800e7c0:	4b05      	ldr	r3, [pc, #20]	@ (800e7d8 <_vfiprintf_r+0x228>)
 800e7c2:	a904      	add	r1, sp, #16
 800e7c4:	4630      	mov	r0, r6
 800e7c6:	f7fd ff9f 	bl	800c708 <_printf_i>
 800e7ca:	e7e4      	b.n	800e796 <_vfiprintf_r+0x1e6>
 800e7cc:	08010980 	.word	0x08010980
 800e7d0:	0801098a 	.word	0x0801098a
 800e7d4:	0800c1d9 	.word	0x0800c1d9
 800e7d8:	0800e58b 	.word	0x0800e58b
 800e7dc:	08010986 	.word	0x08010986

0800e7e0 <__sflush_r>:
 800e7e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7e8:	0716      	lsls	r6, r2, #28
 800e7ea:	4605      	mov	r5, r0
 800e7ec:	460c      	mov	r4, r1
 800e7ee:	d454      	bmi.n	800e89a <__sflush_r+0xba>
 800e7f0:	684b      	ldr	r3, [r1, #4]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	dc02      	bgt.n	800e7fc <__sflush_r+0x1c>
 800e7f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	dd48      	ble.n	800e88e <__sflush_r+0xae>
 800e7fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e7fe:	2e00      	cmp	r6, #0
 800e800:	d045      	beq.n	800e88e <__sflush_r+0xae>
 800e802:	2300      	movs	r3, #0
 800e804:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e808:	682f      	ldr	r7, [r5, #0]
 800e80a:	6a21      	ldr	r1, [r4, #32]
 800e80c:	602b      	str	r3, [r5, #0]
 800e80e:	d030      	beq.n	800e872 <__sflush_r+0x92>
 800e810:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e812:	89a3      	ldrh	r3, [r4, #12]
 800e814:	0759      	lsls	r1, r3, #29
 800e816:	d505      	bpl.n	800e824 <__sflush_r+0x44>
 800e818:	6863      	ldr	r3, [r4, #4]
 800e81a:	1ad2      	subs	r2, r2, r3
 800e81c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e81e:	b10b      	cbz	r3, 800e824 <__sflush_r+0x44>
 800e820:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e822:	1ad2      	subs	r2, r2, r3
 800e824:	2300      	movs	r3, #0
 800e826:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e828:	6a21      	ldr	r1, [r4, #32]
 800e82a:	4628      	mov	r0, r5
 800e82c:	47b0      	blx	r6
 800e82e:	1c43      	adds	r3, r0, #1
 800e830:	89a3      	ldrh	r3, [r4, #12]
 800e832:	d106      	bne.n	800e842 <__sflush_r+0x62>
 800e834:	6829      	ldr	r1, [r5, #0]
 800e836:	291d      	cmp	r1, #29
 800e838:	d82b      	bhi.n	800e892 <__sflush_r+0xb2>
 800e83a:	4a2a      	ldr	r2, [pc, #168]	@ (800e8e4 <__sflush_r+0x104>)
 800e83c:	410a      	asrs	r2, r1
 800e83e:	07d6      	lsls	r6, r2, #31
 800e840:	d427      	bmi.n	800e892 <__sflush_r+0xb2>
 800e842:	2200      	movs	r2, #0
 800e844:	6062      	str	r2, [r4, #4]
 800e846:	04d9      	lsls	r1, r3, #19
 800e848:	6922      	ldr	r2, [r4, #16]
 800e84a:	6022      	str	r2, [r4, #0]
 800e84c:	d504      	bpl.n	800e858 <__sflush_r+0x78>
 800e84e:	1c42      	adds	r2, r0, #1
 800e850:	d101      	bne.n	800e856 <__sflush_r+0x76>
 800e852:	682b      	ldr	r3, [r5, #0]
 800e854:	b903      	cbnz	r3, 800e858 <__sflush_r+0x78>
 800e856:	6560      	str	r0, [r4, #84]	@ 0x54
 800e858:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e85a:	602f      	str	r7, [r5, #0]
 800e85c:	b1b9      	cbz	r1, 800e88e <__sflush_r+0xae>
 800e85e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e862:	4299      	cmp	r1, r3
 800e864:	d002      	beq.n	800e86c <__sflush_r+0x8c>
 800e866:	4628      	mov	r0, r5
 800e868:	f7fd fb1e 	bl	800bea8 <_free_r>
 800e86c:	2300      	movs	r3, #0
 800e86e:	6363      	str	r3, [r4, #52]	@ 0x34
 800e870:	e00d      	b.n	800e88e <__sflush_r+0xae>
 800e872:	2301      	movs	r3, #1
 800e874:	4628      	mov	r0, r5
 800e876:	47b0      	blx	r6
 800e878:	4602      	mov	r2, r0
 800e87a:	1c50      	adds	r0, r2, #1
 800e87c:	d1c9      	bne.n	800e812 <__sflush_r+0x32>
 800e87e:	682b      	ldr	r3, [r5, #0]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d0c6      	beq.n	800e812 <__sflush_r+0x32>
 800e884:	2b1d      	cmp	r3, #29
 800e886:	d001      	beq.n	800e88c <__sflush_r+0xac>
 800e888:	2b16      	cmp	r3, #22
 800e88a:	d11e      	bne.n	800e8ca <__sflush_r+0xea>
 800e88c:	602f      	str	r7, [r5, #0]
 800e88e:	2000      	movs	r0, #0
 800e890:	e022      	b.n	800e8d8 <__sflush_r+0xf8>
 800e892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e896:	b21b      	sxth	r3, r3
 800e898:	e01b      	b.n	800e8d2 <__sflush_r+0xf2>
 800e89a:	690f      	ldr	r7, [r1, #16]
 800e89c:	2f00      	cmp	r7, #0
 800e89e:	d0f6      	beq.n	800e88e <__sflush_r+0xae>
 800e8a0:	0793      	lsls	r3, r2, #30
 800e8a2:	680e      	ldr	r6, [r1, #0]
 800e8a4:	bf08      	it	eq
 800e8a6:	694b      	ldreq	r3, [r1, #20]
 800e8a8:	600f      	str	r7, [r1, #0]
 800e8aa:	bf18      	it	ne
 800e8ac:	2300      	movne	r3, #0
 800e8ae:	eba6 0807 	sub.w	r8, r6, r7
 800e8b2:	608b      	str	r3, [r1, #8]
 800e8b4:	f1b8 0f00 	cmp.w	r8, #0
 800e8b8:	dde9      	ble.n	800e88e <__sflush_r+0xae>
 800e8ba:	6a21      	ldr	r1, [r4, #32]
 800e8bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e8be:	4643      	mov	r3, r8
 800e8c0:	463a      	mov	r2, r7
 800e8c2:	4628      	mov	r0, r5
 800e8c4:	47b0      	blx	r6
 800e8c6:	2800      	cmp	r0, #0
 800e8c8:	dc08      	bgt.n	800e8dc <__sflush_r+0xfc>
 800e8ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e8d2:	81a3      	strh	r3, [r4, #12]
 800e8d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8dc:	4407      	add	r7, r0
 800e8de:	eba8 0800 	sub.w	r8, r8, r0
 800e8e2:	e7e7      	b.n	800e8b4 <__sflush_r+0xd4>
 800e8e4:	dfbffffe 	.word	0xdfbffffe

0800e8e8 <_fflush_r>:
 800e8e8:	b538      	push	{r3, r4, r5, lr}
 800e8ea:	690b      	ldr	r3, [r1, #16]
 800e8ec:	4605      	mov	r5, r0
 800e8ee:	460c      	mov	r4, r1
 800e8f0:	b913      	cbnz	r3, 800e8f8 <_fflush_r+0x10>
 800e8f2:	2500      	movs	r5, #0
 800e8f4:	4628      	mov	r0, r5
 800e8f6:	bd38      	pop	{r3, r4, r5, pc}
 800e8f8:	b118      	cbz	r0, 800e902 <_fflush_r+0x1a>
 800e8fa:	6a03      	ldr	r3, [r0, #32]
 800e8fc:	b90b      	cbnz	r3, 800e902 <_fflush_r+0x1a>
 800e8fe:	f7fe f8af 	bl	800ca60 <__sinit>
 800e902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d0f3      	beq.n	800e8f2 <_fflush_r+0xa>
 800e90a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e90c:	07d0      	lsls	r0, r2, #31
 800e90e:	d404      	bmi.n	800e91a <_fflush_r+0x32>
 800e910:	0599      	lsls	r1, r3, #22
 800e912:	d402      	bmi.n	800e91a <_fflush_r+0x32>
 800e914:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e916:	f7fe fae2 	bl	800cede <__retarget_lock_acquire_recursive>
 800e91a:	4628      	mov	r0, r5
 800e91c:	4621      	mov	r1, r4
 800e91e:	f7ff ff5f 	bl	800e7e0 <__sflush_r>
 800e922:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e924:	07da      	lsls	r2, r3, #31
 800e926:	4605      	mov	r5, r0
 800e928:	d4e4      	bmi.n	800e8f4 <_fflush_r+0xc>
 800e92a:	89a3      	ldrh	r3, [r4, #12]
 800e92c:	059b      	lsls	r3, r3, #22
 800e92e:	d4e1      	bmi.n	800e8f4 <_fflush_r+0xc>
 800e930:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e932:	f7fe fad5 	bl	800cee0 <__retarget_lock_release_recursive>
 800e936:	e7dd      	b.n	800e8f4 <_fflush_r+0xc>

0800e938 <__swhatbuf_r>:
 800e938:	b570      	push	{r4, r5, r6, lr}
 800e93a:	460c      	mov	r4, r1
 800e93c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e940:	2900      	cmp	r1, #0
 800e942:	b096      	sub	sp, #88	@ 0x58
 800e944:	4615      	mov	r5, r2
 800e946:	461e      	mov	r6, r3
 800e948:	da0d      	bge.n	800e966 <__swhatbuf_r+0x2e>
 800e94a:	89a3      	ldrh	r3, [r4, #12]
 800e94c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e950:	f04f 0100 	mov.w	r1, #0
 800e954:	bf14      	ite	ne
 800e956:	2340      	movne	r3, #64	@ 0x40
 800e958:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e95c:	2000      	movs	r0, #0
 800e95e:	6031      	str	r1, [r6, #0]
 800e960:	602b      	str	r3, [r5, #0]
 800e962:	b016      	add	sp, #88	@ 0x58
 800e964:	bd70      	pop	{r4, r5, r6, pc}
 800e966:	466a      	mov	r2, sp
 800e968:	f000 f862 	bl	800ea30 <_fstat_r>
 800e96c:	2800      	cmp	r0, #0
 800e96e:	dbec      	blt.n	800e94a <__swhatbuf_r+0x12>
 800e970:	9901      	ldr	r1, [sp, #4]
 800e972:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e976:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e97a:	4259      	negs	r1, r3
 800e97c:	4159      	adcs	r1, r3
 800e97e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e982:	e7eb      	b.n	800e95c <__swhatbuf_r+0x24>

0800e984 <__smakebuf_r>:
 800e984:	898b      	ldrh	r3, [r1, #12]
 800e986:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e988:	079d      	lsls	r5, r3, #30
 800e98a:	4606      	mov	r6, r0
 800e98c:	460c      	mov	r4, r1
 800e98e:	d507      	bpl.n	800e9a0 <__smakebuf_r+0x1c>
 800e990:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e994:	6023      	str	r3, [r4, #0]
 800e996:	6123      	str	r3, [r4, #16]
 800e998:	2301      	movs	r3, #1
 800e99a:	6163      	str	r3, [r4, #20]
 800e99c:	b003      	add	sp, #12
 800e99e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9a0:	ab01      	add	r3, sp, #4
 800e9a2:	466a      	mov	r2, sp
 800e9a4:	f7ff ffc8 	bl	800e938 <__swhatbuf_r>
 800e9a8:	9f00      	ldr	r7, [sp, #0]
 800e9aa:	4605      	mov	r5, r0
 800e9ac:	4639      	mov	r1, r7
 800e9ae:	4630      	mov	r0, r6
 800e9b0:	f7fd fae6 	bl	800bf80 <_malloc_r>
 800e9b4:	b948      	cbnz	r0, 800e9ca <__smakebuf_r+0x46>
 800e9b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9ba:	059a      	lsls	r2, r3, #22
 800e9bc:	d4ee      	bmi.n	800e99c <__smakebuf_r+0x18>
 800e9be:	f023 0303 	bic.w	r3, r3, #3
 800e9c2:	f043 0302 	orr.w	r3, r3, #2
 800e9c6:	81a3      	strh	r3, [r4, #12]
 800e9c8:	e7e2      	b.n	800e990 <__smakebuf_r+0xc>
 800e9ca:	89a3      	ldrh	r3, [r4, #12]
 800e9cc:	6020      	str	r0, [r4, #0]
 800e9ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e9d2:	81a3      	strh	r3, [r4, #12]
 800e9d4:	9b01      	ldr	r3, [sp, #4]
 800e9d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e9da:	b15b      	cbz	r3, 800e9f4 <__smakebuf_r+0x70>
 800e9dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e9e0:	4630      	mov	r0, r6
 800e9e2:	f000 f837 	bl	800ea54 <_isatty_r>
 800e9e6:	b128      	cbz	r0, 800e9f4 <__smakebuf_r+0x70>
 800e9e8:	89a3      	ldrh	r3, [r4, #12]
 800e9ea:	f023 0303 	bic.w	r3, r3, #3
 800e9ee:	f043 0301 	orr.w	r3, r3, #1
 800e9f2:	81a3      	strh	r3, [r4, #12]
 800e9f4:	89a3      	ldrh	r3, [r4, #12]
 800e9f6:	431d      	orrs	r5, r3
 800e9f8:	81a5      	strh	r5, [r4, #12]
 800e9fa:	e7cf      	b.n	800e99c <__smakebuf_r+0x18>

0800e9fc <memmove>:
 800e9fc:	4288      	cmp	r0, r1
 800e9fe:	b510      	push	{r4, lr}
 800ea00:	eb01 0402 	add.w	r4, r1, r2
 800ea04:	d902      	bls.n	800ea0c <memmove+0x10>
 800ea06:	4284      	cmp	r4, r0
 800ea08:	4623      	mov	r3, r4
 800ea0a:	d807      	bhi.n	800ea1c <memmove+0x20>
 800ea0c:	1e43      	subs	r3, r0, #1
 800ea0e:	42a1      	cmp	r1, r4
 800ea10:	d008      	beq.n	800ea24 <memmove+0x28>
 800ea12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea16:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ea1a:	e7f8      	b.n	800ea0e <memmove+0x12>
 800ea1c:	4402      	add	r2, r0
 800ea1e:	4601      	mov	r1, r0
 800ea20:	428a      	cmp	r2, r1
 800ea22:	d100      	bne.n	800ea26 <memmove+0x2a>
 800ea24:	bd10      	pop	{r4, pc}
 800ea26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ea2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ea2e:	e7f7      	b.n	800ea20 <memmove+0x24>

0800ea30 <_fstat_r>:
 800ea30:	b538      	push	{r3, r4, r5, lr}
 800ea32:	4d07      	ldr	r5, [pc, #28]	@ (800ea50 <_fstat_r+0x20>)
 800ea34:	2300      	movs	r3, #0
 800ea36:	4604      	mov	r4, r0
 800ea38:	4608      	mov	r0, r1
 800ea3a:	4611      	mov	r1, r2
 800ea3c:	602b      	str	r3, [r5, #0]
 800ea3e:	f7f4 fd29 	bl	8003494 <_fstat>
 800ea42:	1c43      	adds	r3, r0, #1
 800ea44:	d102      	bne.n	800ea4c <_fstat_r+0x1c>
 800ea46:	682b      	ldr	r3, [r5, #0]
 800ea48:	b103      	cbz	r3, 800ea4c <_fstat_r+0x1c>
 800ea4a:	6023      	str	r3, [r4, #0]
 800ea4c:	bd38      	pop	{r3, r4, r5, pc}
 800ea4e:	bf00      	nop
 800ea50:	2000b858 	.word	0x2000b858

0800ea54 <_isatty_r>:
 800ea54:	b538      	push	{r3, r4, r5, lr}
 800ea56:	4d06      	ldr	r5, [pc, #24]	@ (800ea70 <_isatty_r+0x1c>)
 800ea58:	2300      	movs	r3, #0
 800ea5a:	4604      	mov	r4, r0
 800ea5c:	4608      	mov	r0, r1
 800ea5e:	602b      	str	r3, [r5, #0]
 800ea60:	f7f4 fd28 	bl	80034b4 <_isatty>
 800ea64:	1c43      	adds	r3, r0, #1
 800ea66:	d102      	bne.n	800ea6e <_isatty_r+0x1a>
 800ea68:	682b      	ldr	r3, [r5, #0]
 800ea6a:	b103      	cbz	r3, 800ea6e <_isatty_r+0x1a>
 800ea6c:	6023      	str	r3, [r4, #0]
 800ea6e:	bd38      	pop	{r3, r4, r5, pc}
 800ea70:	2000b858 	.word	0x2000b858

0800ea74 <__assert_func>:
 800ea74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ea76:	4614      	mov	r4, r2
 800ea78:	461a      	mov	r2, r3
 800ea7a:	4b09      	ldr	r3, [pc, #36]	@ (800eaa0 <__assert_func+0x2c>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	4605      	mov	r5, r0
 800ea80:	68d8      	ldr	r0, [r3, #12]
 800ea82:	b954      	cbnz	r4, 800ea9a <__assert_func+0x26>
 800ea84:	4b07      	ldr	r3, [pc, #28]	@ (800eaa4 <__assert_func+0x30>)
 800ea86:	461c      	mov	r4, r3
 800ea88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ea8c:	9100      	str	r1, [sp, #0]
 800ea8e:	462b      	mov	r3, r5
 800ea90:	4905      	ldr	r1, [pc, #20]	@ (800eaa8 <__assert_func+0x34>)
 800ea92:	f000 f86f 	bl	800eb74 <fiprintf>
 800ea96:	f000 f87f 	bl	800eb98 <abort>
 800ea9a:	4b04      	ldr	r3, [pc, #16]	@ (800eaac <__assert_func+0x38>)
 800ea9c:	e7f4      	b.n	800ea88 <__assert_func+0x14>
 800ea9e:	bf00      	nop
 800eaa0:	2000001c 	.word	0x2000001c
 800eaa4:	080109d6 	.word	0x080109d6
 800eaa8:	080109a8 	.word	0x080109a8
 800eaac:	0801099b 	.word	0x0801099b

0800eab0 <_calloc_r>:
 800eab0:	b570      	push	{r4, r5, r6, lr}
 800eab2:	fba1 5402 	umull	r5, r4, r1, r2
 800eab6:	b93c      	cbnz	r4, 800eac8 <_calloc_r+0x18>
 800eab8:	4629      	mov	r1, r5
 800eaba:	f7fd fa61 	bl	800bf80 <_malloc_r>
 800eabe:	4606      	mov	r6, r0
 800eac0:	b928      	cbnz	r0, 800eace <_calloc_r+0x1e>
 800eac2:	2600      	movs	r6, #0
 800eac4:	4630      	mov	r0, r6
 800eac6:	bd70      	pop	{r4, r5, r6, pc}
 800eac8:	220c      	movs	r2, #12
 800eaca:	6002      	str	r2, [r0, #0]
 800eacc:	e7f9      	b.n	800eac2 <_calloc_r+0x12>
 800eace:	462a      	mov	r2, r5
 800ead0:	4621      	mov	r1, r4
 800ead2:	f7fe f977 	bl	800cdc4 <memset>
 800ead6:	e7f5      	b.n	800eac4 <_calloc_r+0x14>

0800ead8 <__ascii_mbtowc>:
 800ead8:	b082      	sub	sp, #8
 800eada:	b901      	cbnz	r1, 800eade <__ascii_mbtowc+0x6>
 800eadc:	a901      	add	r1, sp, #4
 800eade:	b142      	cbz	r2, 800eaf2 <__ascii_mbtowc+0x1a>
 800eae0:	b14b      	cbz	r3, 800eaf6 <__ascii_mbtowc+0x1e>
 800eae2:	7813      	ldrb	r3, [r2, #0]
 800eae4:	600b      	str	r3, [r1, #0]
 800eae6:	7812      	ldrb	r2, [r2, #0]
 800eae8:	1e10      	subs	r0, r2, #0
 800eaea:	bf18      	it	ne
 800eaec:	2001      	movne	r0, #1
 800eaee:	b002      	add	sp, #8
 800eaf0:	4770      	bx	lr
 800eaf2:	4610      	mov	r0, r2
 800eaf4:	e7fb      	b.n	800eaee <__ascii_mbtowc+0x16>
 800eaf6:	f06f 0001 	mvn.w	r0, #1
 800eafa:	e7f8      	b.n	800eaee <__ascii_mbtowc+0x16>

0800eafc <_realloc_r>:
 800eafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb00:	4680      	mov	r8, r0
 800eb02:	4615      	mov	r5, r2
 800eb04:	460c      	mov	r4, r1
 800eb06:	b921      	cbnz	r1, 800eb12 <_realloc_r+0x16>
 800eb08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb0c:	4611      	mov	r1, r2
 800eb0e:	f7fd ba37 	b.w	800bf80 <_malloc_r>
 800eb12:	b92a      	cbnz	r2, 800eb20 <_realloc_r+0x24>
 800eb14:	f7fd f9c8 	bl	800bea8 <_free_r>
 800eb18:	2400      	movs	r4, #0
 800eb1a:	4620      	mov	r0, r4
 800eb1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb20:	f000 f841 	bl	800eba6 <_malloc_usable_size_r>
 800eb24:	4285      	cmp	r5, r0
 800eb26:	4606      	mov	r6, r0
 800eb28:	d802      	bhi.n	800eb30 <_realloc_r+0x34>
 800eb2a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800eb2e:	d8f4      	bhi.n	800eb1a <_realloc_r+0x1e>
 800eb30:	4629      	mov	r1, r5
 800eb32:	4640      	mov	r0, r8
 800eb34:	f7fd fa24 	bl	800bf80 <_malloc_r>
 800eb38:	4607      	mov	r7, r0
 800eb3a:	2800      	cmp	r0, #0
 800eb3c:	d0ec      	beq.n	800eb18 <_realloc_r+0x1c>
 800eb3e:	42b5      	cmp	r5, r6
 800eb40:	462a      	mov	r2, r5
 800eb42:	4621      	mov	r1, r4
 800eb44:	bf28      	it	cs
 800eb46:	4632      	movcs	r2, r6
 800eb48:	f7fe f9cb 	bl	800cee2 <memcpy>
 800eb4c:	4621      	mov	r1, r4
 800eb4e:	4640      	mov	r0, r8
 800eb50:	f7fd f9aa 	bl	800bea8 <_free_r>
 800eb54:	463c      	mov	r4, r7
 800eb56:	e7e0      	b.n	800eb1a <_realloc_r+0x1e>

0800eb58 <__ascii_wctomb>:
 800eb58:	4603      	mov	r3, r0
 800eb5a:	4608      	mov	r0, r1
 800eb5c:	b141      	cbz	r1, 800eb70 <__ascii_wctomb+0x18>
 800eb5e:	2aff      	cmp	r2, #255	@ 0xff
 800eb60:	d904      	bls.n	800eb6c <__ascii_wctomb+0x14>
 800eb62:	228a      	movs	r2, #138	@ 0x8a
 800eb64:	601a      	str	r2, [r3, #0]
 800eb66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eb6a:	4770      	bx	lr
 800eb6c:	700a      	strb	r2, [r1, #0]
 800eb6e:	2001      	movs	r0, #1
 800eb70:	4770      	bx	lr
	...

0800eb74 <fiprintf>:
 800eb74:	b40e      	push	{r1, r2, r3}
 800eb76:	b503      	push	{r0, r1, lr}
 800eb78:	4601      	mov	r1, r0
 800eb7a:	ab03      	add	r3, sp, #12
 800eb7c:	4805      	ldr	r0, [pc, #20]	@ (800eb94 <fiprintf+0x20>)
 800eb7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb82:	6800      	ldr	r0, [r0, #0]
 800eb84:	9301      	str	r3, [sp, #4]
 800eb86:	f7ff fd13 	bl	800e5b0 <_vfiprintf_r>
 800eb8a:	b002      	add	sp, #8
 800eb8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb90:	b003      	add	sp, #12
 800eb92:	4770      	bx	lr
 800eb94:	2000001c 	.word	0x2000001c

0800eb98 <abort>:
 800eb98:	b508      	push	{r3, lr}
 800eb9a:	2006      	movs	r0, #6
 800eb9c:	f000 f834 	bl	800ec08 <raise>
 800eba0:	2001      	movs	r0, #1
 800eba2:	f7f4 fc43 	bl	800342c <_exit>

0800eba6 <_malloc_usable_size_r>:
 800eba6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ebaa:	1f18      	subs	r0, r3, #4
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	bfbc      	itt	lt
 800ebb0:	580b      	ldrlt	r3, [r1, r0]
 800ebb2:	18c0      	addlt	r0, r0, r3
 800ebb4:	4770      	bx	lr

0800ebb6 <_raise_r>:
 800ebb6:	291f      	cmp	r1, #31
 800ebb8:	b538      	push	{r3, r4, r5, lr}
 800ebba:	4605      	mov	r5, r0
 800ebbc:	460c      	mov	r4, r1
 800ebbe:	d904      	bls.n	800ebca <_raise_r+0x14>
 800ebc0:	2316      	movs	r3, #22
 800ebc2:	6003      	str	r3, [r0, #0]
 800ebc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ebc8:	bd38      	pop	{r3, r4, r5, pc}
 800ebca:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ebcc:	b112      	cbz	r2, 800ebd4 <_raise_r+0x1e>
 800ebce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ebd2:	b94b      	cbnz	r3, 800ebe8 <_raise_r+0x32>
 800ebd4:	4628      	mov	r0, r5
 800ebd6:	f000 f831 	bl	800ec3c <_getpid_r>
 800ebda:	4622      	mov	r2, r4
 800ebdc:	4601      	mov	r1, r0
 800ebde:	4628      	mov	r0, r5
 800ebe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ebe4:	f000 b818 	b.w	800ec18 <_kill_r>
 800ebe8:	2b01      	cmp	r3, #1
 800ebea:	d00a      	beq.n	800ec02 <_raise_r+0x4c>
 800ebec:	1c59      	adds	r1, r3, #1
 800ebee:	d103      	bne.n	800ebf8 <_raise_r+0x42>
 800ebf0:	2316      	movs	r3, #22
 800ebf2:	6003      	str	r3, [r0, #0]
 800ebf4:	2001      	movs	r0, #1
 800ebf6:	e7e7      	b.n	800ebc8 <_raise_r+0x12>
 800ebf8:	2100      	movs	r1, #0
 800ebfa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ebfe:	4620      	mov	r0, r4
 800ec00:	4798      	blx	r3
 800ec02:	2000      	movs	r0, #0
 800ec04:	e7e0      	b.n	800ebc8 <_raise_r+0x12>
	...

0800ec08 <raise>:
 800ec08:	4b02      	ldr	r3, [pc, #8]	@ (800ec14 <raise+0xc>)
 800ec0a:	4601      	mov	r1, r0
 800ec0c:	6818      	ldr	r0, [r3, #0]
 800ec0e:	f7ff bfd2 	b.w	800ebb6 <_raise_r>
 800ec12:	bf00      	nop
 800ec14:	2000001c 	.word	0x2000001c

0800ec18 <_kill_r>:
 800ec18:	b538      	push	{r3, r4, r5, lr}
 800ec1a:	4d07      	ldr	r5, [pc, #28]	@ (800ec38 <_kill_r+0x20>)
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	4604      	mov	r4, r0
 800ec20:	4608      	mov	r0, r1
 800ec22:	4611      	mov	r1, r2
 800ec24:	602b      	str	r3, [r5, #0]
 800ec26:	f7f4 fbf1 	bl	800340c <_kill>
 800ec2a:	1c43      	adds	r3, r0, #1
 800ec2c:	d102      	bne.n	800ec34 <_kill_r+0x1c>
 800ec2e:	682b      	ldr	r3, [r5, #0]
 800ec30:	b103      	cbz	r3, 800ec34 <_kill_r+0x1c>
 800ec32:	6023      	str	r3, [r4, #0]
 800ec34:	bd38      	pop	{r3, r4, r5, pc}
 800ec36:	bf00      	nop
 800ec38:	2000b858 	.word	0x2000b858

0800ec3c <_getpid_r>:
 800ec3c:	f7f4 bbde 	b.w	80033fc <_getpid>

0800ec40 <atan2>:
 800ec40:	f000 b982 	b.w	800ef48 <__ieee754_atan2>

0800ec44 <pow>:
 800ec44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec46:	ed2d 8b02 	vpush	{d8}
 800ec4a:	eeb0 8a40 	vmov.f32	s16, s0
 800ec4e:	eef0 8a60 	vmov.f32	s17, s1
 800ec52:	ec55 4b11 	vmov	r4, r5, d1
 800ec56:	f000 fa3f 	bl	800f0d8 <__ieee754_pow>
 800ec5a:	4622      	mov	r2, r4
 800ec5c:	462b      	mov	r3, r5
 800ec5e:	4620      	mov	r0, r4
 800ec60:	4629      	mov	r1, r5
 800ec62:	ec57 6b10 	vmov	r6, r7, d0
 800ec66:	f7f1 ff81 	bl	8000b6c <__aeabi_dcmpun>
 800ec6a:	2800      	cmp	r0, #0
 800ec6c:	d13b      	bne.n	800ece6 <pow+0xa2>
 800ec6e:	ec51 0b18 	vmov	r0, r1, d8
 800ec72:	2200      	movs	r2, #0
 800ec74:	2300      	movs	r3, #0
 800ec76:	f7f1 ff47 	bl	8000b08 <__aeabi_dcmpeq>
 800ec7a:	b1b8      	cbz	r0, 800ecac <pow+0x68>
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	2300      	movs	r3, #0
 800ec80:	4620      	mov	r0, r4
 800ec82:	4629      	mov	r1, r5
 800ec84:	f7f1 ff40 	bl	8000b08 <__aeabi_dcmpeq>
 800ec88:	2800      	cmp	r0, #0
 800ec8a:	d146      	bne.n	800ed1a <pow+0xd6>
 800ec8c:	ec45 4b10 	vmov	d0, r4, r5
 800ec90:	f000 f874 	bl	800ed7c <finite>
 800ec94:	b338      	cbz	r0, 800ece6 <pow+0xa2>
 800ec96:	2200      	movs	r2, #0
 800ec98:	2300      	movs	r3, #0
 800ec9a:	4620      	mov	r0, r4
 800ec9c:	4629      	mov	r1, r5
 800ec9e:	f7f1 ff3d 	bl	8000b1c <__aeabi_dcmplt>
 800eca2:	b300      	cbz	r0, 800ece6 <pow+0xa2>
 800eca4:	f7fe f8f0 	bl	800ce88 <__errno>
 800eca8:	2322      	movs	r3, #34	@ 0x22
 800ecaa:	e01b      	b.n	800ece4 <pow+0xa0>
 800ecac:	ec47 6b10 	vmov	d0, r6, r7
 800ecb0:	f000 f864 	bl	800ed7c <finite>
 800ecb4:	b9e0      	cbnz	r0, 800ecf0 <pow+0xac>
 800ecb6:	eeb0 0a48 	vmov.f32	s0, s16
 800ecba:	eef0 0a68 	vmov.f32	s1, s17
 800ecbe:	f000 f85d 	bl	800ed7c <finite>
 800ecc2:	b1a8      	cbz	r0, 800ecf0 <pow+0xac>
 800ecc4:	ec45 4b10 	vmov	d0, r4, r5
 800ecc8:	f000 f858 	bl	800ed7c <finite>
 800eccc:	b180      	cbz	r0, 800ecf0 <pow+0xac>
 800ecce:	4632      	mov	r2, r6
 800ecd0:	463b      	mov	r3, r7
 800ecd2:	4630      	mov	r0, r6
 800ecd4:	4639      	mov	r1, r7
 800ecd6:	f7f1 ff49 	bl	8000b6c <__aeabi_dcmpun>
 800ecda:	2800      	cmp	r0, #0
 800ecdc:	d0e2      	beq.n	800eca4 <pow+0x60>
 800ecde:	f7fe f8d3 	bl	800ce88 <__errno>
 800ece2:	2321      	movs	r3, #33	@ 0x21
 800ece4:	6003      	str	r3, [r0, #0]
 800ece6:	ecbd 8b02 	vpop	{d8}
 800ecea:	ec47 6b10 	vmov	d0, r6, r7
 800ecee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	4630      	mov	r0, r6
 800ecf6:	4639      	mov	r1, r7
 800ecf8:	f7f1 ff06 	bl	8000b08 <__aeabi_dcmpeq>
 800ecfc:	2800      	cmp	r0, #0
 800ecfe:	d0f2      	beq.n	800ece6 <pow+0xa2>
 800ed00:	eeb0 0a48 	vmov.f32	s0, s16
 800ed04:	eef0 0a68 	vmov.f32	s1, s17
 800ed08:	f000 f838 	bl	800ed7c <finite>
 800ed0c:	2800      	cmp	r0, #0
 800ed0e:	d0ea      	beq.n	800ece6 <pow+0xa2>
 800ed10:	ec45 4b10 	vmov	d0, r4, r5
 800ed14:	f000 f832 	bl	800ed7c <finite>
 800ed18:	e7c3      	b.n	800eca2 <pow+0x5e>
 800ed1a:	4f01      	ldr	r7, [pc, #4]	@ (800ed20 <pow+0xdc>)
 800ed1c:	2600      	movs	r6, #0
 800ed1e:	e7e2      	b.n	800ece6 <pow+0xa2>
 800ed20:	3ff00000 	.word	0x3ff00000

0800ed24 <sqrt>:
 800ed24:	b538      	push	{r3, r4, r5, lr}
 800ed26:	ed2d 8b02 	vpush	{d8}
 800ed2a:	ec55 4b10 	vmov	r4, r5, d0
 800ed2e:	f000 f831 	bl	800ed94 <__ieee754_sqrt>
 800ed32:	4622      	mov	r2, r4
 800ed34:	462b      	mov	r3, r5
 800ed36:	4620      	mov	r0, r4
 800ed38:	4629      	mov	r1, r5
 800ed3a:	eeb0 8a40 	vmov.f32	s16, s0
 800ed3e:	eef0 8a60 	vmov.f32	s17, s1
 800ed42:	f7f1 ff13 	bl	8000b6c <__aeabi_dcmpun>
 800ed46:	b990      	cbnz	r0, 800ed6e <sqrt+0x4a>
 800ed48:	2200      	movs	r2, #0
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	4620      	mov	r0, r4
 800ed4e:	4629      	mov	r1, r5
 800ed50:	f7f1 fee4 	bl	8000b1c <__aeabi_dcmplt>
 800ed54:	b158      	cbz	r0, 800ed6e <sqrt+0x4a>
 800ed56:	f7fe f897 	bl	800ce88 <__errno>
 800ed5a:	2321      	movs	r3, #33	@ 0x21
 800ed5c:	6003      	str	r3, [r0, #0]
 800ed5e:	2200      	movs	r2, #0
 800ed60:	2300      	movs	r3, #0
 800ed62:	4610      	mov	r0, r2
 800ed64:	4619      	mov	r1, r3
 800ed66:	f7f1 fd91 	bl	800088c <__aeabi_ddiv>
 800ed6a:	ec41 0b18 	vmov	d8, r0, r1
 800ed6e:	eeb0 0a48 	vmov.f32	s0, s16
 800ed72:	eef0 0a68 	vmov.f32	s1, s17
 800ed76:	ecbd 8b02 	vpop	{d8}
 800ed7a:	bd38      	pop	{r3, r4, r5, pc}

0800ed7c <finite>:
 800ed7c:	b082      	sub	sp, #8
 800ed7e:	ed8d 0b00 	vstr	d0, [sp]
 800ed82:	9801      	ldr	r0, [sp, #4]
 800ed84:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800ed88:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800ed8c:	0fc0      	lsrs	r0, r0, #31
 800ed8e:	b002      	add	sp, #8
 800ed90:	4770      	bx	lr
	...

0800ed94 <__ieee754_sqrt>:
 800ed94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed98:	4a68      	ldr	r2, [pc, #416]	@ (800ef3c <__ieee754_sqrt+0x1a8>)
 800ed9a:	ec55 4b10 	vmov	r4, r5, d0
 800ed9e:	43aa      	bics	r2, r5
 800eda0:	462b      	mov	r3, r5
 800eda2:	4621      	mov	r1, r4
 800eda4:	d110      	bne.n	800edc8 <__ieee754_sqrt+0x34>
 800eda6:	4622      	mov	r2, r4
 800eda8:	4620      	mov	r0, r4
 800edaa:	4629      	mov	r1, r5
 800edac:	f7f1 fc44 	bl	8000638 <__aeabi_dmul>
 800edb0:	4602      	mov	r2, r0
 800edb2:	460b      	mov	r3, r1
 800edb4:	4620      	mov	r0, r4
 800edb6:	4629      	mov	r1, r5
 800edb8:	f7f1 fa88 	bl	80002cc <__adddf3>
 800edbc:	4604      	mov	r4, r0
 800edbe:	460d      	mov	r5, r1
 800edc0:	ec45 4b10 	vmov	d0, r4, r5
 800edc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edc8:	2d00      	cmp	r5, #0
 800edca:	dc0e      	bgt.n	800edea <__ieee754_sqrt+0x56>
 800edcc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800edd0:	4322      	orrs	r2, r4
 800edd2:	d0f5      	beq.n	800edc0 <__ieee754_sqrt+0x2c>
 800edd4:	b19d      	cbz	r5, 800edfe <__ieee754_sqrt+0x6a>
 800edd6:	4622      	mov	r2, r4
 800edd8:	4620      	mov	r0, r4
 800edda:	4629      	mov	r1, r5
 800eddc:	f7f1 fa74 	bl	80002c8 <__aeabi_dsub>
 800ede0:	4602      	mov	r2, r0
 800ede2:	460b      	mov	r3, r1
 800ede4:	f7f1 fd52 	bl	800088c <__aeabi_ddiv>
 800ede8:	e7e8      	b.n	800edbc <__ieee754_sqrt+0x28>
 800edea:	152a      	asrs	r2, r5, #20
 800edec:	d115      	bne.n	800ee1a <__ieee754_sqrt+0x86>
 800edee:	2000      	movs	r0, #0
 800edf0:	e009      	b.n	800ee06 <__ieee754_sqrt+0x72>
 800edf2:	0acb      	lsrs	r3, r1, #11
 800edf4:	3a15      	subs	r2, #21
 800edf6:	0549      	lsls	r1, r1, #21
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d0fa      	beq.n	800edf2 <__ieee754_sqrt+0x5e>
 800edfc:	e7f7      	b.n	800edee <__ieee754_sqrt+0x5a>
 800edfe:	462a      	mov	r2, r5
 800ee00:	e7fa      	b.n	800edf8 <__ieee754_sqrt+0x64>
 800ee02:	005b      	lsls	r3, r3, #1
 800ee04:	3001      	adds	r0, #1
 800ee06:	02dc      	lsls	r4, r3, #11
 800ee08:	d5fb      	bpl.n	800ee02 <__ieee754_sqrt+0x6e>
 800ee0a:	1e44      	subs	r4, r0, #1
 800ee0c:	1b12      	subs	r2, r2, r4
 800ee0e:	f1c0 0420 	rsb	r4, r0, #32
 800ee12:	fa21 f404 	lsr.w	r4, r1, r4
 800ee16:	4323      	orrs	r3, r4
 800ee18:	4081      	lsls	r1, r0
 800ee1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ee1e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800ee22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ee26:	07d2      	lsls	r2, r2, #31
 800ee28:	bf5c      	itt	pl
 800ee2a:	005b      	lslpl	r3, r3, #1
 800ee2c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800ee30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ee34:	bf58      	it	pl
 800ee36:	0049      	lslpl	r1, r1, #1
 800ee38:	2600      	movs	r6, #0
 800ee3a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ee3e:	106d      	asrs	r5, r5, #1
 800ee40:	0049      	lsls	r1, r1, #1
 800ee42:	2016      	movs	r0, #22
 800ee44:	4632      	mov	r2, r6
 800ee46:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800ee4a:	1917      	adds	r7, r2, r4
 800ee4c:	429f      	cmp	r7, r3
 800ee4e:	bfde      	ittt	le
 800ee50:	193a      	addle	r2, r7, r4
 800ee52:	1bdb      	suble	r3, r3, r7
 800ee54:	1936      	addle	r6, r6, r4
 800ee56:	0fcf      	lsrs	r7, r1, #31
 800ee58:	3801      	subs	r0, #1
 800ee5a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800ee5e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ee62:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ee66:	d1f0      	bne.n	800ee4a <__ieee754_sqrt+0xb6>
 800ee68:	4604      	mov	r4, r0
 800ee6a:	2720      	movs	r7, #32
 800ee6c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ee70:	429a      	cmp	r2, r3
 800ee72:	eb00 0e0c 	add.w	lr, r0, ip
 800ee76:	db02      	blt.n	800ee7e <__ieee754_sqrt+0xea>
 800ee78:	d113      	bne.n	800eea2 <__ieee754_sqrt+0x10e>
 800ee7a:	458e      	cmp	lr, r1
 800ee7c:	d811      	bhi.n	800eea2 <__ieee754_sqrt+0x10e>
 800ee7e:	f1be 0f00 	cmp.w	lr, #0
 800ee82:	eb0e 000c 	add.w	r0, lr, ip
 800ee86:	da42      	bge.n	800ef0e <__ieee754_sqrt+0x17a>
 800ee88:	2800      	cmp	r0, #0
 800ee8a:	db40      	blt.n	800ef0e <__ieee754_sqrt+0x17a>
 800ee8c:	f102 0801 	add.w	r8, r2, #1
 800ee90:	1a9b      	subs	r3, r3, r2
 800ee92:	458e      	cmp	lr, r1
 800ee94:	bf88      	it	hi
 800ee96:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800ee9a:	eba1 010e 	sub.w	r1, r1, lr
 800ee9e:	4464      	add	r4, ip
 800eea0:	4642      	mov	r2, r8
 800eea2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800eea6:	3f01      	subs	r7, #1
 800eea8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800eeac:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800eeb0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800eeb4:	d1dc      	bne.n	800ee70 <__ieee754_sqrt+0xdc>
 800eeb6:	4319      	orrs	r1, r3
 800eeb8:	d01b      	beq.n	800eef2 <__ieee754_sqrt+0x15e>
 800eeba:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800ef40 <__ieee754_sqrt+0x1ac>
 800eebe:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800ef44 <__ieee754_sqrt+0x1b0>
 800eec2:	e9da 0100 	ldrd	r0, r1, [sl]
 800eec6:	e9db 2300 	ldrd	r2, r3, [fp]
 800eeca:	f7f1 f9fd 	bl	80002c8 <__aeabi_dsub>
 800eece:	e9da 8900 	ldrd	r8, r9, [sl]
 800eed2:	4602      	mov	r2, r0
 800eed4:	460b      	mov	r3, r1
 800eed6:	4640      	mov	r0, r8
 800eed8:	4649      	mov	r1, r9
 800eeda:	f7f1 fe29 	bl	8000b30 <__aeabi_dcmple>
 800eede:	b140      	cbz	r0, 800eef2 <__ieee754_sqrt+0x15e>
 800eee0:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800eee4:	e9da 0100 	ldrd	r0, r1, [sl]
 800eee8:	e9db 2300 	ldrd	r2, r3, [fp]
 800eeec:	d111      	bne.n	800ef12 <__ieee754_sqrt+0x17e>
 800eeee:	3601      	adds	r6, #1
 800eef0:	463c      	mov	r4, r7
 800eef2:	1072      	asrs	r2, r6, #1
 800eef4:	0863      	lsrs	r3, r4, #1
 800eef6:	07f1      	lsls	r1, r6, #31
 800eef8:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800eefc:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800ef00:	bf48      	it	mi
 800ef02:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800ef06:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	e756      	b.n	800edbc <__ieee754_sqrt+0x28>
 800ef0e:	4690      	mov	r8, r2
 800ef10:	e7be      	b.n	800ee90 <__ieee754_sqrt+0xfc>
 800ef12:	f7f1 f9db 	bl	80002cc <__adddf3>
 800ef16:	e9da 8900 	ldrd	r8, r9, [sl]
 800ef1a:	4602      	mov	r2, r0
 800ef1c:	460b      	mov	r3, r1
 800ef1e:	4640      	mov	r0, r8
 800ef20:	4649      	mov	r1, r9
 800ef22:	f7f1 fdfb 	bl	8000b1c <__aeabi_dcmplt>
 800ef26:	b120      	cbz	r0, 800ef32 <__ieee754_sqrt+0x19e>
 800ef28:	1ca0      	adds	r0, r4, #2
 800ef2a:	bf08      	it	eq
 800ef2c:	3601      	addeq	r6, #1
 800ef2e:	3402      	adds	r4, #2
 800ef30:	e7df      	b.n	800eef2 <__ieee754_sqrt+0x15e>
 800ef32:	1c63      	adds	r3, r4, #1
 800ef34:	f023 0401 	bic.w	r4, r3, #1
 800ef38:	e7db      	b.n	800eef2 <__ieee754_sqrt+0x15e>
 800ef3a:	bf00      	nop
 800ef3c:	7ff00000 	.word	0x7ff00000
 800ef40:	200001e0 	.word	0x200001e0
 800ef44:	200001d8 	.word	0x200001d8

0800ef48 <__ieee754_atan2>:
 800ef48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef4c:	ec57 6b11 	vmov	r6, r7, d1
 800ef50:	4273      	negs	r3, r6
 800ef52:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800f0d0 <__ieee754_atan2+0x188>
 800ef56:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800ef5a:	4333      	orrs	r3, r6
 800ef5c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ef60:	4543      	cmp	r3, r8
 800ef62:	ec51 0b10 	vmov	r0, r1, d0
 800ef66:	4635      	mov	r5, r6
 800ef68:	d809      	bhi.n	800ef7e <__ieee754_atan2+0x36>
 800ef6a:	4244      	negs	r4, r0
 800ef6c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ef70:	4304      	orrs	r4, r0
 800ef72:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ef76:	4544      	cmp	r4, r8
 800ef78:	468e      	mov	lr, r1
 800ef7a:	4681      	mov	r9, r0
 800ef7c:	d907      	bls.n	800ef8e <__ieee754_atan2+0x46>
 800ef7e:	4632      	mov	r2, r6
 800ef80:	463b      	mov	r3, r7
 800ef82:	f7f1 f9a3 	bl	80002cc <__adddf3>
 800ef86:	ec41 0b10 	vmov	d0, r0, r1
 800ef8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef8e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800ef92:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800ef96:	4334      	orrs	r4, r6
 800ef98:	d103      	bne.n	800efa2 <__ieee754_atan2+0x5a>
 800ef9a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef9e:	f000 bddf 	b.w	800fb60 <atan>
 800efa2:	17bc      	asrs	r4, r7, #30
 800efa4:	f004 0402 	and.w	r4, r4, #2
 800efa8:	ea53 0909 	orrs.w	r9, r3, r9
 800efac:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800efb0:	d107      	bne.n	800efc2 <__ieee754_atan2+0x7a>
 800efb2:	2c02      	cmp	r4, #2
 800efb4:	d05f      	beq.n	800f076 <__ieee754_atan2+0x12e>
 800efb6:	2c03      	cmp	r4, #3
 800efb8:	d1e5      	bne.n	800ef86 <__ieee754_atan2+0x3e>
 800efba:	a141      	add	r1, pc, #260	@ (adr r1, 800f0c0 <__ieee754_atan2+0x178>)
 800efbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800efc0:	e7e1      	b.n	800ef86 <__ieee754_atan2+0x3e>
 800efc2:	4315      	orrs	r5, r2
 800efc4:	d106      	bne.n	800efd4 <__ieee754_atan2+0x8c>
 800efc6:	f1be 0f00 	cmp.w	lr, #0
 800efca:	da5f      	bge.n	800f08c <__ieee754_atan2+0x144>
 800efcc:	a13e      	add	r1, pc, #248	@ (adr r1, 800f0c8 <__ieee754_atan2+0x180>)
 800efce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800efd2:	e7d8      	b.n	800ef86 <__ieee754_atan2+0x3e>
 800efd4:	4542      	cmp	r2, r8
 800efd6:	d10f      	bne.n	800eff8 <__ieee754_atan2+0xb0>
 800efd8:	4293      	cmp	r3, r2
 800efda:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800efde:	d107      	bne.n	800eff0 <__ieee754_atan2+0xa8>
 800efe0:	2c02      	cmp	r4, #2
 800efe2:	d84c      	bhi.n	800f07e <__ieee754_atan2+0x136>
 800efe4:	4b34      	ldr	r3, [pc, #208]	@ (800f0b8 <__ieee754_atan2+0x170>)
 800efe6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800efea:	e9d3 0100 	ldrd	r0, r1, [r3]
 800efee:	e7ca      	b.n	800ef86 <__ieee754_atan2+0x3e>
 800eff0:	2c02      	cmp	r4, #2
 800eff2:	d848      	bhi.n	800f086 <__ieee754_atan2+0x13e>
 800eff4:	4b31      	ldr	r3, [pc, #196]	@ (800f0bc <__ieee754_atan2+0x174>)
 800eff6:	e7f6      	b.n	800efe6 <__ieee754_atan2+0x9e>
 800eff8:	4543      	cmp	r3, r8
 800effa:	d0e4      	beq.n	800efc6 <__ieee754_atan2+0x7e>
 800effc:	1a9b      	subs	r3, r3, r2
 800effe:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800f002:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f006:	da1e      	bge.n	800f046 <__ieee754_atan2+0xfe>
 800f008:	2f00      	cmp	r7, #0
 800f00a:	da01      	bge.n	800f010 <__ieee754_atan2+0xc8>
 800f00c:	323c      	adds	r2, #60	@ 0x3c
 800f00e:	db1e      	blt.n	800f04e <__ieee754_atan2+0x106>
 800f010:	4632      	mov	r2, r6
 800f012:	463b      	mov	r3, r7
 800f014:	f7f1 fc3a 	bl	800088c <__aeabi_ddiv>
 800f018:	ec41 0b10 	vmov	d0, r0, r1
 800f01c:	f000 ff38 	bl	800fe90 <fabs>
 800f020:	f000 fd9e 	bl	800fb60 <atan>
 800f024:	ec51 0b10 	vmov	r0, r1, d0
 800f028:	2c01      	cmp	r4, #1
 800f02a:	d013      	beq.n	800f054 <__ieee754_atan2+0x10c>
 800f02c:	2c02      	cmp	r4, #2
 800f02e:	d015      	beq.n	800f05c <__ieee754_atan2+0x114>
 800f030:	2c00      	cmp	r4, #0
 800f032:	d0a8      	beq.n	800ef86 <__ieee754_atan2+0x3e>
 800f034:	a318      	add	r3, pc, #96	@ (adr r3, 800f098 <__ieee754_atan2+0x150>)
 800f036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f03a:	f7f1 f945 	bl	80002c8 <__aeabi_dsub>
 800f03e:	a318      	add	r3, pc, #96	@ (adr r3, 800f0a0 <__ieee754_atan2+0x158>)
 800f040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f044:	e014      	b.n	800f070 <__ieee754_atan2+0x128>
 800f046:	a118      	add	r1, pc, #96	@ (adr r1, 800f0a8 <__ieee754_atan2+0x160>)
 800f048:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f04c:	e7ec      	b.n	800f028 <__ieee754_atan2+0xe0>
 800f04e:	2000      	movs	r0, #0
 800f050:	2100      	movs	r1, #0
 800f052:	e7e9      	b.n	800f028 <__ieee754_atan2+0xe0>
 800f054:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f058:	4619      	mov	r1, r3
 800f05a:	e794      	b.n	800ef86 <__ieee754_atan2+0x3e>
 800f05c:	a30e      	add	r3, pc, #56	@ (adr r3, 800f098 <__ieee754_atan2+0x150>)
 800f05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f062:	f7f1 f931 	bl	80002c8 <__aeabi_dsub>
 800f066:	4602      	mov	r2, r0
 800f068:	460b      	mov	r3, r1
 800f06a:	a10d      	add	r1, pc, #52	@ (adr r1, 800f0a0 <__ieee754_atan2+0x158>)
 800f06c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f070:	f7f1 f92a 	bl	80002c8 <__aeabi_dsub>
 800f074:	e787      	b.n	800ef86 <__ieee754_atan2+0x3e>
 800f076:	a10a      	add	r1, pc, #40	@ (adr r1, 800f0a0 <__ieee754_atan2+0x158>)
 800f078:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f07c:	e783      	b.n	800ef86 <__ieee754_atan2+0x3e>
 800f07e:	a10c      	add	r1, pc, #48	@ (adr r1, 800f0b0 <__ieee754_atan2+0x168>)
 800f080:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f084:	e77f      	b.n	800ef86 <__ieee754_atan2+0x3e>
 800f086:	2000      	movs	r0, #0
 800f088:	2100      	movs	r1, #0
 800f08a:	e77c      	b.n	800ef86 <__ieee754_atan2+0x3e>
 800f08c:	a106      	add	r1, pc, #24	@ (adr r1, 800f0a8 <__ieee754_atan2+0x160>)
 800f08e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f092:	e778      	b.n	800ef86 <__ieee754_atan2+0x3e>
 800f094:	f3af 8000 	nop.w
 800f098:	33145c07 	.word	0x33145c07
 800f09c:	3ca1a626 	.word	0x3ca1a626
 800f0a0:	54442d18 	.word	0x54442d18
 800f0a4:	400921fb 	.word	0x400921fb
 800f0a8:	54442d18 	.word	0x54442d18
 800f0ac:	3ff921fb 	.word	0x3ff921fb
 800f0b0:	54442d18 	.word	0x54442d18
 800f0b4:	3fe921fb 	.word	0x3fe921fb
 800f0b8:	08010af0 	.word	0x08010af0
 800f0bc:	08010ad8 	.word	0x08010ad8
 800f0c0:	54442d18 	.word	0x54442d18
 800f0c4:	c00921fb 	.word	0xc00921fb
 800f0c8:	54442d18 	.word	0x54442d18
 800f0cc:	bff921fb 	.word	0xbff921fb
 800f0d0:	7ff00000 	.word	0x7ff00000
 800f0d4:	00000000 	.word	0x00000000

0800f0d8 <__ieee754_pow>:
 800f0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0dc:	b091      	sub	sp, #68	@ 0x44
 800f0de:	ed8d 1b00 	vstr	d1, [sp]
 800f0e2:	e9dd 1900 	ldrd	r1, r9, [sp]
 800f0e6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800f0ea:	ea5a 0001 	orrs.w	r0, sl, r1
 800f0ee:	ec57 6b10 	vmov	r6, r7, d0
 800f0f2:	d113      	bne.n	800f11c <__ieee754_pow+0x44>
 800f0f4:	19b3      	adds	r3, r6, r6
 800f0f6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800f0fa:	4152      	adcs	r2, r2
 800f0fc:	4298      	cmp	r0, r3
 800f0fe:	4b98      	ldr	r3, [pc, #608]	@ (800f360 <__ieee754_pow+0x288>)
 800f100:	4193      	sbcs	r3, r2
 800f102:	f080 84ea 	bcs.w	800fada <__ieee754_pow+0xa02>
 800f106:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f10a:	4630      	mov	r0, r6
 800f10c:	4639      	mov	r1, r7
 800f10e:	f7f1 f8dd 	bl	80002cc <__adddf3>
 800f112:	ec41 0b10 	vmov	d0, r0, r1
 800f116:	b011      	add	sp, #68	@ 0x44
 800f118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f11c:	4a91      	ldr	r2, [pc, #580]	@ (800f364 <__ieee754_pow+0x28c>)
 800f11e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f122:	4590      	cmp	r8, r2
 800f124:	463d      	mov	r5, r7
 800f126:	4633      	mov	r3, r6
 800f128:	d806      	bhi.n	800f138 <__ieee754_pow+0x60>
 800f12a:	d101      	bne.n	800f130 <__ieee754_pow+0x58>
 800f12c:	2e00      	cmp	r6, #0
 800f12e:	d1ea      	bne.n	800f106 <__ieee754_pow+0x2e>
 800f130:	4592      	cmp	sl, r2
 800f132:	d801      	bhi.n	800f138 <__ieee754_pow+0x60>
 800f134:	d10e      	bne.n	800f154 <__ieee754_pow+0x7c>
 800f136:	b169      	cbz	r1, 800f154 <__ieee754_pow+0x7c>
 800f138:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800f13c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800f140:	431d      	orrs	r5, r3
 800f142:	d1e0      	bne.n	800f106 <__ieee754_pow+0x2e>
 800f144:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f148:	18db      	adds	r3, r3, r3
 800f14a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800f14e:	4152      	adcs	r2, r2
 800f150:	429d      	cmp	r5, r3
 800f152:	e7d4      	b.n	800f0fe <__ieee754_pow+0x26>
 800f154:	2d00      	cmp	r5, #0
 800f156:	46c3      	mov	fp, r8
 800f158:	da3a      	bge.n	800f1d0 <__ieee754_pow+0xf8>
 800f15a:	4a83      	ldr	r2, [pc, #524]	@ (800f368 <__ieee754_pow+0x290>)
 800f15c:	4592      	cmp	sl, r2
 800f15e:	d84d      	bhi.n	800f1fc <__ieee754_pow+0x124>
 800f160:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800f164:	4592      	cmp	sl, r2
 800f166:	f240 84c7 	bls.w	800faf8 <__ieee754_pow+0xa20>
 800f16a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800f16e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800f172:	2a14      	cmp	r2, #20
 800f174:	dd0f      	ble.n	800f196 <__ieee754_pow+0xbe>
 800f176:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800f17a:	fa21 f402 	lsr.w	r4, r1, r2
 800f17e:	fa04 f202 	lsl.w	r2, r4, r2
 800f182:	428a      	cmp	r2, r1
 800f184:	f040 84b8 	bne.w	800faf8 <__ieee754_pow+0xa20>
 800f188:	f004 0401 	and.w	r4, r4, #1
 800f18c:	f1c4 0402 	rsb	r4, r4, #2
 800f190:	2900      	cmp	r1, #0
 800f192:	d158      	bne.n	800f246 <__ieee754_pow+0x16e>
 800f194:	e00e      	b.n	800f1b4 <__ieee754_pow+0xdc>
 800f196:	2900      	cmp	r1, #0
 800f198:	d154      	bne.n	800f244 <__ieee754_pow+0x16c>
 800f19a:	f1c2 0214 	rsb	r2, r2, #20
 800f19e:	fa4a f402 	asr.w	r4, sl, r2
 800f1a2:	fa04 f202 	lsl.w	r2, r4, r2
 800f1a6:	4552      	cmp	r2, sl
 800f1a8:	f040 84a3 	bne.w	800faf2 <__ieee754_pow+0xa1a>
 800f1ac:	f004 0401 	and.w	r4, r4, #1
 800f1b0:	f1c4 0402 	rsb	r4, r4, #2
 800f1b4:	4a6d      	ldr	r2, [pc, #436]	@ (800f36c <__ieee754_pow+0x294>)
 800f1b6:	4592      	cmp	sl, r2
 800f1b8:	d12e      	bne.n	800f218 <__ieee754_pow+0x140>
 800f1ba:	f1b9 0f00 	cmp.w	r9, #0
 800f1be:	f280 8494 	bge.w	800faea <__ieee754_pow+0xa12>
 800f1c2:	496a      	ldr	r1, [pc, #424]	@ (800f36c <__ieee754_pow+0x294>)
 800f1c4:	4632      	mov	r2, r6
 800f1c6:	463b      	mov	r3, r7
 800f1c8:	2000      	movs	r0, #0
 800f1ca:	f7f1 fb5f 	bl	800088c <__aeabi_ddiv>
 800f1ce:	e7a0      	b.n	800f112 <__ieee754_pow+0x3a>
 800f1d0:	2400      	movs	r4, #0
 800f1d2:	bbc1      	cbnz	r1, 800f246 <__ieee754_pow+0x16e>
 800f1d4:	4a63      	ldr	r2, [pc, #396]	@ (800f364 <__ieee754_pow+0x28c>)
 800f1d6:	4592      	cmp	sl, r2
 800f1d8:	d1ec      	bne.n	800f1b4 <__ieee754_pow+0xdc>
 800f1da:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800f1de:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800f1e2:	431a      	orrs	r2, r3
 800f1e4:	f000 8479 	beq.w	800fada <__ieee754_pow+0xa02>
 800f1e8:	4b61      	ldr	r3, [pc, #388]	@ (800f370 <__ieee754_pow+0x298>)
 800f1ea:	4598      	cmp	r8, r3
 800f1ec:	d908      	bls.n	800f200 <__ieee754_pow+0x128>
 800f1ee:	f1b9 0f00 	cmp.w	r9, #0
 800f1f2:	f2c0 8476 	blt.w	800fae2 <__ieee754_pow+0xa0a>
 800f1f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f1fa:	e78a      	b.n	800f112 <__ieee754_pow+0x3a>
 800f1fc:	2402      	movs	r4, #2
 800f1fe:	e7e8      	b.n	800f1d2 <__ieee754_pow+0xfa>
 800f200:	f1b9 0f00 	cmp.w	r9, #0
 800f204:	f04f 0000 	mov.w	r0, #0
 800f208:	f04f 0100 	mov.w	r1, #0
 800f20c:	da81      	bge.n	800f112 <__ieee754_pow+0x3a>
 800f20e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f212:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f216:	e77c      	b.n	800f112 <__ieee754_pow+0x3a>
 800f218:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800f21c:	d106      	bne.n	800f22c <__ieee754_pow+0x154>
 800f21e:	4632      	mov	r2, r6
 800f220:	463b      	mov	r3, r7
 800f222:	4630      	mov	r0, r6
 800f224:	4639      	mov	r1, r7
 800f226:	f7f1 fa07 	bl	8000638 <__aeabi_dmul>
 800f22a:	e772      	b.n	800f112 <__ieee754_pow+0x3a>
 800f22c:	4a51      	ldr	r2, [pc, #324]	@ (800f374 <__ieee754_pow+0x29c>)
 800f22e:	4591      	cmp	r9, r2
 800f230:	d109      	bne.n	800f246 <__ieee754_pow+0x16e>
 800f232:	2d00      	cmp	r5, #0
 800f234:	db07      	blt.n	800f246 <__ieee754_pow+0x16e>
 800f236:	ec47 6b10 	vmov	d0, r6, r7
 800f23a:	b011      	add	sp, #68	@ 0x44
 800f23c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f240:	f7ff bda8 	b.w	800ed94 <__ieee754_sqrt>
 800f244:	2400      	movs	r4, #0
 800f246:	ec47 6b10 	vmov	d0, r6, r7
 800f24a:	9302      	str	r3, [sp, #8]
 800f24c:	f000 fe20 	bl	800fe90 <fabs>
 800f250:	9b02      	ldr	r3, [sp, #8]
 800f252:	ec51 0b10 	vmov	r0, r1, d0
 800f256:	bb53      	cbnz	r3, 800f2ae <__ieee754_pow+0x1d6>
 800f258:	4b44      	ldr	r3, [pc, #272]	@ (800f36c <__ieee754_pow+0x294>)
 800f25a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800f25e:	429a      	cmp	r2, r3
 800f260:	d002      	beq.n	800f268 <__ieee754_pow+0x190>
 800f262:	f1b8 0f00 	cmp.w	r8, #0
 800f266:	d122      	bne.n	800f2ae <__ieee754_pow+0x1d6>
 800f268:	f1b9 0f00 	cmp.w	r9, #0
 800f26c:	da05      	bge.n	800f27a <__ieee754_pow+0x1a2>
 800f26e:	4602      	mov	r2, r0
 800f270:	460b      	mov	r3, r1
 800f272:	2000      	movs	r0, #0
 800f274:	493d      	ldr	r1, [pc, #244]	@ (800f36c <__ieee754_pow+0x294>)
 800f276:	f7f1 fb09 	bl	800088c <__aeabi_ddiv>
 800f27a:	2d00      	cmp	r5, #0
 800f27c:	f6bf af49 	bge.w	800f112 <__ieee754_pow+0x3a>
 800f280:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800f284:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800f288:	ea58 0804 	orrs.w	r8, r8, r4
 800f28c:	d108      	bne.n	800f2a0 <__ieee754_pow+0x1c8>
 800f28e:	4602      	mov	r2, r0
 800f290:	460b      	mov	r3, r1
 800f292:	4610      	mov	r0, r2
 800f294:	4619      	mov	r1, r3
 800f296:	f7f1 f817 	bl	80002c8 <__aeabi_dsub>
 800f29a:	4602      	mov	r2, r0
 800f29c:	460b      	mov	r3, r1
 800f29e:	e794      	b.n	800f1ca <__ieee754_pow+0xf2>
 800f2a0:	2c01      	cmp	r4, #1
 800f2a2:	f47f af36 	bne.w	800f112 <__ieee754_pow+0x3a>
 800f2a6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f2aa:	4619      	mov	r1, r3
 800f2ac:	e731      	b.n	800f112 <__ieee754_pow+0x3a>
 800f2ae:	0feb      	lsrs	r3, r5, #31
 800f2b0:	3b01      	subs	r3, #1
 800f2b2:	ea53 0204 	orrs.w	r2, r3, r4
 800f2b6:	d102      	bne.n	800f2be <__ieee754_pow+0x1e6>
 800f2b8:	4632      	mov	r2, r6
 800f2ba:	463b      	mov	r3, r7
 800f2bc:	e7e9      	b.n	800f292 <__ieee754_pow+0x1ba>
 800f2be:	3c01      	subs	r4, #1
 800f2c0:	431c      	orrs	r4, r3
 800f2c2:	d016      	beq.n	800f2f2 <__ieee754_pow+0x21a>
 800f2c4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800f350 <__ieee754_pow+0x278>
 800f2c8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800f2cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f2d0:	f240 8112 	bls.w	800f4f8 <__ieee754_pow+0x420>
 800f2d4:	4b28      	ldr	r3, [pc, #160]	@ (800f378 <__ieee754_pow+0x2a0>)
 800f2d6:	459a      	cmp	sl, r3
 800f2d8:	4b25      	ldr	r3, [pc, #148]	@ (800f370 <__ieee754_pow+0x298>)
 800f2da:	d916      	bls.n	800f30a <__ieee754_pow+0x232>
 800f2dc:	4598      	cmp	r8, r3
 800f2de:	d80b      	bhi.n	800f2f8 <__ieee754_pow+0x220>
 800f2e0:	f1b9 0f00 	cmp.w	r9, #0
 800f2e4:	da0b      	bge.n	800f2fe <__ieee754_pow+0x226>
 800f2e6:	2000      	movs	r0, #0
 800f2e8:	b011      	add	sp, #68	@ 0x44
 800f2ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2ee:	f000 be8b 	b.w	8010008 <__math_oflow>
 800f2f2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800f358 <__ieee754_pow+0x280>
 800f2f6:	e7e7      	b.n	800f2c8 <__ieee754_pow+0x1f0>
 800f2f8:	f1b9 0f00 	cmp.w	r9, #0
 800f2fc:	dcf3      	bgt.n	800f2e6 <__ieee754_pow+0x20e>
 800f2fe:	2000      	movs	r0, #0
 800f300:	b011      	add	sp, #68	@ 0x44
 800f302:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f306:	f000 be77 	b.w	800fff8 <__math_uflow>
 800f30a:	4598      	cmp	r8, r3
 800f30c:	d20c      	bcs.n	800f328 <__ieee754_pow+0x250>
 800f30e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f312:	2200      	movs	r2, #0
 800f314:	2300      	movs	r3, #0
 800f316:	f7f1 fc01 	bl	8000b1c <__aeabi_dcmplt>
 800f31a:	3800      	subs	r0, #0
 800f31c:	bf18      	it	ne
 800f31e:	2001      	movne	r0, #1
 800f320:	f1b9 0f00 	cmp.w	r9, #0
 800f324:	daec      	bge.n	800f300 <__ieee754_pow+0x228>
 800f326:	e7df      	b.n	800f2e8 <__ieee754_pow+0x210>
 800f328:	4b10      	ldr	r3, [pc, #64]	@ (800f36c <__ieee754_pow+0x294>)
 800f32a:	4598      	cmp	r8, r3
 800f32c:	f04f 0200 	mov.w	r2, #0
 800f330:	d924      	bls.n	800f37c <__ieee754_pow+0x2a4>
 800f332:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f336:	2300      	movs	r3, #0
 800f338:	f7f1 fbf0 	bl	8000b1c <__aeabi_dcmplt>
 800f33c:	3800      	subs	r0, #0
 800f33e:	bf18      	it	ne
 800f340:	2001      	movne	r0, #1
 800f342:	f1b9 0f00 	cmp.w	r9, #0
 800f346:	dccf      	bgt.n	800f2e8 <__ieee754_pow+0x210>
 800f348:	e7da      	b.n	800f300 <__ieee754_pow+0x228>
 800f34a:	bf00      	nop
 800f34c:	f3af 8000 	nop.w
 800f350:	00000000 	.word	0x00000000
 800f354:	3ff00000 	.word	0x3ff00000
 800f358:	00000000 	.word	0x00000000
 800f35c:	bff00000 	.word	0xbff00000
 800f360:	fff00000 	.word	0xfff00000
 800f364:	7ff00000 	.word	0x7ff00000
 800f368:	433fffff 	.word	0x433fffff
 800f36c:	3ff00000 	.word	0x3ff00000
 800f370:	3fefffff 	.word	0x3fefffff
 800f374:	3fe00000 	.word	0x3fe00000
 800f378:	43f00000 	.word	0x43f00000
 800f37c:	4b5a      	ldr	r3, [pc, #360]	@ (800f4e8 <__ieee754_pow+0x410>)
 800f37e:	f7f0 ffa3 	bl	80002c8 <__aeabi_dsub>
 800f382:	a351      	add	r3, pc, #324	@ (adr r3, 800f4c8 <__ieee754_pow+0x3f0>)
 800f384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f388:	4604      	mov	r4, r0
 800f38a:	460d      	mov	r5, r1
 800f38c:	f7f1 f954 	bl	8000638 <__aeabi_dmul>
 800f390:	a34f      	add	r3, pc, #316	@ (adr r3, 800f4d0 <__ieee754_pow+0x3f8>)
 800f392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f396:	4606      	mov	r6, r0
 800f398:	460f      	mov	r7, r1
 800f39a:	4620      	mov	r0, r4
 800f39c:	4629      	mov	r1, r5
 800f39e:	f7f1 f94b 	bl	8000638 <__aeabi_dmul>
 800f3a2:	4b52      	ldr	r3, [pc, #328]	@ (800f4ec <__ieee754_pow+0x414>)
 800f3a4:	4682      	mov	sl, r0
 800f3a6:	468b      	mov	fp, r1
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	4620      	mov	r0, r4
 800f3ac:	4629      	mov	r1, r5
 800f3ae:	f7f1 f943 	bl	8000638 <__aeabi_dmul>
 800f3b2:	4602      	mov	r2, r0
 800f3b4:	460b      	mov	r3, r1
 800f3b6:	a148      	add	r1, pc, #288	@ (adr r1, 800f4d8 <__ieee754_pow+0x400>)
 800f3b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3bc:	f7f0 ff84 	bl	80002c8 <__aeabi_dsub>
 800f3c0:	4622      	mov	r2, r4
 800f3c2:	462b      	mov	r3, r5
 800f3c4:	f7f1 f938 	bl	8000638 <__aeabi_dmul>
 800f3c8:	4602      	mov	r2, r0
 800f3ca:	460b      	mov	r3, r1
 800f3cc:	2000      	movs	r0, #0
 800f3ce:	4948      	ldr	r1, [pc, #288]	@ (800f4f0 <__ieee754_pow+0x418>)
 800f3d0:	f7f0 ff7a 	bl	80002c8 <__aeabi_dsub>
 800f3d4:	4622      	mov	r2, r4
 800f3d6:	4680      	mov	r8, r0
 800f3d8:	4689      	mov	r9, r1
 800f3da:	462b      	mov	r3, r5
 800f3dc:	4620      	mov	r0, r4
 800f3de:	4629      	mov	r1, r5
 800f3e0:	f7f1 f92a 	bl	8000638 <__aeabi_dmul>
 800f3e4:	4602      	mov	r2, r0
 800f3e6:	460b      	mov	r3, r1
 800f3e8:	4640      	mov	r0, r8
 800f3ea:	4649      	mov	r1, r9
 800f3ec:	f7f1 f924 	bl	8000638 <__aeabi_dmul>
 800f3f0:	a33b      	add	r3, pc, #236	@ (adr r3, 800f4e0 <__ieee754_pow+0x408>)
 800f3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3f6:	f7f1 f91f 	bl	8000638 <__aeabi_dmul>
 800f3fa:	4602      	mov	r2, r0
 800f3fc:	460b      	mov	r3, r1
 800f3fe:	4650      	mov	r0, sl
 800f400:	4659      	mov	r1, fp
 800f402:	f7f0 ff61 	bl	80002c8 <__aeabi_dsub>
 800f406:	4602      	mov	r2, r0
 800f408:	460b      	mov	r3, r1
 800f40a:	4680      	mov	r8, r0
 800f40c:	4689      	mov	r9, r1
 800f40e:	4630      	mov	r0, r6
 800f410:	4639      	mov	r1, r7
 800f412:	f7f0 ff5b 	bl	80002cc <__adddf3>
 800f416:	2400      	movs	r4, #0
 800f418:	4632      	mov	r2, r6
 800f41a:	463b      	mov	r3, r7
 800f41c:	4620      	mov	r0, r4
 800f41e:	460d      	mov	r5, r1
 800f420:	f7f0 ff52 	bl	80002c8 <__aeabi_dsub>
 800f424:	4602      	mov	r2, r0
 800f426:	460b      	mov	r3, r1
 800f428:	4640      	mov	r0, r8
 800f42a:	4649      	mov	r1, r9
 800f42c:	f7f0 ff4c 	bl	80002c8 <__aeabi_dsub>
 800f430:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f434:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f438:	2300      	movs	r3, #0
 800f43a:	9304      	str	r3, [sp, #16]
 800f43c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800f440:	4606      	mov	r6, r0
 800f442:	460f      	mov	r7, r1
 800f444:	4652      	mov	r2, sl
 800f446:	465b      	mov	r3, fp
 800f448:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f44c:	f7f0 ff3c 	bl	80002c8 <__aeabi_dsub>
 800f450:	4622      	mov	r2, r4
 800f452:	462b      	mov	r3, r5
 800f454:	f7f1 f8f0 	bl	8000638 <__aeabi_dmul>
 800f458:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f45c:	4680      	mov	r8, r0
 800f45e:	4689      	mov	r9, r1
 800f460:	4630      	mov	r0, r6
 800f462:	4639      	mov	r1, r7
 800f464:	f7f1 f8e8 	bl	8000638 <__aeabi_dmul>
 800f468:	4602      	mov	r2, r0
 800f46a:	460b      	mov	r3, r1
 800f46c:	4640      	mov	r0, r8
 800f46e:	4649      	mov	r1, r9
 800f470:	f7f0 ff2c 	bl	80002cc <__adddf3>
 800f474:	4652      	mov	r2, sl
 800f476:	465b      	mov	r3, fp
 800f478:	4606      	mov	r6, r0
 800f47a:	460f      	mov	r7, r1
 800f47c:	4620      	mov	r0, r4
 800f47e:	4629      	mov	r1, r5
 800f480:	f7f1 f8da 	bl	8000638 <__aeabi_dmul>
 800f484:	460b      	mov	r3, r1
 800f486:	4602      	mov	r2, r0
 800f488:	4680      	mov	r8, r0
 800f48a:	4689      	mov	r9, r1
 800f48c:	4630      	mov	r0, r6
 800f48e:	4639      	mov	r1, r7
 800f490:	f7f0 ff1c 	bl	80002cc <__adddf3>
 800f494:	4b17      	ldr	r3, [pc, #92]	@ (800f4f4 <__ieee754_pow+0x41c>)
 800f496:	4299      	cmp	r1, r3
 800f498:	4604      	mov	r4, r0
 800f49a:	460d      	mov	r5, r1
 800f49c:	468a      	mov	sl, r1
 800f49e:	468b      	mov	fp, r1
 800f4a0:	f340 82ef 	ble.w	800fa82 <__ieee754_pow+0x9aa>
 800f4a4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800f4a8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800f4ac:	4303      	orrs	r3, r0
 800f4ae:	f000 81e8 	beq.w	800f882 <__ieee754_pow+0x7aa>
 800f4b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	f7f1 fb2f 	bl	8000b1c <__aeabi_dcmplt>
 800f4be:	3800      	subs	r0, #0
 800f4c0:	bf18      	it	ne
 800f4c2:	2001      	movne	r0, #1
 800f4c4:	e710      	b.n	800f2e8 <__ieee754_pow+0x210>
 800f4c6:	bf00      	nop
 800f4c8:	60000000 	.word	0x60000000
 800f4cc:	3ff71547 	.word	0x3ff71547
 800f4d0:	f85ddf44 	.word	0xf85ddf44
 800f4d4:	3e54ae0b 	.word	0x3e54ae0b
 800f4d8:	55555555 	.word	0x55555555
 800f4dc:	3fd55555 	.word	0x3fd55555
 800f4e0:	652b82fe 	.word	0x652b82fe
 800f4e4:	3ff71547 	.word	0x3ff71547
 800f4e8:	3ff00000 	.word	0x3ff00000
 800f4ec:	3fd00000 	.word	0x3fd00000
 800f4f0:	3fe00000 	.word	0x3fe00000
 800f4f4:	408fffff 	.word	0x408fffff
 800f4f8:	4bd5      	ldr	r3, [pc, #852]	@ (800f850 <__ieee754_pow+0x778>)
 800f4fa:	402b      	ands	r3, r5
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	b92b      	cbnz	r3, 800f50c <__ieee754_pow+0x434>
 800f500:	4bd4      	ldr	r3, [pc, #848]	@ (800f854 <__ieee754_pow+0x77c>)
 800f502:	f7f1 f899 	bl	8000638 <__aeabi_dmul>
 800f506:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800f50a:	468b      	mov	fp, r1
 800f50c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800f510:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800f514:	4413      	add	r3, r2
 800f516:	930a      	str	r3, [sp, #40]	@ 0x28
 800f518:	4bcf      	ldr	r3, [pc, #828]	@ (800f858 <__ieee754_pow+0x780>)
 800f51a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800f51e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800f522:	459b      	cmp	fp, r3
 800f524:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f528:	dd08      	ble.n	800f53c <__ieee754_pow+0x464>
 800f52a:	4bcc      	ldr	r3, [pc, #816]	@ (800f85c <__ieee754_pow+0x784>)
 800f52c:	459b      	cmp	fp, r3
 800f52e:	f340 81a5 	ble.w	800f87c <__ieee754_pow+0x7a4>
 800f532:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f534:	3301      	adds	r3, #1
 800f536:	930a      	str	r3, [sp, #40]	@ 0x28
 800f538:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800f53c:	f04f 0a00 	mov.w	sl, #0
 800f540:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800f544:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f546:	4bc6      	ldr	r3, [pc, #792]	@ (800f860 <__ieee754_pow+0x788>)
 800f548:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f54c:	ed93 7b00 	vldr	d7, [r3]
 800f550:	4629      	mov	r1, r5
 800f552:	ec53 2b17 	vmov	r2, r3, d7
 800f556:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f55a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f55e:	f7f0 feb3 	bl	80002c8 <__aeabi_dsub>
 800f562:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f566:	4606      	mov	r6, r0
 800f568:	460f      	mov	r7, r1
 800f56a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f56e:	f7f0 fead 	bl	80002cc <__adddf3>
 800f572:	4602      	mov	r2, r0
 800f574:	460b      	mov	r3, r1
 800f576:	2000      	movs	r0, #0
 800f578:	49ba      	ldr	r1, [pc, #744]	@ (800f864 <__ieee754_pow+0x78c>)
 800f57a:	f7f1 f987 	bl	800088c <__aeabi_ddiv>
 800f57e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800f582:	4602      	mov	r2, r0
 800f584:	460b      	mov	r3, r1
 800f586:	4630      	mov	r0, r6
 800f588:	4639      	mov	r1, r7
 800f58a:	f7f1 f855 	bl	8000638 <__aeabi_dmul>
 800f58e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f592:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800f596:	106d      	asrs	r5, r5, #1
 800f598:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800f59c:	f04f 0b00 	mov.w	fp, #0
 800f5a0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800f5a4:	4661      	mov	r1, ip
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800f5ac:	4658      	mov	r0, fp
 800f5ae:	46e1      	mov	r9, ip
 800f5b0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800f5b4:	4614      	mov	r4, r2
 800f5b6:	461d      	mov	r5, r3
 800f5b8:	f7f1 f83e 	bl	8000638 <__aeabi_dmul>
 800f5bc:	4602      	mov	r2, r0
 800f5be:	460b      	mov	r3, r1
 800f5c0:	4630      	mov	r0, r6
 800f5c2:	4639      	mov	r1, r7
 800f5c4:	f7f0 fe80 	bl	80002c8 <__aeabi_dsub>
 800f5c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f5cc:	4606      	mov	r6, r0
 800f5ce:	460f      	mov	r7, r1
 800f5d0:	4620      	mov	r0, r4
 800f5d2:	4629      	mov	r1, r5
 800f5d4:	f7f0 fe78 	bl	80002c8 <__aeabi_dsub>
 800f5d8:	4602      	mov	r2, r0
 800f5da:	460b      	mov	r3, r1
 800f5dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f5e0:	f7f0 fe72 	bl	80002c8 <__aeabi_dsub>
 800f5e4:	465a      	mov	r2, fp
 800f5e6:	464b      	mov	r3, r9
 800f5e8:	f7f1 f826 	bl	8000638 <__aeabi_dmul>
 800f5ec:	4602      	mov	r2, r0
 800f5ee:	460b      	mov	r3, r1
 800f5f0:	4630      	mov	r0, r6
 800f5f2:	4639      	mov	r1, r7
 800f5f4:	f7f0 fe68 	bl	80002c8 <__aeabi_dsub>
 800f5f8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f5fc:	f7f1 f81c 	bl	8000638 <__aeabi_dmul>
 800f600:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f604:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f608:	4610      	mov	r0, r2
 800f60a:	4619      	mov	r1, r3
 800f60c:	f7f1 f814 	bl	8000638 <__aeabi_dmul>
 800f610:	a37d      	add	r3, pc, #500	@ (adr r3, 800f808 <__ieee754_pow+0x730>)
 800f612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f616:	4604      	mov	r4, r0
 800f618:	460d      	mov	r5, r1
 800f61a:	f7f1 f80d 	bl	8000638 <__aeabi_dmul>
 800f61e:	a37c      	add	r3, pc, #496	@ (adr r3, 800f810 <__ieee754_pow+0x738>)
 800f620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f624:	f7f0 fe52 	bl	80002cc <__adddf3>
 800f628:	4622      	mov	r2, r4
 800f62a:	462b      	mov	r3, r5
 800f62c:	f7f1 f804 	bl	8000638 <__aeabi_dmul>
 800f630:	a379      	add	r3, pc, #484	@ (adr r3, 800f818 <__ieee754_pow+0x740>)
 800f632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f636:	f7f0 fe49 	bl	80002cc <__adddf3>
 800f63a:	4622      	mov	r2, r4
 800f63c:	462b      	mov	r3, r5
 800f63e:	f7f0 fffb 	bl	8000638 <__aeabi_dmul>
 800f642:	a377      	add	r3, pc, #476	@ (adr r3, 800f820 <__ieee754_pow+0x748>)
 800f644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f648:	f7f0 fe40 	bl	80002cc <__adddf3>
 800f64c:	4622      	mov	r2, r4
 800f64e:	462b      	mov	r3, r5
 800f650:	f7f0 fff2 	bl	8000638 <__aeabi_dmul>
 800f654:	a374      	add	r3, pc, #464	@ (adr r3, 800f828 <__ieee754_pow+0x750>)
 800f656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f65a:	f7f0 fe37 	bl	80002cc <__adddf3>
 800f65e:	4622      	mov	r2, r4
 800f660:	462b      	mov	r3, r5
 800f662:	f7f0 ffe9 	bl	8000638 <__aeabi_dmul>
 800f666:	a372      	add	r3, pc, #456	@ (adr r3, 800f830 <__ieee754_pow+0x758>)
 800f668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f66c:	f7f0 fe2e 	bl	80002cc <__adddf3>
 800f670:	4622      	mov	r2, r4
 800f672:	4606      	mov	r6, r0
 800f674:	460f      	mov	r7, r1
 800f676:	462b      	mov	r3, r5
 800f678:	4620      	mov	r0, r4
 800f67a:	4629      	mov	r1, r5
 800f67c:	f7f0 ffdc 	bl	8000638 <__aeabi_dmul>
 800f680:	4602      	mov	r2, r0
 800f682:	460b      	mov	r3, r1
 800f684:	4630      	mov	r0, r6
 800f686:	4639      	mov	r1, r7
 800f688:	f7f0 ffd6 	bl	8000638 <__aeabi_dmul>
 800f68c:	465a      	mov	r2, fp
 800f68e:	4604      	mov	r4, r0
 800f690:	460d      	mov	r5, r1
 800f692:	464b      	mov	r3, r9
 800f694:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f698:	f7f0 fe18 	bl	80002cc <__adddf3>
 800f69c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f6a0:	f7f0 ffca 	bl	8000638 <__aeabi_dmul>
 800f6a4:	4622      	mov	r2, r4
 800f6a6:	462b      	mov	r3, r5
 800f6a8:	f7f0 fe10 	bl	80002cc <__adddf3>
 800f6ac:	465a      	mov	r2, fp
 800f6ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f6b2:	464b      	mov	r3, r9
 800f6b4:	4658      	mov	r0, fp
 800f6b6:	4649      	mov	r1, r9
 800f6b8:	f7f0 ffbe 	bl	8000638 <__aeabi_dmul>
 800f6bc:	4b6a      	ldr	r3, [pc, #424]	@ (800f868 <__ieee754_pow+0x790>)
 800f6be:	2200      	movs	r2, #0
 800f6c0:	4606      	mov	r6, r0
 800f6c2:	460f      	mov	r7, r1
 800f6c4:	f7f0 fe02 	bl	80002cc <__adddf3>
 800f6c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f6cc:	f7f0 fdfe 	bl	80002cc <__adddf3>
 800f6d0:	46d8      	mov	r8, fp
 800f6d2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800f6d6:	460d      	mov	r5, r1
 800f6d8:	465a      	mov	r2, fp
 800f6da:	460b      	mov	r3, r1
 800f6dc:	4640      	mov	r0, r8
 800f6de:	4649      	mov	r1, r9
 800f6e0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800f6e4:	f7f0 ffa8 	bl	8000638 <__aeabi_dmul>
 800f6e8:	465c      	mov	r4, fp
 800f6ea:	4680      	mov	r8, r0
 800f6ec:	4689      	mov	r9, r1
 800f6ee:	4b5e      	ldr	r3, [pc, #376]	@ (800f868 <__ieee754_pow+0x790>)
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	4620      	mov	r0, r4
 800f6f4:	4629      	mov	r1, r5
 800f6f6:	f7f0 fde7 	bl	80002c8 <__aeabi_dsub>
 800f6fa:	4632      	mov	r2, r6
 800f6fc:	463b      	mov	r3, r7
 800f6fe:	f7f0 fde3 	bl	80002c8 <__aeabi_dsub>
 800f702:	4602      	mov	r2, r0
 800f704:	460b      	mov	r3, r1
 800f706:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f70a:	f7f0 fddd 	bl	80002c8 <__aeabi_dsub>
 800f70e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f712:	f7f0 ff91 	bl	8000638 <__aeabi_dmul>
 800f716:	4622      	mov	r2, r4
 800f718:	4606      	mov	r6, r0
 800f71a:	460f      	mov	r7, r1
 800f71c:	462b      	mov	r3, r5
 800f71e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f722:	f7f0 ff89 	bl	8000638 <__aeabi_dmul>
 800f726:	4602      	mov	r2, r0
 800f728:	460b      	mov	r3, r1
 800f72a:	4630      	mov	r0, r6
 800f72c:	4639      	mov	r1, r7
 800f72e:	f7f0 fdcd 	bl	80002cc <__adddf3>
 800f732:	4606      	mov	r6, r0
 800f734:	460f      	mov	r7, r1
 800f736:	4602      	mov	r2, r0
 800f738:	460b      	mov	r3, r1
 800f73a:	4640      	mov	r0, r8
 800f73c:	4649      	mov	r1, r9
 800f73e:	f7f0 fdc5 	bl	80002cc <__adddf3>
 800f742:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800f746:	a33c      	add	r3, pc, #240	@ (adr r3, 800f838 <__ieee754_pow+0x760>)
 800f748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f74c:	4658      	mov	r0, fp
 800f74e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800f752:	460d      	mov	r5, r1
 800f754:	f7f0 ff70 	bl	8000638 <__aeabi_dmul>
 800f758:	465c      	mov	r4, fp
 800f75a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f75e:	4642      	mov	r2, r8
 800f760:	464b      	mov	r3, r9
 800f762:	4620      	mov	r0, r4
 800f764:	4629      	mov	r1, r5
 800f766:	f7f0 fdaf 	bl	80002c8 <__aeabi_dsub>
 800f76a:	4602      	mov	r2, r0
 800f76c:	460b      	mov	r3, r1
 800f76e:	4630      	mov	r0, r6
 800f770:	4639      	mov	r1, r7
 800f772:	f7f0 fda9 	bl	80002c8 <__aeabi_dsub>
 800f776:	a332      	add	r3, pc, #200	@ (adr r3, 800f840 <__ieee754_pow+0x768>)
 800f778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f77c:	f7f0 ff5c 	bl	8000638 <__aeabi_dmul>
 800f780:	a331      	add	r3, pc, #196	@ (adr r3, 800f848 <__ieee754_pow+0x770>)
 800f782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f786:	4606      	mov	r6, r0
 800f788:	460f      	mov	r7, r1
 800f78a:	4620      	mov	r0, r4
 800f78c:	4629      	mov	r1, r5
 800f78e:	f7f0 ff53 	bl	8000638 <__aeabi_dmul>
 800f792:	4602      	mov	r2, r0
 800f794:	460b      	mov	r3, r1
 800f796:	4630      	mov	r0, r6
 800f798:	4639      	mov	r1, r7
 800f79a:	f7f0 fd97 	bl	80002cc <__adddf3>
 800f79e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f7a0:	4b32      	ldr	r3, [pc, #200]	@ (800f86c <__ieee754_pow+0x794>)
 800f7a2:	4413      	add	r3, r2
 800f7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7a8:	f7f0 fd90 	bl	80002cc <__adddf3>
 800f7ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f7b0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f7b2:	f7f0 fed7 	bl	8000564 <__aeabi_i2d>
 800f7b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f7b8:	4b2d      	ldr	r3, [pc, #180]	@ (800f870 <__ieee754_pow+0x798>)
 800f7ba:	4413      	add	r3, r2
 800f7bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f7c0:	4606      	mov	r6, r0
 800f7c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f7c6:	460f      	mov	r7, r1
 800f7c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f7cc:	f7f0 fd7e 	bl	80002cc <__adddf3>
 800f7d0:	4642      	mov	r2, r8
 800f7d2:	464b      	mov	r3, r9
 800f7d4:	f7f0 fd7a 	bl	80002cc <__adddf3>
 800f7d8:	4632      	mov	r2, r6
 800f7da:	463b      	mov	r3, r7
 800f7dc:	f7f0 fd76 	bl	80002cc <__adddf3>
 800f7e0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800f7e4:	4632      	mov	r2, r6
 800f7e6:	463b      	mov	r3, r7
 800f7e8:	4658      	mov	r0, fp
 800f7ea:	460d      	mov	r5, r1
 800f7ec:	f7f0 fd6c 	bl	80002c8 <__aeabi_dsub>
 800f7f0:	4642      	mov	r2, r8
 800f7f2:	464b      	mov	r3, r9
 800f7f4:	f7f0 fd68 	bl	80002c8 <__aeabi_dsub>
 800f7f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f7fc:	f7f0 fd64 	bl	80002c8 <__aeabi_dsub>
 800f800:	465c      	mov	r4, fp
 800f802:	4602      	mov	r2, r0
 800f804:	e036      	b.n	800f874 <__ieee754_pow+0x79c>
 800f806:	bf00      	nop
 800f808:	4a454eef 	.word	0x4a454eef
 800f80c:	3fca7e28 	.word	0x3fca7e28
 800f810:	93c9db65 	.word	0x93c9db65
 800f814:	3fcd864a 	.word	0x3fcd864a
 800f818:	a91d4101 	.word	0xa91d4101
 800f81c:	3fd17460 	.word	0x3fd17460
 800f820:	518f264d 	.word	0x518f264d
 800f824:	3fd55555 	.word	0x3fd55555
 800f828:	db6fabff 	.word	0xdb6fabff
 800f82c:	3fdb6db6 	.word	0x3fdb6db6
 800f830:	33333303 	.word	0x33333303
 800f834:	3fe33333 	.word	0x3fe33333
 800f838:	e0000000 	.word	0xe0000000
 800f83c:	3feec709 	.word	0x3feec709
 800f840:	dc3a03fd 	.word	0xdc3a03fd
 800f844:	3feec709 	.word	0x3feec709
 800f848:	145b01f5 	.word	0x145b01f5
 800f84c:	be3e2fe0 	.word	0xbe3e2fe0
 800f850:	7ff00000 	.word	0x7ff00000
 800f854:	43400000 	.word	0x43400000
 800f858:	0003988e 	.word	0x0003988e
 800f85c:	000bb679 	.word	0x000bb679
 800f860:	08010b28 	.word	0x08010b28
 800f864:	3ff00000 	.word	0x3ff00000
 800f868:	40080000 	.word	0x40080000
 800f86c:	08010b08 	.word	0x08010b08
 800f870:	08010b18 	.word	0x08010b18
 800f874:	460b      	mov	r3, r1
 800f876:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f87a:	e5d7      	b.n	800f42c <__ieee754_pow+0x354>
 800f87c:	f04f 0a01 	mov.w	sl, #1
 800f880:	e65e      	b.n	800f540 <__ieee754_pow+0x468>
 800f882:	a3b4      	add	r3, pc, #720	@ (adr r3, 800fb54 <__ieee754_pow+0xa7c>)
 800f884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f888:	4630      	mov	r0, r6
 800f88a:	4639      	mov	r1, r7
 800f88c:	f7f0 fd1e 	bl	80002cc <__adddf3>
 800f890:	4642      	mov	r2, r8
 800f892:	e9cd 0100 	strd	r0, r1, [sp]
 800f896:	464b      	mov	r3, r9
 800f898:	4620      	mov	r0, r4
 800f89a:	4629      	mov	r1, r5
 800f89c:	f7f0 fd14 	bl	80002c8 <__aeabi_dsub>
 800f8a0:	4602      	mov	r2, r0
 800f8a2:	460b      	mov	r3, r1
 800f8a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f8a8:	f7f1 f956 	bl	8000b58 <__aeabi_dcmpgt>
 800f8ac:	2800      	cmp	r0, #0
 800f8ae:	f47f ae00 	bne.w	800f4b2 <__ieee754_pow+0x3da>
 800f8b2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800f8b6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800f8ba:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800f8be:	fa43 fa0a 	asr.w	sl, r3, sl
 800f8c2:	44da      	add	sl, fp
 800f8c4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800f8c8:	489d      	ldr	r0, [pc, #628]	@ (800fb40 <__ieee754_pow+0xa68>)
 800f8ca:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800f8ce:	4108      	asrs	r0, r1
 800f8d0:	ea00 030a 	and.w	r3, r0, sl
 800f8d4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800f8d8:	f1c1 0114 	rsb	r1, r1, #20
 800f8dc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800f8e0:	fa4a fa01 	asr.w	sl, sl, r1
 800f8e4:	f1bb 0f00 	cmp.w	fp, #0
 800f8e8:	4640      	mov	r0, r8
 800f8ea:	4649      	mov	r1, r9
 800f8ec:	f04f 0200 	mov.w	r2, #0
 800f8f0:	bfb8      	it	lt
 800f8f2:	f1ca 0a00 	rsblt	sl, sl, #0
 800f8f6:	f7f0 fce7 	bl	80002c8 <__aeabi_dsub>
 800f8fa:	4680      	mov	r8, r0
 800f8fc:	4689      	mov	r9, r1
 800f8fe:	4632      	mov	r2, r6
 800f900:	463b      	mov	r3, r7
 800f902:	4640      	mov	r0, r8
 800f904:	4649      	mov	r1, r9
 800f906:	f7f0 fce1 	bl	80002cc <__adddf3>
 800f90a:	2400      	movs	r4, #0
 800f90c:	a37c      	add	r3, pc, #496	@ (adr r3, 800fb00 <__ieee754_pow+0xa28>)
 800f90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f912:	4620      	mov	r0, r4
 800f914:	460d      	mov	r5, r1
 800f916:	f7f0 fe8f 	bl	8000638 <__aeabi_dmul>
 800f91a:	4642      	mov	r2, r8
 800f91c:	e9cd 0100 	strd	r0, r1, [sp]
 800f920:	464b      	mov	r3, r9
 800f922:	4620      	mov	r0, r4
 800f924:	4629      	mov	r1, r5
 800f926:	f7f0 fccf 	bl	80002c8 <__aeabi_dsub>
 800f92a:	4602      	mov	r2, r0
 800f92c:	460b      	mov	r3, r1
 800f92e:	4630      	mov	r0, r6
 800f930:	4639      	mov	r1, r7
 800f932:	f7f0 fcc9 	bl	80002c8 <__aeabi_dsub>
 800f936:	a374      	add	r3, pc, #464	@ (adr r3, 800fb08 <__ieee754_pow+0xa30>)
 800f938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f93c:	f7f0 fe7c 	bl	8000638 <__aeabi_dmul>
 800f940:	a373      	add	r3, pc, #460	@ (adr r3, 800fb10 <__ieee754_pow+0xa38>)
 800f942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f946:	4680      	mov	r8, r0
 800f948:	4689      	mov	r9, r1
 800f94a:	4620      	mov	r0, r4
 800f94c:	4629      	mov	r1, r5
 800f94e:	f7f0 fe73 	bl	8000638 <__aeabi_dmul>
 800f952:	4602      	mov	r2, r0
 800f954:	460b      	mov	r3, r1
 800f956:	4640      	mov	r0, r8
 800f958:	4649      	mov	r1, r9
 800f95a:	f7f0 fcb7 	bl	80002cc <__adddf3>
 800f95e:	4604      	mov	r4, r0
 800f960:	460d      	mov	r5, r1
 800f962:	4602      	mov	r2, r0
 800f964:	460b      	mov	r3, r1
 800f966:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f96a:	f7f0 fcaf 	bl	80002cc <__adddf3>
 800f96e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f972:	4680      	mov	r8, r0
 800f974:	4689      	mov	r9, r1
 800f976:	f7f0 fca7 	bl	80002c8 <__aeabi_dsub>
 800f97a:	4602      	mov	r2, r0
 800f97c:	460b      	mov	r3, r1
 800f97e:	4620      	mov	r0, r4
 800f980:	4629      	mov	r1, r5
 800f982:	f7f0 fca1 	bl	80002c8 <__aeabi_dsub>
 800f986:	4642      	mov	r2, r8
 800f988:	4606      	mov	r6, r0
 800f98a:	460f      	mov	r7, r1
 800f98c:	464b      	mov	r3, r9
 800f98e:	4640      	mov	r0, r8
 800f990:	4649      	mov	r1, r9
 800f992:	f7f0 fe51 	bl	8000638 <__aeabi_dmul>
 800f996:	a360      	add	r3, pc, #384	@ (adr r3, 800fb18 <__ieee754_pow+0xa40>)
 800f998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f99c:	4604      	mov	r4, r0
 800f99e:	460d      	mov	r5, r1
 800f9a0:	f7f0 fe4a 	bl	8000638 <__aeabi_dmul>
 800f9a4:	a35e      	add	r3, pc, #376	@ (adr r3, 800fb20 <__ieee754_pow+0xa48>)
 800f9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9aa:	f7f0 fc8d 	bl	80002c8 <__aeabi_dsub>
 800f9ae:	4622      	mov	r2, r4
 800f9b0:	462b      	mov	r3, r5
 800f9b2:	f7f0 fe41 	bl	8000638 <__aeabi_dmul>
 800f9b6:	a35c      	add	r3, pc, #368	@ (adr r3, 800fb28 <__ieee754_pow+0xa50>)
 800f9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9bc:	f7f0 fc86 	bl	80002cc <__adddf3>
 800f9c0:	4622      	mov	r2, r4
 800f9c2:	462b      	mov	r3, r5
 800f9c4:	f7f0 fe38 	bl	8000638 <__aeabi_dmul>
 800f9c8:	a359      	add	r3, pc, #356	@ (adr r3, 800fb30 <__ieee754_pow+0xa58>)
 800f9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ce:	f7f0 fc7b 	bl	80002c8 <__aeabi_dsub>
 800f9d2:	4622      	mov	r2, r4
 800f9d4:	462b      	mov	r3, r5
 800f9d6:	f7f0 fe2f 	bl	8000638 <__aeabi_dmul>
 800f9da:	a357      	add	r3, pc, #348	@ (adr r3, 800fb38 <__ieee754_pow+0xa60>)
 800f9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9e0:	f7f0 fc74 	bl	80002cc <__adddf3>
 800f9e4:	4622      	mov	r2, r4
 800f9e6:	462b      	mov	r3, r5
 800f9e8:	f7f0 fe26 	bl	8000638 <__aeabi_dmul>
 800f9ec:	4602      	mov	r2, r0
 800f9ee:	460b      	mov	r3, r1
 800f9f0:	4640      	mov	r0, r8
 800f9f2:	4649      	mov	r1, r9
 800f9f4:	f7f0 fc68 	bl	80002c8 <__aeabi_dsub>
 800f9f8:	4604      	mov	r4, r0
 800f9fa:	460d      	mov	r5, r1
 800f9fc:	4602      	mov	r2, r0
 800f9fe:	460b      	mov	r3, r1
 800fa00:	4640      	mov	r0, r8
 800fa02:	4649      	mov	r1, r9
 800fa04:	f7f0 fe18 	bl	8000638 <__aeabi_dmul>
 800fa08:	2200      	movs	r2, #0
 800fa0a:	e9cd 0100 	strd	r0, r1, [sp]
 800fa0e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fa12:	4620      	mov	r0, r4
 800fa14:	4629      	mov	r1, r5
 800fa16:	f7f0 fc57 	bl	80002c8 <__aeabi_dsub>
 800fa1a:	4602      	mov	r2, r0
 800fa1c:	460b      	mov	r3, r1
 800fa1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa22:	f7f0 ff33 	bl	800088c <__aeabi_ddiv>
 800fa26:	4632      	mov	r2, r6
 800fa28:	4604      	mov	r4, r0
 800fa2a:	460d      	mov	r5, r1
 800fa2c:	463b      	mov	r3, r7
 800fa2e:	4640      	mov	r0, r8
 800fa30:	4649      	mov	r1, r9
 800fa32:	f7f0 fe01 	bl	8000638 <__aeabi_dmul>
 800fa36:	4632      	mov	r2, r6
 800fa38:	463b      	mov	r3, r7
 800fa3a:	f7f0 fc47 	bl	80002cc <__adddf3>
 800fa3e:	4602      	mov	r2, r0
 800fa40:	460b      	mov	r3, r1
 800fa42:	4620      	mov	r0, r4
 800fa44:	4629      	mov	r1, r5
 800fa46:	f7f0 fc3f 	bl	80002c8 <__aeabi_dsub>
 800fa4a:	4642      	mov	r2, r8
 800fa4c:	464b      	mov	r3, r9
 800fa4e:	f7f0 fc3b 	bl	80002c8 <__aeabi_dsub>
 800fa52:	460b      	mov	r3, r1
 800fa54:	4602      	mov	r2, r0
 800fa56:	493b      	ldr	r1, [pc, #236]	@ (800fb44 <__ieee754_pow+0xa6c>)
 800fa58:	2000      	movs	r0, #0
 800fa5a:	f7f0 fc35 	bl	80002c8 <__aeabi_dsub>
 800fa5e:	ec41 0b10 	vmov	d0, r0, r1
 800fa62:	ee10 3a90 	vmov	r3, s1
 800fa66:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800fa6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fa6e:	da30      	bge.n	800fad2 <__ieee754_pow+0x9fa>
 800fa70:	4650      	mov	r0, sl
 800fa72:	f000 fa15 	bl	800fea0 <scalbn>
 800fa76:	ec51 0b10 	vmov	r0, r1, d0
 800fa7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fa7e:	f7ff bbd2 	b.w	800f226 <__ieee754_pow+0x14e>
 800fa82:	4c31      	ldr	r4, [pc, #196]	@ (800fb48 <__ieee754_pow+0xa70>)
 800fa84:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fa88:	42a3      	cmp	r3, r4
 800fa8a:	d91a      	bls.n	800fac2 <__ieee754_pow+0x9ea>
 800fa8c:	4b2f      	ldr	r3, [pc, #188]	@ (800fb4c <__ieee754_pow+0xa74>)
 800fa8e:	440b      	add	r3, r1
 800fa90:	4303      	orrs	r3, r0
 800fa92:	d009      	beq.n	800faa8 <__ieee754_pow+0x9d0>
 800fa94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa98:	2200      	movs	r2, #0
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	f7f1 f83e 	bl	8000b1c <__aeabi_dcmplt>
 800faa0:	3800      	subs	r0, #0
 800faa2:	bf18      	it	ne
 800faa4:	2001      	movne	r0, #1
 800faa6:	e42b      	b.n	800f300 <__ieee754_pow+0x228>
 800faa8:	4642      	mov	r2, r8
 800faaa:	464b      	mov	r3, r9
 800faac:	f7f0 fc0c 	bl	80002c8 <__aeabi_dsub>
 800fab0:	4632      	mov	r2, r6
 800fab2:	463b      	mov	r3, r7
 800fab4:	f7f1 f846 	bl	8000b44 <__aeabi_dcmpge>
 800fab8:	2800      	cmp	r0, #0
 800faba:	d1eb      	bne.n	800fa94 <__ieee754_pow+0x9bc>
 800fabc:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800fb5c <__ieee754_pow+0xa84>
 800fac0:	e6f7      	b.n	800f8b2 <__ieee754_pow+0x7da>
 800fac2:	469a      	mov	sl, r3
 800fac4:	4b22      	ldr	r3, [pc, #136]	@ (800fb50 <__ieee754_pow+0xa78>)
 800fac6:	459a      	cmp	sl, r3
 800fac8:	f63f aef3 	bhi.w	800f8b2 <__ieee754_pow+0x7da>
 800facc:	f8dd a010 	ldr.w	sl, [sp, #16]
 800fad0:	e715      	b.n	800f8fe <__ieee754_pow+0x826>
 800fad2:	ec51 0b10 	vmov	r0, r1, d0
 800fad6:	4619      	mov	r1, r3
 800fad8:	e7cf      	b.n	800fa7a <__ieee754_pow+0x9a2>
 800fada:	491a      	ldr	r1, [pc, #104]	@ (800fb44 <__ieee754_pow+0xa6c>)
 800fadc:	2000      	movs	r0, #0
 800fade:	f7ff bb18 	b.w	800f112 <__ieee754_pow+0x3a>
 800fae2:	2000      	movs	r0, #0
 800fae4:	2100      	movs	r1, #0
 800fae6:	f7ff bb14 	b.w	800f112 <__ieee754_pow+0x3a>
 800faea:	4630      	mov	r0, r6
 800faec:	4639      	mov	r1, r7
 800faee:	f7ff bb10 	b.w	800f112 <__ieee754_pow+0x3a>
 800faf2:	460c      	mov	r4, r1
 800faf4:	f7ff bb5e 	b.w	800f1b4 <__ieee754_pow+0xdc>
 800faf8:	2400      	movs	r4, #0
 800fafa:	f7ff bb49 	b.w	800f190 <__ieee754_pow+0xb8>
 800fafe:	bf00      	nop
 800fb00:	00000000 	.word	0x00000000
 800fb04:	3fe62e43 	.word	0x3fe62e43
 800fb08:	fefa39ef 	.word	0xfefa39ef
 800fb0c:	3fe62e42 	.word	0x3fe62e42
 800fb10:	0ca86c39 	.word	0x0ca86c39
 800fb14:	be205c61 	.word	0xbe205c61
 800fb18:	72bea4d0 	.word	0x72bea4d0
 800fb1c:	3e663769 	.word	0x3e663769
 800fb20:	c5d26bf1 	.word	0xc5d26bf1
 800fb24:	3ebbbd41 	.word	0x3ebbbd41
 800fb28:	af25de2c 	.word	0xaf25de2c
 800fb2c:	3f11566a 	.word	0x3f11566a
 800fb30:	16bebd93 	.word	0x16bebd93
 800fb34:	3f66c16c 	.word	0x3f66c16c
 800fb38:	5555553e 	.word	0x5555553e
 800fb3c:	3fc55555 	.word	0x3fc55555
 800fb40:	fff00000 	.word	0xfff00000
 800fb44:	3ff00000 	.word	0x3ff00000
 800fb48:	4090cbff 	.word	0x4090cbff
 800fb4c:	3f6f3400 	.word	0x3f6f3400
 800fb50:	3fe00000 	.word	0x3fe00000
 800fb54:	652b82fe 	.word	0x652b82fe
 800fb58:	3c971547 	.word	0x3c971547
 800fb5c:	4090cc00 	.word	0x4090cc00

0800fb60 <atan>:
 800fb60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb64:	ec55 4b10 	vmov	r4, r5, d0
 800fb68:	4bbf      	ldr	r3, [pc, #764]	@ (800fe68 <atan+0x308>)
 800fb6a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800fb6e:	429e      	cmp	r6, r3
 800fb70:	46ab      	mov	fp, r5
 800fb72:	d918      	bls.n	800fba6 <atan+0x46>
 800fb74:	4bbd      	ldr	r3, [pc, #756]	@ (800fe6c <atan+0x30c>)
 800fb76:	429e      	cmp	r6, r3
 800fb78:	d801      	bhi.n	800fb7e <atan+0x1e>
 800fb7a:	d109      	bne.n	800fb90 <atan+0x30>
 800fb7c:	b144      	cbz	r4, 800fb90 <atan+0x30>
 800fb7e:	4622      	mov	r2, r4
 800fb80:	462b      	mov	r3, r5
 800fb82:	4620      	mov	r0, r4
 800fb84:	4629      	mov	r1, r5
 800fb86:	f7f0 fba1 	bl	80002cc <__adddf3>
 800fb8a:	4604      	mov	r4, r0
 800fb8c:	460d      	mov	r5, r1
 800fb8e:	e006      	b.n	800fb9e <atan+0x3e>
 800fb90:	f1bb 0f00 	cmp.w	fp, #0
 800fb94:	f340 812b 	ble.w	800fdee <atan+0x28e>
 800fb98:	a597      	add	r5, pc, #604	@ (adr r5, 800fdf8 <atan+0x298>)
 800fb9a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fb9e:	ec45 4b10 	vmov	d0, r4, r5
 800fba2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fba6:	4bb2      	ldr	r3, [pc, #712]	@ (800fe70 <atan+0x310>)
 800fba8:	429e      	cmp	r6, r3
 800fbaa:	d813      	bhi.n	800fbd4 <atan+0x74>
 800fbac:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800fbb0:	429e      	cmp	r6, r3
 800fbb2:	d80c      	bhi.n	800fbce <atan+0x6e>
 800fbb4:	a392      	add	r3, pc, #584	@ (adr r3, 800fe00 <atan+0x2a0>)
 800fbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbba:	4620      	mov	r0, r4
 800fbbc:	4629      	mov	r1, r5
 800fbbe:	f7f0 fb85 	bl	80002cc <__adddf3>
 800fbc2:	4bac      	ldr	r3, [pc, #688]	@ (800fe74 <atan+0x314>)
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	f7f0 ffc7 	bl	8000b58 <__aeabi_dcmpgt>
 800fbca:	2800      	cmp	r0, #0
 800fbcc:	d1e7      	bne.n	800fb9e <atan+0x3e>
 800fbce:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800fbd2:	e029      	b.n	800fc28 <atan+0xc8>
 800fbd4:	f000 f95c 	bl	800fe90 <fabs>
 800fbd8:	4ba7      	ldr	r3, [pc, #668]	@ (800fe78 <atan+0x318>)
 800fbda:	429e      	cmp	r6, r3
 800fbdc:	ec55 4b10 	vmov	r4, r5, d0
 800fbe0:	f200 80bc 	bhi.w	800fd5c <atan+0x1fc>
 800fbe4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800fbe8:	429e      	cmp	r6, r3
 800fbea:	f200 809e 	bhi.w	800fd2a <atan+0x1ca>
 800fbee:	4622      	mov	r2, r4
 800fbf0:	462b      	mov	r3, r5
 800fbf2:	4620      	mov	r0, r4
 800fbf4:	4629      	mov	r1, r5
 800fbf6:	f7f0 fb69 	bl	80002cc <__adddf3>
 800fbfa:	4b9e      	ldr	r3, [pc, #632]	@ (800fe74 <atan+0x314>)
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	f7f0 fb63 	bl	80002c8 <__aeabi_dsub>
 800fc02:	2200      	movs	r2, #0
 800fc04:	4606      	mov	r6, r0
 800fc06:	460f      	mov	r7, r1
 800fc08:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fc0c:	4620      	mov	r0, r4
 800fc0e:	4629      	mov	r1, r5
 800fc10:	f7f0 fb5c 	bl	80002cc <__adddf3>
 800fc14:	4602      	mov	r2, r0
 800fc16:	460b      	mov	r3, r1
 800fc18:	4630      	mov	r0, r6
 800fc1a:	4639      	mov	r1, r7
 800fc1c:	f7f0 fe36 	bl	800088c <__aeabi_ddiv>
 800fc20:	f04f 0a00 	mov.w	sl, #0
 800fc24:	4604      	mov	r4, r0
 800fc26:	460d      	mov	r5, r1
 800fc28:	4622      	mov	r2, r4
 800fc2a:	462b      	mov	r3, r5
 800fc2c:	4620      	mov	r0, r4
 800fc2e:	4629      	mov	r1, r5
 800fc30:	f7f0 fd02 	bl	8000638 <__aeabi_dmul>
 800fc34:	4602      	mov	r2, r0
 800fc36:	460b      	mov	r3, r1
 800fc38:	4680      	mov	r8, r0
 800fc3a:	4689      	mov	r9, r1
 800fc3c:	f7f0 fcfc 	bl	8000638 <__aeabi_dmul>
 800fc40:	a371      	add	r3, pc, #452	@ (adr r3, 800fe08 <atan+0x2a8>)
 800fc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc46:	4606      	mov	r6, r0
 800fc48:	460f      	mov	r7, r1
 800fc4a:	f7f0 fcf5 	bl	8000638 <__aeabi_dmul>
 800fc4e:	a370      	add	r3, pc, #448	@ (adr r3, 800fe10 <atan+0x2b0>)
 800fc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc54:	f7f0 fb3a 	bl	80002cc <__adddf3>
 800fc58:	4632      	mov	r2, r6
 800fc5a:	463b      	mov	r3, r7
 800fc5c:	f7f0 fcec 	bl	8000638 <__aeabi_dmul>
 800fc60:	a36d      	add	r3, pc, #436	@ (adr r3, 800fe18 <atan+0x2b8>)
 800fc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc66:	f7f0 fb31 	bl	80002cc <__adddf3>
 800fc6a:	4632      	mov	r2, r6
 800fc6c:	463b      	mov	r3, r7
 800fc6e:	f7f0 fce3 	bl	8000638 <__aeabi_dmul>
 800fc72:	a36b      	add	r3, pc, #428	@ (adr r3, 800fe20 <atan+0x2c0>)
 800fc74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc78:	f7f0 fb28 	bl	80002cc <__adddf3>
 800fc7c:	4632      	mov	r2, r6
 800fc7e:	463b      	mov	r3, r7
 800fc80:	f7f0 fcda 	bl	8000638 <__aeabi_dmul>
 800fc84:	a368      	add	r3, pc, #416	@ (adr r3, 800fe28 <atan+0x2c8>)
 800fc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc8a:	f7f0 fb1f 	bl	80002cc <__adddf3>
 800fc8e:	4632      	mov	r2, r6
 800fc90:	463b      	mov	r3, r7
 800fc92:	f7f0 fcd1 	bl	8000638 <__aeabi_dmul>
 800fc96:	a366      	add	r3, pc, #408	@ (adr r3, 800fe30 <atan+0x2d0>)
 800fc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc9c:	f7f0 fb16 	bl	80002cc <__adddf3>
 800fca0:	4642      	mov	r2, r8
 800fca2:	464b      	mov	r3, r9
 800fca4:	f7f0 fcc8 	bl	8000638 <__aeabi_dmul>
 800fca8:	a363      	add	r3, pc, #396	@ (adr r3, 800fe38 <atan+0x2d8>)
 800fcaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcae:	4680      	mov	r8, r0
 800fcb0:	4689      	mov	r9, r1
 800fcb2:	4630      	mov	r0, r6
 800fcb4:	4639      	mov	r1, r7
 800fcb6:	f7f0 fcbf 	bl	8000638 <__aeabi_dmul>
 800fcba:	a361      	add	r3, pc, #388	@ (adr r3, 800fe40 <atan+0x2e0>)
 800fcbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcc0:	f7f0 fb02 	bl	80002c8 <__aeabi_dsub>
 800fcc4:	4632      	mov	r2, r6
 800fcc6:	463b      	mov	r3, r7
 800fcc8:	f7f0 fcb6 	bl	8000638 <__aeabi_dmul>
 800fccc:	a35e      	add	r3, pc, #376	@ (adr r3, 800fe48 <atan+0x2e8>)
 800fcce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd2:	f7f0 faf9 	bl	80002c8 <__aeabi_dsub>
 800fcd6:	4632      	mov	r2, r6
 800fcd8:	463b      	mov	r3, r7
 800fcda:	f7f0 fcad 	bl	8000638 <__aeabi_dmul>
 800fcde:	a35c      	add	r3, pc, #368	@ (adr r3, 800fe50 <atan+0x2f0>)
 800fce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fce4:	f7f0 faf0 	bl	80002c8 <__aeabi_dsub>
 800fce8:	4632      	mov	r2, r6
 800fcea:	463b      	mov	r3, r7
 800fcec:	f7f0 fca4 	bl	8000638 <__aeabi_dmul>
 800fcf0:	a359      	add	r3, pc, #356	@ (adr r3, 800fe58 <atan+0x2f8>)
 800fcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcf6:	f7f0 fae7 	bl	80002c8 <__aeabi_dsub>
 800fcfa:	4632      	mov	r2, r6
 800fcfc:	463b      	mov	r3, r7
 800fcfe:	f7f0 fc9b 	bl	8000638 <__aeabi_dmul>
 800fd02:	4602      	mov	r2, r0
 800fd04:	460b      	mov	r3, r1
 800fd06:	4640      	mov	r0, r8
 800fd08:	4649      	mov	r1, r9
 800fd0a:	f7f0 fadf 	bl	80002cc <__adddf3>
 800fd0e:	4622      	mov	r2, r4
 800fd10:	462b      	mov	r3, r5
 800fd12:	f7f0 fc91 	bl	8000638 <__aeabi_dmul>
 800fd16:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 800fd1a:	4602      	mov	r2, r0
 800fd1c:	460b      	mov	r3, r1
 800fd1e:	d148      	bne.n	800fdb2 <atan+0x252>
 800fd20:	4620      	mov	r0, r4
 800fd22:	4629      	mov	r1, r5
 800fd24:	f7f0 fad0 	bl	80002c8 <__aeabi_dsub>
 800fd28:	e72f      	b.n	800fb8a <atan+0x2a>
 800fd2a:	4b52      	ldr	r3, [pc, #328]	@ (800fe74 <atan+0x314>)
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	4620      	mov	r0, r4
 800fd30:	4629      	mov	r1, r5
 800fd32:	f7f0 fac9 	bl	80002c8 <__aeabi_dsub>
 800fd36:	4b4f      	ldr	r3, [pc, #316]	@ (800fe74 <atan+0x314>)
 800fd38:	4606      	mov	r6, r0
 800fd3a:	460f      	mov	r7, r1
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	4620      	mov	r0, r4
 800fd40:	4629      	mov	r1, r5
 800fd42:	f7f0 fac3 	bl	80002cc <__adddf3>
 800fd46:	4602      	mov	r2, r0
 800fd48:	460b      	mov	r3, r1
 800fd4a:	4630      	mov	r0, r6
 800fd4c:	4639      	mov	r1, r7
 800fd4e:	f7f0 fd9d 	bl	800088c <__aeabi_ddiv>
 800fd52:	f04f 0a01 	mov.w	sl, #1
 800fd56:	4604      	mov	r4, r0
 800fd58:	460d      	mov	r5, r1
 800fd5a:	e765      	b.n	800fc28 <atan+0xc8>
 800fd5c:	4b47      	ldr	r3, [pc, #284]	@ (800fe7c <atan+0x31c>)
 800fd5e:	429e      	cmp	r6, r3
 800fd60:	d21c      	bcs.n	800fd9c <atan+0x23c>
 800fd62:	4b47      	ldr	r3, [pc, #284]	@ (800fe80 <atan+0x320>)
 800fd64:	2200      	movs	r2, #0
 800fd66:	4620      	mov	r0, r4
 800fd68:	4629      	mov	r1, r5
 800fd6a:	f7f0 faad 	bl	80002c8 <__aeabi_dsub>
 800fd6e:	4b44      	ldr	r3, [pc, #272]	@ (800fe80 <atan+0x320>)
 800fd70:	4606      	mov	r6, r0
 800fd72:	460f      	mov	r7, r1
 800fd74:	2200      	movs	r2, #0
 800fd76:	4620      	mov	r0, r4
 800fd78:	4629      	mov	r1, r5
 800fd7a:	f7f0 fc5d 	bl	8000638 <__aeabi_dmul>
 800fd7e:	4b3d      	ldr	r3, [pc, #244]	@ (800fe74 <atan+0x314>)
 800fd80:	2200      	movs	r2, #0
 800fd82:	f7f0 faa3 	bl	80002cc <__adddf3>
 800fd86:	4602      	mov	r2, r0
 800fd88:	460b      	mov	r3, r1
 800fd8a:	4630      	mov	r0, r6
 800fd8c:	4639      	mov	r1, r7
 800fd8e:	f7f0 fd7d 	bl	800088c <__aeabi_ddiv>
 800fd92:	f04f 0a02 	mov.w	sl, #2
 800fd96:	4604      	mov	r4, r0
 800fd98:	460d      	mov	r5, r1
 800fd9a:	e745      	b.n	800fc28 <atan+0xc8>
 800fd9c:	4622      	mov	r2, r4
 800fd9e:	462b      	mov	r3, r5
 800fda0:	4938      	ldr	r1, [pc, #224]	@ (800fe84 <atan+0x324>)
 800fda2:	2000      	movs	r0, #0
 800fda4:	f7f0 fd72 	bl	800088c <__aeabi_ddiv>
 800fda8:	f04f 0a03 	mov.w	sl, #3
 800fdac:	4604      	mov	r4, r0
 800fdae:	460d      	mov	r5, r1
 800fdb0:	e73a      	b.n	800fc28 <atan+0xc8>
 800fdb2:	4b35      	ldr	r3, [pc, #212]	@ (800fe88 <atan+0x328>)
 800fdb4:	4e35      	ldr	r6, [pc, #212]	@ (800fe8c <atan+0x32c>)
 800fdb6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdbe:	f7f0 fa83 	bl	80002c8 <__aeabi_dsub>
 800fdc2:	4622      	mov	r2, r4
 800fdc4:	462b      	mov	r3, r5
 800fdc6:	f7f0 fa7f 	bl	80002c8 <__aeabi_dsub>
 800fdca:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800fdce:	4602      	mov	r2, r0
 800fdd0:	460b      	mov	r3, r1
 800fdd2:	e9d6 0100 	ldrd	r0, r1, [r6]
 800fdd6:	f7f0 fa77 	bl	80002c8 <__aeabi_dsub>
 800fdda:	f1bb 0f00 	cmp.w	fp, #0
 800fdde:	4604      	mov	r4, r0
 800fde0:	460d      	mov	r5, r1
 800fde2:	f6bf aedc 	bge.w	800fb9e <atan+0x3e>
 800fde6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fdea:	461d      	mov	r5, r3
 800fdec:	e6d7      	b.n	800fb9e <atan+0x3e>
 800fdee:	a51c      	add	r5, pc, #112	@ (adr r5, 800fe60 <atan+0x300>)
 800fdf0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fdf4:	e6d3      	b.n	800fb9e <atan+0x3e>
 800fdf6:	bf00      	nop
 800fdf8:	54442d18 	.word	0x54442d18
 800fdfc:	3ff921fb 	.word	0x3ff921fb
 800fe00:	8800759c 	.word	0x8800759c
 800fe04:	7e37e43c 	.word	0x7e37e43c
 800fe08:	e322da11 	.word	0xe322da11
 800fe0c:	3f90ad3a 	.word	0x3f90ad3a
 800fe10:	24760deb 	.word	0x24760deb
 800fe14:	3fa97b4b 	.word	0x3fa97b4b
 800fe18:	a0d03d51 	.word	0xa0d03d51
 800fe1c:	3fb10d66 	.word	0x3fb10d66
 800fe20:	c54c206e 	.word	0xc54c206e
 800fe24:	3fb745cd 	.word	0x3fb745cd
 800fe28:	920083ff 	.word	0x920083ff
 800fe2c:	3fc24924 	.word	0x3fc24924
 800fe30:	5555550d 	.word	0x5555550d
 800fe34:	3fd55555 	.word	0x3fd55555
 800fe38:	2c6a6c2f 	.word	0x2c6a6c2f
 800fe3c:	bfa2b444 	.word	0xbfa2b444
 800fe40:	52defd9a 	.word	0x52defd9a
 800fe44:	3fadde2d 	.word	0x3fadde2d
 800fe48:	af749a6d 	.word	0xaf749a6d
 800fe4c:	3fb3b0f2 	.word	0x3fb3b0f2
 800fe50:	fe231671 	.word	0xfe231671
 800fe54:	3fbc71c6 	.word	0x3fbc71c6
 800fe58:	9998ebc4 	.word	0x9998ebc4
 800fe5c:	3fc99999 	.word	0x3fc99999
 800fe60:	54442d18 	.word	0x54442d18
 800fe64:	bff921fb 	.word	0xbff921fb
 800fe68:	440fffff 	.word	0x440fffff
 800fe6c:	7ff00000 	.word	0x7ff00000
 800fe70:	3fdbffff 	.word	0x3fdbffff
 800fe74:	3ff00000 	.word	0x3ff00000
 800fe78:	3ff2ffff 	.word	0x3ff2ffff
 800fe7c:	40038000 	.word	0x40038000
 800fe80:	3ff80000 	.word	0x3ff80000
 800fe84:	bff00000 	.word	0xbff00000
 800fe88:	08010b38 	.word	0x08010b38
 800fe8c:	08010b58 	.word	0x08010b58

0800fe90 <fabs>:
 800fe90:	ec51 0b10 	vmov	r0, r1, d0
 800fe94:	4602      	mov	r2, r0
 800fe96:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fe9a:	ec43 2b10 	vmov	d0, r2, r3
 800fe9e:	4770      	bx	lr

0800fea0 <scalbn>:
 800fea0:	b570      	push	{r4, r5, r6, lr}
 800fea2:	ec55 4b10 	vmov	r4, r5, d0
 800fea6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800feaa:	4606      	mov	r6, r0
 800feac:	462b      	mov	r3, r5
 800feae:	b991      	cbnz	r1, 800fed6 <scalbn+0x36>
 800feb0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800feb4:	4323      	orrs	r3, r4
 800feb6:	d03d      	beq.n	800ff34 <scalbn+0x94>
 800feb8:	4b35      	ldr	r3, [pc, #212]	@ (800ff90 <scalbn+0xf0>)
 800feba:	4620      	mov	r0, r4
 800febc:	4629      	mov	r1, r5
 800febe:	2200      	movs	r2, #0
 800fec0:	f7f0 fbba 	bl	8000638 <__aeabi_dmul>
 800fec4:	4b33      	ldr	r3, [pc, #204]	@ (800ff94 <scalbn+0xf4>)
 800fec6:	429e      	cmp	r6, r3
 800fec8:	4604      	mov	r4, r0
 800feca:	460d      	mov	r5, r1
 800fecc:	da0f      	bge.n	800feee <scalbn+0x4e>
 800fece:	a328      	add	r3, pc, #160	@ (adr r3, 800ff70 <scalbn+0xd0>)
 800fed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fed4:	e01e      	b.n	800ff14 <scalbn+0x74>
 800fed6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800feda:	4291      	cmp	r1, r2
 800fedc:	d10b      	bne.n	800fef6 <scalbn+0x56>
 800fede:	4622      	mov	r2, r4
 800fee0:	4620      	mov	r0, r4
 800fee2:	4629      	mov	r1, r5
 800fee4:	f7f0 f9f2 	bl	80002cc <__adddf3>
 800fee8:	4604      	mov	r4, r0
 800feea:	460d      	mov	r5, r1
 800feec:	e022      	b.n	800ff34 <scalbn+0x94>
 800feee:	460b      	mov	r3, r1
 800fef0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800fef4:	3936      	subs	r1, #54	@ 0x36
 800fef6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800fefa:	4296      	cmp	r6, r2
 800fefc:	dd0d      	ble.n	800ff1a <scalbn+0x7a>
 800fefe:	2d00      	cmp	r5, #0
 800ff00:	a11d      	add	r1, pc, #116	@ (adr r1, 800ff78 <scalbn+0xd8>)
 800ff02:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff06:	da02      	bge.n	800ff0e <scalbn+0x6e>
 800ff08:	a11d      	add	r1, pc, #116	@ (adr r1, 800ff80 <scalbn+0xe0>)
 800ff0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff0e:	a31a      	add	r3, pc, #104	@ (adr r3, 800ff78 <scalbn+0xd8>)
 800ff10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff14:	f7f0 fb90 	bl	8000638 <__aeabi_dmul>
 800ff18:	e7e6      	b.n	800fee8 <scalbn+0x48>
 800ff1a:	1872      	adds	r2, r6, r1
 800ff1c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ff20:	428a      	cmp	r2, r1
 800ff22:	dcec      	bgt.n	800fefe <scalbn+0x5e>
 800ff24:	2a00      	cmp	r2, #0
 800ff26:	dd08      	ble.n	800ff3a <scalbn+0x9a>
 800ff28:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ff2c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ff30:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ff34:	ec45 4b10 	vmov	d0, r4, r5
 800ff38:	bd70      	pop	{r4, r5, r6, pc}
 800ff3a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800ff3e:	da08      	bge.n	800ff52 <scalbn+0xb2>
 800ff40:	2d00      	cmp	r5, #0
 800ff42:	a10b      	add	r1, pc, #44	@ (adr r1, 800ff70 <scalbn+0xd0>)
 800ff44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff48:	dac1      	bge.n	800fece <scalbn+0x2e>
 800ff4a:	a10f      	add	r1, pc, #60	@ (adr r1, 800ff88 <scalbn+0xe8>)
 800ff4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff50:	e7bd      	b.n	800fece <scalbn+0x2e>
 800ff52:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ff56:	3236      	adds	r2, #54	@ 0x36
 800ff58:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ff5c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ff60:	4620      	mov	r0, r4
 800ff62:	4b0d      	ldr	r3, [pc, #52]	@ (800ff98 <scalbn+0xf8>)
 800ff64:	4629      	mov	r1, r5
 800ff66:	2200      	movs	r2, #0
 800ff68:	e7d4      	b.n	800ff14 <scalbn+0x74>
 800ff6a:	bf00      	nop
 800ff6c:	f3af 8000 	nop.w
 800ff70:	c2f8f359 	.word	0xc2f8f359
 800ff74:	01a56e1f 	.word	0x01a56e1f
 800ff78:	8800759c 	.word	0x8800759c
 800ff7c:	7e37e43c 	.word	0x7e37e43c
 800ff80:	8800759c 	.word	0x8800759c
 800ff84:	fe37e43c 	.word	0xfe37e43c
 800ff88:	c2f8f359 	.word	0xc2f8f359
 800ff8c:	81a56e1f 	.word	0x81a56e1f
 800ff90:	43500000 	.word	0x43500000
 800ff94:	ffff3cb0 	.word	0xffff3cb0
 800ff98:	3c900000 	.word	0x3c900000

0800ff9c <with_errno>:
 800ff9c:	b510      	push	{r4, lr}
 800ff9e:	ed2d 8b02 	vpush	{d8}
 800ffa2:	eeb0 8a40 	vmov.f32	s16, s0
 800ffa6:	eef0 8a60 	vmov.f32	s17, s1
 800ffaa:	4604      	mov	r4, r0
 800ffac:	f7fc ff6c 	bl	800ce88 <__errno>
 800ffb0:	eeb0 0a48 	vmov.f32	s0, s16
 800ffb4:	eef0 0a68 	vmov.f32	s1, s17
 800ffb8:	ecbd 8b02 	vpop	{d8}
 800ffbc:	6004      	str	r4, [r0, #0]
 800ffbe:	bd10      	pop	{r4, pc}

0800ffc0 <xflow>:
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	b507      	push	{r0, r1, r2, lr}
 800ffc4:	ec51 0b10 	vmov	r0, r1, d0
 800ffc8:	b183      	cbz	r3, 800ffec <xflow+0x2c>
 800ffca:	4602      	mov	r2, r0
 800ffcc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ffd0:	e9cd 2300 	strd	r2, r3, [sp]
 800ffd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ffd8:	f7f0 fb2e 	bl	8000638 <__aeabi_dmul>
 800ffdc:	ec41 0b10 	vmov	d0, r0, r1
 800ffe0:	2022      	movs	r0, #34	@ 0x22
 800ffe2:	b003      	add	sp, #12
 800ffe4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ffe8:	f7ff bfd8 	b.w	800ff9c <with_errno>
 800ffec:	4602      	mov	r2, r0
 800ffee:	460b      	mov	r3, r1
 800fff0:	e7ee      	b.n	800ffd0 <xflow+0x10>
 800fff2:	0000      	movs	r0, r0
 800fff4:	0000      	movs	r0, r0
	...

0800fff8 <__math_uflow>:
 800fff8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010000 <__math_uflow+0x8>
 800fffc:	f7ff bfe0 	b.w	800ffc0 <xflow>
 8010000:	00000000 	.word	0x00000000
 8010004:	10000000 	.word	0x10000000

08010008 <__math_oflow>:
 8010008:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010010 <__math_oflow+0x8>
 801000c:	f7ff bfd8 	b.w	800ffc0 <xflow>
 8010010:	00000000 	.word	0x00000000
 8010014:	70000000 	.word	0x70000000

08010018 <_init>:
 8010018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801001a:	bf00      	nop
 801001c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801001e:	bc08      	pop	{r3}
 8010020:	469e      	mov	lr, r3
 8010022:	4770      	bx	lr

08010024 <_fini>:
 8010024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010026:	bf00      	nop
 8010028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801002a:	bc08      	pop	{r3}
 801002c:	469e      	mov	lr, r3
 801002e:	4770      	bx	lr
